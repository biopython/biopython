name: Basic Checks

on: [push, pull_request]

jobs:
  # Style Checking: one OS and Python version only.
  style:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v2
    - uses: trilom/file-changes-action@v1.2.4
      with:
        # Creates files.txt
        output: ' '
        fileOutput: ' '

    - name: Cache pre-commit hooks
      id: cache-precommit
      uses: actions/cache@v2
      env:
        cache-name: cache-precommit-hooks
      with:
        path: ~/.cache/pre-commit
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/.pre-commit-config.yaml') }}

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Installing pre-commit
      run: |
        python -m pip install pre-commit

    - name: Installing pre-commit hooks
      if: steps.cache-precommit.outputs.cache-hit != 'true'
      run: |
        pre-commit install --install-hooks

    - name: Run style checking via pre-commit
      run: |
        pre-commit run --files $( cat ${HOME}/files.txt )

  # Build package: sdist, bdist_wheel
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel

    - name: Package tarball
      run: |
        python setup.py sdist --formats=gztar,zip

  # RST linting
  check_rst:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python --version
        python -m pip install black==19.10b0

  #   - name: Run tests on RST formatting
  #     run: |
  #       # Check sort order (bash call work around for pipe character)
  #       bash -c \' grep "^- " CONTRIB.rst | LC_ALL=C sort -u -c -f \'
  #       # Check copyright date
  #       bash -c \' grep "1999-`date +'%Y'`" LICENSE.rst \'
  #       # Check no __docformat__ lines
  #       bash -c "if grep --include '*.py' -rn '^__docformat__ ' Bio BioSQL Tests Scripts Doc ; then echo 'Remove __docformat__ line(s), we assume restructuredtext.'; false; fi"
  #       # Black style check:
  #       black --check --diff .
  #     shell: bash

  build_wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.7, 3.8, 3.9, pypy3]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Build wheel
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python setup.py bdist_wheel

    - name: Archive wheels
      uses: actions/upload-artifact@v2
      with:
        name: biopython_wheels
        path: |
          dist/*whl

  # Run test suite in parallel across the 3 OSes
  # Triggers only if all previous stages pass.
  test_linux:
    needs: [build, style, check_rst, build_wheels]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9, pypy3]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install basic dependencies
      run: |
        python -m pip install numpy

    - name: Install extra dependencies (Linux only)
      run: |
        python -m pip install coverage codecov numpy scipy mmtf-python
        python -m pip install mysqlclient mysql-connector-python rdflib
        python -m pip install networkx matplotlib reportlab

    # - name: Fetch archived wheels from previous job
    #   uses: actions/download-artifact@v2
    #   with:
    #     name: biopython_wheels
    #     path: dist

    - name: Install from source
      run: |
        python setup.py install

    - name: Run test suite and get coverage
      run: |
        cd Tests
        rm -rf coverage.xml
        coverage run run_tests.py --offline
        coverage xml
      shell: bash

  test_macos:
    needs: [build, style, check_rst, build_wheels]
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9, pypy3]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install basic dependencies
      run: |
        python -m pip install numpy

    - name: Install from source
      run: |
        python setup.py install

    - name: Run test suite and get coverage
      run: |
        cd Tests
        python run_tests.py --offline

  test_windows:
    needs: [build, style, check_rst, build_wheels]
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9, pypy3]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install basic dependencies
      run: |
        python -m pip install numpy

    - name: Install from source
      run: |
        python setup.py install

    - name: Run test suite and get coverage
      run: |
        cd Tests
        python run_tests.py --offline

  # Flag step
  check_tests:
    needs: [test_linux, test_macos, test_windows]
    runs-on: ubuntu-latest
    steps:
      - run: echo All tests passed.

  # Build API documentation if everything passes.
  docs:
    needs: [check_tests]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install documentation dependencies
      run: |
        python --version
        python -m pip install sphinx>=3.5.0 numpydoc==1.0.0 pygments sphinx_rtd_theme
        python -m pip install mysql-connector-python-rf numpy rdflib scipy
        python -m pip install reportlab mmtf-python

    - name: Install from source
      run: |
        python setup.py install

    - name: Make documentation
      run: |
        make -C Doc/api html
      shell: bash
    
  cleanup:
    if: always()
    needs: [build_wheels]
    runs-on: ubuntu-latest
    steps:
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: biopython_wheels