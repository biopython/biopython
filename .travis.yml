# Special configuration file to run tests on Travis-CI via GitHub notifications
# See https://travis-ci.org/biopython/biopython/builds for results
#
# Using TravisCI's configuration alone became too complicated once we wanted
# to cover more than just running the unit tests on different versions of
# Python, so this now does all the complicated test configuration via TOX
# See file .travis-tox.ini
#
# Environment variables setup here:
# - TOXENV = environment used in Tox (conventionally uses py35 etc)
#
# TravisCI build stages used here:
# - basics - quick things like style and packaging
# - test - the actual functional tests which are slow

dist: trusty
language: python
cache: pip
matrix:
  include:
    - stage: basics
      python: 2.7
      env: TOXENV=style
      addons:
        apt:
          packages:
      before_install: echo "Going to run basic checks"
    - stage: basics
      python: 3.6
      env: TOXENV=style
      addons:
        apt:
          packages:
      before_install: echo "Going to run basic checks"
    - stage: basics
      env: TOXENV=sdist,bdist_wheel
      addons:
        apt:
          packages:
      before_install: echo "Going to run basic checks"
    - stage: test
      python: 2.7
      env: TOXENV=py27-cover
    - stage: test
      python: 3.4
      env: TOXENV=py34-cover
    - stage: test
      python: 3.5
      env: TOXENV=py35-cover
    - stage: test
      python: 3.6
      env: TOXENV=py36-cover
    - stage: test
      python: pypy
      env: TOXENV=pypy-nocov
    - stage: test
      python: pypy3
      env: TOXENV=pypy3-nocov

sudo: false
addons:
  apt:
    packages:
    - bwa
    - clustalo
    - clustalw
    - emboss
    - mafft
    - muscle
    - paml
    - phyml
    - probcons
    - samtools
    - wise

# We setup $HOME/bin and add it to the $PATH for extra binaries we're using.
#
# There is a phyml Ubuntu package, but currently too old.
#
# There is no GenePop Ubuntu pacakge, although it is in BioConda.
#
# We also need DSSP for testing but it is not available in the repositories.
# Try to download the binary for Linux and place it in $HOME/bin
#
# This before_install list is only used for the test stage.
before_install:
  - pushd $HOME
  - mkdir -p bin
  - export PATH=$HOME/bin:$PATH
  - echo "Installing PhyML"
  - curl -L -O http://www.atgc-montpellier.fr/download/binaries/phyml/PhyML-3.1.zip
  - unzip PhyML-3.1.zip
  - mv PhyML-3.1/PhyML-3.1_linux64 bin/phyml
  #- echo "Installing dssp"
  #- curl -L -O ftp://ftp.cmbi.ru.nl/pub/software/dssp/dssp-2.0.4-linux-amd64
  #- mv dssp-2.0.4-linux-amd64 bin/dssp
  #- chmod a+x bin/dssp
  - echo "Installing Genepop"
  - curl -L -O https://anaconda.org/bioconda/genepop/4.5.1/download/linux-64/genepop-4.5.1-0.tar.bz2
  # This will create ./bin/Genepop and a harmless ./info/ folder.
  - tar -jxvf genepop-4.5.1-0.tar.bz2
  # There are TravisCI provided versions of PyPy and PyPy3, but currently too old.
  # We therefore deactivate that, and download and unzip portable PyPy binaries.
  - |
    if [[ $TRAVIS_PYTHON_VERSION == 'pypy' ]]; then
        deactivate
        wget https://bitbucket.org/squeaky/portable-pypy/downloads/pypy-6.0.0-linux_x86_64-portable.tar.bz2
        tar -jxvf pypy-6.0.0-linux_x86_64-portable.tar.bz2
        echo 'Setting up aliases...'
        cd pypy-6.0.0-linux_x86_64-portable/bin/
        export PATH=$PWD:$PATH
        ln -s pypy python
        echo 'Setting up pip...'
        ./pypy -m ensurepip
    fi
  - |
    if [[ $TRAVIS_PYTHON_VERSION == 'pypy3' ]]; then
        deactivate
        wget https://bitbucket.org/squeaky/portable-pypy/downloads/pypy3.5-6.0.0-linux_x86_64-portable.tar.bz2
        tar -jxvf pypy3.5-6.0.0-linux_x86_64-portable.tar.bz2
        echo 'Setting up aliases...'
        cd pypy3.5-6.0.0-linux_x86_64-portable/bin/
        export PATH=$PWD:$PATH
        ln -s pypy3 python
        echo 'Setting up pip...'
        ./pypy3 -m ensurepip
        ln -s pip3 pip
    fi
  - popd
  - cp Tests/biosql.ini.sample Tests/biosql.ini
  - psql -c "create database biosql_test;" -U postgres
  - psql -c "create user biosql_user with encrypted password 'biosql_pass';" -U postgres
  - psql -c "grant all privileges on database biosql_test to biosql_user;" -U postgres


# This is minimal and used under all stages
install:
  - pip install --upgrade pip setuptools
  - pip install tox
  - tox -c .travis-tox.ini -e $TOXENV --notest

script:
  - travis_wait tox -c .travis-tox.ini -e $TOXENV

notifications:
  email: false
