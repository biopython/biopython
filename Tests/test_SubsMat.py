# This code is part of the Biopython distribution and governed by its
# license.  Please see the LICENSE file that should have been included
# as part of this package.

"""Tests for SubsMat module."""

try:
    import numpy
    del numpy
except ImportError:
    from Bio import MissingExternalDependencyError
    raise MissingExternalDependencyError(
        "Install NumPy if you want to use Bio.SubsMat.")

try:
    import cPickle as pickle  # Only available on Python 2
except ImportError:
    import pickle

import os
import unittest


from Bio._py3k import StringIO

from Bio import SubsMat
from Bio.SubsMat import FreqTable, MatrixInfo


class TestGeo(unittest.TestCase):

    ftab_file = os.path.join('SubsMat', 'protein_count.txt')
    with open(ftab_file) as handle:
        ftab_prot = FreqTable.read_count(handle)
    del ftab_file

    pickle_file = os.path.join('SubsMat', 'acc_rep_mat.pik')
    # Don't want to use text mode on Python 3,
    with open(pickle_file, 'rb') as handle:
        acc_rep_mat = pickle.load(handle)
    acc_rep_mat = SubsMat.AcceptedReplacementsMatrix(acc_rep_mat)
    del pickle_file

    obs_freq_mat = SubsMat._build_obs_freq_mat(acc_rep_mat)

    del handle

    def test_protein_freq(self):
        letters = "ACDEFGHIKLMNPQRSTVWY"
        ctab_file = os.path.join('SubsMat', 'protein_freq.txt')
        with open(ctab_file) as handle:
            ctab_prot = FreqTable.read_freq(handle)
        self.assertEqual(self.ftab_prot.alphabet.letters, letters)
        for letter in letters:
            difference = self.ftab_prot[letter] - ctab_prot[letter]
            self.assertAlmostEqual(abs(difference), 0, places=3)

    def test_freqtable(self):
        ftab_prot2 = SubsMat._exp_freq_table_from_obs_freq(self.obs_freq_mat)
        self.assertEqual(len(ftab_prot2), 20)
        for letter in 'ACDEFGHIKLMNPQRSTVWY':
            difference = self.ftab_prot[letter] - ftab_prot2[letter]
            self.assertAlmostEqual(abs(difference), 0, places=1)

    def test_obs_freq_mat(self):
        self.assertEqual(len(self.obs_freq_mat), 210)
        self.assertAlmostEqual(self.obs_freq_mat[('A', 'A')], 0.010561, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('A', 'C')], 0.002452, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('C', 'C')], 0.002102, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('A', 'D')], 0.008559, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('C', 'D')], 0.000751, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('D', 'D')], 0.007558, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('A', 'E')], 0.010360, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('C', 'E')], 0.001301, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('D', 'E')], 0.008158, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('E', 'E')], 0.005956, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('A', 'F')], 0.006106, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('C', 'F')], 0.001602, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('D', 'F')], 0.003153, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('E', 'F')], 0.002503, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('F', 'F')], 0.003954, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('A', 'G')], 0.011461, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('C', 'G')], 0.001952, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('D', 'G')], 0.007157, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('E', 'G')], 0.007307, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('F', 'G')], 0.005105, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('G', 'G')], 0.016066, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('A', 'H')], 0.003303, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('C', 'H')], 0.000501, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('D', 'H')], 0.002603, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('E', 'H')], 0.001902, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('F', 'H')], 0.001952, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('G', 'H')], 0.002653, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('H', 'H')], 0.002803, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('A', 'I')], 0.010110, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('C', 'I')], 0.002102, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('D', 'I')], 0.003303, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('E', 'I')], 0.003153, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('F', 'I')], 0.007558, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('G', 'I')], 0.004605, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('H', 'I')], 0.001552, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('I', 'I')], 0.007257, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('A', 'K')], 0.009560, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('C', 'K')], 0.001201, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('D', 'K')], 0.008458, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('E', 'K')], 0.008208, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('F', 'K')], 0.003353, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('G', 'K')], 0.007407, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('H', 'K')], 0.003153, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('I', 'K')], 0.004004, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('K', 'K')], 0.006056, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('A', 'L')], 0.015365, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('C', 'L')], 0.003103, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('D', 'L')], 0.006006, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('E', 'L')], 0.006657, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('F', 'L')], 0.011812, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('G', 'L')], 0.007708, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('H', 'L')], 0.003504, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('I', 'L')], 0.017417, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('K', 'L')], 0.005606, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('L', 'L')], 0.016016, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('A', 'M')], 0.003954, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('C', 'M')], 0.000701, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('D', 'M')], 0.001001, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('E', 'M')], 0.001652, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('F', 'M')], 0.003353, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('G', 'M')], 0.002452, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('H', 'M')], 0.000801, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('I', 'M')], 0.004404, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('K', 'M')], 0.001602, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('L', 'M')], 0.007658, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('M', 'M')], 0.001101, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('A', 'N')], 0.006957, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('C', 'N')], 0.001201, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('D', 'N')], 0.008158, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('E', 'N')], 0.005756, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('F', 'N')], 0.002753, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('G', 'N')], 0.007357, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('H', 'N')], 0.002853, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('I', 'N')], 0.003253, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('K', 'N')], 0.006957, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('L', 'N')], 0.005055, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('M', 'N')], 0.001702, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('N', 'N')], 0.003303, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('A', 'P')], 0.005956, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('C', 'P')], 0.001051, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('D', 'P')], 0.005255, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('E', 'P')], 0.004555, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('F', 'P')], 0.002503, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('G', 'P')], 0.005405, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('H', 'P')], 0.001151, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('I', 'P')], 0.003353, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('K', 'P')], 0.004705, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('L', 'P')], 0.003954, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('M', 'P')], 0.001001, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('N', 'P')], 0.004705, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('P', 'P')], 0.006006, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('A', 'Q')], 0.006456, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('C', 'Q')], 0.000801, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('D', 'Q')], 0.005806, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('E', 'Q')], 0.005255, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('F', 'Q')], 0.001952, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('G', 'Q')], 0.004454, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('H', 'Q')], 0.002202, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('I', 'Q')], 0.003103, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('K', 'Q')], 0.005405, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('L', 'Q')], 0.003954, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('M', 'Q')], 0.001351, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('N', 'Q')], 0.003854, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('P', 'Q')], 0.003403, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('Q', 'Q')], 0.002102, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('A', 'R')], 0.007608, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('C', 'R')], 0.000751, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('D', 'R')], 0.005756, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('E', 'R')], 0.005906, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('F', 'R')], 0.002853, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('G', 'R')], 0.004054, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('H', 'R')], 0.002202, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('I', 'R')], 0.002903, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('K', 'R')], 0.007558, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('L', 'R')], 0.005455, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('M', 'R')], 0.002002, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('N', 'R')], 0.004505, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('P', 'R')], 0.003604, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('Q', 'R')], 0.003654, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('R', 'R')], 0.004805, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('A', 'S')], 0.009960, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('C', 'S')], 0.001151, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('D', 'S')], 0.008358, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('E', 'S')], 0.007157, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('F', 'S')], 0.004605, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('G', 'S')], 0.008058, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('H', 'S')], 0.002953, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('I', 'S')], 0.004204, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('K', 'S')], 0.007207, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('L', 'S')], 0.007958, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('M', 'S')], 0.002052, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('N', 'S')], 0.005756, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('P', 'S')], 0.005155, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('Q', 'S')], 0.005055, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('R', 'S')], 0.004705, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('S', 'S')], 0.005806, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('A', 'T')], 0.009760, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('C', 'T')], 0.001502, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('D', 'T')], 0.006256, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('E', 'T')], 0.007508, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('F', 'T')], 0.003453, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('G', 'T')], 0.007658, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('H', 'T')], 0.003453, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('I', 'T')], 0.004404, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('K', 'T')], 0.007007, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('L', 'T')], 0.009159, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('M', 'T')], 0.001752, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('N', 'T')], 0.005255, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('P', 'T')], 0.004605, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('Q', 'T')], 0.004855, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('R', 'T')], 0.005706, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('S', 'T')], 0.008609, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('T', 'T')], 0.004204, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('A', 'V')], 0.012613, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('C', 'V')], 0.002953, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('D', 'V')], 0.004755, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('E', 'V')], 0.005506, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('F', 'V')], 0.008008, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('G', 'V')], 0.006557, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('H', 'V')], 0.002703, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('I', 'V')], 0.015516, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('K', 'V')], 0.006557, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('L', 'V')], 0.022372, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('M', 'V')], 0.004755, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('N', 'V')], 0.004655, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('P', 'V')], 0.005455, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('Q', 'V')], 0.003453, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('R', 'V')], 0.004404, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('S', 'V')], 0.005706, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('T', 'V')], 0.007257, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('V', 'V')], 0.011962, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('A', 'W')], 0.002352, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('C', 'W')], 0.000400, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('D', 'W')], 0.001101, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('E', 'W')], 0.001051, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('F', 'W')], 0.002152, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('G', 'W')], 0.001752, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('H', 'W')], 0.000651, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('I', 'W')], 0.001902, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('K', 'W')], 0.001051, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('L', 'W')], 0.003704, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('M', 'W')], 0.001251, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('N', 'W')], 0.001451, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('P', 'W')], 0.000901, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('Q', 'W')], 0.000751, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('R', 'W')], 0.001151, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('S', 'W')], 0.001101, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('T', 'W')], 0.001752, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('V', 'W')], 0.002202, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('W', 'W')], 0.001602, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('A', 'Y')], 0.006206, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('C', 'Y')], 0.000951, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('D', 'Y')], 0.003203, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('E', 'Y')], 0.003003, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('F', 'Y')], 0.007107, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('G', 'Y')], 0.005055, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('H', 'Y')], 0.002152, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('I', 'Y')], 0.004705, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('K', 'Y')], 0.003303, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('L', 'Y')], 0.008659, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('M', 'Y')], 0.002052, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('N', 'Y')], 0.003754, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('P', 'Y')], 0.003003, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('Q', 'Y')], 0.002052, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('R', 'Y')], 0.003103, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('S', 'Y')], 0.003654, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('T', 'Y')], 0.004555, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('V', 'Y')], 0.006707, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('W', 'Y')], 0.002553, places=6)
        self.assertAlmostEqual(self.obs_freq_mat[('Y', 'Y')], 0.004104, places=6)

    def test_obs_freq_mat_sum(self):
        counts = self.obs_freq_mat.sum()
        self.assertEqual(len(counts), 20)
        self.assertAlmostEqual(counts['A'], 0.0851, places=3)
        self.assertAlmostEqual(counts['C'], 0.0153, places=3)
        self.assertAlmostEqual(counts['D'], 0.0565, places=3)
        self.assertAlmostEqual(counts['E'], 0.0544, places=3)
        self.assertAlmostEqual(counts['F'], 0.0449, places=3)
        self.assertAlmostEqual(counts['G'], 0.0701, places=3)
        self.assertAlmostEqual(counts['H'], 0.0239, places=3)
        self.assertAlmostEqual(counts['I'], 0.0580, places=3)
        self.assertAlmostEqual(counts['K'], 0.0572, places=3)
        self.assertAlmostEqual(counts['L'], 0.0936, places=3)
        self.assertAlmostEqual(counts['M'], 0.0238, places=3)
        self.assertAlmostEqual(counts['N'], 0.0463, places=3)
        self.assertAlmostEqual(counts['P'], 0.0409, places=3)
        self.assertAlmostEqual(counts['Q'], 0.0360, places=3)
        self.assertAlmostEqual(counts['R'], 0.0437, places=3)
        self.assertAlmostEqual(counts['S'], 0.0575, places=3)
        self.assertAlmostEqual(counts['T'], 0.0565, places=3)
        self.assertAlmostEqual(counts['V'], 0.0780, places=3)
        self.assertAlmostEqual(counts['W'], 0.0162, places=3)
        self.assertAlmostEqual(counts['Y'], 0.0420, places=3)

    def test_log_odds_matris(self):
        lo_mat_prot = SubsMat.make_log_odds_matrix(acc_rep_mat=self.acc_rep_mat,
                                                   round_digit=1)
        handle = StringIO()
        lo_mat_prot.print_mat(f=handle, format=" %d",
                              alphabet='AVILMCFWYHSTNQKRDEGP')
        text = handle.getvalue()
        self.assertEqual(text, """\
A 0
V 0 1
I 0 0 1
L 0 0 0 0
M 0 0 0 0 1
C 0 0 0 0 0 3
F 0 0 0 0 0 0 1
W 0 0 0 0 0 0 0 2
Y 0 0 0 0 0 0 0 0 1
H 0 0 0 0 0 0 0 0 0 2
S 0 0 0 0 0 0 0 0 0 0 0
T 0 0 0 0 0 0 0 0 0 0 0 0
N 0 0 0 0 0 0 0 0 0 0 0 0 0
Q 0 0 0 0 0 0 0 0 0 0 0 0 0 0
K 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
R 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1
D 0 0 -1 0 -1 -1 0 0 0 0 0 0 0 0 0 0 1
E 0 0 -1 0 0 0 -1 0 0 0 0 0 0 0 0 0 0 1
G 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1
P 0 0 0 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1
   A   V   I   L   M   C   F   W   Y   H   S   T   N   Q   K   R   D   E   G   P
""")
        handle = StringIO()
        lo_mat_prot.print_full_mat(f=handle, format=" %d",
                                   alphabet='AVILMCFWYHSTNQKRDEGP')
        text = handle.getvalue()
        self.assertEqual(text, """\
   A   V   I   L   M   C   F   W   Y   H   S   T   N   Q   K   R   D   E   G   P
A 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
V 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
I 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 -1 -1 0 0
L 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -1
M 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 -1 0 0 -1
C 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 -1 0 0 0
F 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 -1 0 0
W 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0
Y 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0
H 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0
S 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
T 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
N 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
Q 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
K 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
R 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0
D 0 0 -1 0 -1 -1 0 0 0 0 0 0 0 0 0 0 1 0 0 0
E 0 0 -1 0 0 0 -1 0 0 0 0 0 0 0 0 0 0 1 0 0
G 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0
P 0 0 0 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1
""")
        relative_entropy = lo_mat_prot.calculate_relative_entropy(self.obs_freq_mat)
        self.assertAlmostEqual(relative_entropy, 0.162, places=3)

    def test_matrices(self):
        self.assertEqual(len(MatrixInfo.available_matrices), 40)
        mat = SubsMat.SeqMat(MatrixInfo.benner6)
        self.assertEqual(len(mat), 210)
        self.assertAlmostEqual(mat[('A', 'A')], 2.500, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], -1.700, places=3)
        self.assertAlmostEqual(mat[('A', 'D')], -0.600, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], -0.700, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -3.200, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 0.800, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], -2.100, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], 0.100, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], -1.900, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -1.300, places=3)
        self.assertAlmostEqual(mat[('A', 'M')], -0.200, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], 1.100, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], -1.700, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], -1.700, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 1.400, places=3)
        self.assertAlmostEqual(mat[('A', 'T')], 1.700, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], 0.700, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -4.300, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 12.100, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -3.700, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -4.700, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], -0.100, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], -1.300, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -1.200, places=3)
        self.assertAlmostEqual(mat[('C', 'I')], -3.600, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -2.800, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], -3.800, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -3.700, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -1.600, places=3)
        self.assertAlmostEqual(mat[('C', 'P')], -2.700, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -3.200, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -0.400, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], 0.900, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], -1.500, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], -3.100, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], 1.600, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], 2.600, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 5.200, places=3)
        self.assertAlmostEqual(mat[('D', 'E')], 4.400, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -5.700, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], 0.800, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], 0.100, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -4.200, places=3)
        self.assertAlmostEqual(mat[('D', 'K')], -0.200, places=3)
        self.assertAlmostEqual(mat[('D', 'L')], -5.300, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -4.300, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 2.500, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -2.800, places=3)
        self.assertAlmostEqual(mat[('D', 'Q')], 0.600, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -1.500, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], -0.400, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], -1.200, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -3.300, places=3)
        self.assertAlmostEqual(mat[('D', 'W')], -6.300, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], -2.300, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 5.200, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -6.700, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], 0.500, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], -0.200, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -4.100, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], 0.900, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -5.000, places=3)
        self.assertAlmostEqual(mat[('E', 'M')], -4.100, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], 1.100, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], -2.600, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 2.100, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], -0.400, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], -1.200, places=3)
        self.assertAlmostEqual(mat[('E', 'T')], -1.600, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -5.600, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -4.100, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 8.300, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -5.700, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], 0.100, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -6.300, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 2.400, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], -0.100, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -3.500, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -3.200, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -4.400, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -4.900, places=3)
        self.assertAlmostEqual(mat[('F', 'S')], -1.800, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -2.400, places=3)
        self.assertAlmostEqual(mat[('F', 'V')], -0.500, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], -1.600, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 5.600, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 5.800, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -2.100, places=3)
        self.assertAlmostEqual(mat[('G', 'I')], -3.400, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -1.400, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -4.600, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -3.700, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], -0.100, places=3)
        self.assertAlmostEqual(mat[('G', 'P')], -1.700, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -1.600, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -0.100, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], 0.800, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], -0.500, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], -2.300, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], -1.700, places=3)
        self.assertAlmostEqual(mat[('G', 'Y')], -4.900, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 6.100, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -3.700, places=3)
        self.assertAlmostEqual(mat[('H', 'K')], 0.900, places=3)
        self.assertAlmostEqual(mat[('H', 'L')], -2.200, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], -3.400, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 1.400, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], -0.400, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 3.200, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 1.800, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -0.900, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -1.700, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -3.800, places=3)
        self.assertAlmostEqual(mat[('H', 'W')], -2.800, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], 4.400, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 4.400, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], -3.800, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 2.400, places=3)
        self.assertAlmostEqual(mat[('I', 'M')], 4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -2.500, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -3.800, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -3.800, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -1.200, places=3)
        self.assertAlmostEqual(mat[('I', 'T')], 0.700, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 3.900, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], -3.300, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 5.600, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -4.100, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], -2.900, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'P')], -2.300, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 2.500, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 4.300, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], -1.200, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], -1.100, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -3.800, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], -1.400, places=3)
        self.assertAlmostEqual(mat[('K', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 4.800, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], -2.900, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -3.400, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -0.200, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -2.400, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -3.200, places=3)
        self.assertAlmostEqual(mat[('L', 'S')], -1.500, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], -0.400, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 1.900, places=3)
        self.assertAlmostEqual(mat[('L', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], -1.600, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 4.800, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], -2.500, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -1.800, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], -3.100, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -1.300, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], 0.600, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 3.300, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -4.400, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], -3.600, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 3.600, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], -1.100, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 0.100, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], -0.100, places=3)
        self.assertAlmostEqual(mat[('N', 'S')], 1.200, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 0.500, places=3)
        self.assertAlmostEqual(mat[('N', 'V')], -2.400, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -4.400, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -0.900, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 6.500, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], 0.100, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], -1.300, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], 1.400, places=3)
        self.assertAlmostEqual(mat[('P', 'T')], 0.600, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -1.600, places=3)
        self.assertAlmostEqual(mat[('P', 'W')], -4.800, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -3.800, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 5.300, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 2.500, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], -1.400, places=3)
        self.assertAlmostEqual(mat[('Q', 'T')], -1.700, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -3.500, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -2.600, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -1.400, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 5.100, places=3)
        self.assertAlmostEqual(mat[('R', 'S')], -0.900, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -1.300, places=3)
        self.assertAlmostEqual(mat[('R', 'V')], -3.700, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], 2.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Y')], -2.600, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 2.100, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 1.500, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -0.900, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], -2.900, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], -1.800, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 2.400, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], 0.600, places=3)
        self.assertAlmostEqual(mat[('T', 'W')], -2.600, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -3.400, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 4.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -4.800, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], -3.800, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 14.700, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], -0.300, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 9.500, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.benner22)
        self.assertEqual(len(mat), 210)
        self.assertAlmostEqual(mat[('A', 'A')], 2.500, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], -1.200, places=3)
        self.assertAlmostEqual(mat[('A', 'D')], -0.200, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], -0.300, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -3.100, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 0.800, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], -1.600, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], -0.400, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -1.700, places=3)
        self.assertAlmostEqual(mat[('A', 'M')], -0.800, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], 0.800, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], -0.900, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], -1.200, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 1.300, places=3)
        self.assertAlmostEqual(mat[('A', 'T')], 1.400, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], 0.400, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -5.500, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -3.500, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 12.600, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -3.700, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -4.300, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], -0.100, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], -1.700, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -1.500, places=3)
        self.assertAlmostEqual(mat[('C', 'I')], -2.400, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -3.300, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], -2.600, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -2.500, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -1.900, places=3)
        self.assertAlmostEqual(mat[('C', 'P')], -3.100, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -3.300, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -1.600, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], 0.300, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], -1.100, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], -1.700, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], 0.500, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], 0.600, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 4.800, places=3)
        self.assertAlmostEqual(mat[('D', 'E')], 3.900, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -5.400, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], 0.700, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], 0.300, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'K')], 0.200, places=3)
        self.assertAlmostEqual(mat[('D', 'L')], -4.900, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -3.900, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 2.400, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -1.800, places=3)
        self.assertAlmostEqual(mat[('D', 'Q')], 0.600, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], 0.100, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], -0.700, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'W')], -6.400, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 4.600, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -5.700, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], 0.500, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], -0.200, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -3.600, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -4.400, places=3)
        self.assertAlmostEqual(mat[('E', 'M')], -3.400, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], 1.200, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], -1.700, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 1.700, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], -0.100, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], -0.500, places=3)
        self.assertAlmostEqual(mat[('E', 'T')], -0.900, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -2.700, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -6.300, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 7.700, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -5.800, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], 0.300, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], 0.500, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -5.100, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 2.200, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], 0.700, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -3.500, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -3.400, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -3.600, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -4.300, places=3)
        self.assertAlmostEqual(mat[('F', 'S')], -2.200, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -2.600, places=3)
        self.assertAlmostEqual(mat[('F', 'V')], -0.100, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 0.500, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 5.900, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 6.200, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'I')], -3.800, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -4.900, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -3.800, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], 0.400, places=3)
        self.assertAlmostEqual(mat[('G', 'P')], -1.800, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -1.400, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -0.700, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], 0.600, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], -0.700, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], -2.500, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], -4.500, places=3)
        self.assertAlmostEqual(mat[('G', 'Y')], -4.800, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 6.100, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -3.200, places=3)
        self.assertAlmostEqual(mat[('H', 'K')], 0.800, places=3)
        self.assertAlmostEqual(mat[('H', 'L')], -2.100, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], -2.400, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 1.400, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], -0.400, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 2.400, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 1.500, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -0.500, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -1.100, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'W')], -2.700, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], 3.700, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 4.200, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 2.700, places=3)
        self.assertAlmostEqual(mat[('I', 'M')], 3.100, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -2.700, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -2.300, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -2.700, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -3.200, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -1.400, places=3)
        self.assertAlmostEqual(mat[('I', 'T')], 0.300, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 3.600, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -4.400, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], -2.200, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 4.400, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -3.300, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'P')], -1.600, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 2.200, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 3.900, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], -0.400, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], -0.400, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -2.700, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], -3.700, places=3)
        self.assertAlmostEqual(mat[('K', 'Y')], -3.600, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 4.600, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 3.200, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -3.500, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -1.300, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -2.900, places=3)
        self.assertAlmostEqual(mat[('L', 'S')], -2.100, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'W')], -1.800, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], -0.700, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 4.900, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], -2.600, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], -1.700, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], -2.100, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -1.500, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], 0.100, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 2.500, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -2.800, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], -1.800, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 3.300, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], -1.100, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 0.500, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], 0.400, places=3)
        self.assertAlmostEqual(mat[('N', 'S')], 1.100, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 0.500, places=3)
        self.assertAlmostEqual(mat[('N', 'V')], -2.300, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -5.200, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -1.200, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 7.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], -0.100, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], -1.200, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], 1.100, places=3)
        self.assertAlmostEqual(mat[('P', 'T')], 0.400, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -1.700, places=3)
        self.assertAlmostEqual(mat[('P', 'W')], -5.800, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -3.500, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 4.200, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 2.200, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], -0.600, places=3)
        self.assertAlmostEqual(mat[('Q', 'T')], -0.700, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -2.400, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -3.300, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -1.900, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 5.000, places=3)
        self.assertAlmostEqual(mat[('R', 'S')], -0.500, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -0.700, places=3)
        self.assertAlmostEqual(mat[('R', 'V')], -2.900, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], -1.100, places=3)
        self.assertAlmostEqual(mat[('R', 'Y')], -2.700, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 1.500, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -0.900, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], -3.900, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], -1.900, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 2.500, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], 0.400, places=3)
        self.assertAlmostEqual(mat[('T', 'W')], -4.500, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 3.700, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -4.500, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], -2.600, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 15.700, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], 1.500, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 9.000, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.benner74)
        self.assertEqual(len(mat), 210)
        self.assertAlmostEqual(mat[('A', 'A')], 2.400, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], 0.300, places=3)
        self.assertAlmostEqual(mat[('A', 'D')], -0.300, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], -0.100, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -2.600, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 0.600, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], -0.800, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], -0.400, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -1.400, places=3)
        self.assertAlmostEqual(mat[('A', 'M')], -0.800, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], -0.200, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], 0.400, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], -0.300, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], -0.800, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 1.100, places=3)
        self.assertAlmostEqual(mat[('A', 'T')], 0.700, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], 0.100, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -4.100, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -2.600, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 11.800, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -3.200, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -3.200, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], -0.700, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -1.300, places=3)
        self.assertAlmostEqual(mat[('C', 'I')], -1.200, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -2.900, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], -1.600, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -1.200, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -1.800, places=3)
        self.assertAlmostEqual(mat[('C', 'P')], -3.100, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -2.600, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -2.200, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], 0.100, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], -0.600, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], -0.200, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], -0.900, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], -0.400, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 4.800, places=3)
        self.assertAlmostEqual(mat[('D', 'E')], 2.900, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -4.700, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], 0.200, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], 0.400, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -3.900, places=3)
        self.assertAlmostEqual(mat[('D', 'K')], 0.400, places=3)
        self.assertAlmostEqual(mat[('D', 'L')], -4.200, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -3.200, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 2.200, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Q')], 0.800, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -0.500, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], 0.400, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], -0.200, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -2.900, places=3)
        self.assertAlmostEqual(mat[('D', 'W')], -5.500, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], -2.800, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 3.700, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -4.300, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], -0.500, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], 0.200, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -2.900, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], 1.200, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -3.100, places=3)
        self.assertAlmostEqual(mat[('E', 'M')], -2.200, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], -0.700, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 1.700, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], 0.300, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], 0.100, places=3)
        self.assertAlmostEqual(mat[('E', 'T')], -0.200, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -2.100, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -4.700, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 7.200, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -5.400, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], 0.900, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -3.600, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 2.100, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], 1.300, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -3.200, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -3.800, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -2.800, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -3.500, places=3)
        self.assertAlmostEqual(mat[('F', 'S')], -2.600, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -2.200, places=3)
        self.assertAlmostEqual(mat[('F', 'V')], 0.100, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 5.300, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 6.600, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -1.600, places=3)
        self.assertAlmostEqual(mat[('G', 'I')], -4.300, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -1.100, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -4.600, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -3.500, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], 0.400, places=3)
        self.assertAlmostEqual(mat[('G', 'P')], -1.700, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -1.100, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], 0.400, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], -3.100, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], -4.100, places=3)
        self.assertAlmostEqual(mat[('G', 'Y')], -4.300, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 6.100, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -2.300, places=3)
        self.assertAlmostEqual(mat[('H', 'K')], 0.600, places=3)
        self.assertAlmostEqual(mat[('H', 'L')], -1.900, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], -1.500, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 1.200, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 1.400, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -0.300, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -0.500, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -2.100, places=3)
        self.assertAlmostEqual(mat[('H', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], 2.500, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], -2.300, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 2.800, places=3)
        self.assertAlmostEqual(mat[('I', 'M')], 2.600, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -2.800, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -2.600, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -2.600, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -1.800, places=3)
        self.assertAlmostEqual(mat[('I', 'T')], -0.300, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 3.200, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -2.300, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 3.400, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -2.400, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], -1.500, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 0.900, places=3)
        self.assertAlmostEqual(mat[('K', 'P')], -0.800, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 1.700, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 2.900, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], 0.100, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -1.900, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], -3.600, places=3)
        self.assertAlmostEqual(mat[('K', 'Y')], -2.400, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 4.200, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 2.900, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -3.100, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -2.200, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -1.700, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -2.400, places=3)
        self.assertAlmostEqual(mat[('L', 'S')], -2.200, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], -1.100, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 1.900, places=3)
        self.assertAlmostEqual(mat[('L', 'W')], -0.900, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], -0.100, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 4.500, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], -2.200, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -2.400, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], -1.800, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -1.400, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], -0.400, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 1.800, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -1.300, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], -0.500, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 3.600, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 0.700, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], 0.300, places=3)
        self.assertAlmostEqual(mat[('N', 'S')], 0.900, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 0.400, places=3)
        self.assertAlmostEqual(mat[('N', 'V')], -2.200, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -1.400, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 7.500, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], -0.200, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], -0.100, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], 0.500, places=3)
        self.assertAlmostEqual(mat[('P', 'T')], 0.100, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -1.900, places=3)
        self.assertAlmostEqual(mat[('P', 'W')], -5.200, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -3.400, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 1.600, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], 0.100, places=3)
        self.assertAlmostEqual(mat[('Q', 'T')], -0.100, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -1.700, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -2.800, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -1.800, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 4.800, places=3)
        self.assertAlmostEqual(mat[('R', 'S')], -0.200, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -0.300, places=3)
        self.assertAlmostEqual(mat[('R', 'V')], -2.200, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], -1.600, places=3)
        self.assertAlmostEqual(mat[('R', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 2.100, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 1.400, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], -3.400, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], -1.900, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 2.500, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], 0.200, places=3)
        self.assertAlmostEqual(mat[('T', 'W')], -3.700, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -2.100, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 3.400, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -2.900, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], -1.400, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 14.700, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], 3.600, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 8.100, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.blosum100)
        self.assertEqual(len(mat), 276)
        self.assertAlmostEqual(mat[('A', 'A')], 5.000, places=3)
        self.assertAlmostEqual(mat[('A', 'B')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -4.000, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('A', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'B')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'C')], -5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'D')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'E')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'F')], -5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'I')], -5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'L')], -5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'M')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'N')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'V')], -5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'W')], -6.000, places=3)
        self.assertAlmostEqual(mat[('B', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Z')], 1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 9.000, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -6.000, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Z')], -6.000, places=3)
        self.assertAlmostEqual(mat[('D', 'A')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 7.000, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -5.000, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -6.000, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -5.000, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -5.000, places=3)
        self.assertAlmostEqual(mat[('D', 'X')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], -5.000, places=3)
        self.assertAlmostEqual(mat[('E', 'D')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 6.000, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -5.000, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -5.000, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -5.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('E', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Z')], 5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 7.000, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'X')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Z')], -5.000, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 6.000, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -5.000, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -5.000, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], -5.000, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 9.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -5.000, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -5.000, places=3)
        self.assertAlmostEqual(mat[('H', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], 1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'C')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'G')], -6.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 5.000, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -5.000, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('K', 'D')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 6.000, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('L', 'D')], -6.000, places=3)
        self.assertAlmostEqual(mat[('L', 'H')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 5.000, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -5.000, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('L', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'A')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'E')], -4.000, places=3)
        self.assertAlmostEqual(mat[('M', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 8.000, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 7.000, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -6.000, places=3)
        self.assertAlmostEqual(mat[('N', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'C')], -5.000, places=3)
        self.assertAlmostEqual(mat[('P', 'G')], -4.000, places=3)
        self.assertAlmostEqual(mat[('P', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 8.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('P', 'X')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -5.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'D')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 7.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Z')], 3.000, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 7.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('R', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('S', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 6.000, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('T', 'A')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'E')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'I')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 6.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'F')], -2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('V', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 5.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('V', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'D')], -7.000, places=3)
        self.assertAlmostEqual(mat[('W', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('W', 'P')], -6.000, places=3)
        self.assertAlmostEqual(mat[('W', 'T')], -5.000, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 11.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], 1.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('X', 'C')], -3.000, places=3)
        self.assertAlmostEqual(mat[('X', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('X', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('X', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'G')], -6.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'K')], -4.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 8.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'D')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'Z')], 4.000, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.blosum30)
        self.assertEqual(len(mat), 276)
        self.assertAlmostEqual(mat[('A', 'A')], 4.000, places=3)
        self.assertAlmostEqual(mat[('A', 'B')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('A', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'B')], 5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'C')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'D')], 5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'E')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'I')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'L')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'N')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 17.000, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], 1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], -6.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'A')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 9.000, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -5.000, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'D')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 6.000, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Z')], 5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 10.000, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 8.000, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 14.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], 2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('I', 'C')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 6.000, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'D')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 4.000, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], 2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Z')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'D')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], 3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'A')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 6.000, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 8.000, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -7.000, places=3)
        self.assertAlmostEqual(mat[('N', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'C')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'K')], 1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 11.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('P', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'D')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 8.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Z')], 4.000, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 8.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], 0.000, places=3)
        self.assertAlmostEqual(mat[('R', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'F')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 4.000, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'A')], 1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'E')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'I')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'P')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 5.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'F')], 1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 5.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], 1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'D')], -4.000, places=3)
        self.assertAlmostEqual(mat[('W', 'H')], -5.000, places=3)
        self.assertAlmostEqual(mat[('W', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'T')], -5.000, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 20.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], 5.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'C')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('X', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('X', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 9.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'D')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'L')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'Z')], 4.000, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.blosum35)
        self.assertEqual(len(mat), 276)
        self.assertAlmostEqual(mat[('A', 'A')], 5.000, places=3)
        self.assertAlmostEqual(mat[('A', 'B')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'B')], 5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'C')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'D')], 5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'E')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'F')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'I')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'N')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 15.000, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'A')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 8.000, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'D')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 6.000, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Z')], 5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 8.000, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 7.000, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 12.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('I', 'C')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 5.000, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'D')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 5.000, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Z')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'D')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 5.000, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'A')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'E')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 6.000, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 7.000, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'C')], -4.000, places=3)
        self.assertAlmostEqual(mat[('P', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 10.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'D')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 7.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Z')], 4.000, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 8.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], 0.000, places=3)
        self.assertAlmostEqual(mat[('R', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'F')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 4.000, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'A')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'P')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 5.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'F')], 1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 5.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'D')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'H')], -4.000, places=3)
        self.assertAlmostEqual(mat[('W', 'L')], 0.000, places=3)
        self.assertAlmostEqual(mat[('W', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('W', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 16.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], 3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'C')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('X', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('X', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 8.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'D')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'Z')], 4.000, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.blosum40)
        self.assertEqual(len(mat), 276)
        self.assertAlmostEqual(mat[('A', 'A')], 5.000, places=3)
        self.assertAlmostEqual(mat[('A', 'B')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'B')], 5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'C')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'D')], 6.000, places=3)
        self.assertAlmostEqual(mat[('B', 'E')], 1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'N')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Z')], 2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 16.000, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], -6.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'A')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 9.000, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'D')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 7.000, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Z')], 5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 9.000, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 8.000, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 13.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'C')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'G')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 6.000, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('K', 'D')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 6.000, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Z')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'D')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 6.000, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'A')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'E')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 7.000, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 8.000, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('N', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'C')], -5.000, places=3)
        self.assertAlmostEqual(mat[('P', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 11.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'D')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 8.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Z')], 4.000, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 9.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('R', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'F')], -2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 5.000, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'A')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'P')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 6.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'F')], 0.000, places=3)
        self.assertAlmostEqual(mat[('V', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 5.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'D')], -5.000, places=3)
        self.assertAlmostEqual(mat[('W', 'H')], -5.000, places=3)
        self.assertAlmostEqual(mat[('W', 'L')], -1.000, places=3)
        self.assertAlmostEqual(mat[('W', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('W', 'T')], -4.000, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 19.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], 3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'C')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('X', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 9.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'D')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'Z')], 5.000, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.blosum45)
        self.assertEqual(len(mat), 276)
        self.assertAlmostEqual(mat[('A', 'A')], 5.000, places=3)
        self.assertAlmostEqual(mat[('A', 'B')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'B')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'C')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'D')], 5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'E')], 1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'N')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Z')], 2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 12.000, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'A')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 7.000, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'D')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 6.000, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Z')], 4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 8.000, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 7.000, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 10.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'C')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'G')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 5.000, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'D')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 5.000, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Z')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'D')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 5.000, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'A')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'E')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'I')], 2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 6.000, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 6.000, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('N', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'C')], -4.000, places=3)
        self.assertAlmostEqual(mat[('P', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 9.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'D')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 6.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Z')], 4.000, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 7.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('R', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'F')], -2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 4.000, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'A')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 5.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'F')], 0.000, places=3)
        self.assertAlmostEqual(mat[('V', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 5.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'D')], -4.000, places=3)
        self.assertAlmostEqual(mat[('W', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 15.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], 3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'C')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('X', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 8.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'D')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'Z')], 4.000, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.blosum50)
        self.assertEqual(len(mat), 276)
        self.assertAlmostEqual(mat[('A', 'A')], 5.000, places=3)
        self.assertAlmostEqual(mat[('A', 'B')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'B')], 5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'C')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'D')], 5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'E')], 1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'F')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'N')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Z')], 2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 13.000, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'A')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 8.000, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -5.000, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'D')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 6.000, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Z')], 5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 8.000, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 8.000, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 10.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'C')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'G')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 5.000, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'D')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 6.000, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Z')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'D')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 5.000, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'A')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'E')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'I')], 2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 7.000, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 7.000, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('N', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'C')], -4.000, places=3)
        self.assertAlmostEqual(mat[('P', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 10.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'D')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 7.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Z')], 4.000, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 7.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('R', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 5.000, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'A')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 5.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'F')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 5.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'D')], -5.000, places=3)
        self.assertAlmostEqual(mat[('W', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('W', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 15.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'C')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('X', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 8.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'D')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'Z')], 5.000, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.blosum55)
        self.assertEqual(len(mat), 276)
        self.assertAlmostEqual(mat[('A', 'A')], 5.000, places=3)
        self.assertAlmostEqual(mat[('A', 'B')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'B')], 5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'C')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'D')], 5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'E')], 1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'F')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'N')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Z')], 2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 13.000, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'A')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 8.000, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -5.000, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'D')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 6.000, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Z')], 5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 8.000, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 8.000, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 10.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'C')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'G')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 5.000, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'D')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 6.000, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Z')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'D')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 5.000, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'A')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'E')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'I')], 2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 7.000, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 7.000, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('N', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'C')], -4.000, places=3)
        self.assertAlmostEqual(mat[('P', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 10.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'D')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 7.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Z')], 4.000, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 7.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('R', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 5.000, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'A')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 5.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'F')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 5.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'D')], -5.000, places=3)
        self.assertAlmostEqual(mat[('W', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('W', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 15.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'C')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('X', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 8.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'D')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'Z')], 5.000, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.blosum60)
        self.assertEqual(len(mat), 276)
        self.assertAlmostEqual(mat[('A', 'A')], 4.000, places=3)
        self.assertAlmostEqual(mat[('A', 'B')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'B')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'C')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'D')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'E')], 1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'N')], 3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Z')], 1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 9.000, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'A')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 6.000, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'D')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 5.000, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Z')], 4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 6.000, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 6.000, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 7.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'C')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'D')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 4.000, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Z')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'D')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'A')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'E')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 5.000, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 6.000, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('N', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'C')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 7.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'D')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 5.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Z')], 3.000, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 5.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('R', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'F')], -2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 4.000, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'A')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 4.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'F')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 4.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'D')], -4.000, places=3)
        self.assertAlmostEqual(mat[('W', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('W', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 10.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'C')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('X', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 6.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'D')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'Z')], 3.000, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.blosum62)
        self.assertEqual(len(mat), 276)
        self.assertAlmostEqual(mat[('A', 'A')], 4.000, places=3)
        self.assertAlmostEqual(mat[('A', 'B')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'B')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'C')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'D')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'E')], 1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'N')], 3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Z')], 1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 9.000, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'A')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 6.000, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'D')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 5.000, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Z')], 4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 6.000, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 6.000, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 8.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'C')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'G')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'D')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 5.000, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Z')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'D')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'A')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'E')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 5.000, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 6.000, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('N', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'C')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 7.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'D')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 5.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Z')], 3.000, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 5.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('R', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'F')], -2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 4.000, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'A')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 5.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'F')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 4.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'D')], -4.000, places=3)
        self.assertAlmostEqual(mat[('W', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('W', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 11.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('X', 'C')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('X', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 7.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'D')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'Z')], 4.000, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.blosum65)
        self.assertEqual(len(mat), 276)
        self.assertAlmostEqual(mat[('A', 'A')], 4.000, places=3)
        self.assertAlmostEqual(mat[('A', 'B')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'B')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'C')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'D')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'E')], 1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'N')], 3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Z')], 1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 9.000, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'A')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 6.000, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'D')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 5.000, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Z')], 4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 6.000, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 6.000, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 8.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'C')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'G')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'D')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 5.000, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Z')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'D')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'A')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'E')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 6.000, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 6.000, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('N', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'C')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 8.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'D')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 6.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Z')], 3.000, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 6.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('R', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'F')], -2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 4.000, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'A')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 5.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'F')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 4.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'D')], -5.000, places=3)
        self.assertAlmostEqual(mat[('W', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('W', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 10.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('X', 'C')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 7.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'D')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'Z')], 4.000, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.blosum70)
        self.assertEqual(len(mat), 276)
        self.assertAlmostEqual(mat[('A', 'A')], 4.000, places=3)
        self.assertAlmostEqual(mat[('A', 'B')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'B')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'C')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'D')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'E')], 1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'F')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'N')], 3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 9.000, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'A')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 6.000, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'D')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 5.000, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Z')], 4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 6.000, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 6.000, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 8.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'C')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'G')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'D')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 5.000, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Z')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'D')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'A')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'E')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 6.000, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 6.000, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('N', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'C')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 8.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'D')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 6.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Z')], 3.000, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 6.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('R', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 4.000, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'A')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 5.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'F')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 4.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'D')], -5.000, places=3)
        self.assertAlmostEqual(mat[('W', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('W', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 11.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('X', 'C')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('X', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'G')], -4.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 7.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'D')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'Z')], 4.000, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.blosum75)
        self.assertEqual(len(mat), 276)
        self.assertAlmostEqual(mat[('A', 'A')], 4.000, places=3)
        self.assertAlmostEqual(mat[('A', 'B')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'B')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'C')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'D')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'E')], 1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'F')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'N')], 3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 9.000, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'A')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 6.000, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'D')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 5.000, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Z')], 4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 6.000, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 6.000, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 8.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'C')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'G')], -5.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('K', 'D')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 5.000, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Z')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'D')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'A')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'E')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 6.000, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 6.000, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('N', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'C')], -4.000, places=3)
        self.assertAlmostEqual(mat[('P', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 8.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'D')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 6.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Z')], 3.000, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 6.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('R', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 5.000, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'A')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 5.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'F')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 4.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'D')], -5.000, places=3)
        self.assertAlmostEqual(mat[('W', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'P')], -5.000, places=3)
        self.assertAlmostEqual(mat[('W', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 11.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('X', 'C')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('X', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'G')], -4.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 7.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'D')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'Z')], 4.000, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.blosum80)
        self.assertEqual(len(mat), 276)
        self.assertAlmostEqual(mat[('A', 'A')], 5.000, places=3)
        self.assertAlmostEqual(mat[('A', 'B')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'B')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'C')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'D')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'E')], 1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'F')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'N')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 9.000, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'A')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 6.000, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'D')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 6.000, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Z')], 4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 6.000, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 6.000, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 8.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'C')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'G')], -5.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 5.000, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('K', 'D')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 5.000, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Z')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'D')], -5.000, places=3)
        self.assertAlmostEqual(mat[('L', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'A')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'E')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 6.000, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 6.000, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('N', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'C')], -4.000, places=3)
        self.assertAlmostEqual(mat[('P', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 8.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'D')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 6.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Z')], 3.000, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 6.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('R', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 5.000, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'A')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 5.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'F')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('V', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 4.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'D')], -6.000, places=3)
        self.assertAlmostEqual(mat[('W', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'P')], -5.000, places=3)
        self.assertAlmostEqual(mat[('W', 'T')], -4.000, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 11.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('X', 'C')], -3.000, places=3)
        self.assertAlmostEqual(mat[('X', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('X', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'G')], -4.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 7.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'D')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'Z')], 4.000, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.blosum85)
        self.assertEqual(len(mat), 276)
        self.assertAlmostEqual(mat[('A', 'A')], 5.000, places=3)
        self.assertAlmostEqual(mat[('A', 'B')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'B')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'C')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'D')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'E')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'F')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'I')], -5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'L')], -5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'M')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'N')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 9.000, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Z')], -5.000, places=3)
        self.assertAlmostEqual(mat[('D', 'A')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 7.000, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -5.000, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'D')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 6.000, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Z')], 4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 7.000, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 6.000, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -5.000, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 8.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'C')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'G')], -5.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 5.000, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('K', 'D')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 6.000, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Z')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'D')], -5.000, places=3)
        self.assertAlmostEqual(mat[('L', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('L', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'A')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'E')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 7.000, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 7.000, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('N', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'C')], -4.000, places=3)
        self.assertAlmostEqual(mat[('P', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 8.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'D')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 6.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Z')], 4.000, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 6.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('R', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 5.000, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'A')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 5.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'F')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('V', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 5.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'D')], -6.000, places=3)
        self.assertAlmostEqual(mat[('W', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'P')], -5.000, places=3)
        self.assertAlmostEqual(mat[('W', 'T')], -4.000, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 11.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('X', 'C')], -3.000, places=3)
        self.assertAlmostEqual(mat[('X', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('X', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'G')], -5.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 7.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'D')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'Z')], 4.000, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.blosum90)
        self.assertEqual(len(mat), 276)
        self.assertAlmostEqual(mat[('A', 'A')], 5.000, places=3)
        self.assertAlmostEqual(mat[('A', 'B')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('A', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'B')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'C')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'D')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'E')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'F')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'I')], -5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'L')], -5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'M')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'N')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'W')], -6.000, places=3)
        self.assertAlmostEqual(mat[('B', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 9.000, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -6.000, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Z')], -5.000, places=3)
        self.assertAlmostEqual(mat[('D', 'A')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 7.000, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -5.000, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -5.000, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -5.000, places=3)
        self.assertAlmostEqual(mat[('D', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'D')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 6.000, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -5.000, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('E', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Z')], 4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 7.000, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 6.000, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -5.000, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], -5.000, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 8.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], 1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'C')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'G')], -5.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 5.000, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('K', 'D')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 6.000, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Z')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'D')], -5.000, places=3)
        self.assertAlmostEqual(mat[('L', 'H')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 5.000, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('L', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'A')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'E')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 7.000, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 7.000, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('N', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'C')], -4.000, places=3)
        self.assertAlmostEqual(mat[('P', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 8.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'D')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 7.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Z')], 4.000, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 6.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('R', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 5.000, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('T', 'A')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 6.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'F')], -2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('V', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 5.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'D')], -6.000, places=3)
        self.assertAlmostEqual(mat[('W', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'P')], -5.000, places=3)
        self.assertAlmostEqual(mat[('W', 'T')], -4.000, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 11.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('X', 'C')], -3.000, places=3)
        self.assertAlmostEqual(mat[('X', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('X', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'G')], -5.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 8.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'D')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'Z')], 4.000, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.blosum95)
        self.assertEqual(len(mat), 276)
        self.assertAlmostEqual(mat[('A', 'A')], 5.000, places=3)
        self.assertAlmostEqual(mat[('A', 'B')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('A', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'B')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'C')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'D')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'E')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'F')], -5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'I')], -5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'L')], -5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'M')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'N')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'V')], -5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'W')], -6.000, places=3)
        self.assertAlmostEqual(mat[('B', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 9.000, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -6.000, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Z')], -5.000, places=3)
        self.assertAlmostEqual(mat[('D', 'A')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 7.000, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -5.000, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -5.000, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -5.000, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -5.000, places=3)
        self.assertAlmostEqual(mat[('D', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], -5.000, places=3)
        self.assertAlmostEqual(mat[('E', 'D')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 6.000, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -5.000, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('E', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Z')], 4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 7.000, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 6.000, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -5.000, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], -5.000, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 9.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], 1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'C')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'G')], -6.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 5.000, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('K', 'D')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 6.000, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('L', 'D')], -5.000, places=3)
        self.assertAlmostEqual(mat[('L', 'H')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 5.000, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -5.000, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('L', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'A')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'E')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 7.000, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 7.000, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('N', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'C')], -5.000, places=3)
        self.assertAlmostEqual(mat[('P', 'G')], -4.000, places=3)
        self.assertAlmostEqual(mat[('P', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 8.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('P', 'X')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -5.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'D')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 7.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Z')], 4.000, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 7.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('R', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 5.000, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('T', 'A')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'E')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'I')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 6.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'F')], -2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('V', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 5.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'D')], -6.000, places=3)
        self.assertAlmostEqual(mat[('W', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'P')], -5.000, places=3)
        self.assertAlmostEqual(mat[('W', 'T')], -4.000, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 11.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('X', 'C')], -3.000, places=3)
        self.assertAlmostEqual(mat[('X', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('X', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('X', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'G')], -5.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 8.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'D')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'Z')], 4.000, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.feng)
        self.assertEqual(len(mat), 210)
        self.assertAlmostEqual(mat[('A', 'A')], 6.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], 2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'D')], 4.000, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], 4.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], 2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 5.000, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], 2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], 2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], 3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], 2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'M')], 2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], 3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], 5.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], 3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 5.000, places=3)
        self.assertAlmostEqual(mat[('A', 'T')], 5.000, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], 5.000, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], 2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 6.000, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], 1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], 3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], 3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], 2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'I')], 2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], 2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], 2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], 2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'P')], 2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], 4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], 2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], 3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], 3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 6.000, places=3)
        self.assertAlmostEqual(mat[('D', 'E')], 5.000, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], 1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], 4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], 3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'K')], 3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'L')], 1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 5.000, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], 2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Q')], 4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], 3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], 2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], 3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'W')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 6.000, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], 4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], 4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'M')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], 3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], 3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], 3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'T')], 3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], 4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 6.000, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], 2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], 4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], 2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], 2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'S')], 3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'V')], 4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 5.000, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 6.000, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], 1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'I')], 2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], 2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], 2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], 1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], 3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'P')], 3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], 3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], 5.000, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], 2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], 4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], 3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 6.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'K')], 3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'L')], 3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], 3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], 3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], 2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], 3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 6.000, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 5.000, places=3)
        self.assertAlmostEqual(mat[('I', 'M')], 4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'T')], 3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 5.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], 3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 6.000, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], 2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], 2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 4.000, places=3)
        self.assertAlmostEqual(mat[('K', 'P')], 2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 4.000, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 5.000, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], 3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], 4.000, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], 3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Y')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 6.000, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 5.000, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], 3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'S')], 2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], 2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 5.000, places=3)
        self.assertAlmostEqual(mat[('L', 'W')], 4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], 3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 6.000, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], 2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], 3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 4.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], 3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 6.000, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], 2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 3.000, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'S')], 5.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 4.000, places=3)
        self.assertAlmostEqual(mat[('N', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], 3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 6.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], 3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], 3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], 4.000, places=3)
        self.assertAlmostEqual(mat[('P', 'T')], 4.000, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], 3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'W')], 2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 6.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], 3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'T')], 3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 6.000, places=3)
        self.assertAlmostEqual(mat[('R', 'S')], 3.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], 3.000, places=3)
        self.assertAlmostEqual(mat[('R', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], 2.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Y')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 6.000, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 5.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], 2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], 3.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 6.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], 3.000, places=3)
        self.assertAlmostEqual(mat[('T', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 6.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], 3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], 3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 6.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], 3.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 6.000, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.fitch)
        self.assertEqual(len(mat), 171)
        self.assertAlmostEqual(mat[('A', 'A')], 3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], 2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], 2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'M')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], 2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'O')], 2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'U')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], 1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], 2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], 1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'I')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], 1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'O')], 2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], 2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], 2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'U')], 1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'M')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'O')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'T')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'U')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'O')], 2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'S')], 2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'U')], 2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'L')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'O')], 2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'U')], 2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], 1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'M')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'O')], 1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'T')], 1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'U')], 1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'O')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'S')], 2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'U')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'O')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'U')], 2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], 2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], 1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 3.000, places=3)
        self.assertAlmostEqual(mat[('N', 'O')], 2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], 1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'S')], 2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'U')], 1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], 2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], 1.000, places=3)
        self.assertAlmostEqual(mat[('O', 'O')], 3.000, places=3)
        self.assertAlmostEqual(mat[('O', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('O', 'R')], 1.000, places=3)
        self.assertAlmostEqual(mat[('O', 'S')], 2.000, places=3)
        self.assertAlmostEqual(mat[('O', 'T')], 1.000, places=3)
        self.assertAlmostEqual(mat[('O', 'U')], 1.000, places=3)
        self.assertAlmostEqual(mat[('O', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('O', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('O', 'Y')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], 2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'T')], 2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'U')], 2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], 1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 3.000, places=3)
        self.assertAlmostEqual(mat[('R', 'S')], 2.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], 2.000, places=3)
        self.assertAlmostEqual(mat[('R', 'U')], 2.000, places=3)
        self.assertAlmostEqual(mat[('R', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'U')], 2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], 2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 3.000, places=3)
        self.assertAlmostEqual(mat[('T', 'U')], 2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'W')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('U', 'U')], 3.000, places=3)
        self.assertAlmostEqual(mat[('U', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('U', 'W')], 2.000, places=3)
        self.assertAlmostEqual(mat[('U', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], 2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 3.000, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.genetic)
        self.assertEqual(len(mat), 210)
        self.assertAlmostEqual(mat[('A', 'A')], 4.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], -1.900, places=3)
        self.assertAlmostEqual(mat[('A', 'D')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], 1.300, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -2.400, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 1.200, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], -2.100, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], -1.800, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], -1.900, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -2.300, places=3)
        self.assertAlmostEqual(mat[('A', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], -1.700, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], 0.800, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], -2.100, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], -1.600, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 0.100, places=3)
        self.assertAlmostEqual(mat[('A', 'T')], 0.900, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -2.200, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -2.400, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 5.500, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -1.600, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], 1.800, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], 1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -1.600, places=3)
        self.assertAlmostEqual(mat[('C', 'I')], -1.900, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -3.200, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], -1.300, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -2.700, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -1.500, places=3)
        self.assertAlmostEqual(mat[('C', 'P')], -1.900, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -3.100, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], 0.700, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], 1.500, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], -1.900, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], -2.200, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], 4.100, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], 2.600, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 4.800, places=3)
        self.assertAlmostEqual(mat[('D', 'E')], 3.800, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -1.700, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], 1.100, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], 1.700, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -2.100, places=3)
        self.assertAlmostEqual(mat[('D', 'K')], 0.300, places=3)
        self.assertAlmostEqual(mat[('D', 'L')], -2.400, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -2.500, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 1.700, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -2.200, places=3)
        self.assertAlmostEqual(mat[('D', 'Q')], 0.300, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -2.300, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], -2.100, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], -2.100, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'W')], -2.900, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], 2.300, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 5.700, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -2.900, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], 1.400, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], 0.300, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -2.300, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -2.500, places=3)
        self.assertAlmostEqual(mat[('E', 'M')], -1.800, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], 0.300, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], -2.100, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], -2.800, places=3)
        self.assertAlmostEqual(mat[('E', 'T')], -2.100, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], 1.300, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -3.200, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -0.900, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 4.500, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -1.900, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], -1.100, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], 1.300, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -2.800, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 2.200, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], 0.500, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -1.300, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -1.800, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -2.100, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -1.500, places=3)
        self.assertAlmostEqual(mat[('F', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -2.100, places=3)
        self.assertAlmostEqual(mat[('F', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 4.200, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -2.200, places=3)
        self.assertAlmostEqual(mat[('G', 'I')], -2.500, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -2.200, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -2.200, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -2.300, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], -2.600, places=3)
        self.assertAlmostEqual(mat[('G', 'P')], -1.800, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -2.100, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], 0.800, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], -0.600, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], -2.100, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], 1.100, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], 1.400, places=3)
        self.assertAlmostEqual(mat[('G', 'Y')], -1.800, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 4.700, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -1.800, places=3)
        self.assertAlmostEqual(mat[('H', 'K')], 0.600, places=3)
        self.assertAlmostEqual(mat[('H', 'L')], -0.100, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], -1.800, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 1.800, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], 0.700, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 3.600, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 3.600, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -1.600, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -1.800, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -2.100, places=3)
        self.assertAlmostEqual(mat[('H', 'W')], -2.100, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], 2.300, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 4.100, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], 0.700, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 1.200, places=3)
        self.assertAlmostEqual(mat[('I', 'M')], 3.300, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], 0.900, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -1.600, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -1.900, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -1.200, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -0.500, places=3)
        self.assertAlmostEqual(mat[('I', 'T')], 0.800, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -2.200, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], -1.600, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 5.600, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], 1.600, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 3.500, places=3)
        self.assertAlmostEqual(mat[('K', 'P')], -1.500, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 2.200, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], -0.200, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], -1.500, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], 1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -2.100, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Y')], -0.800, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 3.400, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 1.500, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -2.200, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], 0.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], 0.100, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -0.400, places=3)
        self.assertAlmostEqual(mat[('L', 'S')], -1.200, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], -1.900, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 1.100, places=3)
        self.assertAlmostEqual(mat[('L', 'W')], -0.300, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], -1.600, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 5.400, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], 0.100, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -1.400, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], -1.200, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], -0.400, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -1.300, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], 0.700, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], -2.900, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 4.700, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], -1.600, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 0.400, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], -1.500, places=3)
        self.assertAlmostEqual(mat[('N', 'S')], -0.300, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 0.900, places=3)
        self.assertAlmostEqual(mat[('N', 'V')], -2.200, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], 2.500, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 3.800, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], 0.300, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], 0.400, places=3)
        self.assertAlmostEqual(mat[('P', 'T')], 1.100, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -2.100, places=3)
        self.assertAlmostEqual(mat[('P', 'W')], -1.600, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -2.300, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 5.500, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 0.300, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], -2.300, places=3)
        self.assertAlmostEqual(mat[('Q', 'T')], -1.700, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -2.300, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -0.800, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 2.900, places=3)
        self.assertAlmostEqual(mat[('R', 'S')], 0.300, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -0.600, places=3)
        self.assertAlmostEqual(mat[('R', 'V')], -2.100, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], 1.800, places=3)
        self.assertAlmostEqual(mat[('R', 'Y')], -1.900, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 2.600, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -2.200, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], 0.800, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], 0.300, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 4.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], -2.200, places=3)
        self.assertAlmostEqual(mat[('T', 'W')], -2.200, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -2.100, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 4.100, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -2.100, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], -2.200, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 7.500, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], -0.500, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 6.500, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.gonnet)
        self.assertEqual(len(mat), 210)
        self.assertAlmostEqual(mat[('A', 'A')], 2.400, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], 0.500, places=3)
        self.assertAlmostEqual(mat[('A', 'D')], -0.300, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -2.300, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 0.500, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], -0.800, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], -0.800, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], -0.400, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -1.200, places=3)
        self.assertAlmostEqual(mat[('A', 'M')], -0.700, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], -0.300, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], 0.300, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], -0.200, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], -0.600, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 1.100, places=3)
        self.assertAlmostEqual(mat[('A', 'T')], 0.600, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], 0.100, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -3.600, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -2.200, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 11.500, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -3.200, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], -0.800, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -1.300, places=3)
        self.assertAlmostEqual(mat[('C', 'I')], -1.100, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -2.800, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], -1.500, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -0.900, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -1.800, places=3)
        self.assertAlmostEqual(mat[('C', 'P')], -3.100, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -2.400, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -2.200, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], 0.100, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], -0.500, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], -0.500, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 4.700, places=3)
        self.assertAlmostEqual(mat[('D', 'E')], 2.700, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -4.500, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], 0.100, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], 0.400, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -3.800, places=3)
        self.assertAlmostEqual(mat[('D', 'K')], 0.500, places=3)
        self.assertAlmostEqual(mat[('D', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 2.200, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -0.700, places=3)
        self.assertAlmostEqual(mat[('D', 'Q')], 0.900, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -0.300, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], 0.500, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -2.900, places=3)
        self.assertAlmostEqual(mat[('D', 'W')], -5.200, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], -2.800, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 3.600, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -3.900, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], -0.800, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], 0.400, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -2.700, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], 1.200, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -2.800, places=3)
        self.assertAlmostEqual(mat[('E', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], 0.900, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], -0.500, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 1.700, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], 0.400, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], 0.200, places=3)
        self.assertAlmostEqual(mat[('E', 'T')], -0.100, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -1.900, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -4.300, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -2.700, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 7.000, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -5.200, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], -0.100, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -3.300, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], 1.600, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -3.100, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -3.800, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -2.600, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -3.200, places=3)
        self.assertAlmostEqual(mat[('F', 'S')], -2.800, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -2.200, places=3)
        self.assertAlmostEqual(mat[('F', 'V')], 0.100, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 3.600, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 5.100, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 6.600, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -1.400, places=3)
        self.assertAlmostEqual(mat[('G', 'I')], -4.500, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -1.100, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -4.400, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -3.500, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], 0.400, places=3)
        self.assertAlmostEqual(mat[('G', 'P')], -1.600, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], 0.400, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], -1.100, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], -3.300, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 6.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -2.200, places=3)
        self.assertAlmostEqual(mat[('H', 'K')], 0.600, places=3)
        self.assertAlmostEqual(mat[('H', 'L')], -1.900, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], -1.300, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 1.200, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], -1.100, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 1.200, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 0.600, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -0.200, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -0.300, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'W')], -0.800, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], 2.200, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], -2.100, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 2.800, places=3)
        self.assertAlmostEqual(mat[('I', 'M')], 2.500, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -2.800, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -2.600, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -1.900, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -2.400, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -1.800, places=3)
        self.assertAlmostEqual(mat[('I', 'T')], -0.600, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 3.100, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -1.800, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], -0.700, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 3.200, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -2.100, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], -1.400, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 0.800, places=3)
        self.assertAlmostEqual(mat[('K', 'P')], -0.600, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 1.500, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 2.700, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], 0.100, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], 0.100, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -1.700, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], -3.500, places=3)
        self.assertAlmostEqual(mat[('K', 'Y')], -2.100, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 2.800, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -2.300, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -1.600, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -2.200, places=3)
        self.assertAlmostEqual(mat[('L', 'S')], -2.100, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], -1.300, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 1.800, places=3)
        self.assertAlmostEqual(mat[('L', 'W')], -0.700, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 4.300, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], -2.200, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -2.400, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], -1.700, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -1.400, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], -0.600, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 1.600, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], -0.200, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 3.800, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], -0.900, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 0.700, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], 0.300, places=3)
        self.assertAlmostEqual(mat[('N', 'S')], 0.900, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 0.500, places=3)
        self.assertAlmostEqual(mat[('N', 'V')], -2.200, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -3.600, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -1.400, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 7.600, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], -0.200, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], -0.900, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], 0.400, places=3)
        self.assertAlmostEqual(mat[('P', 'T')], 0.100, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -1.800, places=3)
        self.assertAlmostEqual(mat[('P', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -3.100, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 2.700, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 1.500, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], 0.200, places=3)
        self.assertAlmostEqual(mat[('Q', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -1.500, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -2.700, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -1.700, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 4.700, places=3)
        self.assertAlmostEqual(mat[('R', 'S')], -0.200, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -0.200, places=3)
        self.assertAlmostEqual(mat[('R', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], -1.600, places=3)
        self.assertAlmostEqual(mat[('R', 'Y')], -1.800, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 2.200, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 1.500, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], -3.300, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], -1.900, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 2.500, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'W')], -3.500, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -1.900, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 3.400, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -2.600, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], -1.100, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 14.200, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], 4.100, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 7.800, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.grant)
        self.assertEqual(len(mat), 210)
        self.assertAlmostEqual(mat[('A', 'A')], 215.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], 20.000, places=3)
        self.assertAlmostEqual(mat[('A', 'D')], 89.000, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], 108.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], 102.000, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 155.000, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], 129.000, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], 121.000, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], 109.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], 119.000, places=3)
        self.assertAlmostEqual(mat[('A', 'M')], 131.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], 104.000, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], 188.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], 124.000, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], 103.000, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 116.000, places=3)
        self.assertAlmostEqual(mat[('A', 'T')], 157.000, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], 151.000, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], 67.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], 103.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 215.000, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], 61.000, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], 45.000, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], 10.000, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], 56.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], 41.000, places=3)
        self.assertAlmostEqual(mat[('C', 'I')], 17.000, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], 13.000, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], 17.000, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], 19.000, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], 76.000, places=3)
        self.assertAlmostEqual(mat[('C', 'P')], 46.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], 61.000, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], 35.000, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], 103.000, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], 66.000, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], 23.000, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], 21.000, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 215.000, places=3)
        self.assertAlmostEqual(mat[('D', 'E')], 170.000, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], 38.000, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], 121.000, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], 134.000, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], 47.000, places=3)
        self.assertAlmostEqual(mat[('D', 'K')], 114.000, places=3)
        self.assertAlmostEqual(mat[('D', 'L')], 43.000, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], 55.000, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 192.000, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], 107.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Q')], 154.000, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], 119.000, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], 150.000, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], 130.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], 63.000, places=3)
        self.assertAlmostEqual(mat[('D', 'W')], 34.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 215.000, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], 75.000, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], 117.000, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], 175.000, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], 81.000, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], 159.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], 77.000, places=3)
        self.assertAlmostEqual(mat[('E', 'M')], 89.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], 173.000, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], 122.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 186.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], 161.000, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], 135.000, places=3)
        self.assertAlmostEqual(mat[('E', 'T')], 150.000, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], 94.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], 63.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 215.000, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], 62.000, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], 115.000, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], 194.000, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], 113.000, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 193.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], 187.000, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], 57.000, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], 101.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], 99.000, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], 118.000, places=3)
        self.assertAlmostEqual(mat[('F', 'S')], 60.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], 112.000, places=3)
        self.assertAlmostEqual(mat[('F', 'V')], 165.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 175.000, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 215.000, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], 117.000, places=3)
        self.assertAlmostEqual(mat[('G', 'I')], 80.000, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], 88.000, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], 77.000, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], 88.000, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], 135.000, places=3)
        self.assertAlmostEqual(mat[('G', 'P')], 173.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], 128.000, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], 90.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], 159.000, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], 156.000, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], 106.000, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], 31.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 215.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], 121.000, places=3)
        self.assertAlmostEqual(mat[('H', 'K')], 183.000, places=3)
        self.assertAlmostEqual(mat[('H', 'L')], 116.000, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], 128.000, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 147.000, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], 138.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 191.000, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 186.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], 126.000, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], 168.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], 131.000, places=3)
        self.assertAlmostEqual(mat[('H', 'W')], 100.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 215.000, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], 113.000, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 210.000, places=3)
        self.assertAlmostEqual(mat[('I', 'M')], 205.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], 66.000, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], 120.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], 106.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], 118.000, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], 73.000, places=3)
        self.assertAlmostEqual(mat[('I', 'T')], 126.000, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 186.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], 154.000, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 215.000, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], 108.000, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], 120.000, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 121.000, places=3)
        self.assertAlmostEqual(mat[('K', 'P')], 112.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 162.000, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 189.000, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], 94.000, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], 137.000, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], 118.000, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], 105.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 215.000, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 200.000, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], 62.000, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], 117.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], 102.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], 113.000, places=3)
        self.assertAlmostEqual(mat[('L', 'S')], 70.000, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], 123.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 183.000, places=3)
        self.assertAlmostEqual(mat[('L', 'W')], 154.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 215.000, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], 73.000, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], 128.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], 114.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], 124.000, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], 80.000, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], 134.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 194.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], 148.000, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 215.000, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], 124.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 169.000, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], 129.000, places=3)
        self.assertAlmostEqual(mat[('N', 'S')], 169.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 150.000, places=3)
        self.assertAlmostEqual(mat[('N', 'V')], 82.000, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], 41.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 215.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], 139.000, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], 112.000, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], 141.000, places=3)
        self.assertAlmostEqual(mat[('P', 'T')], 177.000, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], 147.000, places=3)
        self.assertAlmostEqual(mat[('P', 'W')], 68.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 215.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 172.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], 147.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'T')], 173.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], 119.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], 85.000, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 215.000, places=3)
        self.assertAlmostEqual(mat[('R', 'S')], 105.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], 144.000, places=3)
        self.assertAlmostEqual(mat[('R', 'V')], 119.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], 114.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 215.000, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 157.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], 91.000, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], 38.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 215.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], 146.000, places=3)
        self.assertAlmostEqual(mat[('T', 'W')], 87.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 215.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], 127.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], 160.000, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 215.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'D')], 55.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'E')], 93.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'F')], 193.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'G')], 68.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'H')], 132.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'I')], 182.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'K')], 130.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'L')], 179.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'M')], 179.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'N')], 72.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'P')], 105.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Q')], 116.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'R')], 138.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'S')], 71.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'T')], 123.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'W')], 178.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 215.000, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.ident)
        self.assertEqual(len(mat), 210)
        self.assertAlmostEqual(mat[('A', 'A')], 6.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'D')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 6.000, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 6.000, places=3)
        self.assertAlmostEqual(mat[('D', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'L')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 6.000, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 6.000, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 6.000, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 6.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'L')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 6.000, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 6.000, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 6.000, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 6.000, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 6.000, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 6.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 6.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 6.000, places=3)
        self.assertAlmostEqual(mat[('R', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 6.000, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 6.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 6.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 6.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 6.000, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.johnson)
        self.assertEqual(len(mat), 210)
        self.assertAlmostEqual(mat[('A', 'A')], 6.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], -3.400, places=3)
        self.assertAlmostEqual(mat[('A', 'D')], -1.600, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], -0.700, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -3.200, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], -0.500, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -3.300, places=3)
        self.assertAlmostEqual(mat[('A', 'M')], -1.500, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], -1.400, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], -0.600, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], -1.600, places=3)
        self.assertAlmostEqual(mat[('A', 'T')], -0.800, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], -0.500, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 16.100, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -6.900, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -8.200, places=3)
        self.assertAlmostEqual(mat[('C', 'I')], -7.700, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -8.700, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], -8.700, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -7.600, places=3)
        self.assertAlmostEqual(mat[('C', 'P')], -8.900, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -6.900, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -5.600, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], -7.700, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], -4.800, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], -7.700, places=3)
        self.assertAlmostEqual(mat[('D', 'C')], -9.700, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 8.500, places=3)
        self.assertAlmostEqual(mat[('D', 'E')], 2.400, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], -2.100, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], -0.700, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -4.800, places=3)
        self.assertAlmostEqual(mat[('D', 'K')], -1.500, places=3)
        self.assertAlmostEqual(mat[('D', 'L')], -8.000, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -5.900, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -3.400, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], -0.200, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], -1.800, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -5.200, places=3)
        self.assertAlmostEqual(mat[('D', 'W')], -6.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 8.600, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -6.400, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], -2.500, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -5.600, places=3)
        self.assertAlmostEqual(mat[('E', 'M')], -2.800, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], -0.700, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 2.400, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], -0.200, places=3)
        self.assertAlmostEqual(mat[('E', 'T')], -0.500, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -4.200, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -7.600, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -3.700, places=3)
        self.assertAlmostEqual(mat[('F', 'C')], -4.400, places=3)
        self.assertAlmostEqual(mat[('F', 'D')], -7.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 10.400, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -8.600, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], -1.700, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], -0.600, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -3.800, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -6.400, places=3)
        self.assertAlmostEqual(mat[('F', 'S')], -4.800, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'V')], -1.300, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 3.400, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 3.400, places=3)
        self.assertAlmostEqual(mat[('G', 'C')], -8.200, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 8.000, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -3.200, places=3)
        self.assertAlmostEqual(mat[('G', 'I')], -5.500, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -3.500, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], -1.400, places=3)
        self.assertAlmostEqual(mat[('G', 'P')], -2.500, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -2.800, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -2.800, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], -1.300, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], -5.600, places=3)
        self.assertAlmostEqual(mat[('G', 'Y')], -5.400, places=3)
        self.assertAlmostEqual(mat[('H', 'A')], -3.100, places=3)
        self.assertAlmostEqual(mat[('H', 'E')], -2.300, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 12.700, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -5.100, places=3)
        self.assertAlmostEqual(mat[('H', 'K')], 0.100, places=3)
        self.assertAlmostEqual(mat[('H', 'L')], -4.200, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], -2.300, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], -4.300, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 0.100, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -2.600, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -3.900, places=3)
        self.assertAlmostEqual(mat[('H', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'A')], -2.200, places=3)
        self.assertAlmostEqual(mat[('I', 'E')], -4.800, places=3)
        self.assertAlmostEqual(mat[('I', 'F')], 0.500, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 8.100, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], -4.700, places=3)
        self.assertAlmostEqual(mat[('I', 'M')], 2.600, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -4.700, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -7.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -5.400, places=3)
        self.assertAlmostEqual(mat[('I', 'T')], -3.200, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 3.900, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -3.300, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], -2.500, places=3)
        self.assertAlmostEqual(mat[('K', 'A')], -0.900, places=3)
        self.assertAlmostEqual(mat[('K', 'E')], 1.100, places=3)
        self.assertAlmostEqual(mat[('K', 'F')], -5.600, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 7.600, places=3)
        self.assertAlmostEqual(mat[('K', 'P')], -0.600, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 1.100, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 3.200, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], -1.500, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -3.700, places=3)
        self.assertAlmostEqual(mat[('K', 'Y')], -3.700, places=3)
        self.assertAlmostEqual(mat[('L', 'F')], 1.800, places=3)
        self.assertAlmostEqual(mat[('L', 'G')], -7.200, places=3)
        self.assertAlmostEqual(mat[('L', 'I')], 2.600, places=3)
        self.assertAlmostEqual(mat[('L', 'K')], -3.400, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 7.300, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -2.800, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -4.400, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -3.700, places=3)
        self.assertAlmostEqual(mat[('L', 'S')], -5.200, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], -4.600, places=3)
        self.assertAlmostEqual(mat[('M', 'C')], -4.400, places=3)
        self.assertAlmostEqual(mat[('M', 'G')], -5.200, places=3)
        self.assertAlmostEqual(mat[('M', 'K')], -1.900, places=3)
        self.assertAlmostEqual(mat[('M', 'L')], 4.400, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 11.200, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], -3.700, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], -0.600, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], -4.200, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], -3.200, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 0.700, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -0.900, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], -1.300, places=3)
        self.assertAlmostEqual(mat[('N', 'D')], 2.600, places=3)
        self.assertAlmostEqual(mat[('N', 'H')], 1.700, places=3)
        self.assertAlmostEqual(mat[('N', 'K')], 0.100, places=3)
        self.assertAlmostEqual(mat[('N', 'L')], -4.800, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 8.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], -0.800, places=3)
        self.assertAlmostEqual(mat[('N', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 0.100, places=3)
        self.assertAlmostEqual(mat[('N', 'V')], -5.700, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -1.300, places=3)
        self.assertAlmostEqual(mat[('P', 'A')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'E')], -1.500, places=3)
        self.assertAlmostEqual(mat[('P', 'I')], -5.700, places=3)
        self.assertAlmostEqual(mat[('P', 'M')], -9.800, places=3)
        self.assertAlmostEqual(mat[('P', 'N')], -2.400, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 10.300, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'W')], -7.400, places=3)
        self.assertAlmostEqual(mat[('Q', 'D')], -1.100, places=3)
        self.assertAlmostEqual(mat[('Q', 'H')], 1.400, places=3)
        self.assertAlmostEqual(mat[('Q', 'P')], -3.600, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 9.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 2.100, places=3)
        self.assertAlmostEqual(mat[('Q', 'T')], -0.400, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -3.600, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -8.200, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -5.100, places=3)
        self.assertAlmostEqual(mat[('R', 'F')], -6.000, places=3)
        self.assertAlmostEqual(mat[('R', 'N')], -1.500, places=3)
        self.assertAlmostEqual(mat[('R', 'P')], -3.600, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 10.000, places=3)
        self.assertAlmostEqual(mat[('R', 'S')], -0.600, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -1.400, places=3)
        self.assertAlmostEqual(mat[('R', 'V')], -4.900, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], -3.800, places=3)
        self.assertAlmostEqual(mat[('R', 'Y')], -2.100, places=3)
        self.assertAlmostEqual(mat[('S', 'A')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'E')], -2.200, places=3)
        self.assertAlmostEqual(mat[('S', 'I')], -4.700, places=3)
        self.assertAlmostEqual(mat[('S', 'M')], -4.800, places=3)
        self.assertAlmostEqual(mat[('S', 'Q')], -1.200, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 5.800, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -4.300, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], -3.400, places=3)
        self.assertAlmostEqual(mat[('T', 'C')], -6.000, places=3)
        self.assertAlmostEqual(mat[('T', 'G')], -3.800, places=3)
        self.assertAlmostEqual(mat[('T', 'K')], -0.200, places=3)
        self.assertAlmostEqual(mat[('T', 'S')], 2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 6.800, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], -1.900, places=3)
        self.assertAlmostEqual(mat[('T', 'W')], -9.300, places=3)
        self.assertAlmostEqual(mat[('V', 'L')], 1.800, places=3)
        self.assertAlmostEqual(mat[('V', 'P')], -5.200, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 7.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -4.900, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], -1.800, places=3)
        self.assertAlmostEqual(mat[('W', 'A')], -5.800, places=3)
        self.assertAlmostEqual(mat[('W', 'C')], -9.100, places=3)
        self.assertAlmostEqual(mat[('W', 'G')], -6.300, places=3)
        self.assertAlmostEqual(mat[('W', 'K')], -5.400, places=3)
        self.assertAlmostEqual(mat[('W', 'L')], -1.000, places=3)
        self.assertAlmostEqual(mat[('W', 'N')], -6.100, places=3)
        self.assertAlmostEqual(mat[('W', 'S')], -6.200, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 15.200, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], 2.300, places=3)
        self.assertAlmostEqual(mat[('Y', 'D')], -3.800, places=3)
        self.assertAlmostEqual(mat[('Y', 'H')], -0.400, places=3)
        self.assertAlmostEqual(mat[('Y', 'L')], -2.400, places=3)
        self.assertAlmostEqual(mat[('Y', 'P')], -7.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'T')], -2.700, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 10.500, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.levin)
        self.assertEqual(len(mat), 210)
        self.assertAlmostEqual(mat[('A', 'A')], 2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'D')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'M')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'I')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'P')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'E')], 1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'L')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('G', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('G', 'P')], 0.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'L')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 0.000, places=3)
        self.assertAlmostEqual(mat[('I', 'M')], 0.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], 0.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'P')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'W')], 0.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 3.000, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('R', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('R', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], 0.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], 0.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 2.000, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.mclach)
        self.assertEqual(len(mat), 210)
        self.assertAlmostEqual(mat[('A', 'A')], 8.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'D')], 3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], 4.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], 3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], 2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], 3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], 2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'M')], 3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], 3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], 4.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], 3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 4.000, places=3)
        self.assertAlmostEqual(mat[('A', 'T')], 3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], 3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], 1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 9.000, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], 1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], 1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], 3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], 3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'P')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], 1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], 2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], 2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], 2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], 1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 8.000, places=3)
        self.assertAlmostEqual(mat[('D', 'E')], 5.000, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], 1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], 3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], 4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'K')], 3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'L')], 1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], 2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 5.000, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], 3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Q')], 4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], 1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], 3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], 3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'W')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 8.000, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], 3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], 4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'M')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], 4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], 4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 5.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], 3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], 4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'T')], 4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 9.000, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], 4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], 3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], 5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'S')], 2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'V')], 3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 6.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 6.000, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 8.000, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], 2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], 3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], 1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], 1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], 3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'P')], 3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], 3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], 3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], 2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 8.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], 2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'K')], 4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'L')], 2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], 3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], 3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 5.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], 3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], 4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'W')], 3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], 4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 8.000, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], 1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 5.000, places=3)
        self.assertAlmostEqual(mat[('I', 'M')], 5.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], 1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], 1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'T')], 3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 5.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], 3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], 3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 8.000, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], 2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], 1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 4.000, places=3)
        self.assertAlmostEqual(mat[('K', 'P')], 3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 4.000, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 5.000, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], 3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], 3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Y')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 8.000, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 6.000, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], 3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'S')], 2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], 3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 5.000, places=3)
        self.assertAlmostEqual(mat[('L', 'W')], 3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], 3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 8.000, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], 2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], 3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], 2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], 3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 4.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 8.000, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], 1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 4.000, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], 3.000, places=3)
        self.assertAlmostEqual(mat[('N', 'S')], 5.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 3.000, places=3)
        self.assertAlmostEqual(mat[('N', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 8.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], 3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], 3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], 3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'T')], 3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'W')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 8.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 5.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], 4.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'T')], 3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], 2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], 1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 8.000, places=3)
        self.assertAlmostEqual(mat[('R', 'S')], 4.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], 3.000, places=3)
        self.assertAlmostEqual(mat[('R', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], 3.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 8.000, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 5.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], 3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], 3.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 8.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], 3.000, places=3)
        self.assertAlmostEqual(mat[('T', 'W')], 2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], 1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 8.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], 2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], 3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 9.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], 6.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 9.000, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.miyata)
        self.assertEqual(len(mat), 210)
        self.assertAlmostEqual(mat[('A', 'A')], 1.250, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], -0.140, places=3)
        self.assertAlmostEqual(mat[('A', 'D')], -1.120, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], -1.210, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -1.980, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 0.340, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], -0.920, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], -1.440, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], -1.710, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -1.510, places=3)
        self.assertAlmostEqual(mat[('A', 'M')], -1.170, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], -0.530, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], 1.190, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], -0.670, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], -1.670, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 0.740, places=3)
        self.assertAlmostEqual(mat[('A', 'T')], 0.350, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], -0.600, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -2.980, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -1.930, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 1.250, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -2.230, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -2.010, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], -0.990, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], -0.970, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -1.310, places=3)
        self.assertAlmostEqual(mat[('C', 'I')], -0.380, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -2.020, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], -0.400, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -0.210, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -1.580, places=3)
        self.assertAlmostEqual(mat[('C', 'P')], -0.080, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -1.230, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -1.810, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], -0.590, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], -0.200, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], 0.390, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], -2.090, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], -1.130, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 1.250, places=3)
        self.assertAlmostEqual(mat[('D', 'E')], 0.350, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -3.020, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], -1.120, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], -0.470, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -2.730, places=3)
        self.assertAlmostEqual(mat[('D', 'K')], -0.800, places=3)
        self.assertAlmostEqual(mat[('D', 'L')], -2.850, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -2.440, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 0.600, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -1.150, places=3)
        self.assertAlmostEqual(mat[('D', 'Q')], -0.220, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -1.090, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], -0.620, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], -0.800, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -2.150, places=3)
        self.assertAlmostEqual(mat[('D', 'W')], -3.630, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], -2.700, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 1.250, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -2.340, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], -1.530, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], 0.290, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -2.140, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], 0.110, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -2.280, places=3)
        self.assertAlmostEqual(mat[('E', 'M')], -1.880, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], 0.400, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], -1.230, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 0.410, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], -0.200, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], -0.810, places=3)
        self.assertAlmostEqual(mat[('E', 'T')], -0.580, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -1.720, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -2.830, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -1.970, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 1.250, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -2.890, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], -1.380, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], 0.640, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -1.600, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 0.620, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], 0.430, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -2.450, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -1.920, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -1.560, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -1.220, places=3)
        self.assertAlmostEqual(mat[('F', 'S')], -2.200, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -1.350, places=3)
        self.assertAlmostEqual(mat[('F', 'V')], -0.180, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 0.140, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 0.770, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 1.250, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -1.530, places=3)
        self.assertAlmostEqual(mat[('G', 'I')], -2.350, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -2.290, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -2.420, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -2.090, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], -0.710, places=3)
        self.assertAlmostEqual(mat[('G', 'P')], 0.280, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -1.230, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -2.330, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], 0.400, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], -0.450, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], -1.510, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], -3.880, places=3)
        self.assertAlmostEqual(mat[('G', 'Y')], -2.830, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 1.250, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -1.200, places=3)
        self.assertAlmostEqual(mat[('H', 'K')], 0.460, places=3)
        self.assertAlmostEqual(mat[('H', 'L')], -1.340, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], -0.940, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], -0.040, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], -0.900, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 0.930, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 0.430, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -0.690, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -0.070, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -0.860, places=3)
        self.assertAlmostEqual(mat[('H', 'W')], -1.910, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], -1.020, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 1.250, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], -1.590, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 1.110, places=3)
        self.assertAlmostEqual(mat[('I', 'M')], 0.960, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -2.120, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -1.370, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -1.320, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -1.240, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -1.700, places=3)
        self.assertAlmostEqual(mat[('I', 'T')], -0.890, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 0.400, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -0.470, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], 0.390, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 1.250, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -1.730, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], -1.380, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], -0.590, places=3)
        self.assertAlmostEqual(mat[('K', 'P')], -1.690, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 0.190, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 0.850, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], -1.460, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], -0.850, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -1.450, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], -1.860, places=3)
        self.assertAlmostEqual(mat[('K', 'Y')], -1.170, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 1.250, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 0.840, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -2.240, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -1.450, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -1.450, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -1.370, places=3)
        self.assertAlmostEqual(mat[('L', 'S')], -1.790, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 0.340, places=3)
        self.assertAlmostEqual(mat[('L', 'W')], -0.480, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], 0.310, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 1.250, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], -1.830, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -1.110, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], -1.050, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], -1.040, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -1.420, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], -0.610, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 0.630, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -0.640, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], 0.320, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 1.250, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], -0.550, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 0.260, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], -0.790, places=3)
        self.assertAlmostEqual(mat[('N', 'S')], -0.060, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], -0.150, places=3)
        self.assertAlmostEqual(mat[('N', 'V')], -1.510, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -3.140, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -2.170, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 1.250, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], -0.670, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], -1.650, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], 0.690, places=3)
        self.assertAlmostEqual(mat[('P', 'T')], 0.380, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -0.540, places=3)
        self.assertAlmostEqual(mat[('P', 'W')], -2.920, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -1.870, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 1.250, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 0.120, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], -0.400, places=3)
        self.assertAlmostEqual(mat[('Q', 'T')], 0.130, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -0.880, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -2.170, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -1.230, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 1.250, places=3)
        self.assertAlmostEqual(mat[('R', 'S')], -1.490, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -0.780, places=3)
        self.assertAlmostEqual(mat[('R', 'V')], -1.180, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], -1.470, places=3)
        self.assertAlmostEqual(mat[('R', 'Y')], -0.770, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 1.250, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 0.360, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -0.900, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], -3.130, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], -2.080, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 1.250, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], -0.170, places=3)
        self.assertAlmostEqual(mat[('T', 'W')], -2.250, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -1.200, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 1.250, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -1.260, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], -0.270, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 1.250, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], 0.190, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 1.250, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.nwsgappep)
        self.assertEqual(len(mat), 253)
        self.assertAlmostEqual(mat[('A', 'A')], 1.500, places=3)
        self.assertAlmostEqual(mat[('A', 'B')], 0.200, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], 0.300, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -0.500, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 0.700, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], -0.100, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], 0.200, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], 0.500, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], 0.200, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 0.400, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], 0.200, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -0.800, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -0.300, places=3)
        self.assertAlmostEqual(mat[('A', 'Z')], 0.200, places=3)
        self.assertAlmostEqual(mat[('B', 'B')], 1.100, places=3)
        self.assertAlmostEqual(mat[('B', 'C')], -0.400, places=3)
        self.assertAlmostEqual(mat[('B', 'D')], 1.100, places=3)
        self.assertAlmostEqual(mat[('B', 'E')], 0.700, places=3)
        self.assertAlmostEqual(mat[('B', 'G')], 0.600, places=3)
        self.assertAlmostEqual(mat[('B', 'K')], 0.400, places=3)
        self.assertAlmostEqual(mat[('B', 'L')], -0.500, places=3)
        self.assertAlmostEqual(mat[('B', 'M')], -0.300, places=3)
        self.assertAlmostEqual(mat[('B', 'N')], 1.100, places=3)
        self.assertAlmostEqual(mat[('B', 'Q')], 0.500, places=3)
        self.assertAlmostEqual(mat[('B', 'R')], 0.100, places=3)
        self.assertAlmostEqual(mat[('B', 'T')], 0.200, places=3)
        self.assertAlmostEqual(mat[('B', 'V')], -0.200, places=3)
        self.assertAlmostEqual(mat[('B', 'W')], -0.700, places=3)
        self.assertAlmostEqual(mat[('B', 'Z')], 0.600, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 1.500, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -0.500, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -0.600, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], -0.100, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], 0.200, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -0.100, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -0.600, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -0.600, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -0.600, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -0.300, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], 0.700, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], 0.200, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], -1.200, places=3)
        self.assertAlmostEqual(mat[('C', 'Z')], -0.600, places=3)
        self.assertAlmostEqual(mat[('D', 'A')], 0.300, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 1.500, places=3)
        self.assertAlmostEqual(mat[('D', 'E')], 1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], 0.400, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -0.200, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 0.700, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], 0.100, places=3)
        self.assertAlmostEqual(mat[('D', 'Q')], 0.700, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], 0.200, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -0.200, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], -0.500, places=3)
        self.assertAlmostEqual(mat[('E', 'A')], 0.300, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 1.500, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -0.700, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], 0.500, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], 0.400, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -0.200, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -0.300, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], 0.500, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], 0.100, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 0.700, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], 0.200, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -0.200, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -1.100, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -0.500, places=3)
        self.assertAlmostEqual(mat[('F', 'B')], -0.700, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 1.500, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -0.600, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -0.700, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 1.200, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], 0.500, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -0.500, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -0.800, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -0.500, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -0.300, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 1.300, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 1.400, places=3)
        self.assertAlmostEqual(mat[('F', 'Z')], -0.700, places=3)
        self.assertAlmostEqual(mat[('G', 'D')], 0.700, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 1.500, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -0.200, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -0.100, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -0.500, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -0.300, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -0.300, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], 0.600, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], 0.400, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Z')], 0.300, places=3)
        self.assertAlmostEqual(mat[('H', 'B')], 0.400, places=3)
        self.assertAlmostEqual(mat[('H', 'F')], -0.100, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 1.500, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -0.300, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 0.500, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], 0.200, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 0.700, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 0.500, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -0.200, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -0.300, places=3)
        self.assertAlmostEqual(mat[('H', 'W')], -0.100, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], 0.300, places=3)
        self.assertAlmostEqual(mat[('I', 'B')], -0.200, places=3)
        self.assertAlmostEqual(mat[('I', 'C')], 0.200, places=3)
        self.assertAlmostEqual(mat[('I', 'F')], 0.700, places=3)
        self.assertAlmostEqual(mat[('I', 'G')], -0.300, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 1.500, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 0.800, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -0.300, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -0.200, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -0.300, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -0.100, places=3)
        self.assertAlmostEqual(mat[('I', 'T')], 0.200, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 1.100, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -0.500, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], 0.100, places=3)
        self.assertAlmostEqual(mat[('K', 'A')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'D')], 0.300, places=3)
        self.assertAlmostEqual(mat[('K', 'E')], 0.300, places=3)
        self.assertAlmostEqual(mat[('K', 'H')], 0.100, places=3)
        self.assertAlmostEqual(mat[('K', 'I')], -0.200, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 1.500, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -0.300, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], 0.200, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 0.400, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 0.800, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], 0.200, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], 0.200, places=3)
        self.assertAlmostEqual(mat[('K', 'Z')], 0.400, places=3)
        self.assertAlmostEqual(mat[('L', 'A')], -0.100, places=3)
        self.assertAlmostEqual(mat[('L', 'C')], -0.800, places=3)
        self.assertAlmostEqual(mat[('L', 'D')], -0.500, places=3)
        self.assertAlmostEqual(mat[('L', 'H')], -0.200, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 1.500, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -0.400, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -0.100, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -0.400, places=3)
        self.assertAlmostEqual(mat[('L', 'S')], -0.400, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 0.800, places=3)
        self.assertAlmostEqual(mat[('L', 'W')], 0.500, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], 0.300, places=3)
        self.assertAlmostEqual(mat[('M', 'A')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'D')], -0.400, places=3)
        self.assertAlmostEqual(mat[('M', 'E')], -0.200, places=3)
        self.assertAlmostEqual(mat[('M', 'H')], -0.300, places=3)
        self.assertAlmostEqual(mat[('M', 'I')], 0.600, places=3)
        self.assertAlmostEqual(mat[('M', 'L')], 1.300, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 1.500, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -0.200, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -0.300, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 0.600, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -0.300, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], -0.100, places=3)
        self.assertAlmostEqual(mat[('M', 'Z')], -0.100, places=3)
        self.assertAlmostEqual(mat[('N', 'C')], -0.300, places=3)
        self.assertAlmostEqual(mat[('N', 'G')], 0.400, places=3)
        self.assertAlmostEqual(mat[('N', 'M')], -0.300, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 1.500, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], 0.100, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 0.200, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -0.300, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -0.100, places=3)
        self.assertAlmostEqual(mat[('N', 'Z')], 0.400, places=3)
        self.assertAlmostEqual(mat[('P', 'B')], 0.100, places=3)
        self.assertAlmostEqual(mat[('P', 'C')], 0.100, places=3)
        self.assertAlmostEqual(mat[('P', 'F')], -0.700, places=3)
        self.assertAlmostEqual(mat[('P', 'G')], 0.300, places=3)
        self.assertAlmostEqual(mat[('P', 'K')], 0.100, places=3)
        self.assertAlmostEqual(mat[('P', 'L')], -0.300, places=3)
        self.assertAlmostEqual(mat[('P', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 1.500, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], 0.300, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], 0.400, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], 0.100, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -0.800, places=3)
        self.assertAlmostEqual(mat[('Q', 'G')], 0.200, places=3)
        self.assertAlmostEqual(mat[('Q', 'K')], 0.400, places=3)
        self.assertAlmostEqual(mat[('Q', 'N')], 0.400, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 1.500, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], -0.100, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -0.200, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -0.500, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -0.600, places=3)
        self.assertAlmostEqual(mat[('Q', 'Z')], 1.100, places=3)
        self.assertAlmostEqual(mat[('R', 'A')], -0.300, places=3)
        self.assertAlmostEqual(mat[('R', 'D')], 0.000, places=3)
        self.assertAlmostEqual(mat[('R', 'E')], 0.000, places=3)
        self.assertAlmostEqual(mat[('R', 'I')], -0.300, places=3)
        self.assertAlmostEqual(mat[('R', 'M')], 0.200, places=3)
        self.assertAlmostEqual(mat[('R', 'P')], 0.300, places=3)
        self.assertAlmostEqual(mat[('R', 'Q')], 0.400, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 1.500, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -0.100, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], 1.400, places=3)
        self.assertAlmostEqual(mat[('R', 'Y')], -0.600, places=3)
        self.assertAlmostEqual(mat[('R', 'Z')], 0.200, places=3)
        self.assertAlmostEqual(mat[('S', 'B')], 0.300, places=3)
        self.assertAlmostEqual(mat[('S', 'F')], -0.300, places=3)
        self.assertAlmostEqual(mat[('S', 'N')], 0.300, places=3)
        self.assertAlmostEqual(mat[('S', 'R')], 0.100, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 1.500, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], 0.300, places=3)
        self.assertAlmostEqual(mat[('S', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'A')], 0.400, places=3)
        self.assertAlmostEqual(mat[('T', 'D')], 0.200, places=3)
        self.assertAlmostEqual(mat[('T', 'E')], 0.200, places=3)
        self.assertAlmostEqual(mat[('T', 'H')], -0.100, places=3)
        self.assertAlmostEqual(mat[('T', 'L')], -0.100, places=3)
        self.assertAlmostEqual(mat[('T', 'P')], 0.300, places=3)
        self.assertAlmostEqual(mat[('T', 'Q')], -0.100, places=3)
        self.assertAlmostEqual(mat[('T', 'S')], 0.300, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 1.500, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], 0.200, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -0.300, places=3)
        self.assertAlmostEqual(mat[('V', 'C')], 0.200, places=3)
        self.assertAlmostEqual(mat[('V', 'F')], 0.200, places=3)
        self.assertAlmostEqual(mat[('V', 'G')], 0.200, places=3)
        self.assertAlmostEqual(mat[('V', 'K')], -0.200, places=3)
        self.assertAlmostEqual(mat[('V', 'N')], -0.300, places=3)
        self.assertAlmostEqual(mat[('V', 'R')], -0.300, places=3)
        self.assertAlmostEqual(mat[('V', 'S')], -0.100, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 1.500, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -0.800, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], -0.100, places=3)
        self.assertAlmostEqual(mat[('V', 'Z')], -0.200, places=3)
        self.assertAlmostEqual(mat[('W', 'D')], -1.100, places=3)
        self.assertAlmostEqual(mat[('W', 'K')], 0.100, places=3)
        self.assertAlmostEqual(mat[('W', 'P')], -0.800, places=3)
        self.assertAlmostEqual(mat[('W', 'T')], -0.600, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 1.500, places=3)
        self.assertAlmostEqual(mat[('W', 'Z')], -0.800, places=3)
        self.assertAlmostEqual(mat[('Y', 'B')], -0.300, places=3)
        self.assertAlmostEqual(mat[('Y', 'C')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'G')], -0.700, places=3)
        self.assertAlmostEqual(mat[('Y', 'K')], -0.600, places=3)
        self.assertAlmostEqual(mat[('Y', 'S')], -0.400, places=3)
        self.assertAlmostEqual(mat[('Y', 'W')], 1.100, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 1.500, places=3)
        self.assertAlmostEqual(mat[('Y', 'Z')], -0.600, places=3)
        self.assertAlmostEqual(mat[('Z', 'D')], 0.900, places=3)
        self.assertAlmostEqual(mat[('Z', 'E')], 1.100, places=3)
        self.assertAlmostEqual(mat[('Z', 'H')], 0.500, places=3)
        self.assertAlmostEqual(mat[('Z', 'I')], -0.200, places=3)
        self.assertAlmostEqual(mat[('Z', 'L')], -0.200, places=3)
        self.assertAlmostEqual(mat[('Z', 'P')], 0.200, places=3)
        self.assertAlmostEqual(mat[('Z', 'T')], 0.100, places=3)
        self.assertAlmostEqual(mat[('Z', 'Z')], 1.100, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.pam120)
        self.assertEqual(len(mat), 276)
        self.assertAlmostEqual(mat[('A', 'A')], 3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'B')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -4.000, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -7.000, places=3)
        self.assertAlmostEqual(mat[('A', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'B')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'C')], -6.000, places=3)
        self.assertAlmostEqual(mat[('B', 'D')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'E')], 3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'F')], -5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'H')], 1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'M')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'N')], 3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'W')], -6.000, places=3)
        self.assertAlmostEqual(mat[('B', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Z')], 2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 9.000, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -7.000, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -7.000, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], -6.000, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -7.000, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], -7.000, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -6.000, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -7.000, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], -8.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Z')], -7.000, places=3)
        self.assertAlmostEqual(mat[('D', 'A')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 5.000, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -7.000, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], -5.000, places=3)
        self.assertAlmostEqual(mat[('E', 'D')], 3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 5.000, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -7.000, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -8.000, places=3)
        self.assertAlmostEqual(mat[('E', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -5.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Z')], 4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 8.000, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -7.000, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -6.000, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'X')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Z')], -6.000, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 5.000, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -5.000, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], -8.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 7.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], -4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'C')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'G')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 6.000, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -6.000, places=3)
        self.assertAlmostEqual(mat[('I', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'D')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 5.000, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'D')], -5.000, places=3)
        self.assertAlmostEqual(mat[('L', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 5.000, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'A')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'E')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 8.000, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -6.000, places=3)
        self.assertAlmostEqual(mat[('M', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 4.000, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('N', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'C')], -4.000, places=3)
        self.assertAlmostEqual(mat[('P', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 6.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -6.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'D')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 6.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -6.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -5.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Z')], 4.000, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 6.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('S', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('T', 'A')], 1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'E')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'I')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 4.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 5.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -8.000, places=3)
        self.assertAlmostEqual(mat[('V', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'D')], -8.000, places=3)
        self.assertAlmostEqual(mat[('W', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'P')], -7.000, places=3)
        self.assertAlmostEqual(mat[('W', 'T')], -6.000, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 12.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Z')], -7.000, places=3)
        self.assertAlmostEqual(mat[('X', 'C')], -4.000, places=3)
        self.assertAlmostEqual(mat[('X', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('X', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'G')], -6.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'K')], -5.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'R')], -5.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 8.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Z')], -5.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'D')], 3.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'H')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'Z')], 4.000, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.pam180)
        self.assertEqual(len(mat), 276)
        self.assertAlmostEqual(mat[('A', 'A')], 3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'B')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -5.000, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -8.000, places=3)
        self.assertAlmostEqual(mat[('A', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -5.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'B')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'C')], -6.000, places=3)
        self.assertAlmostEqual(mat[('B', 'D')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'E')], 3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'F')], -6.000, places=3)
        self.assertAlmostEqual(mat[('B', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'H')], 1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'L')], -5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'N')], 3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'W')], -7.000, places=3)
        self.assertAlmostEqual(mat[('B', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Z')], 3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 13.000, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -7.000, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -7.000, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], -6.000, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -7.000, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], -8.000, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -7.000, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -7.000, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], -10.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Z')], -7.000, places=3)
        self.assertAlmostEqual(mat[('D', 'A')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 5.000, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -8.000, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], -6.000, places=3)
        self.assertAlmostEqual(mat[('E', 'D')], 4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 5.000, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -7.000, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -5.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -9.000, places=3)
        self.assertAlmostEqual(mat[('E', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -6.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Z')], 5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 10.000, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -6.000, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -7.000, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -6.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -6.000, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -6.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'X')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 7.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Z')], -7.000, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 6.000, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -6.000, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], -9.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 8.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('I', 'C')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'G')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 6.000, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 5.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -7.000, places=3)
        self.assertAlmostEqual(mat[('I', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'D')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 6.000, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], 1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 4.000, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('L', 'D')], -6.000, places=3)
        self.assertAlmostEqual(mat[('L', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 7.000, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'A')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'E')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'I')], 2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 9.000, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -6.000, places=3)
        self.assertAlmostEqual(mat[('M', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 4.000, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('N', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Z')], 1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'C')], -4.000, places=3)
        self.assertAlmostEqual(mat[('P', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 8.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -7.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'D')], 2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 6.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -6.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -6.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Z')], 5.000, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 8.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], 2.000, places=3)
        self.assertAlmostEqual(mat[('R', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'F')], -4.000, places=3)
        self.assertAlmostEqual(mat[('S', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('S', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('T', 'A')], 2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'I')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'P')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 4.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'F')], -2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 6.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -8.000, places=3)
        self.assertAlmostEqual(mat[('V', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'D')], -9.000, places=3)
        self.assertAlmostEqual(mat[('W', 'H')], -4.000, places=3)
        self.assertAlmostEqual(mat[('W', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'P')], -7.000, places=3)
        self.assertAlmostEqual(mat[('W', 'T')], -7.000, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 18.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Z')], -8.000, places=3)
        self.assertAlmostEqual(mat[('X', 'C')], -4.000, places=3)
        self.assertAlmostEqual(mat[('X', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('X', 'W')], -6.000, places=3)
        self.assertAlmostEqual(mat[('X', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'G')], -7.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'K')], -6.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'R')], -6.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 11.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Z')], -6.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'D')], 3.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'H')], 2.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'Z')], 5.000, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.pam250)
        self.assertEqual(len(mat), 276)
        self.assertAlmostEqual(mat[('A', 'A')], 2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'B')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -6.000, places=3)
        self.assertAlmostEqual(mat[('A', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'B')], 3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'C')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'D')], 3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'E')], 3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'F')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'H')], 1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'I')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'K')], 1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'N')], 2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Z')], 2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 12.000, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], -6.000, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], -8.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Z')], -5.000, places=3)
        self.assertAlmostEqual(mat[('D', 'A')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -6.000, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], 1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], 1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'D')], 3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -5.000, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -7.000, places=3)
        self.assertAlmostEqual(mat[('E', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Z')], 3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 9.000, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 7.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Z')], -5.000, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 5.000, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], -7.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 6.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('I', 'C')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 5.000, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('I', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'D')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 5.000, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('L', 'D')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 6.000, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'A')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'E')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'I')], 2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 6.000, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('M', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('N', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Z')], 1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'C')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 6.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -5.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'D')], 2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 4.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Z')], 3.000, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 6.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], 2.000, places=3)
        self.assertAlmostEqual(mat[('R', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('T', 'A')], 1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'E')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'I')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'P')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 3.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'F')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 4.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -6.000, places=3)
        self.assertAlmostEqual(mat[('V', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'D')], -7.000, places=3)
        self.assertAlmostEqual(mat[('W', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'P')], -6.000, places=3)
        self.assertAlmostEqual(mat[('W', 'T')], -5.000, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 17.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Z')], -6.000, places=3)
        self.assertAlmostEqual(mat[('X', 'C')], -3.000, places=3)
        self.assertAlmostEqual(mat[('X', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('X', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('X', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'G')], -5.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'K')], -4.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 10.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'D')], 3.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'H')], 2.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'Z')], 3.000, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.pam30)
        self.assertEqual(len(mat), 276)
        self.assertAlmostEqual(mat[('A', 'A')], 6.000, places=3)
        self.assertAlmostEqual(mat[('A', 'B')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], -6.000, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -8.000, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], -7.000, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], -5.000, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], -7.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -6.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], -4.000, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], -7.000, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -13.000, places=3)
        self.assertAlmostEqual(mat[('A', 'X')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -8.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'B')], 6.000, places=3)
        self.assertAlmostEqual(mat[('B', 'C')], -12.000, places=3)
        self.assertAlmostEqual(mat[('B', 'D')], 6.000, places=3)
        self.assertAlmostEqual(mat[('B', 'E')], 1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'F')], -10.000, places=3)
        self.assertAlmostEqual(mat[('B', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'I')], -6.000, places=3)
        self.assertAlmostEqual(mat[('B', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'L')], -9.000, places=3)
        self.assertAlmostEqual(mat[('B', 'M')], -10.000, places=3)
        self.assertAlmostEqual(mat[('B', 'N')], 6.000, places=3)
        self.assertAlmostEqual(mat[('B', 'P')], -7.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'R')], -7.000, places=3)
        self.assertAlmostEqual(mat[('B', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'V')], -8.000, places=3)
        self.assertAlmostEqual(mat[('B', 'W')], -10.000, places=3)
        self.assertAlmostEqual(mat[('B', 'X')], -5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Y')], -6.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 10.000, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -14.000, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -14.000, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], -13.000, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], -9.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -7.000, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -14.000, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], -15.000, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -13.000, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -11.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -14.000, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -8.000, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], -8.000, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], -6.000, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], -15.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Z')], -14.000, places=3)
        self.assertAlmostEqual(mat[('D', 'A')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 8.000, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -15.000, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -7.000, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -11.000, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -8.000, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -10.000, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], -5.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -8.000, places=3)
        self.assertAlmostEqual(mat[('D', 'X')], -5.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], -11.000, places=3)
        self.assertAlmostEqual(mat[('E', 'D')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 8.000, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -14.000, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], -5.000, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -5.000, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -9.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], -5.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], -9.000, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -6.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -17.000, places=3)
        self.assertAlmostEqual(mat[('E', 'X')], -5.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -8.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Z')], 6.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 9.000, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -9.000, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], -6.000, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -14.000, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -9.000, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -10.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -13.000, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -9.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -9.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'X')], -8.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Z')], -13.000, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 6.000, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -9.000, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -7.000, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -10.000, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -8.000, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -7.000, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -9.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], -6.000, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], -5.000, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], -15.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Z')], -5.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 9.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -9.000, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], -10.000, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -6.000, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -7.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -6.000, places=3)
        self.assertAlmostEqual(mat[('H', 'X')], -5.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'C')], -6.000, places=3)
        self.assertAlmostEqual(mat[('I', 'G')], -11.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 8.000, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], -6.000, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -5.000, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -8.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -8.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -5.000, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -7.000, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -14.000, places=3)
        self.assertAlmostEqual(mat[('I', 'X')], -5.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], -6.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Z')], -6.000, places=3)
        self.assertAlmostEqual(mat[('K', 'D')], -4.000, places=3)
        self.assertAlmostEqual(mat[('K', 'H')], -6.000, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 7.000, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -8.000, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], -4.000, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -9.000, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], -12.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'D')], -12.000, places=3)
        self.assertAlmostEqual(mat[('L', 'H')], -6.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 7.000, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -7.000, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -7.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -5.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -8.000, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], -7.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'X')], -6.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], -7.000, places=3)
        self.assertAlmostEqual(mat[('M', 'A')], -5.000, places=3)
        self.assertAlmostEqual(mat[('M', 'E')], -7.000, places=3)
        self.assertAlmostEqual(mat[('M', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 11.000, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], -9.000, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -8.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], -4.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -5.000, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], -4.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -13.000, places=3)
        self.assertAlmostEqual(mat[('M', 'X')], -5.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], -11.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Z')], -5.000, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 8.000, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], -6.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], -6.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -8.000, places=3)
        self.assertAlmostEqual(mat[('N', 'X')], -3.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'C')], -8.000, places=3)
        self.assertAlmostEqual(mat[('P', 'G')], -6.000, places=3)
        self.assertAlmostEqual(mat[('P', 'K')], -6.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 8.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -6.000, places=3)
        self.assertAlmostEqual(mat[('P', 'X')], -5.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -13.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'D')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 8.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], -5.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -7.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -13.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'X')], -5.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -12.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Z')], 6.000, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 8.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -6.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('R', 'X')], -6.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('S', 'F')], -6.000, places=3)
        self.assertAlmostEqual(mat[('S', 'L')], -8.000, places=3)
        self.assertAlmostEqual(mat[('S', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 6.000, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -6.000, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], -7.000, places=3)
        self.assertAlmostEqual(mat[('T', 'A')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'E')], -6.000, places=3)
        self.assertAlmostEqual(mat[('T', 'I')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Q')], -5.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 7.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('T', 'X')], -4.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -6.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Z')], -6.000, places=3)
        self.assertAlmostEqual(mat[('V', 'F')], -8.000, places=3)
        self.assertAlmostEqual(mat[('V', 'N')], -8.000, places=3)
        self.assertAlmostEqual(mat[('V', 'R')], -8.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 7.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -15.000, places=3)
        self.assertAlmostEqual(mat[('V', 'X')], -5.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], -7.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Z')], -6.000, places=3)
        self.assertAlmostEqual(mat[('W', 'D')], -15.000, places=3)
        self.assertAlmostEqual(mat[('W', 'H')], -7.000, places=3)
        self.assertAlmostEqual(mat[('W', 'L')], -6.000, places=3)
        self.assertAlmostEqual(mat[('W', 'P')], -14.000, places=3)
        self.assertAlmostEqual(mat[('W', 'T')], -13.000, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 13.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], -5.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Z')], -14.000, places=3)
        self.assertAlmostEqual(mat[('X', 'C')], -9.000, places=3)
        self.assertAlmostEqual(mat[('X', 'G')], -5.000, places=3)
        self.assertAlmostEqual(mat[('X', 'K')], -5.000, places=3)
        self.assertAlmostEqual(mat[('X', 'S')], -3.000, places=3)
        self.assertAlmostEqual(mat[('X', 'W')], -11.000, places=3)
        self.assertAlmostEqual(mat[('X', 'X')], -5.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Y')], -7.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Z')], -5.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'G')], -14.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'K')], -9.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'R')], -10.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 10.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Z')], -9.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'D')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'L')], -7.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'S')], -5.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'Z')], 6.000, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.pam300)
        self.assertEqual(len(mat), 276)
        self.assertAlmostEqual(mat[('A', 'A')], 2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'B')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -4.000, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -6.000, places=3)
        self.assertAlmostEqual(mat[('A', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'B')], 3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'C')], -5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'D')], 3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'E')], 3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'F')], -5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'G')], 1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'H')], 1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'I')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'K')], 1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'N')], 2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'P')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'W')], -6.000, places=3)
        self.assertAlmostEqual(mat[('B', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Z')], 2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 15.000, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -6.000, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -6.000, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -6.000, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], -7.000, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -6.000, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -6.000, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], -9.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], 1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Z')], -6.000, places=3)
        self.assertAlmostEqual(mat[('D', 'A')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -6.000, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], 1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], 1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], -5.000, places=3)
        self.assertAlmostEqual(mat[('E', 'D')], 4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -6.000, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -8.000, places=3)
        self.assertAlmostEqual(mat[('E', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -5.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Z')], 3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 11.000, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -6.000, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 9.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Z')], -5.000, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 5.000, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], -8.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 7.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('I', 'C')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 5.000, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -6.000, places=3)
        self.assertAlmostEqual(mat[('I', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'D')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 5.000, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 4.000, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Z')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'D')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 7.000, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'A')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'E')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'I')], 3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 6.000, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('M', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('N', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Z')], 1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'C')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 6.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -5.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'D')], 2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 4.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Z')], 3.000, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 7.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], 3.000, places=3)
        self.assertAlmostEqual(mat[('R', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'F')], -4.000, places=3)
        self.assertAlmostEqual(mat[('S', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('T', 'A')], 1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'E')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'I')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'P')], 1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('V', 'F')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 5.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -7.000, places=3)
        self.assertAlmostEqual(mat[('V', 'X')], 0.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'D')], -7.000, places=3)
        self.assertAlmostEqual(mat[('W', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('W', 'P')], -6.000, places=3)
        self.assertAlmostEqual(mat[('W', 'T')], -6.000, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 22.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Z')], -6.000, places=3)
        self.assertAlmostEqual(mat[('X', 'C')], -3.000, places=3)
        self.assertAlmostEqual(mat[('X', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('X', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('X', 'X')], -1.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'G')], -6.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'K')], -5.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'R')], -5.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 12.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Z')], -5.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'D')], 3.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'H')], 2.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'Z')], 3.000, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.pam60)
        self.assertEqual(len(mat), 276)
        self.assertAlmostEqual(mat[('A', 'A')], 5.000, places=3)
        self.assertAlmostEqual(mat[('A', 'B')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], -5.000, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -6.000, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], -5.000, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], -5.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], -5.000, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -10.000, places=3)
        self.assertAlmostEqual(mat[('A', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -6.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'B')], 5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'C')], -9.000, places=3)
        self.assertAlmostEqual(mat[('B', 'D')], 5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'E')], 2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'F')], -8.000, places=3)
        self.assertAlmostEqual(mat[('B', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'L')], -7.000, places=3)
        self.assertAlmostEqual(mat[('B', 'M')], -6.000, places=3)
        self.assertAlmostEqual(mat[('B', 'N')], 5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'R')], -5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'V')], -5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'W')], -8.000, places=3)
        self.assertAlmostEqual(mat[('B', 'X')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Y')], -5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Z')], 1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 9.000, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -10.000, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -10.000, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], -9.000, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], -7.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -6.000, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -10.000, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], -11.000, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -10.000, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -7.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -10.000, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -6.000, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], -12.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Z')], -10.000, places=3)
        self.assertAlmostEqual(mat[('D', 'A')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 7.000, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -11.000, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -5.000, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -7.000, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -5.000, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -6.000, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -6.000, places=3)
        self.assertAlmostEqual(mat[('D', 'X')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], -8.000, places=3)
        self.assertAlmostEqual(mat[('E', 'D')], 3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 7.000, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -10.000, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -7.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], -6.000, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -12.000, places=3)
        self.assertAlmostEqual(mat[('E', 'X')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -7.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Z')], 5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 8.000, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -7.000, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -10.000, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -6.000, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -7.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -9.000, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -7.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -6.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'X')], -5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Z')], -10.000, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 6.000, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -6.000, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -5.000, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -8.000, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -6.000, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -5.000, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -7.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], -11.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 8.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -6.000, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], -7.000, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -5.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -5.000, places=3)
        self.assertAlmostEqual(mat[('H', 'X')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'C')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'G')], -7.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 7.000, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 0.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -6.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -5.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -10.000, places=3)
        self.assertAlmostEqual(mat[('I', 'X')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('K', 'D')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'H')], -4.000, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 6.000, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -6.000, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -6.000, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], -8.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'D')], -9.000, places=3)
        self.assertAlmostEqual(mat[('L', 'H')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 6.000, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -5.000, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -5.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -6.000, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], -5.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'X')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], -5.000, places=3)
        self.assertAlmostEqual(mat[('M', 'A')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'E')], -5.000, places=3)
        self.assertAlmostEqual(mat[('M', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 10.000, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], -6.000, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -6.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -4.000, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -9.000, places=3)
        self.assertAlmostEqual(mat[('M', 'X')], -3.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], -7.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 6.000, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -6.000, places=3)
        self.assertAlmostEqual(mat[('N', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'C')], -6.000, places=3)
        self.assertAlmostEqual(mat[('P', 'G')], -4.000, places=3)
        self.assertAlmostEqual(mat[('P', 'K')], -4.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 7.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('P', 'X')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -10.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'D')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 7.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -5.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -9.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'X')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -8.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Z')], 6.000, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 8.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -4.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], 0.000, places=3)
        self.assertAlmostEqual(mat[('R', 'X')], -4.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'F')], -5.000, places=3)
        self.assertAlmostEqual(mat[('S', 'L')], -6.000, places=3)
        self.assertAlmostEqual(mat[('S', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 5.000, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], -5.000, places=3)
        self.assertAlmostEqual(mat[('T', 'A')], 1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'E')], -4.000, places=3)
        self.assertAlmostEqual(mat[('T', 'I')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Q')], -4.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 6.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'X')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -5.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('V', 'F')], -5.000, places=3)
        self.assertAlmostEqual(mat[('V', 'N')], -5.000, places=3)
        self.assertAlmostEqual(mat[('V', 'R')], -5.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 6.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -11.000, places=3)
        self.assertAlmostEqual(mat[('V', 'X')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], -5.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Z')], -5.000, places=3)
        self.assertAlmostEqual(mat[('W', 'D')], -11.000, places=3)
        self.assertAlmostEqual(mat[('W', 'H')], -5.000, places=3)
        self.assertAlmostEqual(mat[('W', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('W', 'P')], -10.000, places=3)
        self.assertAlmostEqual(mat[('W', 'T')], -9.000, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 13.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Z')], -11.000, places=3)
        self.assertAlmostEqual(mat[('X', 'C')], -6.000, places=3)
        self.assertAlmostEqual(mat[('X', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('X', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('X', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('X', 'W')], -8.000, places=3)
        self.assertAlmostEqual(mat[('X', 'X')], -3.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Y')], -5.000, places=3)
        self.assertAlmostEqual(mat[('X', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'G')], -10.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'K')], -7.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'R')], -8.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 9.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Z')], -7.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'D')], 2.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'L')], -5.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'S')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'Z')], 5.000, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.pam90)
        self.assertEqual(len(mat), 253)
        self.assertAlmostEqual(mat[('A', 'A')], 4.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'D')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -5.000, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'T')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -8.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'A')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'B')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'C')], -7.000, places=3)
        self.assertAlmostEqual(mat[('B', 'D')], 5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'E')], 2.000, places=3)
        self.assertAlmostEqual(mat[('B', 'F')], -6.000, places=3)
        self.assertAlmostEqual(mat[('B', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'H')], 1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'L')], -5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'M')], -5.000, places=3)
        self.assertAlmostEqual(mat[('B', 'N')], 4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('B', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('B', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('B', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'W')], -7.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('B', 'Z')], 2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 9.000, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -8.000, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -8.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -8.000, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -6.000, places=3)
        self.assertAlmostEqual(mat[('C', 'P')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -8.000, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Z')], -8.000, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 6.000, places=3)
        self.assertAlmostEqual(mat[('D', 'E')], 4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -8.000, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -5.000, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Z')], 3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'A')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 6.000, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -8.000, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -5.000, places=3)
        self.assertAlmostEqual(mat[('E', 'M')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -10.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -6.000, places=3)
        self.assertAlmostEqual(mat[('F', 'C')], -7.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 8.000, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -6.000, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -8.000, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -7.000, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -6.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Z')], -8.000, places=3)
        self.assertAlmostEqual(mat[('G', 'C')], -5.000, places=3)
        self.assertAlmostEqual(mat[('G', 'D')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 5.000, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -5.000, places=3)
        self.assertAlmostEqual(mat[('G', 'I')], -5.000, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -5.000, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -5.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'A')], -4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'E')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 8.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -5.000, places=3)
        self.assertAlmostEqual(mat[('H', 'K')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Z')], 1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 6.000, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'M')], 1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -8.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'A')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'C')], -8.000, places=3)
        self.assertAlmostEqual(mat[('K', 'E')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 5.000, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -5.000, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'C')], -9.000, places=3)
        self.assertAlmostEqual(mat[('L', 'D')], -7.000, places=3)
        self.assertAlmostEqual(mat[('L', 'G')], -6.000, places=3)
        self.assertAlmostEqual(mat[('L', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 6.000, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -5.000, places=3)
        self.assertAlmostEqual(mat[('L', 'S')], -5.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Z')], -4.000, places=3)
        self.assertAlmostEqual(mat[('M', 'D')], -5.000, places=3)
        self.assertAlmostEqual(mat[('M', 'H')], -5.000, places=3)
        self.assertAlmostEqual(mat[('M', 'L')], 2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 9.000, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], -4.000, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -7.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], -6.000, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 5.000, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Z')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'F')], -6.000, places=3)
        self.assertAlmostEqual(mat[('P', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 7.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('P', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 6.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -7.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -6.000, places=3)
        self.assertAlmostEqual(mat[('R', 'A')], -4.000, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 7.000, places=3)
        self.assertAlmostEqual(mat[('R', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('R', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], 0.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Y')], -6.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Z')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'A')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'E')], -2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'F')], -4.000, places=3)
        self.assertAlmostEqual(mat[('S', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'N')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 4.000, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('T', 'D')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('T', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 5.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Z')], -2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'C')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'G')], -3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'K')], -5.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 6.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -9.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], -4.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Z')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'C')], -10.000, places=3)
        self.assertAlmostEqual(mat[('W', 'D')], -9.000, places=3)
        self.assertAlmostEqual(mat[('W', 'G')], -9.000, places=3)
        self.assertAlmostEqual(mat[('W', 'H')], -4.000, places=3)
        self.assertAlmostEqual(mat[('W', 'K')], -6.000, places=3)
        self.assertAlmostEqual(mat[('W', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'N')], -5.000, places=3)
        self.assertAlmostEqual(mat[('W', 'P')], -8.000, places=3)
        self.assertAlmostEqual(mat[('W', 'S')], -3.000, places=3)
        self.assertAlmostEqual(mat[('W', 'T')], -7.000, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 13.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Z')], -8.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'C')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'D')], -6.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'G')], -8.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'H')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'K')], -6.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'P')], -8.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'S')], -4.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'T')], -4.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 9.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Z')], -6.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'A')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'E')], 5.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'M')], -3.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'Q')], 5.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Z', 'Z')], 5.000, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.rao)
        self.assertEqual(len(mat), 210)
        self.assertAlmostEqual(mat[('A', 'A')], 16.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], 11.000, places=3)
        self.assertAlmostEqual(mat[('A', 'D')], 9.000, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], 10.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], 10.000, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 8.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], 11.000, places=3)
        self.assertAlmostEqual(mat[('A', 'M')], 11.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], 9.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], 11.000, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], 8.000, places=3)
        self.assertAlmostEqual(mat[('A', 'T')], 10.000, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], 9.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], 9.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 16.000, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], 9.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], 10.000, places=3)
        self.assertAlmostEqual(mat[('C', 'I')], 8.000, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], 9.000, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], 11.000, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], 9.000, places=3)
        self.assertAlmostEqual(mat[('C', 'P')], 7.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], 10.000, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], 8.000, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], 10.000, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], 8.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], 10.000, places=3)
        self.assertAlmostEqual(mat[('D', 'C')], 8.000, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 16.000, places=3)
        self.assertAlmostEqual(mat[('D', 'E')], 11.000, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], 9.000, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], 9.000, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], 3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'K')], 11.000, places=3)
        self.assertAlmostEqual(mat[('D', 'L')], 6.000, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], 5.000, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], 8.000, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], 10.000, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], 10.000, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], 9.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], 3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'W')], 6.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 16.000, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], 6.000, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], 6.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], 7.000, places=3)
        self.assertAlmostEqual(mat[('E', 'M')], 8.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], 10.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 11.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], 9.000, places=3)
        self.assertAlmostEqual(mat[('E', 'T')], 8.000, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], 4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], 7.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], 6.000, places=3)
        self.assertAlmostEqual(mat[('F', 'C')], 10.000, places=3)
        self.assertAlmostEqual(mat[('F', 'D')], 4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 16.000, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], 7.000, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], 9.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], 10.000, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], 6.000, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], 4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], 7.000, places=3)
        self.assertAlmostEqual(mat[('F', 'S')], 8.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], 10.000, places=3)
        self.assertAlmostEqual(mat[('F', 'V')], 11.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 11.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 10.000, places=3)
        self.assertAlmostEqual(mat[('G', 'C')], 8.000, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 16.000, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], 7.000, places=3)
        self.assertAlmostEqual(mat[('G', 'I')], 6.000, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], 7.000, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], 10.000, places=3)
        self.assertAlmostEqual(mat[('G', 'P')], 11.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], 8.000, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], 7.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], 11.000, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], 6.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Y')], 10.000, places=3)
        self.assertAlmostEqual(mat[('H', 'A')], 11.000, places=3)
        self.assertAlmostEqual(mat[('H', 'E')], 11.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 16.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], 8.000, places=3)
        self.assertAlmostEqual(mat[('H', 'K')], 11.000, places=3)
        self.assertAlmostEqual(mat[('H', 'L')], 10.000, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], 10.000, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], 5.000, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 10.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], 10.000, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], 10.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], 9.000, places=3)
        self.assertAlmostEqual(mat[('H', 'W')], 10.000, places=3)
        self.assertAlmostEqual(mat[('I', 'A')], 9.000, places=3)
        self.assertAlmostEqual(mat[('I', 'E')], 4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'F')], 12.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 16.000, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], 4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'M')], 9.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], 5.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], 6.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], 4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'T')], 10.000, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 12.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], 11.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], 10.000, places=3)
        self.assertAlmostEqual(mat[('K', 'A')], 10.000, places=3)
        self.assertAlmostEqual(mat[('K', 'E')], 11.000, places=3)
        self.assertAlmostEqual(mat[('K', 'F')], 6.000, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 16.000, places=3)
        self.assertAlmostEqual(mat[('K', 'P')], 6.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 12.000, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 11.000, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], 10.000, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], 5.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Y')], 7.000, places=3)
        self.assertAlmostEqual(mat[('L', 'F')], 11.000, places=3)
        self.assertAlmostEqual(mat[('L', 'G')], 6.000, places=3)
        self.assertAlmostEqual(mat[('L', 'I')], 10.000, places=3)
        self.assertAlmostEqual(mat[('L', 'K')], 7.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 16.000, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], 4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], 9.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], 6.000, places=3)
        self.assertAlmostEqual(mat[('L', 'S')], 8.000, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], 9.000, places=3)
        self.assertAlmostEqual(mat[('M', 'C')], 10.000, places=3)
        self.assertAlmostEqual(mat[('M', 'G')], 4.000, places=3)
        self.assertAlmostEqual(mat[('M', 'K')], 8.000, places=3)
        self.assertAlmostEqual(mat[('M', 'L')], 11.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 16.000, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], 6.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], 9.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], 6.000, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], 8.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 9.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], 10.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], 8.000, places=3)
        self.assertAlmostEqual(mat[('N', 'D')], 11.000, places=3)
        self.assertAlmostEqual(mat[('N', 'H')], 10.000, places=3)
        self.assertAlmostEqual(mat[('N', 'K')], 11.000, places=3)
        self.assertAlmostEqual(mat[('N', 'L')], 7.000, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 16.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 11.000, places=3)
        self.assertAlmostEqual(mat[('N', 'S')], 11.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 10.000, places=3)
        self.assertAlmostEqual(mat[('N', 'V')], 5.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], 8.000, places=3)
        self.assertAlmostEqual(mat[('P', 'A')], 6.000, places=3)
        self.assertAlmostEqual(mat[('P', 'E')], 5.000, places=3)
        self.assertAlmostEqual(mat[('P', 'I')], 3.000, places=3)
        self.assertAlmostEqual(mat[('P', 'M')], 2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'N')], 9.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 16.000, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], 10.000, places=3)
        self.assertAlmostEqual(mat[('P', 'T')], 8.000, places=3)
        self.assertAlmostEqual(mat[('P', 'W')], 6.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'D')], 11.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'H')], 11.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'P')], 7.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 16.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 10.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'T')], 10.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], 6.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], 9.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], 8.000, places=3)
        self.assertAlmostEqual(mat[('R', 'F')], 5.000, places=3)
        self.assertAlmostEqual(mat[('R', 'N')], 10.000, places=3)
        self.assertAlmostEqual(mat[('R', 'P')], 6.000, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 16.000, places=3)
        self.assertAlmostEqual(mat[('R', 'S')], 9.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], 9.000, places=3)
        self.assertAlmostEqual(mat[('R', 'V')], 5.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], 7.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Y')], 7.000, places=3)
        self.assertAlmostEqual(mat[('S', 'A')], 10.000, places=3)
        self.assertAlmostEqual(mat[('S', 'E')], 9.000, places=3)
        self.assertAlmostEqual(mat[('S', 'I')], 8.000, places=3)
        self.assertAlmostEqual(mat[('S', 'M')], 7.000, places=3)
        self.assertAlmostEqual(mat[('S', 'Q')], 10.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 16.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], 8.000, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], 11.000, places=3)
        self.assertAlmostEqual(mat[('T', 'C')], 10.000, places=3)
        self.assertAlmostEqual(mat[('T', 'G')], 10.000, places=3)
        self.assertAlmostEqual(mat[('T', 'K')], 9.000, places=3)
        self.assertAlmostEqual(mat[('T', 'S')], 11.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 16.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], 10.000, places=3)
        self.assertAlmostEqual(mat[('T', 'W')], 11.000, places=3)
        self.assertAlmostEqual(mat[('V', 'L')], 10.000, places=3)
        self.assertAlmostEqual(mat[('V', 'P')], 3.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 16.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], 11.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], 10.000, places=3)
        self.assertAlmostEqual(mat[('W', 'A')], 11.000, places=3)
        self.assertAlmostEqual(mat[('W', 'C')], 11.000, places=3)
        self.assertAlmostEqual(mat[('W', 'G')], 8.000, places=3)
        self.assertAlmostEqual(mat[('W', 'K')], 7.000, places=3)
        self.assertAlmostEqual(mat[('W', 'L')], 11.000, places=3)
        self.assertAlmostEqual(mat[('W', 'N')], 8.000, places=3)
        self.assertAlmostEqual(mat[('W', 'S')], 10.000, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 16.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], 11.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'D')], 7.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'H')], 9.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'L')], 9.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'P')], 8.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'T')], 11.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 16.000, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.risler)
        self.assertEqual(len(mat), 210)
        self.assertAlmostEqual(mat[('A', 'A')], 2.200, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], -1.500, places=3)
        self.assertAlmostEqual(mat[('A', 'D')], 0.200, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], 1.700, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], 0.600, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 0.600, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], 1.300, places=3)
        self.assertAlmostEqual(mat[('A', 'M')], 1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], 1.300, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], 1.800, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], 1.500, places=3)
        self.assertAlmostEqual(mat[('A', 'T')], 1.900, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], 0.200, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 2.200, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -1.500, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -1.800, places=3)
        self.assertAlmostEqual(mat[('C', 'I')], -1.600, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -1.600, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], -1.500, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -1.600, places=3)
        self.assertAlmostEqual(mat[('C', 'P')], -1.800, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -1.400, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -1.500, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], -1.300, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], -1.400, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], -1.100, places=3)
        self.assertAlmostEqual(mat[('D', 'C')], -1.700, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 2.200, places=3)
        self.assertAlmostEqual(mat[('D', 'E')], 1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], -0.400, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], -1.300, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'K')], 0.100, places=3)
        self.assertAlmostEqual(mat[('D', 'L')], -0.200, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -0.500, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -1.200, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -0.100, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], 0.700, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'W')], -1.400, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 2.200, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], 0.600, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], 0.300, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], 0.900, places=3)
        self.assertAlmostEqual(mat[('E', 'M')], 0.600, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], 1.400, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 2.100, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], 1.900, places=3)
        self.assertAlmostEqual(mat[('E', 'T')], 1.600, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], 1.600, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], 0.200, places=3)
        self.assertAlmostEqual(mat[('F', 'C')], -1.600, places=3)
        self.assertAlmostEqual(mat[('F', 'D')], -0.300, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 2.200, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -0.400, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], -1.100, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], -0.200, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], 0.400, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -1.100, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], 0.700, places=3)
        self.assertAlmostEqual(mat[('F', 'S')], 0.500, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], 0.300, places=3)
        self.assertAlmostEqual(mat[('F', 'V')], 0.800, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], -0.900, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'C')], -1.700, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 2.200, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -1.200, places=3)
        self.assertAlmostEqual(mat[('G', 'I')], 0.000, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -0.100, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], 0.200, places=3)
        self.assertAlmostEqual(mat[('G', 'P')], -1.200, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], 0.200, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], 0.100, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], 0.700, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], 0.100, places=3)
        self.assertAlmostEqual(mat[('G', 'Y')], -0.200, places=3)
        self.assertAlmostEqual(mat[('H', 'A')], -0.600, places=3)
        self.assertAlmostEqual(mat[('H', 'E')], -0.600, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 2.200, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -0.800, places=3)
        self.assertAlmostEqual(mat[('H', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('H', 'L')], -0.900, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], -1.200, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], -1.600, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], -0.400, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -0.400, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -0.900, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -0.700, places=3)
        self.assertAlmostEqual(mat[('H', 'W')], -1.700, places=3)
        self.assertAlmostEqual(mat[('I', 'A')], 1.700, places=3)
        self.assertAlmostEqual(mat[('I', 'E')], 1.500, places=3)
        self.assertAlmostEqual(mat[('I', 'F')], 1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 2.200, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], 1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'M')], 0.900, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], 0.900, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], 1.400, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], 1.400, places=3)
        self.assertAlmostEqual(mat[('I', 'T')], 1.600, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 2.200, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -0.700, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], 0.400, places=3)
        self.assertAlmostEqual(mat[('K', 'A')], 1.400, places=3)
        self.assertAlmostEqual(mat[('K', 'E')], 1.400, places=3)
        self.assertAlmostEqual(mat[('K', 'F')], 0.100, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 2.200, places=3)
        self.assertAlmostEqual(mat[('K', 'P')], -0.700, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 1.700, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 2.100, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], 1.400, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], 1.200, places=3)
        self.assertAlmostEqual(mat[('K', 'Y')], 0.500, places=3)
        self.assertAlmostEqual(mat[('L', 'F')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'G')], -0.200, places=3)
        self.assertAlmostEqual(mat[('L', 'I')], 2.100, places=3)
        self.assertAlmostEqual(mat[('L', 'K')], 0.700, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 2.200, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -0.800, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], 1.100, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], 1.200, places=3)
        self.assertAlmostEqual(mat[('L', 'S')], 1.300, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], 1.200, places=3)
        self.assertAlmostEqual(mat[('M', 'C')], -1.600, places=3)
        self.assertAlmostEqual(mat[('M', 'G')], -0.400, places=3)
        self.assertAlmostEqual(mat[('M', 'K')], 0.400, places=3)
        self.assertAlmostEqual(mat[('M', 'L')], 1.800, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 2.200, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], 1.200, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], 1.100, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], 0.800, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 0.800, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -1.300, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], -0.200, places=3)
        self.assertAlmostEqual(mat[('N', 'D')], 0.800, places=3)
        self.assertAlmostEqual(mat[('N', 'H')], -0.300, places=3)
        self.assertAlmostEqual(mat[('N', 'K')], 1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'L')], 0.800, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 2.200, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 1.600, places=3)
        self.assertAlmostEqual(mat[('N', 'S')], 1.900, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 1.100, places=3)
        self.assertAlmostEqual(mat[('N', 'V')], 1.100, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -0.100, places=3)
        self.assertAlmostEqual(mat[('P', 'A')], -0.200, places=3)
        self.assertAlmostEqual(mat[('P', 'E')], -0.100, places=3)
        self.assertAlmostEqual(mat[('P', 'I')], -0.600, places=3)
        self.assertAlmostEqual(mat[('P', 'M')], -1.200, places=3)
        self.assertAlmostEqual(mat[('P', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 2.200, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], -0.300, places=3)
        self.assertAlmostEqual(mat[('P', 'T')], -0.500, places=3)
        self.assertAlmostEqual(mat[('P', 'W')], -1.600, places=3)
        self.assertAlmostEqual(mat[('Q', 'D')], 0.600, places=3)
        self.assertAlmostEqual(mat[('Q', 'H')], -0.500, places=3)
        self.assertAlmostEqual(mat[('Q', 'P')], -0.600, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 2.200, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'T')], 1.700, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], 1.500, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], 0.500, places=3)
        self.assertAlmostEqual(mat[('R', 'F')], 0.400, places=3)
        self.assertAlmostEqual(mat[('R', 'N')], 1.200, places=3)
        self.assertAlmostEqual(mat[('R', 'P')], -0.300, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 2.200, places=3)
        self.assertAlmostEqual(mat[('R', 'S')], 2.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], 1.900, places=3)
        self.assertAlmostEqual(mat[('R', 'V')], 1.500, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], -0.800, places=3)
        self.assertAlmostEqual(mat[('R', 'Y')], 0.800, places=3)
        self.assertAlmostEqual(mat[('S', 'A')], 2.000, places=3)
        self.assertAlmostEqual(mat[('S', 'E')], 1.800, places=3)
        self.assertAlmostEqual(mat[('S', 'I')], 1.600, places=3)
        self.assertAlmostEqual(mat[('S', 'M')], 0.600, places=3)
        self.assertAlmostEqual(mat[('S', 'Q')], 1.800, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 2.200, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], 1.800, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], 0.400, places=3)
        self.assertAlmostEqual(mat[('T', 'C')], -1.400, places=3)
        self.assertAlmostEqual(mat[('T', 'G')], 0.200, places=3)
        self.assertAlmostEqual(mat[('T', 'K')], 1.200, places=3)
        self.assertAlmostEqual(mat[('T', 'S')], 2.100, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 2.200, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], 1.600, places=3)
        self.assertAlmostEqual(mat[('T', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('V', 'L')], 2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'P')], -0.600, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 2.200, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -0.700, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], 0.300, places=3)
        self.assertAlmostEqual(mat[('W', 'A')], -0.900, places=3)
        self.assertAlmostEqual(mat[('W', 'C')], -1.800, places=3)
        self.assertAlmostEqual(mat[('W', 'G')], -1.300, places=3)
        self.assertAlmostEqual(mat[('W', 'K')], -1.100, places=3)
        self.assertAlmostEqual(mat[('W', 'L')], -0.800, places=3)
        self.assertAlmostEqual(mat[('W', 'N')], -1.100, places=3)
        self.assertAlmostEqual(mat[('W', 'S')], -0.800, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 2.200, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], -0.600, places=3)
        self.assertAlmostEqual(mat[('Y', 'D')], -0.400, places=3)
        self.assertAlmostEqual(mat[('Y', 'H')], -0.800, places=3)
        self.assertAlmostEqual(mat[('Y', 'L')], 0.500, places=3)
        self.assertAlmostEqual(mat[('Y', 'P')], -1.200, places=3)
        self.assertAlmostEqual(mat[('Y', 'T')], 0.300, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 2.200, places=3)
        mat = SubsMat.SeqMat(MatrixInfo.structure)
        self.assertEqual(len(mat), 210)
        self.assertAlmostEqual(mat[('A', 'A')], 4.000, places=3)
        self.assertAlmostEqual(mat[('A', 'C')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'D')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'E')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'F')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'G')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'I')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('A', 'M')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('A', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('A', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('A', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'C')], 11.000, places=3)
        self.assertAlmostEqual(mat[('C', 'D')], -7.000, places=3)
        self.assertAlmostEqual(mat[('C', 'E')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'F')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'G')], -6.000, places=3)
        self.assertAlmostEqual(mat[('C', 'H')], -6.000, places=3)
        self.assertAlmostEqual(mat[('C', 'I')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'K')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'L')], -6.000, places=3)
        self.assertAlmostEqual(mat[('C', 'M')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'N')], -6.000, places=3)
        self.assertAlmostEqual(mat[('C', 'P')], -8.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('C', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('C', 'S')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'T')], -5.000, places=3)
        self.assertAlmostEqual(mat[('C', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('C', 'W')], -6.000, places=3)
        self.assertAlmostEqual(mat[('C', 'Y')], -6.000, places=3)
        self.assertAlmostEqual(mat[('D', 'D')], 6.000, places=3)
        self.assertAlmostEqual(mat[('D', 'E')], 2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'F')], -5.000, places=3)
        self.assertAlmostEqual(mat[('D', 'G')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'H')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('D', 'K')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'L')], -6.000, places=3)
        self.assertAlmostEqual(mat[('D', 'M')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'N')], 2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('D', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('D', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('D', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('D', 'W')], -6.000, places=3)
        self.assertAlmostEqual(mat[('D', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'E')], 5.000, places=3)
        self.assertAlmostEqual(mat[('E', 'F')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'G')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'I')], -3.000, places=3)
        self.assertAlmostEqual(mat[('E', 'K')], 1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'L')], -4.000, places=3)
        self.assertAlmostEqual(mat[('E', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Q')], 2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('E', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('E', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('E', 'W')], -6.000, places=3)
        self.assertAlmostEqual(mat[('E', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'F')], 7.000, places=3)
        self.assertAlmostEqual(mat[('F', 'G')], -6.000, places=3)
        self.assertAlmostEqual(mat[('F', 'H')], -2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'I')], 1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'L')], 2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'M')], 0.000, places=3)
        self.assertAlmostEqual(mat[('F', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'P')], -5.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Q')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('F', 'S')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('F', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('F', 'W')], 2.000, places=3)
        self.assertAlmostEqual(mat[('F', 'Y')], 3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'G')], 5.000, places=3)
        self.assertAlmostEqual(mat[('G', 'H')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'I')], -5.000, places=3)
        self.assertAlmostEqual(mat[('G', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'L')], -5.000, places=3)
        self.assertAlmostEqual(mat[('G', 'M')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'N')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('G', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('G', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('G', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('G', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'H')], 8.000, places=3)
        self.assertAlmostEqual(mat[('H', 'I')], -5.000, places=3)
        self.assertAlmostEqual(mat[('H', 'K')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'L')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'M')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'N')], 2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'R')], 0.000, places=3)
        self.assertAlmostEqual(mat[('H', 'S')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('H', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('H', 'Y')], 0.000, places=3)
        self.assertAlmostEqual(mat[('I', 'I')], 6.000, places=3)
        self.assertAlmostEqual(mat[('I', 'K')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'L')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'M')], 1.000, places=3)
        self.assertAlmostEqual(mat[('I', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'P')], -4.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Q')], -5.000, places=3)
        self.assertAlmostEqual(mat[('I', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'S')], -3.000, places=3)
        self.assertAlmostEqual(mat[('I', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'V')], 2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('I', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'K')], 5.000, places=3)
        self.assertAlmostEqual(mat[('K', 'L')], -2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'M')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'N')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'P')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'R')], 2.000, places=3)
        self.assertAlmostEqual(mat[('K', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('K', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('K', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'W')], -3.000, places=3)
        self.assertAlmostEqual(mat[('K', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('L', 'L')], 5.000, places=3)
        self.assertAlmostEqual(mat[('L', 'M')], 3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'N')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'P')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Q')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'R')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'S')], -4.000, places=3)
        self.assertAlmostEqual(mat[('L', 'T')], -3.000, places=3)
        self.assertAlmostEqual(mat[('L', 'V')], 1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'W')], -1.000, places=3)
        self.assertAlmostEqual(mat[('L', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'M')], 8.000, places=3)
        self.assertAlmostEqual(mat[('M', 'N')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'P')], -6.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Q')], 1.000, places=3)
        self.assertAlmostEqual(mat[('M', 'R')], -4.000, places=3)
        self.assertAlmostEqual(mat[('M', 'S')], -4.000, places=3)
        self.assertAlmostEqual(mat[('M', 'T')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'V')], 0.000, places=3)
        self.assertAlmostEqual(mat[('M', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('M', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'N')], 5.000, places=3)
        self.assertAlmostEqual(mat[('N', 'P')], -2.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Q')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'R')], -1.000, places=3)
        self.assertAlmostEqual(mat[('N', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('N', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('N', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('N', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'P')], 7.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Q')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'R')], -2.000, places=3)
        self.assertAlmostEqual(mat[('P', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('P', 'V')], -4.000, places=3)
        self.assertAlmostEqual(mat[('P', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('P', 'Y')], -6.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Q')], 6.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'R')], 1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'S')], -1.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'T')], 0.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'V')], -2.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('Q', 'Y')], -3.000, places=3)
        self.assertAlmostEqual(mat[('R', 'R')], 7.000, places=3)
        self.assertAlmostEqual(mat[('R', 'S')], 0.000, places=3)
        self.assertAlmostEqual(mat[('R', 'T')], -1.000, places=3)
        self.assertAlmostEqual(mat[('R', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('R', 'W')], -2.000, places=3)
        self.assertAlmostEqual(mat[('R', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'S')], 4.000, places=3)
        self.assertAlmostEqual(mat[('S', 'T')], 1.000, places=3)
        self.assertAlmostEqual(mat[('S', 'V')], -3.000, places=3)
        self.assertAlmostEqual(mat[('S', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('S', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('T', 'T')], 5.000, places=3)
        self.assertAlmostEqual(mat[('T', 'V')], -1.000, places=3)
        self.assertAlmostEqual(mat[('T', 'W')], -5.000, places=3)
        self.assertAlmostEqual(mat[('T', 'Y')], -2.000, places=3)
        self.assertAlmostEqual(mat[('V', 'V')], 5.000, places=3)
        self.assertAlmostEqual(mat[('V', 'W')], -4.000, places=3)
        self.assertAlmostEqual(mat[('V', 'Y')], -1.000, places=3)
        self.assertAlmostEqual(mat[('W', 'W')], 10.000, places=3)
        self.assertAlmostEqual(mat[('W', 'Y')], 2.000, places=3)
        self.assertAlmostEqual(mat[('Y', 'Y')], 7.000, places=3)

    def test_matrix_correlations(self):
        blosum90 = SubsMat.SeqMat(MatrixInfo.blosum90)
        blosum30 = SubsMat.SeqMat(MatrixInfo.blosum30)
        correlation = SubsMat.two_mat_correlation(blosum30, blosum90)
        self.assertAlmostEqual(correlation, 0.878, places=3)
        correlation = SubsMat.two_mat_correlation(blosum90, blosum30)
        self.assertAlmostEqual(correlation, 0.878, places=3)


if __name__ == "__main__":
    runner = unittest.TextTestRunner(verbosity=2)
    unittest.main(testRunner=runner)
