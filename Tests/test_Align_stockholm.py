# Copyright 2008 by Peter Cock.  All rights reserved.
# This code is part of the Biopython distribution and governed by its
# license.  Please see the LICENSE file that should have been included
# as part of this package.
"""Tests for Align.stockholm module."""
import unittest

from Bio.Align import stockholm


try:
    import numpy
except ImportError:
    from Bio import MissingPythonDependencyError

    raise MissingPythonDependencyError(
        "Install numpy if you want to use Bio.Align.stockholm."
    ) from None


class TestAlignIO_reading(unittest.TestCase):

    def test_reading_alignments_globins45(self):
        """Test parsing hmmalign output."""
        # File generated by running
        # hmmalign -o globins45.ali globins4.hmm globins45.fa
        # in the HMMER 3.3.2 tutorial
        path = "Stockholm/globins45.ali"
        with open(path) as stream:
            alignments = stockholm.AlignmentIterator(path)
            alignment = next(alignments)
            self.assertRaises(StopIteration, next, alignments)
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates,
                numpy.array(
[[0, 0, 0, 1, 5, 17, 19, 46, 47, 50, 51, 55, 78, 78, 79, 80, 146, 147, 148, 153],
 [0, 1, 1, 1, 5, 17, 19, 46, 47, 50, 51, 55, 78, 78, 79, 80, 146, 147, 148, 153],
 [0, 1, 1, 1, 5, 17, 19, 46, 47, 50, 51, 55, 78, 78, 79, 80, 146, 147, 148, 153],
 [0, 1, 1, 1, 5, 17, 19, 46, 47, 50, 51, 55, 78, 78, 79, 80, 146, 147, 148, 153],
 [0, 1, 1, 1, 5, 17, 19, 46, 47, 50, 51, 55, 78, 78, 79, 80, 146, 147, 148, 153],
 [0, 1, 1, 1, 5, 17, 19, 46, 47, 50, 51, 55, 78, 78, 79, 80, 146, 147, 148, 153],
 [0, 1, 1, 1, 1, 13, 15, 42, 43, 46, 46, 50, 73, 73, 74, 75, 141, 142, 143, 148],
 [0, 0, 0, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 0, 0, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 0, 0, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 0, 0, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 0, 0, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 0, 0, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 0, 0, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 0, 0, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 0, 0, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 0, 0, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 0, 0, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 0, 0, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 0, 0, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 0, 0, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 0, 0, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 1, 1, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 1, 1, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 1, 1, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 1, 1, 1, 5, 17, 19, 46, 47, 50, 50, 50, 73, 74, 75, 75, 141, 142, 142, 142],
 [0, 0, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 0, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 0, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 0, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 0, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 1, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 0, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 0, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 0, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 0, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 0, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 0, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 0, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 1, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 1, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 1, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 1, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 145, 146, 146],
 [0, 1, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 0, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 145, 145, 145],
]
                ),
            )
        )
        self.assertEqual(alignment.sequences[0].id, "MYG_ESCGI")
        self.assertEqual(alignment.sequences[0].seq, "VLSDAEWQLVLNIWAKVEADVAGHGQDILIRLFKGHPETLEKFDKFKHLKTEAEMKASEDLKKHGNTVLTALGGILKKKGHHEAELKPLAQSHATKHKIPIKYLEFISDAIIHVLHSRHPGDFGADAQAAMNKALELFRKDIAAKYKelgfqg")
        self.assertEqual(alignment.sequences[0].letter_annotations['posterior_probability'], "69****************************************************************************99******************************************************************7******")
        self.assertEqual(alignment.sequences[1].id, "MYG_HORSE")
        self.assertEqual(alignment.sequences[1].seq, "gLSDGEWQQVLNVWGKVEADIAGHGQEVLIRLFTGHPETLEKFDKFKHLKTEAEMKASEDLKKHGTVVLTALGGILKKKGHHEAELKPLAQSHATKHKIPIKYLEFISDAIIHVLHSKHPGNFGADAQGAMTKALELFRNDIAAKYKelgfqg")
        self.assertEqual(alignment.sequences[1].letter_annotations['posterior_probability'], "889***************************************************************************99******************************************************************7******")
        self.assertEqual(alignment.sequences[2].id, "MYG_PROGU")
        self.assertEqual(alignment.sequences[2].seq, "gLSDGEWQLVLNVWGKVEGDLSGHGQEVLIRLFKGHPETLEKFDKFKHLKAEDEMRASEELKKHGTTVLTALGGILKKKGQHAAELAPLAQSHATKHKIPVKYLEFISEAIIQVLQSKHPGDFGADAQGAMSKALELFRNDIAAKYKelgfqg")
        self.assertEqual(alignment.sequences[2].letter_annotations['posterior_probability'], "889***************************************************************************99******************************************************************7******")
        self.assertEqual(alignment.sequences[3].id, "MYG_SAISC")
        self.assertEqual(alignment.sequences[3].seq, "gLSDGEWQLVLNIWGKVEADIPSHGQEVLISLFKGHPETLEKFDKFKHLKSEDEMKASEELKKHGTTVLTALGGILKKKGQHEAELKPLAQSHATKHKIPVKYLELISDAIVHVLQKKHPGDFGADAQGAMKKALELFRNDMAAKYKelgfqg")
        self.assertEqual(alignment.sequences[3].letter_annotations['posterior_probability'], "889***************************************************************************99******************************************************************7******")
        self.assertEqual(alignment.sequences[4].id, "MYG_LYCPI")
        self.assertEqual(alignment.sequences[4].seq, "gLSDGEWQIVLNIWGKVETDLAGHGQEVLIRLFKNHPETLDKFDKFKHLKTEDEMKGSEDLKKHGNTVLTALGGILKKKGHHEAELKPLAQSHATKHKIPVKYLEFISDAIIQVLQNKHSGDFHADTEAAMKKALELFRNDIAAKYKelgfqg")
        self.assertEqual(alignment.sequences[4].letter_annotations['posterior_probability'], "889***************************************************************************99******************************************************************7******")
        self.assertEqual(alignment.sequences[5].id, "MYG_MOUSE")
        self.assertEqual(alignment.sequences[5].seq, "gLSDGEWQLVLNVWGKVEADLAGHGQEVLIGLFKTHPETLDKFDKFKNLKSEEDMKGSEDLKKHGCTVLTALGTILKKKGQHAAEIQPLAQSHATKHKIPVKYLEFISEIIIEVLKKRHSGDFGADAQGAMSKALELFRNDIAAKYKelgfqg")
        self.assertEqual(alignment.sequences[5].letter_annotations['posterior_probability'], "889***************************************************************************99******************************************************************7******")
        self.assertEqual(alignment.sequences[6].id, "MYG_MUSAN")
        self.assertEqual(alignment.sequences[6].seq, "vDWEKVNSVWSAVESDLTAIGQNILLRLFEQYPESQNHFPKFKNKSLGELKDTADIKAQADTVLSALGNIVKKKGSHSQPVKALAATHITTHKIPPHYFTKITTIAVDVLSEMYPSEMNAQVQAAFSGAFKIICSDIEKEYKaanfqg")
        self.assertEqual(alignment.sequences[6].letter_annotations['posterior_probability'], "789***************************************987789*************************99****************************************************************997******")
        self.assertEqual(alignment.sequences[7].id, "HBA_AILME")
        self.assertEqual(alignment.sequences[7].seq, "VLSPADKTNVKATWDKIGGHAGEYGGEALERTFASFPTTKTYFPHFDLSPGSAQVKAHGKKVADALTTAVGHLDDLPGALSALSDLHAHKLRVDPVNFKLLSHCLLVTLASHHPAEFTPAVHASLDKFFSAVSTVLTSKYR")
        self.assertEqual(alignment.sequences[7].letter_annotations['posterior_probability'], "69********************************************9**9***********************9******************************************************************7")
        self.assertEqual(alignment.sequences[8].id, "HBA_PROLO")
        self.assertEqual(alignment.sequences[8].seq, "VLSPADKANIKATWDKIGGHAGEYGGEALERTFASFPTTKTYFPHFDLSPGSAQVKAHGKKVADALTLAVGHLDDLPGALSALSDLHAYKLRVDPVNFKLLSHCLLVTLACHHPAEFTPAVHASLDKFFTSVSTVLTSKYR")
        self.assertEqual(alignment.sequences[8].letter_annotations['posterior_probability'], "69********************************************9**9***********************9******************************************************************7")
        self.assertEqual(alignment.sequences[9].id, "HBA_PAGLA")
        self.assertEqual(alignment.sequences[9].seq, "VLSSADKNNIKATWDKIGSHAGEYGAEALERTFISFPTTKTYFPHFDLSHGSAQVKAHGKKVADALTLAVGHLEDLPNALSALSDLHAYKLRVDPVNFKLLSHCLLVTLACHHPAEFTPAVHSALDKFFSAVSTVLTSKYR")
        self.assertEqual(alignment.sequences[9].letter_annotations['posterior_probability'], "69**********************************************************************989*****************************************************************7")
        self.assertEqual(alignment.sequences[10].id, "HBA_MACFA")
        self.assertEqual(alignment.sequences[10].seq, "VLSPADKTNVKAAWGKVGGHAGEYGAEALERMFLSFPTTKTYFPHFDLSHGSAQVKGHGKKVADALTLAVGHVDDMPQALSALSDLHAHKLRVDPVNFKLLSHCLLVTLAAHLPAEFTPAVHASLDKFLASVSTVLTSKYR")
        self.assertEqual(alignment.sequences[10].letter_annotations['posterior_probability'], "69***********************************************************************9******************************************************************7")
        self.assertEqual(alignment.sequences[11].id, "HBA_MACSI")
        self.assertEqual(alignment.sequences[11].seq, "VLSPADKTNVKDAWGKVGGHAGEYGAEALERMFLSFPTTKTYFPHFDLSHGSAQVKGHGKKVADALTLAVGHVDDMPQALSALSDLHAHKLRVDPVNFKLLSHCLLVTLAAHLPAEFTPAVHASLDKFLASVSTVLTSKYR")
        self.assertEqual(alignment.sequences[11].letter_annotations['posterior_probability'], "69***********************************************************************9******************************************************************7")
        self.assertEqual(alignment.sequences[12].id, "HBA_PONPY")
        self.assertEqual(alignment.sequences[12].seq, "VLSPADKTNVKTAWGKVGAHAGDYGAEALERMFLSFPTTKTYFPHFDLSHGSAQVKDHGKKVADALTNAVAHVDDMPNALSALSDLHAHKLRVDPVNFKLLSHCLLVTLAAHLPAEFTPAVHASLDKFLASVSTVLTSKYR")
        self.assertEqual(alignment.sequences[12].letter_annotations['posterior_probability'], "69***********************************************************************9******************************************************************7")
        self.assertEqual(alignment.sequences[13].id, "HBA2_GALCR")
        self.assertEqual(alignment.sequences[13].seq, "VLSPTDKSNVKAAWEKVGAHAGDYGAEALERMFLSFPTTKTYFPHFDLSHGSTQVKGHGKKVADALTNAVLHVDDMPSALSALSDLHAHKLRVDPVNFKLLRHCLLVTLACHHPAEFTPAVHASLDKFMASVSTVLTSKYR")
        self.assertEqual(alignment.sequences[13].letter_annotations['posterior_probability'], "69***********************************************************************9******************************************************************7")
        self.assertEqual(alignment.sequences[14].id, "HBA_MESAU")
        self.assertEqual(alignment.sequences[14].seq, "VLSAKDKTNISEAWGKIGGHAGEYGAEALERMFFVYPTTKTYFPHFDVSHGSAQVKGHGKKVADALTNAVGHLDDLPGALSALSDLHAHKLRVDPVNFKLLSHCLLVTLANHHPADFTPAVHASLDKFFASVSTVLTSKYR")
        self.assertEqual(alignment.sequences[14].letter_annotations['posterior_probability'], "69********************************************888************************9******************************************************************7")
        self.assertEqual(alignment.sequences[15].id, "HBA2_BOSMU")
        self.assertEqual(alignment.sequences[15].seq, "VLSAADKGNVKAAWGKVGGHAAEYGAEALERMFLSFPTTKTYFPHFDLSHGSAQVKGHGAKVAAALTKAVGHLDDLPGALSELSDLHAHKLRVDPVNFKLLSHSLLVTLASHLPSDFTPAVHASLDKFLANVSTVLTSKYR")
        self.assertEqual(alignment.sequences[15].letter_annotations['posterior_probability'], "69***********************************************************************9******************************************************************7")
        self.assertEqual(alignment.sequences[16].id, "HBA_ERIEU")
        self.assertEqual(alignment.sequences[16].seq, "VLSATDKANVKTFWGKLGGHGGEYGGEALDRMFQAHPTTKTYFPHFDLNPGSAQVKGHGKKVADALTTAVNNLDDVPGALSALSDLHAHKLRVDPVNFKLLSHCLLVTLALHHPADFTPAVHASLDKFLATVATVLTSKYR")
        self.assertEqual(alignment.sequences[16].letter_annotations['posterior_probability'], "69********************************************9999***********************99*****************************************************************7")
        self.assertEqual(alignment.sequences[17].id, "HBA_FRAPO")
        self.assertEqual(alignment.sequences[17].seq, "VLSAADKNNVKGIFGKISSHAEDYGAEALERMFITYPSTKTYFPHFDLSHGSAQVKGHGKKVVAALIEAANHIDDIAGTLSKLSDLHAHKLRVDPVNFKLLGQCFLVVVAIHHPSALTPEVHASLDKFLCAVGNVLTAKYR")
        self.assertEqual(alignment.sequences[17].letter_annotations['posterior_probability'], "69***********************************************************************99*****************************************************************7")
        self.assertEqual(alignment.sequences[18].id, "HBA_PHACO")
        self.assertEqual(alignment.sequences[18].seq, "VLSAADKNNVKGIFTKIAGHAEEYGAEALERMFITYPSTKTYFPHFDLSHGSAQIKGHGKKVVAALIEAVNHIDDITGTLSKLSDLHAHKLRVDPVNFKLLGQCFLVVVAIHHPSALTPEVHASLDKFLCAVGTVLTAKYR")
        self.assertEqual(alignment.sequences[18].letter_annotations['posterior_probability'], "69***********************************************************************99*****************************************************************7")
        self.assertEqual(alignment.sequences[19].id, "HBA_TRIOC")
        self.assertEqual(alignment.sequences[19].seq, "VLSANDKTNVKTVFTKITGHAEDYGAETLERMFITYPPTKTYFPHFDLHHGSAQIKAHGKKVVGALIEAVNHIDDIAGALSKLSDLHAQKLRVDPVNFKLLGQCFLVVVAIHHPSVLTPEVHASLDKFLCAVGNVLSAKYR")
        self.assertEqual(alignment.sequences[19].letter_annotations['posterior_probability'], "69********************************************999************************99*****************************************************************7")
        self.assertEqual(alignment.sequences[20].id, "HBA_ANSSE")
        self.assertEqual(alignment.sequences[20].seq, "VLSAADKGNVKTVFGKIGGHAEEYGAETLQRMFQTFPQTKTYFPHFDLQPGSAQIKAHGKKVAAALVEAANHIDDIAGALSKLSDLHAQKLRVDPVNFKFLGHCFLVVLAIHHPSLLTPEVHASMDKFLCAVATVLTAKYR")
        self.assertEqual(alignment.sequences[20].letter_annotations['posterior_probability'], "69********************************************9999***********************99*****************************************************************7")
        self.assertEqual(alignment.sequences[21].id, "HBA_COLLI")
        self.assertEqual(alignment.sequences[21].seq, "VLSANDKSNVKAVFAKIGGQAGDLGGEALERLFITYPQTKTYFPHFDLSHGSAQIKGHGKKVAEALVEAANHIDDIAGALSKLSDLHAQKLRVDPVNFKLLGHCFLVVVAVHFPSLLTPEVHASLDKFVLAVGTVLTAKYR")
        self.assertEqual(alignment.sequences[21].letter_annotations['posterior_probability'], "69***********************************************************************99*****************************************************************7")
        self.assertEqual(alignment.sequences[22].id, "HBAD_CHLME")
        self.assertEqual(alignment.sequences[22].seq, "mLTADDKKLLTQLWEKVAGHQEEFGSEALQRMFLTYPQTKTYFPHFDLHPGSEQVRGHGKKVAAALGNAVKSLDNLSQALSELSNLHAYNLRVDPANFKLLAQCFQVVLATHLGKDYSPEMHAAFDKFLSAVAAVLAEKYR")
        self.assertEqual(alignment.sequences[22].letter_annotations['posterior_probability'], "689*******************************************9999******************************************************************************************7")
        self.assertEqual(alignment.sequences[23].id, "HBAD_PASMO")
        self.assertEqual(alignment.sequences[23].seq, "mLTAEDKKLIQQIWGKLGGAEEEIGADALWRMFHSYPSTKTYFPHFDLSQGSDQIRGHGKKVVAALSNAIKNLDNLSQALSELSNLHAYNLRVDPVNFKFLSQCLQVSLATRLGKEYSPEVHSAVDKFMSAVASVLAEKYR")
        self.assertEqual(alignment.sequences[23].letter_annotations['posterior_probability'], "699*******************************************9**9******************************************************************************************7")
        self.assertEqual(alignment.sequences[24].id, "HBAZ_HORSE")
        self.assertEqual(alignment.sequences[24].seq, "sLTKAERTMVVSIWGKISMQADAVGTEALQRLFSSYPQTKTYFPHFDLHEGSPQLRAHGSKVAAAVGDAVKSIDNVAGALAKLSELHAYILRVDPVNFKFLSHCLLVTLASRLPADFTADAHAAWDKFLSIVSSVLTEKYR")
        self.assertEqual(alignment.sequences[24].letter_annotations['posterior_probability'], "689*******************************************9999******************************************************************************************7")
        self.assertEqual(alignment.sequences[25].id, "HBA4_SALIR")
        self.assertEqual(alignment.sequences[25].seq, "sLSAKDKANVKAIWGKILPKSDEIGEQALSRMLVVYPQTKAYFSHWASVAPGSAPVKKHGITIMNQIDDCVGHMDDLFGFLTKLSELHATKLRVDPTNFKILAHNLIVVIAAYFPAEFTPEIHLSVDKFLQQLALALAEKYR")
        self.assertEqual(alignment.sequences[25].letter_annotations['posterior_probability'], "69********************************************77769************************9*****************************************************************7")
        self.assertEqual(alignment.sequences[26].id, "HBB_ORNAN")
        self.assertEqual(alignment.sequences[26].seq, "VHLSGGEKSAVTNLWGKVNINELGGEALGRLLVVYPWTQRFFEAFGDLSSAGAVMGNPKVKAHGAKVLTSFGDALKNLDDLKGTFAKLSELHCDKLHVDPENFNRLGNVLIVVLARHFSKDFSPEVQAAWQKLVSGVAHALGHKYH")
        self.assertEqual(alignment.sequences[26].letter_annotations['posterior_probability'], "69****************************************************************************9******************************************************************7")
        self.assertEqual(alignment.sequences[27].id, "HBB_TACAC")
        self.assertEqual(alignment.sequences[27].seq, "VHLSGSEKTAVTNLWGHVNVNELGGEALGRLLVVYPWTQRFFESFGDLSSADAVMGNAKVKAHGAKVLTSFGDALKNLDNLKGTFAKLSELHCDKLHVDPENFNRLGNVLVVVLARHFSKEFTPEAQAAWQKLVSGVSHALAHKYH")
        self.assertEqual(alignment.sequences[27].letter_annotations['posterior_probability'], "69***********************************************************************************************************************************************7")
        self.assertEqual(alignment.sequences[28].id, "HBE_PONPY")
        self.assertEqual(alignment.sequences[28].seq, "VHFTAEEKAAVTSLWSKMNVEEAGGEALGRLLVVYPWTQRFFDSFGNLSSPSAILGNPKVKAHGKKVLTSFGDAIKNMDNLKTTFAKLSELHCDKLHVDPENFKLLGNVMVIILATHFGKEFTPEVQAAWQKLVSAVAIALAHKYH")
        self.assertEqual(alignment.sequences[28].letter_annotations['posterior_probability'], "5789*********************************************************************************************************************************************7")
        self.assertEqual(alignment.sequences[29].id, "HBB_SPECI")
        self.assertEqual(alignment.sequences[29].seq, "VHLSDGEKNAISTAWGKVHAAEVGAEALGRLLVVYPWTQRFFDSFGDLSSASAVMGNAKVKAHGKKVIDSFSNGLKHLDNLKGTFASLSELHCDKLHVDPENFKLLGNMIVIVMAHHLGKDFTPEAQAAFQKVVAGVANALAHKYH")
        self.assertEqual(alignment.sequences[29].letter_annotations['posterior_probability'], "69****************99*****************************************************************************************************************************7")
        self.assertEqual(alignment.sequences[30].id, "HBB_SPETO")
        self.assertEqual(alignment.sequences[30].seq, "VHLTDGEKNAISTAWGKVNAAEIGAEALGRLLVVYPWTQRFFDSFGDLSSASAVMGNAKVKAHGKKVIDSFSNGLKHLDNLKGTFASLSELHCDKLHVDPENFKLLGNMIVIVMAHHLGKDFTPEAQAAFQKVVAGVANALSHKYH")
        self.assertEqual(alignment.sequences[30].letter_annotations['posterior_probability'], "69****************99*****************************************************************************************************************************7")
        self.assertEqual(alignment.sequences[31].id, "HBB_EQUHE")
        self.assertEqual(alignment.sequences[31].seq, "vQLSGEEKAAVLALWDKVNEEEVGGEALGRLLVVYPWTQRFFDSFGDLSNPAAVMGNPKVKAHGKKVLHSFGEGVHHLDNLKGTFAQLSELHCDKLHVDPENFRLLGNVLVVVLARHFGKDFTPELQASYQKVVAGVANALAHKYH")
        self.assertEqual(alignment.sequences[31].letter_annotations['posterior_probability'], "579***************99*****************************************************************************************************************************7")
        self.assertEqual(alignment.sequences[32].id, "HBB_SUNMU")
        self.assertEqual(alignment.sequences[32].seq, "VHLSGEEKACVTGLWGKVNEDEVGAEALGRLLVVYPWTQRFFDSFGDLSSASAVMGNPKVKAHGKKVLHSLGEGVANLDNLKGTFAKLSELHCDKLHVDPENFRLLGNVLVVVLASKFGKEFTPPVQAAFQKVVAGVANALAHKYH")
        self.assertEqual(alignment.sequences[32].letter_annotations['posterior_probability'], "69****************99*****************************************************************************************************************************7")
        self.assertEqual(alignment.sequences[33].id, "HBB_CALAR")
        self.assertEqual(alignment.sequences[33].seq, "VHLTGEEKSAVTALWGKVNVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMNNPKVKAHGKKVLGAFSDGLTHLDNLKGTFAHLSELHCDKLHVDPENFRLLGNVLVCVLAHHFGKEFTPVVQAAYQKVVAGVANALAHKYH")
        self.assertEqual(alignment.sequences[33].letter_annotations['posterior_probability'], "689**********************************************************************************************************************************************7")
        self.assertEqual(alignment.sequences[34].id, "HBB_MANSP")
        self.assertEqual(alignment.sequences[34].seq, "VHLTPEEKTAVTTLWGKVNVDEVGGEALGRLLVVYPWTQRFFDSFGDLSSPDAVMGNPKVKAHGKKVLGAFSDGLNHLDNLKGTFAQLSELHCDKLHVDPENFKLLGNVLVCVLAHHFGKEFTPQVQAAYQKVVAGVANALAHKYH")
        self.assertEqual(alignment.sequences[34].letter_annotations['posterior_probability'], "69***********************************************************************************************************************************************7")
        self.assertEqual(alignment.sequences[35].id, "HBB_URSMA")
        self.assertEqual(alignment.sequences[35].seq, "VHLTGEEKSLVTGLWGKVNVDEVGGEALGRLLVVYPWTQRFFDSFGDLSSADAIMNNPKVKAHGKKVLNSFSDGLKNLDNLKGTFAKLSELHCDKLHVDPENFKLLGNVLVCVLAHHFGKEFTPQVQAAYQKVVAGVANALAHKYH")
        self.assertEqual(alignment.sequences[35].letter_annotations['posterior_probability'], "689**********************************************************************************************************************************************7")
        self.assertEqual(alignment.sequences[36].id, "HBB_RABIT")
        self.assertEqual(alignment.sequences[36].seq, "VHLSSEEKSAVTALWGKVNVEEVGGEALGRLLVVYPWTQRFFESFGDLSSANAVMNNPKVKAHGKKVLAAFSEGLSHLDNLKGTFAKLSELHCDKLHVDPENFRLLGNVLVIVLSHHFGKEFTPQVQAAYQKVVAGVANALAHKYH")
        self.assertEqual(alignment.sequences[36].letter_annotations['posterior_probability'], "69***********************************************************************************************************************************************7")
        self.assertEqual(alignment.sequences[37].id, "HBB_TUPGL")
        self.assertEqual(alignment.sequences[37].seq, "VHLSGEEKAAVTGLWGKVDLEKVGGQSLGSLLIVYPWTQRFFDSFGDLSSPSAVMSNPKVKAHGKKVLTSFSDGLNHLDNLKGTFAKLSELHCDKLHVDPENFRLLGNVLVRVLACNFGPEFTPQVQAAFQKVVAGVANALAHKYH")
        self.assertEqual(alignment.sequences[37].letter_annotations['posterior_probability'], "69***********************************************************************************************************************************************7")
        self.assertEqual(alignment.sequences[38].id, "HBB_TRIIN")
        self.assertEqual(alignment.sequences[38].seq, "VHLTPEEKALVIGLWAKVNVKEYGGEALGRLLVVYPWTQRFFEHFGDLSSASAIMNNPKVKAHGEKVFTSFGDGLKHLEDLKGAFAELSELHCDKLHVDPENFRLLGNVLVCVLARHFGKEFSPEAQAAYQKVVAGVANALAHKYH")
        self.assertEqual(alignment.sequences[38].letter_annotations['posterior_probability'], "69***************************************************************************989*****************************************************************7")
        self.assertEqual(alignment.sequences[39].id, "HBB_COLLI")
        self.assertEqual(alignment.sequences[39].seq, "vHWSAEEKQLITSIWGKVNVADCGAEALARLLIVYPWTQRFFSSFGNLSSATAISGNPNVKAHGKKVLTSFGDAVKNLDNIKGTFAQLSELHCDKLHVDPENFRLLGDILVIILAAHFGKDFTPECQAAWQKLVRVVAHALARKYH")
        self.assertEqual(alignment.sequences[39].letter_annotations['posterior_probability'], "5779*********************************************************************************************************************************************7")
        self.assertEqual(alignment.sequences[40].id, "HBB_LARRI")
        self.assertEqual(alignment.sequences[40].seq, "vHWSAEEKQLITGLWGKVNVADCGAEALARLLIVYPWTQRFFASFGNLSSPTAINGNPMVRAHGKKVLTSFGEAVKNLDNIKNTFAQLSELHCDKLHVDPENFRLLGDILIIVLAAHFAKDFTPDSQAAWQKLVRVVAHALARKYH")
        self.assertEqual(alignment.sequences[40].letter_annotations['posterior_probability'], "5779*********************************************************************************************************************************************7")
        self.assertEqual(alignment.sequences[41].id, "HBB1_VAREX")
        self.assertEqual(alignment.sequences[41].seq, "vHWTAEEKQLICSLWGKIDVGLIGGETLAGLLVIYPWTQRQFSHFGNLSSPTAIAGNPRVKAHGKKVLTSFGDAIKNLDNIKDTFAKLSELHCDKLHVDPTNFKLLGNVLVIVLADHHGKEFTPAHHAAYQKLVNVVSHSLARRYH")
        self.assertEqual(alignment.sequences[41].letter_annotations['posterior_probability'], "66799********************************************************************************************************************************************7")
        self.assertEqual(alignment.sequences[42].id, "HBB2_XENTR")
        self.assertEqual(alignment.sequences[42].seq, "vHWTAEEKATIASVWGKVDIEQDGHDALSRLLVVYPWTQRYFSSFGNLSNVSAVSGNVKVKAHGNKVLSAVGSAIQHLDDVKSHLKGLSKSHAEDLHVDPENFKRLADVLVIVLAAKLGSAFTPQVQAVWEKLNATLVAALSHGYf")
        self.assertEqual(alignment.sequences[42].letter_annotations['posterior_probability'], "66799*************************************************************************99*************************************************************99889")
        self.assertEqual(alignment.sequences[43].id, "HBBL_RANCA")
        self.assertEqual(alignment.sequences[43].seq, "vHWTAEEKAVINSVWQKVDVEQDGHEALTRLFIVYPWTQRYFSTFGDLSSPAAIAGNPKVHAHGKKILGAIDNAIHNLDDVKGTLHDLSEEHANELHVDPENFRRLGEVLIVVLGAKLGKAFSPQVQHVWEKFIAVLVDALSHSYH")
        self.assertEqual(alignment.sequences[43].letter_annotations['posterior_probability'], "66799*************************************************************************99*****************************************************************7")
        self.assertEqual(alignment.sequences[44].id, "HBB2_TRICR")
        self.assertEqual(alignment.sequences[44].seq, "VHLTAEDRKEIAAILGKVNVDSLGGQCLARLIVVNPWSRRYFHDFGDLSSCDAICRNPKVLAHGAKVMRSIVEATKHLDNLREYYADLSVTHSLKFYVDPENFKLFSGIVIVCLALTLQTDFSCHKQLAFEKLMKGVSHALGHGY")
        self.assertEqual(alignment.sequences[44].letter_annotations['posterior_probability'], "69*******************************************************************************************************************************************9988")
        self.assertEqual(alignment.column_annotations["reference_coordinate_annotation"], ".xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx......")
        self.assertEqual(alignment.column_annotations["consensus_posterior_probability"], ".679*****************************************************************************99******************************************************************7......")

    def test_reading_alignments_pfam1(self):
        """Test parsing Pfam record 120_Rick_ant."""
        path = "Stockholm/pfam1.seed.txt"
        with open(path) as stream:
            alignments = stockholm.AlignmentIterator(path)
            alignment = next(alignments)
            self.assertRaises(StopIteration, next, alignments)
        self.assertEqual(alignment.annotations["identification"], "120_Rick_ant")
        self.assertEqual(alignment.annotations["accession"], "PF12574.10")
        self.assertEqual(alignment.annotations["definition"], "120 KDa Rickettsia surface antigen")
        self.assertEqual(alignment.annotations["author"], ["Gavin OL;"])
        self.assertEqual(alignment.annotations["source of seed"], "Prosite")
        self.assertEqual(alignment.annotations["gathering method"], "25.00 25.00;")
        self.assertEqual(alignment.annotations["trusted cutoff"], "42.00 39.60;")
        self.assertEqual(alignment.annotations["noise cutoff"], "23.60 21.20;")
        self.assertEqual(alignment.annotations["build method"], "hmmbuild HMM.ann SEED.ann")
        self.assertEqual(alignment.annotations["search method"], "hmmsearch -Z 57096847 -E 1000 --cpu 4 HMM pfamseq")
        self.assertEqual(alignment.annotations["type"], "Family")
        self.assertEqual(alignment.annotations["references"][0]["number"], 1)
        self.assertEqual(alignment.annotations["references"][0]["medline"], "8112862")
        self.assertEqual(alignment.annotations["references"][0]["title"], "Cloning, sequencing, and expression of the gene coding for an antigenic 120-kilodalton protein of Rickettsia conorii.")
        self.assertEqual(alignment.annotations["references"][0]["author"], "Schuenke KW, Walker DH;")
        self.assertEqual(alignment.annotations["references"][0]["location"], "Infect Immun. 1994;62:904-909.")
        self.assertEqual(len(alignment.annotations["database_references"]), 2)
        self.assertEqual(alignment.annotations["database_references"][0], {'reference': 'INTERPRO; IPR020954;'})
        self.assertEqual(alignment.annotations["database_references"][1], {'reference': 'SO; 0100021; polypeptide_conserved_region;'})
        self.assertEqual(alignment.annotations["comment"], "This domain family is found in bacteria, and is approximately 40 amino acids in length. This family is a Rickettsia surface antigen of 120 KDa which may be used as an antigen for immune response against the bacterial species.")
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates,
                numpy.array(
                    [
                     [0, 8,  8, 229, 231, 235],
                     [0, 8, 13, 234, 234, 238]
                    ]
                ),
            )
        )
        self.assertEqual(alignment.sequences[0].id, "SCA4_RICPR/103-337")
        self.assertEqual(alignment.sequences[0].seq, "LAEQIAKEEDDRKFRAFLSNQDNYALINKAFEDTKTKKNLEKAEIVGYKNVLSTYSVANGYQGGFQPVQWENQVSASDLRSTVVKNDEGEELCTLNETTVKTKDLIVAKQDGTQVQINSYREINFPIKLDKANGSMHLSMVALKADGTKPAKDKAVYFTAHYEEGPNGKPQLKEISSPQPLKFVGTGDDAVAYIEHGGEIYTLAVTRGKYKEMMKEVALNHGQSVALSQTIAEDL")
        self.assertEqual(alignment.sequences[0].annotations['accession'], "Q9ZD49.2")
        self.assertEqual(alignment.sequences[1].id, "H8K5G2_RICAG/113-350")
        self.assertEqual(alignment.sequences[1].seq, "LAEQKRKEIEEEKEKDKTLSTFFGNPANREFIDKALENPELKKKLESIEIAGYKNVHNTFSAASGYPGGFKPVQWENQVSANDLRATVVKNDAGDELCTLNETTVKTKPFTVAKQDGTQVQISSYREIDFPIKLDKADGSMHLSMVALKADGTKPSKDKAVYFTAHYEEGPNGKPQLKEISSPKPLKFAGTGDDAIAYIEHGGEIYTLAVTRGKYKEMMKEVELNQGQSVDLSQAEDI")
        self.assertEqual(alignment.sequences[1].annotations['accession'], "H8K5G2.1")
        self.assertEqual(alignment[0], "LAEQIAKE-----EDDRKFRAFLSNQDNYALINKAFEDTKTKKNLEKAEIVGYKNVLSTYSVANGYQGGFQPVQWENQVSASDLRSTVVKNDEGEELCTLNETTVKTKDLIVAKQDGTQVQINSYREINFPIKLDKANGSMHLSMVALKADGTKPAKDKAVYFTAHYEEGPNGKPQLKEISSPQPLKFVGTGDDAVAYIEHGGEIYTLAVTRGKYKEMMKEVALNHGQSVALSQTIAEDL")
        self.assertEqual(alignment[1], "LAEQKRKEIEEEKEKDKTLSTFFGNPANREFIDKALENPELKKKLESIEIAGYKNVHNTFSAASGYPGGFKPVQWENQVSANDLRATVVKNDAGDELCTLNETTVKTKPFTVAKQDGTQVQISSYREIDFPIKLDKADGSMHLSMVALKADGTKPSKDKAVYFTAHYEEGPNGKPQLKEISSPKPLKFAGTGDDAIAYIEHGGEIYTLAVTRGKYKEMMKEVELNQGQSVDLSQ--AEDI")
        self.assertEqual(alignment.column_annotations['consensus_sequence'], "LAEQhtKE.....EcD+phpsFhuN.sNhthIsKAhEsschKKpLEphEIsGYKNVhsTaSsAsGY.GGFpPVQWENQVSAsDLRuTVVKNDtG-ELCTLNETTVKTKshhVAKQDGTQVQIsSYREIsFPIKLDKAsGSMHLSMVALKADGTKPuKDKAVYFTAHYEEGPNGKPQLKEISSPpPLKFsGTGDDAlAYIEHGGEIYTLAVTRGKYKEMMKEVtLNpGQSVsLSQ..AEDl")

    def test_reading_alignments_pfam2(self):
        """Test parsing Pfam record 7kD_DNA_binding."""
        path = "Stockholm/pfam2.seed.txt"
        with open(path) as stream:
            alignments = stockholm.AlignmentIterator(path)
            alignment = next(alignments)
            self.assertRaises(StopIteration, next, alignments)
        self.assertEqual(alignment.annotations["identification"], "7kD_DNA_binding")
        self.assertEqual(alignment.annotations["accession"], "PF02294.20")
        self.assertEqual(alignment.annotations["definition"], "7kD DNA-binding domain")
        self.assertEqual(len(alignment.annotations["author"]), 2)
        self.assertEqual(alignment.annotations["author"][0], "Mian N;0000-0003-4284-4749")
        self.assertEqual(alignment.annotations["author"][1], "Bateman A;0000-0002-6982-4660")
        self.assertEqual(alignment.annotations["source of seed"], "Pfam-B_8148 (release 5.2)")
        self.assertEqual(alignment.annotations["gathering method"], "25.00 25.00;")
        self.assertEqual(alignment.annotations["trusted cutoff"], "26.60 46.20;")
        self.assertEqual(alignment.annotations["noise cutoff"], "23.20 19.20;")
        self.assertEqual(alignment.annotations["build method"], "hmmbuild HMM.ann SEED.ann")
        self.assertEqual(alignment.annotations["search method"], "hmmsearch -Z 57096847 -E 1000 --cpu 4 HMM pfamseq")
        self.assertEqual(alignment.annotations["type"], "Domain")
        self.assertEqual(alignment.annotations["clan"], "CL0049")
        self.assertEqual(len(alignment.annotations["references"]), 1)
        self.assertEqual(alignment.annotations["references"][0]["number"], 1)
        self.assertEqual(alignment.annotations["references"][0]["medline"], "3130377")
        self.assertEqual(alignment.annotations["references"][0]["title"], "Microsequence analysis of DNA-binding proteins 7a, 7b, and 7e from the archaebacterium Sulfolobus acidocaldarius.")
        self.assertEqual(alignment.annotations["references"][0]["author"], "Choli T, Wittmann-Liebold B, Reinhardt R;")
        self.assertEqual(alignment.annotations["references"][0]["location"], "J Biol Chem 1988;263:7087-7093.")
        self.assertEqual(len(alignment.annotations["database_references"]), 3)
        self.assertEqual(alignment.annotations["database_references"][0]["reference"], "INTERPRO; IPR003212;")
        self.assertEqual(alignment.annotations["database_references"][1]["reference"], "SCOP; 1sso; fa;")
        self.assertEqual(alignment.annotations["database_references"][2]["reference"], "SO; 0000417; polypeptide_domain;")
        self.assertEqual(alignment.annotations["comment"], "This family contains members of the hyper-thermophilic archaebacterium  7kD DNA-binding/endoribonuclease P2 family. There are five 7kD DNA-binding proteins, 7a-7e, found as monomers in the cell. Protein 7e shows the  tightest DNA-binding ability.") 
        self.assertEqual(alignment.sequences[0].id, "DN7_METS5/4-61")
        self.assertEqual(alignment.sequences[0].annotations["accession"], "A4YEA2.1")
        self.assertEqual(alignment.sequences[1].id, "DN7A_SACS2/3-61")
        self.assertEqual(alignment.sequences[1].annotations["accession"], "P61991.2")
        self.assertEqual(len(alignment.sequences[1].annotations["database_references"]), 4)
        self.assertEqual(alignment.sequences[1].annotations["database_references"][0]["reference"], "PDB; 1SSO A; 2-60;")
        self.assertEqual(alignment.sequences[1].annotations["database_references"][1]["reference"], "PDB; 1JIC A; 2-60;")
        self.assertEqual(alignment.sequences[1].annotations["database_references"][2]["reference"], "PDB; 2CVR A; 2-60;")
        self.assertEqual(alignment.sequences[1].annotations["database_references"][3]["reference"], "PDB; 1B4O A; 2-60;")
        self.assertEqual(alignment.sequences[2].id, "DN7E_SULAC/3-60")
        self.assertEqual(alignment.sequences[2].annotations["accession"], "P13125.2")
        self.assertEqual(alignment.sequences[0].seq, "KIKFKYKGQDLEVDISKVKKVWKVGKMVSFTYDDNGKTGRGAVSEKDAPKELLNMIGK")
        self.assertEqual(alignment.sequences[1].seq, "TVKFKYKGEEKQVDISKIKKVWRVGKMISFTYDEGGGKTGRGAVSEKDAPKELLQMLEK")
        self.assertEqual(alignment.sequences[2].seq, "KVRFKYKGEEKEVDTSKIKKVWRVGKMVSFTYDDNGKTGRGAVSEKDAPKELMDMLAR")
        self.assertEqual(alignment[0], "KIKFKYKGQDLEVDISKVKKVWKVGKMVSFTYDD-NGKTGRGAVSEKDAPKELLNMIGK")
        self.assertEqual(alignment[1], "TVKFKYKGEEKQVDISKIKKVWRVGKMISFTYDEGGGKTGRGAVSEKDAPKELLQMLEK")
        self.assertEqual(alignment[2], "KVRFKYKGEEKEVDTSKIKKVWRVGKMVSFTYDD-NGKTGRGAVSEKDAPKELMDMLAR")
        self.assertEqual(alignment.sequences[1].letter_annotations["secondary_structure"], "EEEEESSSSEEEEETTTEEEEEESSSSEEEEEE-SSSSEEEEEEETTTS-CHHHHHHTT")
        self.assertEqual(alignment.column_annotations["consensus_secondary_structure"], "EEEEESSSSEEEEETTTEEEEEESSSSEEEEEE-SSSSEEEEEEETTTS-CHHHHHHTT")
        self.assertEqual(alignment.column_annotations["consensus_sequence"], "KVKFKYKGEEKEVDISKIKKVWRVGKMVSFTYDD.NGKTGRGAVSEKDAPKELLsMLuK")
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates,
                numpy.array(
[[0, 34, 34, 58],
 [0, 34, 35, 59],
 [0, 34, 34, 58]])))

    def test_reading_alignments_pfam3(self):
        """Test parsing Pfam record 12TM_1."""
        path = "Stockholm/pfam3.seed.txt"
        with open(path) as stream:
            alignments = stockholm.AlignmentIterator(path)
            alignment = next(alignments)
            self.assertRaises(StopIteration, next, alignments)
        self.assertEqual(alignment.annotations["identification"], "12TM_1")
        self.assertEqual(alignment.annotations["accession"], "PF09847.11")
        self.assertEqual(alignment.annotations["definition"], "Membrane protein of 12 TMs")
        self.assertEqual(alignment.annotations["previous identifier"], "DUF2074;")
        self.assertEqual(len(alignment.annotations["author"]), 3)
        self.assertEqual(alignment.annotations["author"][0], "COGs;")
        self.assertEqual(alignment.annotations["author"][1], "Finn RD;0000-0001-8626-2148")
        self.assertEqual(alignment.annotations["author"][2], "Sammut SJ;0000-0003-4472-904X")
        self.assertEqual(alignment.annotations['source of seed'], "COGs (COG3368)")
        self.assertEqual(alignment.annotations["gathering method"], "33.20 33.20;")
        self.assertEqual(alignment.annotations["trusted cutoff"], "33.60 33.20;")
        self.assertEqual(alignment.annotations["build method"], "hmmbuild HMM.ann SEED.ann")
        self.assertEqual(alignment.annotations["search method"], "hmmsearch -Z 57096847 -E 1000 --cpu 4 HMM pfamseq")
        self.assertEqual(alignment.annotations["noise cutoff"], "33.10 32.90;")
        self.assertEqual(alignment.annotations["type"], "Family")
        self.assertEqual(alignment.annotations["clan"], "CL0181")
        self.assertEqual(len(alignment.annotations["database_references"]), 2)
        self.assertEqual(alignment.annotations["database_references"][0]["reference"], "INTERPRO; IPR018646;")
        self.assertEqual(alignment.annotations["database_references"][1]["reference"], "SO; 0100021; polypeptide_conserved_region;")
        self.assertEqual(alignment.annotations["comment"], "This family carries twelve transmembrane regions. It does not have any characteristic nucleotide-binding-domains of the GxSGSGKST type. so it may not be an ATP-binding cassette transporter. However, it may well be a transporter of some description.  ABC transporters always have two nucleotide binding domains; this has two unusual conserved sequence-motifs: 'KDhKxhhR' and 'LxxLP'.")
        self.assertEqual(alignment.sequences[0].id, "O29855_ARCFU/39-477")
        self.assertEqual(alignment.sequences[1].id, "O29125_ARCFU/30-435")
        self.assertEqual(alignment.sequences[2].id, "Q8U2D3_PYRFU/39-485")
        self.assertEqual(alignment.sequences[3].id, "Q5JDA6_THEKO/35-482")
        self.assertEqual(alignment.sequences[4].id, "Q97VM1_SACS2/39-451")
        self.assertEqual(alignment.sequences[5].id, "Q9HM06_THEAC/17-497")
        self.assertEqual(alignment.sequences[6].id, "Q6L2L5_PICTO/38-510")
        self.assertEqual(alignment.sequences[0].annotations["accession"], "O29855.1")
        self.assertEqual(alignment.sequences[1].annotations["accession"], "O29125.1")
        self.assertEqual(alignment.sequences[2].annotations["accession"], "Q8U2D3.1")
        self.assertEqual(alignment.sequences[3].annotations["accession"], "Q5JDA6.1")
        self.assertEqual(alignment.sequences[4].annotations["accession"], "Q97VM1.1")
        self.assertEqual(alignment.sequences[5].annotations["accession"], "Q9HM06.1")
        self.assertEqual(alignment.sequences[6].annotations["accession"], "Q6L2L5.1")
        self.assertEqual(alignment.sequences[0].seq, "WIRYNALLLKIMFTFAALFSVGPAFFDDKVSYASSLLSLFFFFLMFGTAYAHGYFQVDLSYMHTFYSRSDISKVRFYGFFRLFDWPAVIALLSLLVLVGMRNPAGLLPALLGFLAVIMGALSIVILLGKRLGSVQTGRSLRAAFFRIFGLIAWLVSIYGLYLINQLAIYLMTFKNYEAYDSLFPISYGLWISQPFSAKYAALSLFYFALITLLFFYAVRELSKEEIAKHYGSLKGWKIKRRGKMTAMVIKDFKQLFRNPQLFVIALLPIYGALMQLVFYIKLSEVASVLYLQIFLAITVSSFMSLERSSYITALPLTDLEMKFSKILEGLLIYFVSMGIVAAVVIYKGGNLINSLSLFPTGFAVVLVAVQFSRRLTSEPVNVEAVIATLISFFIVLVPAAVGGVAVLILKAPFSSYAFPVSLAETLAVLAVFALLNRRK")
        self.assertEqual(alignment.sequences[1].seq, "SLRVQVAKSFFIMTFLGSFLCWVAFISSGLGLSLIFTLSLVFSQIYPAQNIAISASSRVFEPLRYLPVRFSERMLVVFFIDSINILAFATPTIAVLMVKNLYFGLYSLLWIIAAILLGYSMVFLYYALFGVKVRSGFSKSVLAGILFFAVLVFALRRFQEIPDLTPYLTPHLLLLSYAASSATIKLSTGRVWRSILNPEIVEVKGSSRLSSGSPLRAMLIKDFRLILRKNALFPLIVPLVIVMPNVVSIANMPNLSIFIITTISTLSTIDLRIIGNLENVDFLRMLPLSKRGFVMSKACLIFVISFAASLPAGSIAFIVSQNPFYLFMAFAIPAIVSMLSSLIIFWQKGEEIYFPEVGFLKWIGLLLVNFGAVYAVLSPRFILSQPVADIISSVLTLLAMTALFEK")
        self.assertEqual(alignment.sequences[2].seq, "NIIWGVFLQSVMYLGLGVMVAVSILYSENEVQKAIFFSSYLIIPFILTLYSTSLATAYLLSSKAVEPLKPLPLGNLNFIVSLTLLIENLPAFVFLIPASLALGNSIASLLGLLWICSTILMGHSLALFLQIKFSGIHVGKGSVVKTLVKVAGFLIIAGIYFIVQALMRILEDNIEVIAPIFRKYFIAFPFAASTIYEPYKSLVLLALYTLPFLALYFYDLKRLGEVLEGIKTYGKVATKYKLTVANPVTAMFRKDYRIIFRKNPYLGTFLSPLLMSIYFIYNLAKEGFPVMMTLFSIMGISVLGLVMLDPAFAMDREVFPFLSSLPIKRREYLLGKMLTVSLSPLTFSAILVLLSCAFNGTEALLLIPFLASPFLTSSIGILYVKHKMGNERIELPVLKFYDGIVMLILSMIPFIIVAIPLFLLSVPKGYLVSGAIILVGALILSKL")
        self.assertEqual(alignment.sequences[3].seq, "DLKKTLLFQTAMYAVFGLMLFPSLKGERDAVLVMASTYAILPFIIAFYATVTNSSYIASLDLFKPLLPLPIKLGGRYMSVLLLLESLPVMAFMVPGAVRIGMVVSATSGLLVLLWSAVGLMLGHVFGLLVYYSFGKTSSGRFADLKSLAKALGVILIFGLFYGFSYFQDYVLQNYTSIKESLGGYEFIYPLSVLSVDRPSFSAPLAGIYIAILGVAYYVLISRLWVRISEGSYTSGRRRRAGGLGVYPPELALMVKDFKTALRNTPVLTGLLVPIVIPIINVAGIFSNPDIGAFGGRLATITFVAALGWVSAVSVETLTKIEVKSFELLLSLPLERGRFLRGKLLTMAAIPSAVGVLALLGLSLKGFSSPIYLPMAVLVPLATCGIALHVYYHGTEGLALPQGGILKSLAVWILNAVVVGIIAGSWYLSYPIALLLTAAIDALLLWSL")
        self.assertEqual(alignment.sequences[4].seq, "NAVTIKISNIIAYTIATIVSASISLINKDAPFSFIFLDLIILANIFTTGLNVIFFVTNYDLKTFLLSLPLSERDVNRAVFRGIFEFFYYGFLASIVIAPISTYMITSSVLQALMAELEIIFFFSLSFALVMLLGKRIRLGITSALFRIGTSLIWIVFIMLPYGLTFKYVTIPTYILPIFPFGFLNIEGLLISLLYTGLSVFFAYKQSLKFLSFRLNSQYSTKYSIKLRSPLITYLYKDIRGLLRVPQASFLLTIPVFALIFSFFAPVYAIFYTIFMITTSSIMLILLEASGMQLLLSLPAGLRSSYISKLLIILIIYLIDVLIFSFFNRASLSLIMLPSTITSVELSLFISYNNVIKGKGMRLADPLSFIIREIEINSIIGIASILTFFANIYYSLLFSVLSLIMINIVVYKK")
        self.assertEqual(alignment.sequences[5].seq, "YVNISYGATSFSFIVFSLILVAPSLMEHRIYTLSSVVLLLFVYSLFINISNSLLFFVSVNINHILDPLRILPVDFPDHVIAVSWFIYTGSSSLFAVLPAIFLAAFLLGDPYILVIGLIWSIFSVLLGYIIGSSIFVAFGSRISGKRTRSTNILRNVGRIVFLVFVFAIFEIILYNANIVNGIIPRLPYPYSYFIPIFNIQSTVFFFHGIYMQATGFIISMVYTALASFAFIYVNRKAFYRLLEPTARNQSRVKTQMKAEVRSRPFSFFSKDLKISSRKSQNLVLLIMPLFFVFPTIMSEVLYAPTSKADPIILYNAMVAFVIVTSSFYSILFLVIEGNGISFIKALPLDGNSIIRWKISAPTFIFAVISISTLAAISVKALMGAAFYIIIIVDMMLYFVSSTVYNMNRLYRKIPDTADTVNFYSFGGQIAFITTFAFTGLIVGSADIFSLFLQDLLRLNAYFFFLINTVIGIIVLLFMVFR")
        self.assertEqual(alignment.sequences[6].seq, "TILLYYISNSLSFLFFSIVLNGIYYVKGNTNDISSFGIILFMYIFVIGIYSSLTYINGISINNLLSPVRSLPIKVNTDVPFLSWFIYTGSSYIFIIIPSLLFYYFLVHNLNTIILGLIYAFAMLLFGFIITAIAFIYSSRKPRAHTSLNNFLRILLIFVFLGFFYLIIYDPNILRAYSIYISSLPVYIKYIAFPLNIDYAVYFHPDIIATFFEYLSSFIILLIFFFIYKKIRSRLFYSLEYSEEVKSTEVTRTKIKRDSISVSFIKKDIKITARKSQNLTYILMPIIFVLPFLFTIISSRQPFLSLMFSILSLSILISSFYPIFTLIIENNGILIINALPINRKDIAKYKAYFSMIFYSIIITVVSIIIMAYKNIFNLYYVFIIPDLILIFYTAMIINLNRLIKKIPKGASTINYYSFGVFPTIVLFIVSGIIFGLLISPGIIISEFLYHSIKMSFIFDIIPDLIIFLIMIKK")
        self.assertEqual(alignment[0], "WIRYNALLLKIMFTFAALFSVGPAFFDDKVS----YASSLLSLFFFFLMFGTAYAHGYFQVDL---SYMHTFYSRSDISKVRFYGFFRLFDWPAVIALLS-----LLVLVGMRNPAGLLPALLGFLAVIMGALSIVILLGKRLGSVQTGR-SLRAAFFRIFGLIAWLVSIYGLYLINQLAI------YLMTFKNYEAYDSLFP-------ISYGLWISQPFSAKYAALSLFYF-ALITLLFFYAVRELSKE----EIAKHYGSLK-GWKIKRRGKMTAMVIKDFKQLFRNPQLFVIALLPIYGALM------------------QLVFYIKLSEVASVLYLQIFLAITVSSFMSLERSSYITALPLTDLEMKFSKILEGLLIYF-VSMGIVAAVVIYKG-GNLINSLSLFPTGFAVVLVAVQFSRRL-------TSEPVNVE---AVIATLISFFIVLVPAAVGGVAVLILKAPFS---SYAFPVSLAETLAVLAVFALLNRRK")
        self.assertEqual(alignment[1], "SLRVQVAKSFFIMTFLGSFLCWVAFISSGLG-----LSLIFTLSLVFSQIYPAQNIAISASS----RVFEPLRYLPVRFSERMLVVF-FIDSINILAFAT---PTIAVLMVKNLYFGLYSLLWIIAAILLG-YSMVFLYYALFGVKV--RSGFSKSVL--AGILFFAVLVFAL---------------RRFQEIPDLTPYLTP----------------------HLLLLSY--AASSATIKLSTGRVWRSILNPEIVEVKGSSR----LSSGSPLRAMLIKDFRLILRKN-ALFPLIVPLVIVMPNVVSIANMPN--------LSIFIITTISTLSTIDLRIIGNLENVDF--------LRMLPLSKRGFVMSKACLIFVISFAASLPAGSIAFIVS--QNPFYLFMAFAIPAIVSMLSSLIIFWQ-------KGEEIYFPEV-GFLKWIGLLLVNFGAVYAVLSPRFILSQPVA------DIISSVLTL----LAMTALFEK")
        self.assertEqual(alignment[2], "NIIWGVFLQSVMYLGLGVMVAVSILYSENEVQKAIFFSSYLIIPFILTLYSTSLATAYLLSS----KAVEPLKPLPLGNLNFIVSLTLLIENLPAFVFLI-----PASLALGNSIASLLGLLWICSTILMG-HSLALFLQIKFSGIHVGKGSVVKTLVKVAGFLI----IAGIYFIVQALMRILEDNIEVIAPIFRKYFIAFP--------FAASTIYEPYKS--LVLLALYT-LPFLALYFYDLKRLGEVL---EGIKTYGKVATKYKLTVANPVTAMFRKDYRIIFRKNPYLGTFLSPLLMSIYFIYNLAKEGFPVM-----MTLFSIMGISVLGLVMLDPAFAMDREVF------PFLSSLPIKRREYLLGKMLTVSLSPLTFSAILVLLSCAFNG-TEALLLIPFLASPFLTSSIGILYVKHKM------GNERIELPVL-KFYDGIVMLILSMIPFIIVAIPLFLLSVPKG------YLVSGAIIL----VGALILSKL")
        self.assertEqual(alignment[3], "DLKKTLLFQTAMYAVFGLML-FPSLKGERDA-VLVMASTYAILPFIIAFYATVTNSSYIASL----DLFKPLLPLPIKLGGRYMSVLLLLESLPVMAFMV--PGAVRIGMVVSATSGLLVLLWSAVGLMLG-HVFGLLVYYSFGKTSSGRFADLKSLAKALGVIL----IFGLFYGFSYFQDYVLQNYTSIKESLGGYEFIYP--------LSVLSVDRPSFS--APLAGIYI-AILGVAYYVLISRLWVRI--SEGSYTSGRRRRAGGLGVYPPELALMVKDFKTALRNTPVLTGLLVPIVIPIINVAGIFSNPDIGAFGGRLATITFVAALGWVSAVSVETLTKIEVKSF------ELLLSLPLERGRFLRGKLLTMAAIPSAVGV-LALLGLSLKGFSSPIYLPMAVLVPLATCGIALHVYYH--------GTEGLALPQG-GILKSLAVWILNAVVVGIIAG-SWYLSYPIA------LLLTAA-------IDALLLWSL")
        self.assertEqual(alignment[4], "NAVTIKISNIIAYTIATIVSASISLINKDAP----FSFIFLDLIILANIFTTGLNVIFFVTNY---DLKTFLLSLPLSERDVNRAVFRGIFEFFYYGFLA--SIVIAPISTYMITSSVLQALMAELEIIFF-FSLSFALVMLLGKRI--RLGITSALFRIGTSLIWIVFIMLPYGL-----------TFKYVTIPTYILPIFP--------FGFLNIEG------LLISLLYTGLSVFFAYKQSLKFLSFRL--------NSQYSTKYSIKLRSPLITYLYKDIRGLLRVPQASFLLTIPVFALIFSFFAPV------------YAIFYTIFMITTSSIMLIL---LEASGM------QLLLSLPAGLRSSYISKLLIILIIYL-------IDVLIFSFFNRASLSLIMLPSTITSVELSLFISYNNVI-----KGKGMRLA---DPLSFIIREIEINSIIGIASILTFFANIYYS------LLFSVLSLI----MINIVVYKK")
        self.assertEqual(alignment[5], "YVNISYGATSFSFIVFSLILVAPSLMEHRIY----TLSSVVLLLFVYSLFINISNSLLFFVSVNINHILDPLRILPVDFPDHVIAVSWFIYTGSSSLFAVLPAIFLAAFLLGDPYILVIGLIWSIFSVLLG-YIIGSSIFVAFGSRISGKRTRSTNILRNVGRIVFLVFVFAIFEIILYNANIV---NGIIPRLPYPYSYFIPIFNIQSTVFFFHGIYMQATG--FIISMVYT-ALASFAFIYVNRKAFYRLLEP-TARNQSRVKTQMKAEVRSRPFSFFSKDLKISSRKSQNLVLLIMPLFFVFPTIMSEVLYAPTSKADPIILYNAMVAFVIVTSSFYSILFLVIEGNGI------SFIKALPLDGNSIIRWKISAPTFIFAVISISTLAAISVKAL-MGAAFYIIIIVDMMLYFVSSTVYNMNRLYRKIPDTADTVNFYSFGGQIAFITTFAFTGLIVGSADIFSLFLQDLLRLNAYFFFLINTVIGI----IVLLFMVFR")
        self.assertEqual(alignment[6], "TILLYYISNSLSFLFFSIVLNGIYYVKGNTN----DISSFGIILFMYIFVIGIYSSLTYINGISINNLLSPVRSLPIKVNTDVPFLSWFIYTGSSYIFIIIPSLLFYYFLVHNLNTIILGLIYAFAMLLFG-FIITAIAFI-----YSSRKPRAHTSLNNFLRILLIFVFLGFFYLIIYDPNILRAYSIYISSLPVYIKYIAFPLNIDYAVYFHPDIIATFFE--YLSSFIIL-LIFFFIYKKIRSRLFYSL--EYSEEVKSTEVTRTKIKRDSISVSFIKKDIKITARKSQNLTYILMPIIFVLPFLFTIISSRQPFLS----LMFSILSLSILISSFYPIFTLIIENNGI------LIINALPINRKDIAKYKAYFSMIFYSIIITVVSIIIMAYKN-IFNLYYVFIIPDLILIFYTAMIINLNRLIKKIPKGASTINYYSF-GVFPTIVLFIVSGIIFGLLISPGIIISEFLYHSIKMSFIFDIIPDL----IIFLIMIKK")
        self.assertEqual(alignment.column_annotations["consensus_sequence"], "slhhthhhpphhahhhulhlsssuhhscphs....hhSohhhL.Flhshahsshsshhhhss....clhcPLhsLPlp.tschhulhhhI.shsshsFhs....hltshhlhs.hsulLsLLauhhsllhG.aslshhlhhhhGthhsuRhuhspslh+.hGhllhhh.lhulahl..h.........hhh.pl.thh.hlhP........hhh.sI.t...t..hlluhlYh.hhhhhhahhshp+Lhhpl....h.cspuphppthplphtu..huhhhKDh+hhhRps.sLshllhPlhhsl..lhs.h............hhlhhlthh.shSslhl.hhhhlEssuh.......hlpuLPlscpphhhuKhhhhhlI.hhhuh.hshhshhhph.tpshhhlhhlssshhsshluhhhshpp.......su-slph..h.uhlshIshhllshlhhulssh.shhLs..hu......hlloss.hl....lhhLlhhc+")
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates,
                numpy.array(
                    [
[0, 20, 21, 31, 31, 31, 32, 58, 59, 59, 80, 81, 93, 93, 93, 93, 119, 120, 129, 134, 135, 137, 138, 138, 145, 147, 152, 156, 160, 163, 168, 168, 168, 169, 184, 184, 185, 193, 197, 199, 206, 207, 207, 224, 224, 224, 224, 225, 229, 234, 234, 237, 259, 260, 274, 274, 274, 274, 274, 274, 293, 296, 302, 308, 310, 334, 334, 337, 338, 340, 347, 348, 348, 374, 375, 375, 375, 375, 383, 383, 383, 404, 405, 414, 414, 417, 423, 426, 430, 439],
[0, 20, 21, 31, 31, 31, 31, 57, 57, 57, 78, 78, 90, 90, 90, 92, 118, 118, 127, 132, 133, 133, 134, 135, 142, 142, 147, 151, 155, 155, 155, 155, 155, 155, 170, 170, 170, 170, 170, 170, 177, 177, 177, 194, 195, 197, 198, 199, 203, 208, 208, 208, 230, 230, 244, 250, 254, 254, 254, 254, 273, 276, 282, 282, 282, 306, 307, 310, 311, 313, 320, 320, 320, 346, 347, 347, 347, 347, 355, 357, 357, 378, 379, 388, 388, 388, 394, 397, 397, 406],
[0, 20, 21, 31, 32, 35, 36, 62, 62, 62, 83, 84, 96, 96, 96, 96, 122, 122, 131, 136, 137, 139, 140, 141, 148, 150, 155, 155, 159, 162, 167, 170, 173, 174, 189, 189, 189, 197, 201, 201, 208, 209, 209, 226, 227, 227, 227, 228, 232, 237, 238, 241, 263, 264, 278, 284, 288, 291, 291, 291, 310, 313, 319, 319, 321, 345, 346, 349, 350, 352, 359, 360, 360, 386, 387, 388, 388, 388, 396, 398, 398, 419, 420, 429, 429, 429, 435, 438, 438, 447],
[0, 20, 20, 30, 30, 33, 34, 60, 60, 60, 81, 82, 94, 94, 95, 97, 123, 123, 132, 137, 138, 140, 141, 142, 149, 151, 156, 156, 160, 163, 168, 171, 174, 175, 190, 190, 190, 198, 202, 202, 209, 210, 210, 227, 228, 228, 229, 230, 234, 239, 240, 243, 265, 266, 280, 286, 290, 293, 294, 298, 317, 320, 326, 326, 328, 352, 353, 356, 356, 358, 365, 366, 367, 393, 393, 393, 393, 393, 401, 403, 403, 424, 424, 433, 433, 433, 439, 439, 439, 448],
[0, 20, 21, 31, 31, 31, 32, 58, 59, 59, 80, 81, 93, 93, 94, 96, 122, 122, 131, 136, 137, 137, 138, 139, 146, 148, 153, 157, 161, 164, 164, 164, 164, 165, 180, 180, 180, 188, 188, 188, 195, 196, 197, 214, 215, 215, 215, 215, 215, 220, 221, 224, 246, 247, 261, 267, 267, 267, 267, 267, 286, 286, 292, 292, 294, 318, 318, 318, 318, 318, 325, 326, 327, 353, 354, 355, 356, 356, 364, 364, 364, 385, 386, 395, 395, 395, 401, 404, 404, 413],
[0, 20, 21, 31, 31, 31, 32, 58, 59, 62, 83, 84, 96, 98, 99, 101, 127, 127, 136, 141, 142, 144, 145, 146, 153, 155, 160, 164, 168, 171, 176, 179, 179, 180, 195, 202, 203, 211, 215, 215, 222, 223, 223, 240, 241, 243, 244, 244, 248, 253, 254, 257, 279, 280, 294, 300, 304, 307, 308, 312, 331, 334, 340, 340, 342, 366, 367, 370, 371, 373, 380, 381, 381, 407, 408, 409, 410, 415, 423, 425, 426, 447, 448, 457, 460, 463, 469, 472, 472, 481],
[0, 20, 21, 31, 31, 31, 32, 58, 59, 62, 83, 84, 96, 98, 99, 101, 127, 127, 136, 136, 137, 139, 140, 141, 148, 150, 155, 159, 163, 166, 171, 174, 177, 178, 193, 200, 201, 209, 213, 213, 220, 221, 221, 238, 239, 239, 240, 241, 245, 250, 251, 254, 276, 277, 291, 297, 301, 304, 305, 305, 324, 327, 333, 333, 335, 359, 360, 363, 364, 366, 373, 374, 374, 400, 401, 402, 403, 408, 416, 418, 418, 439, 440, 449, 452, 455, 461, 464, 464, 473],
                    ]
                ),
            )
        )

    def test_reading_alignments_pfam4(self):
        """Test parsing Pfam record 3Beta_HSD."""
        path = "Stockholm/pfam4.seed.txt"
        with open(path) as stream:
            alignments = stockholm.AlignmentIterator(path)
            alignment = next(alignments)
            self.assertRaises(StopIteration, next, alignments)
        self.assertEqual(alignment.annotations["identification"], "3Beta_HSD")
        self.assertEqual(alignment.annotations["accession"], "PF01073.21")
        self.assertEqual(alignment.annotations["definition"], "3-beta hydroxysteroid dehydrogenase/isomerase family")
        self.assertEqual(len(alignment.annotations["author"]), 2)
        self.assertEqual(alignment.annotations["author"][0], "Finn RD;0000-0001-8626-2148")
        self.assertEqual(alignment.annotations["author"][1], "Bateman A;0000-0002-6982-4660")
        self.assertEqual(alignment.annotations["source of seed"], "Pfam-B_504 (release 3.0)")
        self.assertEqual(alignment.annotations["gathering method"], "22.00 22.00;")
        self.assertEqual(alignment.annotations["trusted cutoff"], "22.00 22.00;")
        self.assertEqual(alignment.annotations["noise cutoff"], "21.90 21.90;")
        self.assertEqual(alignment.annotations["build method"], "hmmbuild HMM.ann SEED.ann")
        self.assertEqual(alignment.annotations["search method"], "hmmsearch -Z 57096847 -E 1000 --cpu 4 HMM pfamseq")
        self.assertEqual(alignment.annotations["type"], "Family")
        self.assertEqual(len(alignment.annotations["wikipedia"]), 1)
        self.assertEqual(alignment.annotations["wikipedia"][0], "3β-Hydroxysteroid_dehydrogenase")
        self.assertEqual(alignment.annotations["clan"], "CL0063")
        self.assertEqual(len(alignment.annotations["references"]), 1)
        self.assertEqual(alignment.annotations["references"][0]["number"], 1)
        self.assertEqual(alignment.annotations["references"][0]["medline"], "1562516")
        self.assertEqual(alignment.annotations["references"][0]["title"], "Structure and tissue-specific expression of 3 beta-hydroxysteroid dehydrogenase/5-ene-4-ene isomerase genes in human and rat classical and peripheral steroidogenic tissues.")
        self.assertEqual(alignment.annotations["references"][0]["author"], "Labrie F, Simard J, Luu-The V, Pelletier G, Belanger A, Lachance Y, Zhao HF, Labrie C, Breton N, de Launoit Y, et al")
        self.assertEqual(alignment.annotations["references"][0]["location"], "J Steroid Biochem Mol Biol 1992;41:421-435.")
        self.assertEqual(len(alignment.annotations["database_references"]), 3)
        self.assertEqual(alignment.annotations["database_references"][0]["reference"], "INTERPRO; IPR002225;")
        self.assertEqual(alignment.annotations["database_references"][1]["reference"], "HOMSTRAD; Epimerase;")
        self.assertEqual(alignment.annotations["database_references"][2]["reference"], "SO; 0100021; polypeptide_conserved_region;")
        self.assertEqual(alignment.annotations["comment"], "The enzyme 3 beta-hydroxysteroid dehydrogenase/5-ene-4-ene isomerase (3 beta-HSD) catalyses the oxidation and isomerisation of 5-ene-3 beta-hydroxypregnene and 5-ene-hydroxyandrostene steroid precursors into the corresponding 4-ene-ketosteroids necessary for the formation of all classes of steroid hormones.")
        self.assertEqual(len(alignment.sequences), 8)
        self.assertEqual(alignment.sequences[0].id, "3BHS_FOWPN/7-287")
        self.assertEqual(alignment.sequences[1].id, "Q98318_MCV1/5-278")
        self.assertEqual(alignment.sequences[2].id, "3BHS_VACCW/5-274")
        self.assertEqual(alignment.sequences[3].id, "3BHS1_HUMAN/7-288")
        self.assertEqual(alignment.sequences[4].id, "3BHS1_MOUSE/7-288")
        self.assertEqual(alignment.sequences[5].id, "O22813_ARATH/15-299")
        self.assertEqual(alignment.sequences[6].id, "HSDD3_ARATH/16-287")
        self.assertEqual(alignment.sequences[7].id, "ERG26_YEAST/8-280")
        self.assertEqual(alignment.sequences[0].annotations["accession"], "Q67477.2")
        self.assertEqual(alignment.sequences[1].annotations["accession"], "Q98318.1")
        self.assertEqual(alignment.sequences[2].annotations["accession"], "P26670.1")
        self.assertEqual(alignment.sequences[3].annotations["accession"], "P14060.2")
        self.assertEqual(alignment.sequences[4].annotations["accession"], "P24815.3")
        self.assertEqual(alignment.sequences[5].annotations["accession"], "O22813.1")
        self.assertEqual(alignment.sequences[6].annotations["accession"], "A9X4U2.2")
        self.assertEqual(alignment.sequences[7].annotations["accession"], "P53199.1")
        self.assertEqual(alignment.sequences[0].seq, "VVTGGCGFLGRHIINNLILFESSLKEVRVYDIRIDQWLLDLVEKCNIIKIVPVIGDVRNKSTLDEALRSADVVIHIASINDVAGKFTNDSIMDVNINGTKNVVDSCLYNGVRVLVYTSSYSAVGPNFLGDAMIRGNENTYYQSNHKEAYPLSKQLSEKYILEANGTMSNIGLRLCTCALRPLGVFGEYCPVLETLYRRSYKSRKMYKYADDKVFHSRVYAGNVAWMHILAARNMIENGQHSPLCNNVYYCYDTSPTEHYHDFNMHFFNQLGMDLRNTCLPL")
        self.assertEqual(alignment.sequences[1].seq, "AVTGGGGFIGSYIVRALLQCERTLIELRVIDVRWGTKVSSRNVNVVYIYCDVCDTARLCAALEGVDVLIHTAGLVDVMGEYSEDEIYRANVHGTHSALSACVCAGVRFVVYTSSMEVVGPNMRAEPFVGDEKTEYESCHQHCYPRSKAEAEELVLSSNGRRVRGGQRMLTCALRPPGVYGEGNQLLLRLAKNYVRMGLHVPRTVCENALQSRVYVGNVAWMHVLAARALQEPDSRLPGNAYFCYDHSPCMDYEAFNVMLLRSFGVELGGPRLPR")
        self.assertEqual(alignment.sequences[2].seq, "AVTGGAGFLGRYIVKLLISADDVQEIRVIDIVEDPQPITSKVKVINYIQCDINDFDKVREALDGVNLIIHTAALVDVFGKYTDNEIMKVNYYGTQTILAACVDLGIKYLIYTSSMEAIGPNKHGDPFIGHEHTLYDISPGHVYAKSKRMAEQLVMKANNSVIMNGAKLYTCCLRPTGIYGEGDKLTKVFYEQCKQHGNIMYRTVDDDAVHSRVYVGNVAWMHVLAAKYIQYPGSEIKGNAYFCYDYSPSCSYDMFNLLLMKPLGIEQGSR")
        self.assertEqual(alignment.sequences[3].seq, "LVTGAGGFLGQRIIRLLVKEKELKEIRVLDKAFGPELREEFSKLQNKTKLTVLEGDILDEPFLKRACQDVSVIIHTACIIDVFGVTHRESIMNVNVKGTQLLLEACVQASVPVFIYTSSIEVAGPNSYKEIIQNGHEEEPLENTWPAPYPHSKKLAEKAVLAANGWNLKNGGTLYTCALRPMYIYGEGSRFLSASINEALNNNGILSSVGKFSTVNPVYVGNVAWAHILALRALQDPKKAPSIRGQFYYISDDTPHQSYDNLNYTLSKEFGLRLDSRWSFPL")
        self.assertEqual(alignment.sequences[4].seq, "LVTGAGGFVGQRIIKMLVQEKELQEVRALDKVFRPETKEEFSKLQTKTKVTVLEGDILDAQCLRRACQGISVVIHTAAVIDVTGVIPRQTILDVNLKGTQNLLEACVQASVPAFIFCSSVDVAGPNSYKKIVLNGHEEQNHESTWSDPYPYSKKMAEKAVLAANGSMLKNGGTLNTCALRPMYIYGERSPFIFNAIIRALKNKGILCVTGKFSIANPVYVENVAWAHILAARGLRDPKKSTSIQGQFYYISDDTPHQSYDDLNYTLSKEWGLRPNASWSLPL")
        self.assertEqual(alignment.sequences[5].seq, "VVTGGLGFVGAALCLELVRRGARQVRSFDLRHSSPWSDDLKNSGVRCIQGDVTKKQDVDNALDGADCVLHLASYGMSGKEMLRFGRCDEVNINGTCNVLEAAFKHEITRIVYVSTYNVVFGGKEILNGNEGLPYFPLDDHVDAYSRTKSIAEQLVLKSNGRPFKNGGKRMYTCAIRPAAIYGPGEDRHLPRIVTLTKLGLALFKIGEPSVKSDWIYVENLVLAIILASMGLLDDIPGREGQPVAAGQPYFVSDGYPVNTFEFLRPLLKSLDYDLPKCTISVPFAL")
        self.assertEqual(alignment.sequences[6].seq, "VVLGGRGFIGRSLVSRLLRLGNWTVRVADSGHTLHLDESDSLLEDALSSGRASYHCVDVRDKPQIVKVTEGSYVVFYMGATDLRSHDYFDCYKVIVQGTRNVISACRESGVRKLIYNSTADVVFDGSQPIRDGDESLRRPLKFQSMLTDFKAQAEALIKLANNRDGLLTCALRSSIVFGPGDTEFVPFLVNLAKSGYAKFILGSGENISDFTYSENVSHAHICAVKALDSQMEFVAGKEFFITNLKPVRFWDFVSHIVEGLGYPRPSIKLPV")
        self.assertEqual(alignment.sequences[7].seq, "LIIGGSGFLGLHLIQQFFDINPKPDIHIFDVRDLPEKLSKQFTFNVDDIKFHKGDLTSPDDMENAINESKANVVVHCASPMHGQNPDIYDIVNVKGTRNVIDMCKKCGVNILVYTSSAGVIFNGQDVHNADETWPIPEVPMDAYNETKAIAEDMVLKANDPSSDFYTVALRPAGIFGPGDRQLVPGLRQVAKLGQSKFQIGDNNNLFDWTYAGNVADAHVLAAQKLLDPKTRTAVSGETFFITNDTPTYFWALARTVWKADGHIDKHVIVLKR")
        self.assertEqual(alignment[0], "VVTGGCGFLGRHIINNLILFESSLKEVRVYD------IRIDQWLLDLVEKCNII-KIVPVIGDVRNKSTLDEALRSADVVIHIASINDVAG-KFTNDSIMDVNINGTKNVVDSCLYNGVRVLVYTSSYSAVGPNFLGDAMIRGNENTYYQSN--HKEAYPLSKQLSEKYILEANG-TMSNIGLRLCTCALRPLGVFGEYCPVLETLYRRSYKSR-KMYKYADDKVFHSRVYAGNVAWMHILAARNMIENGQ----HSPLCNNVYYCYDTSPTEHYHDFNMHFFNQLGMDLRN-T---CLPL")
        self.assertEqual(alignment[1], "AVTGGGGFIGSYIVRALLQCERTLIELRVID------VRWGTKV--SSRNVNVV----YIYCDVCDTARLCAALEGVDVLIHTAGLVDVMG-EYSEDEIYRANVHGTHSALSACVCAGVRFVVYTSSMEVVGPNMRAEPFV-GDEKTEYESC--HQHCYPRSKAEAEELVLSSNGRRVRGGQ-RMLTCALRPPGVYGEGNQLLLRLAKNYVRMGLHVPRTVCENALQSRVYVGNVAWMHVLAARALQEP------DSRLPGNAYFCYDHSPCMDYEAFNVMLLRSFGVELGGP----RLPR")
        self.assertEqual(alignment[2], "AVTGGAGFLGRYIVKLLISADD-VQEIRVID------IVEDPQP--ITSKVKVIN---YIQCDINDFDKVREALDGVNLIIHTAALVDVFG-KYTDNEIMKVNYYGTQTILAACVDLGIKYLIYTSSMEAIGPNKHGDPFI-GHEHTLYDIS--PGHVYAKSKRMAEQLVMKANNSVIMNGA-KLYTCCLRPTGIYGEGDKLTKVFYEQCKQHGNIMYRTVDDDAVHSRVYVGNVAWMHVLAAKYIQYP------GSEIKGNAYFCYDYSPSCSYDMFNLLLMKPLGIEQGSR--------")
        self.assertEqual(alignment[3], "LVTGAGGFLGQRIIRLLVKEKE-LKEIRVLD------KAFGPELREEFSKLQNKTKLTVLEGDILDEPFLKRACQDVSVIIHTACIIDVFG-VTHRESIMNVNVKGTQLLLEACVQASVPVFIYTSSIEVAGPNSYKEIIQNGHEEEPLENT--WPAPYPHSKKLAEKAVLAANGWNLKNGG-TLYTCALRPMYIYGEGSRFLSASINEALNNN-GILSSVGKFSTVNPVYVGNVAWAHILALRALQDPKK----APSIRGQFYYISDDTPHQSYDNLNYTLSKEFGLRLDSRW---SFPL")
        self.assertEqual(alignment[4], "LVTGAGGFVGQRIIKMLVQEKE-LQEVRALD------KVFRPETKEEFSKLQTKTKVTVLEGDILDAQCLRRACQGISVVIHTAAVIDVTG-VIPRQTILDVNLKGTQNLLEACVQASVPAFIFCSSVDVAGPNSYKKIVLNGHEEQNHEST--WSDPYPYSKKMAEKAVLAANGSMLKNGG-TLNTCALRPMYIYGERSPFIFNAIIRALKNKGILCVTGKFSI-ANPVYVENVAWAHILAARGLRDPKK----STSIQGQFYYISDDTPHQSYDDLNYTLSKEWGLRPNASW---SLPL")
        self.assertEqual(alignment[5], "VVTGGLGFVGAALCLELVRRG--ARQVRSFD------LRHSSPWSDDLKNSGVR----CIQGDVTKKQDVDNALDGADCVLHLASYGMSGKEMLRFGRCDEVNINGTCNVLEAAFKHEITRIVYVSTYNVVFG---GKEILNGNEGLPYFPLDDHVDAYSRTKSIAEQLVLKSNGRPFKNGGKRMYTCAIRPAAIYGPGEDRHLPRIVTLTKLGLALFKIGEPSVKSDWIYVENLVLAIILASMGLLDDIPGREGQPVAAGQPYFVSDGYPVN-TFEFLRPLLKSLDYDLPKCTISVPFAL")
        self.assertEqual(alignment[6], "VVLGGRGFIGRSLVSRLLRLGN--WTVRVADSGHTLHLDESDSLLEDALSSGRAS---YHCVDVRDKPQIVKVTEGSYVVFYM-GATDLRS-HDYFD-CYKVIVQGTRNVISACRESGVRKLIYNSTADVVFD--GSQPIRDGDESLRRPLK--FQSMLTDFKAQAEALIKLANN---RDG---LLTCALRSSIVFGPGDTEFVPFLVNLAKSGYAKFILGSGENISDFTYSENVSHAHICAVKALDSQ------MEFVAGKEFFITNLKPVR-FWDFVSHIVEGLGYPRPS-I---KLPV")
        self.assertEqual(alignment[7], "LIIGGSGFLGLHLIQQFFDINP-KPDIHIFD------VRDLPEKLSKQFTFNVDDI-KFHKGDLTSPDDMENAINESKANVVVHCASPMHG--QNPDIYDIVNVKGTRNVIDMCKKCGVNILVYTSSAGVIFN---GQDVHNADETWPIPEV--PMDAYNETKAIAEDMVLKAND-----PSSDFYTVALRPAGIFGPGDRQLVPGLRQVAKLGQSKFQIGDNNNLFDWTYAGNVADAHVLAAQKLLDPKT----RTAVSGETFFITNDTPTY-FWALARTVWKADGHIDKHVI---VLKR")
        self.assertEqual(alignment.column_annotations['consensus_sequence'], "lVTGGuGFlGppIlptLlptcp.lpElRVhD......lchssphh-chppsslts...hlpGDlpDpsplccAlcGssVlIHsAulsDVtG.hhsp-pIhcVNlpGTpNlL-AClpsGVphllYTSSh-VlGPN.hucsllsGcEpp.apss..atcsYscSKphAEchVLpANG..h+NGu.cLhTCALRPsuIYGEGsphlhshlppshKpG.thaphucssshpshVYVGNVAWAHILAA+uLp-Ph.....poslsGpsYFloDsoPsppYcsFNhpLhKshGhchsu.h...sLPl")

        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates,
                numpy.array([[  0,  21,  22,  23,  24,  31,  31,  38,  40,  48,  48,  49,  50,
         51,  76,  77,  84,  84,  85,  89,  90, 125, 127, 128, 133, 134,
        144, 144, 165, 165, 167, 169, 170, 171, 172, 173, 203, 203, 213,
        214, 237, 239, 239, 257, 258, 276, 276, 277, 277, 281],
       [  0,  21,  22,  23,  24,  31,  31,  38,  38,  46,  46,  46,  46,
         46,  71,  72,  79,  79,  80,  84,  85, 120, 122, 123, 128, 128,
        138, 138, 159, 160, 162, 164, 165, 166, 166, 167, 197, 198, 208,
        209, 232, 232, 232, 250, 251, 269, 270, 270, 270, 274],
       [  0,  21,  22,  22,  23,  30,  30,  37,  37,  45,  46,  46,  46,
         46,  71,  72,  79,  79,  80,  84,  85, 120, 122, 123, 128, 128,
        138, 138, 159, 160, 162, 164, 165, 166, 166, 167, 197, 198, 208,
        209, 232, 232, 232, 250, 251, 269, 270, 270, 270, 270],
       [  0,  21,  22,  22,  23,  30,  30,  37,  39,  47,  48,  49,  50,
         51,  76,  77,  84,  84,  85,  89,  90, 125, 127, 128, 133, 134,
        144, 144, 165, 166, 168, 170, 171, 172, 172, 173, 203, 203, 213,
        214, 237, 239, 239, 257, 258, 276, 277, 278, 278, 282],
       [  0,  21,  22,  22,  23,  30,  30,  37,  39,  47,  48,  49,  50,
         51,  76,  77,  84,  84,  85,  89,  90, 125, 127, 128, 133, 134,
        144, 144, 165, 166, 168, 170, 171, 172, 172, 173, 203, 204, 214,
        214, 237, 239, 239, 257, 258, 276, 277, 278, 278, 282],
       [  0,  21,  21,  21,  22,  29,  29,  36,  38,  46,  46,  46,  46,
         46,  71,  72,  79,  80,  81,  85,  86, 121, 121, 121, 126, 127,
        137, 139, 160, 161, 163, 165, 166, 167, 168, 169, 199, 200, 210,
        211, 234, 236, 240, 258, 258, 276, 277, 278, 281, 285],
       [  0,  21,  22,  22,  22,  29,  35,  42,  44,  52,  53,  53,  53,
         53,  78,  78,  85,  85,  86,  90,  90, 125, 125, 126, 131, 132,
        142, 142, 163, 163, 163, 165, 166, 166, 166, 166, 196, 197, 207,
        208, 231, 231, 231, 249, 249, 267, 267, 268, 268, 272],
       [  0,  21,  22,  22,  23,  30,  30,  37,  39,  47,  48,  49,  49,
         50,  75,  76,  83,  83,  83,  87,  88, 123, 123, 123, 128, 129,
        139, 139, 160, 160, 160, 160, 161, 162, 163, 164, 194, 195, 205,
        206, 229, 231, 231, 249, 249, 267, 268, 269, 269, 273]])))

    def test_reading_alignments_pfam5(self):
        """Test parsing Pfam record ArsP_1."""
        path = "Stockholm/pfam5.seed.txt"
        with open(path) as stream:
            alignments = stockholm.AlignmentIterator(path)
            alignment = next(alignments)
            self.assertRaises(StopIteration, next, alignments)
        self.assertEqual(alignment.annotations["identification"], "ArsP_1")
        self.assertEqual(alignment.annotations["accession"], "PF03773.15")
        self.assertEqual(alignment.annotations["definition"], "Predicted permease")
        self.assertEqual(alignment.annotations["previous identifier"], "DUF318;")
        self.assertEqual(alignment.annotations["author"], ["Bateman A;0000-0002-6982-4660"])
        self.assertEqual(alignment.annotations["source of seed"], "COG0701")
        self.assertEqual(alignment.annotations["gathering method"], "32.30 32.30;")
        self.assertEqual(alignment.annotations["trusted cutoff"], "32.30 32.40;")
        self.assertEqual(alignment.annotations["noise cutoff"], "32.20 32.20;")
        self.assertEqual(alignment.annotations["build method"], "hmmbuild  --handHMM.ann SEED.ann")
        self.assertEqual(alignment.annotations["search method"], "hmmsearch -Z 57096847 -E 1000 --cpu 4 HMM pfamseq")
        self.assertEqual(alignment.annotations["type"], "Family")
        self.assertEqual(len(alignment.annotations["nested_domains"]), 1)
        self.assertEqual(alignment.annotations["nested_domains"][0]["accession"], "PF04945;")
        self.assertEqual(alignment.annotations["nested_domains"][0]["location"], 'D4GY01.1/189-231')
        self.assertEqual(len(alignment.annotations["database_references"]), 3)
        self.assertEqual(alignment.annotations["database_references"][0]["reference"], "INTERPRO; IPR005524;")
        self.assertEqual(alignment.annotations["database_references"][1]["reference"], "TC; 2.A.119;")
        self.assertEqual(alignment.annotations["database_references"][2]["reference"], "SO; 0100021; polypeptide_conserved_region;")
        self.assertEqual(alignment.annotations["comment"], "This family of integral membrane proteins are predicted to be permeases of unknown specificity.")
        self.assertEqual(len(alignment.sequences), 11)
        self.assertEqual(alignment.sequences[0].id, "O26980_METTH/26-325")
        self.assertEqual(alignment.sequences[1].id, "O67395_AQUAE/24-315")
        self.assertEqual(alignment.sequences[2].id, "Q9X092_THEMA/31-364")
        self.assertEqual(alignment.sequences[3].id, "O28037_ARCFU/7-346")
        self.assertEqual(alignment.sequences[4].id, "Y584_METJA/16-362")
        self.assertEqual(alignment.sequences[5].id, "Y2963_MYCTU/18-329")
        self.assertEqual(alignment.sequences[6].id, "D4GY01_HALVD/35-380")
        self.assertEqual(alignment.sequences[7].id, "YCGR_BACSU/7-294")
        self.assertEqual(alignment.sequences[8].id, "Q9KCQ1_BACHD/41-335")
        self.assertEqual(alignment.sequences[9].id, "P72867_SYNY3/3-335")
        self.assertEqual(alignment.sequences[10].id, "P73433_SYNY3/6-329")
        self.assertEqual(alignment.sequences[0].annotations["accession"], "O26980.1")
        self.assertEqual(alignment.sequences[1].annotations["accession"], "O67395.1")
        self.assertEqual(alignment.sequences[2].annotations["accession"], "Q9X092.1")
        self.assertEqual(alignment.sequences[3].annotations["accession"], "O28037.1")
        self.assertEqual(alignment.sequences[4].annotations["accession"], "Q58004.3")
        self.assertEqual(alignment.sequences[5].annotations["accession"], "I6YET7.1")
        self.assertEqual(alignment.sequences[6].annotations["accession"], "D4GY01.1")
        self.assertEqual(alignment.sequences[7].annotations["accession"], "P94395.1")
        self.assertEqual(alignment.sequences[8].annotations["accession"], "Q9KCQ1.1")
        self.assertEqual(alignment.sequences[9].annotations["accession"], "P72867.1")
        self.assertEqual(alignment.sequences[10].annotations["accession"], "P73433.1")
        self.assertEqual(alignment.sequences[0].seq, "HLGSAVNFFIYDTIKIFILLATLIFVISFIRTYIPPNKVKETLEKRHRYTGNFIAALVGIITPFCSCSAVPLFIGFVEAGVPLGATFSFLISSPMINEIAIILLLGLFGWQITAFYILSGFIIAVLGGILIGKLKMETELEDYVYETLEKMRALGVADVELPKPTLRERYVIAKNEMKDILRRVSPYIVIAIAIGGWIHGYLPEDFLLQYAGADNIFAVPMAVIIGVPLYSNAAGTIPLISALIEKGMAAGTALALMMSITALSLPEMIILRKVMKPKLLATFIAILAVSITLTGYIFNL")
        self.assertEqual(alignment.sequences[1].seq, "HLAEALHFFVYDTLKIFTLLTVIIFVVSFIRSFFPLEKTREILSKHKAVALPLAAFLGILTPFCSCSAVPMFIGFVEAGIPLGAAFTFLVASPMVNEVALGLLLTLFGVKVAVLYVIFGVIVAIVAGYVIEKLNPRELIADYVFQVKLGQTQIKEMTFKERLEFAKNNVKEILGKIWIYIIIAIGIGGFIHGYVPQDIVERVAKTAGLIAVPLAVLIGIPLYSNAAGILPVIQALIAKGVPLGTALAFMMATTALSFPEFMILKQIMKPKLIAFFAGIVGISIIAVGYLFNF")
        self.assertEqual(alignment.sequences[2].seq, "ILNGFYLLHEYAREHVLLCLVPAFFIAGTISVMLKKDAVLKLLGPNAKRIISYPVAAISGGILAVCSCTILPLFGGIYKKGAGIGPATTFLFAGPAINIAAIFLTARVLGWDLGLARLIATITAAVLIGLIMEMIYQERGEGGLAFTSDDDQYGVRGIIFFLIQLGFLVTSSLGINQTLKYSLMTLLGISALFMALFGFKRDTVENWLYETWDFAKKILPYLFIGVFFAGVLTRLLPQQVVTALLGSNSFLSNLVASVIGTLMYFATLTEVPIVQALRELGMAKGPTLALLMAGNSLSLPSMIVITKLLGKKKAFTYFGLVVVFSTLFGMIYGV")
        self.assertEqual(alignment.sequences[3].seq, "LLAGIQALEEYIALHVLTCLVPAFLIAGALMSMMNKAVLINYLGAATSKLKSFPLAIVSSFFLAVCSCTVIPIASGIYKRTNATAPAMIILWVAPATNILAVTYTGAVLGLELALARIVAAISTAFVVGLILFYVFDRKIASQSDSAMPKAGRLVENNALVLFALLVATLLLPNYLGVGKPYIFKVEVFSVLMLVTTVYALKSFSKEDLKYWMLETWFFVKQIIPLLLVGVFIVGVVGEILKATDVVEVYLGGEGVGQSFLAALIGALSYFATMTEAPFVDTLMKLGMGKGPALALLLAGPGLSLPNMLAIGKLFGVKRAAVYIITIVALSTIAGVVYGE")
        self.assertEqual(alignment.sequences[4].seq, "MINTIIDYLNVNRVLALLMAFLMAGGIASMINKNFIIKYFGSNTPKYISYTVAAVSGSLLAVCSCTILPLFASIYKRGAGIGPATTFLFSGPAINVLAIFYSAALLGWDIGFLRAVFAVVVSILIGLSMEIIFKSHEKKRALRVPKADKISDRPLYQTITFFALQFIMLLVITASPKLFPTLSMPLYDGFLLKHLLFIILGIILAVTTKIWFKDEEIKNWLRESFTLLKIVFPLLIIGVAIAGAIKAIIPPSYIATYVGGNSITANFIASFIGALMYFATLTEVPIIKALMELGMGVGPAMALLLAGPSLSIPTVLTISKVLGKTKALTYLGLVVIFSTICGYIAGI")
        self.assertEqual(alignment.sequences[5].seq, "IGHALALTASMTWEILWALILGFALSAVVQAVVRRSTIVTLLGDDRPRTLVIATGLGAASSSCSYAAVALARSLFRKGANFTAAMAFEIGSTNLVVELGIILALLMGWQFTAAEFVGGPIMILVLAVLFRLFVGARLIDAAREQAERGLAGSMEGHAAMDMSIKREGSFWRRLLSPPGFTSIAHVFVMEWLAILRDLILGLLIAGAIAAWVPESFWQSFFLANHPAWSAVWGPIIGPIVAIVSFVCSIGNVPLAAVLWNGGISFGGVIAFIFADLLILPILNIYRKYYGARMMLVLLGTFYASMVVAGYLIE")
        self.assertEqual(alignment.sequences[6].seq, "SAREALSTTAAMAWVTWWALVVGFAIAGGVEAWTSGEEVSELLEGHGPREIGYGSLFGFVSSSCSYSAIATAKNLFKKGGSAAATLGAFMFASTNLVIEIGAVIWILLGWQFLVADILGGFILIGLMAFGFVYLVPDEVVEQARRNVQDEGSETVRDPVCGMEVDPDETEYSVERDGRTFYFCSKSCKESFDPEEANTTVRERATSLSGWKALADKQWKEWGMLWDEIAIGFVFAGLIAGFIPDAVWTSVFSGPTFGLPVYVFWTAVLGAVIGVATFVCSVGNVPFGAVLFSNGLPFGSVLSYIYADLIVPPIVDAYREYYGTTFAAVLSGMIFVAAVLTGVVIHF")
        self.assertEqual(alignment.sequences[7].seq, "FLQLNSIFISILIEAIPFILIGVILSGIIQMFVSEEMIARIMPKNRFLAVLFGALAGVLFPACECGIIPITRRLLLKGVPLHAGVAFMLTAPIINPIVLFSTYIAFGNRWSVVFYRGGLALAVSLIIGVILSYQFKDNQLLKPDEPGHHHHHHGTLLQKLGGTLRHAIDEFFSVGKYLIIGAFIAAAMQTYVKTSTLLAIGQNDVSSSLVMMGLAFVLSLCSEVDAFIASSFSSTFSLGSLIAFLVFGAMVDIKNLLMMLAAFKKRFVFLLITYIVVIVLAGSLLVKG")
        self.assertEqual(alignment.sequences[8].seq, "WMNVNTIFLGIVIEAVPFILLGVFVSALIQIYVKEDTIQRYLPKNAYAALLPAAVLGAIFPICECAIVPIVRRLIKKGMPLHVGVVFLVAAPILNPIVAASTYFAFRTDLTVLYARMGLAFILSIVIGGLLYVMFKNSDQLKWTKEELVGRVPVQSDMELKPKMNRLKQTLYHASDEFFLMGKYLIAGAFIAALFQTFLDRNILVTIGSNEWSSTGVMMAFAFILSLCSEADAFVAASFGSTFTTGSLIAFLVYGPMLDLKNTIMLFAFFKSKFVLAFMITVTVVVFLAVMVLQF")
        self.assertEqual(alignment.sequences[9].seq, "QLHEAFTIFLSLLVEAIPFLTFGVVLSSALLVFSDEKKLIAYIPRNPFLGAIAGSLVGFMFPVCECGNVPVARRFLMQGLPPSVAVAFLLAAPTINPIVIWSTWVAFRDQPGMVVARVVCSLIITVIVSWVFSRQLDAVPLLKPALGRRLAYLTRPEESPTAIACESPLLQSGTFLLGSGNSGQLLKLDEQAVETLLPPIAPSRWEMFTDNIVQELRELGGMLILGSLIAAVIQVFIPREWILLLGQGTISSILAMMLLSVVVSVCSTVDSFFALSFVSTFTSSSLLAFLVFGPMIDVKSIGLLLSVFQRRIVIYLLLLTGQLTFLLSLAHSY")
        self.assertEqual(alignment.sequences[10].seq, "EFNLFLDLLGSALLLSLPWLLLGIIISSTFLIWTDEQKWVANFPRNRLLSSLVGSALGFLLPLGAFGSVPLVRRLLLQGAPIPLAVSFLVAAPTLNIFAIVRVLSSRQSQYGLIFLCISCSWLMAIVMGLVFSTYRLARQQAEDEGETALLNIPLLRSGALIILQSSMEASPRQGGLVFASGVNPVADFSWRQKLHLFGRNIIEEFQEFGGVLVIGTAIACGIVFFLPQAWLLQWAGLGPVRQTVLMMGWSFILPLGNFSNPDLLAPLGEQLWRGSMVAFLLWGSLFNLQTIGLWLVTLRLRPLSYLVVLVGLSVFLFAMVTNY")
        self.assertEqual(alignment[0], "HLGSAVNFFIYDTIKIFILLATLIFVISFIRTYIPPNKVKETLE-KRHRYTGNFIAALVGIITPFCSCSAVPLFIGFVEAGVPLGATF-SFLISSPMINEIAIILLLGLFG--WQITAFYILSGFIIAVLGGILIGKLKMETELEDYVYETLE-------------------------KMRALGVADV------------------ELPKPTLR---ERYV--IAKNEMKDILRRVS-------PYIVIAIAIGGWIHGYL-PEDFLLQYA--GADNIF-------AVPMAVIIGVPLYSNAAGTIPLISALIEKGMAAGTALALMMSITALSLPEMIILRKVMKPKLLATFIAILAVSITLTGYIFNL")
        self.assertEqual(alignment[1], "HLAEALHFFVYDTLKIFTLLTVIIFVVSFIRSFFPLEKTREIL--SKHKAVALPLAAFLGILTPFCSCSAVPMFIGFVEAGIPLGAAF-TFLVASPMVNEVALGLLLTLFG--VKVAVLYVIFGVIVAIVAGYVIEKLNPRELIADYVFQV---------------------------KLGQTQIKEM-------------------TFKERLE---------FAKNNVKEILGKIW-------IYIIIAIGIGGFIHGYV-PQDIVERVA--KTAGLI-------AVPLAVLIGIPLYSNAAGILPVIQALIAKGVPLGTALAFMMATTALSFPEFMILKQIMKPKLIAFFAGIVGISIIAVGYLFNF")
        self.assertEqual(alignment[2], "ILNGFYLLHEYAREHVLLCLVPAFFIAGTISVMLKKDAVLKLLGPNAKRIISYPVAAISGGILAVCSCTILPLFGGIYKKGAGIGPAT-TFLFAGPAINIAAIFLTARVLG--WDLGLARLIATITAAVLIGLIMEMIYQERGEGGLAFTSDD-----DQYGVRGIIFFLIQLG--FLVTSSLGINQTLKYS----------LMTLLGISALFM---ALFG--FKRDTVENWLYETWDFAKKILPYLFIGVFFAGVLTRLL-PQQVVTALL--GSNSFL-------SNLVASVIGTLMYFATLTEVPIVQALRELGMAKGPTLALLMAGNSLSLPSMIVITKLLGKKKAFTYFGLVVVFSTLFGMIYGV")
        self.assertEqual(alignment[3], "LLAGIQALEEYIALHVLTCLVPAFLIAGALMSMMNKAVLINYLGAATSKLKSFPLAIVSSFFLAVCSCTVIPIASGIYKRTNATAPAM-IILWVAPATNILAVTYTGAVLG--LELALARIVAAISTAFVVGLILFYVFDRKIASQSDSAMPKAGRLVEN---NALVLFALLVAT-LLLPNYLGVGKPYIFKV--------EVFSVLMLVTTVY---ALKS--FSKEDLKYWMLETWFFVKQIIPLLLVGVFIVGVVGEILKATDVVEVYL--GGEGVG-------QSFLAALIGALSYFATMTEAPFVDTLMKLGMGKGPALALLLAGPGLSLPNMLAIGKLFGVKRAAVYIITIVALSTIAGVVYGE")
        self.assertEqual(alignment[4], "---MINTIIDYLNVNRVLALLMAFLMAGGIASMINKNFIIKYFGSNTPKYISYTVAAVSGSLLAVCSCTILPLFASIYKRGAGIGPAT-TFLFSGPAINVLAIFYSAALLG--WDIGFLRAVFAVVVSILIGLSMEIIFKSHEKKRALR-VPKADKISDRPLYQTITFFALQFIMLLVITASPKLFPTLSMPLYDGFLLKHLLFIILGIILAVT---TKIW--FKDEEIKNWLRESFTLLKIVFPLLIIGVAIAGAIKAII-PPSYIATYV--GGNSIT-------ANFIASFIGALMYFATLTEVPIIKALMELGMGVGPAMALLLAGPSLSIPTVLTISKVLGKTKALTYLGLVVIFSTICGYIAGI")
        self.assertEqual(alignment[5], "-IGHALALTASMTWEILWALILGFALSAVVQAVVRRSTIVTLLGDDRPR--TLVIATGLGAASSSCSYAAVALARSLFRKGANFTAAM-AFEIGSTNLVVELGIILALLMG--WQFTAAEFVGGPIMILVLAVLF-RLFVGARLIDAAREQAERGLAGSMEGHAAMDMS---------IKREGSFWRR------------------LLSPPGFT---S-----IAHVFVMEW-LAIL-------RDLILGLLIAGAIAAWV-PESFWQSFFLANHPAWSA----VWGPIIGPIVAIVSFVCSIGNVPLAAVLWNGGISFGGVIAF-IFADLLILPILNIYRKYYGARMMLVLLGTFYASMVVAGYLIE-")
        self.assertEqual(alignment[6], "SAREALSTTAAMAWVTWWALVVGFAIAGGVEAWTSGEEVSELLEGHGPREIGY--GSLFGFVSSSCSYSAIATAKNLFKKGGSAAATLGAFMFASTNLVIEIGAVIWILLG--WQFLVADILGGFILIGLMAFGFVYLVPDEVVEQARRNVQDEGSETVRDPVCGMEVDPDETE--YSVERDGRTFYFCSKSCKESFDPEEANTTVRERATSLS---GWKA--LADKQWKEW-GMLW-------DEIAIGFVFAGLIAGFI-PDAVWTSVF--SGPTFGLPVYVFWTAVLGAVIGVATFVCSVGNVPFGAVLFSNGLPFGSVLSY-IYADLIVPPIVDAYREYYGTTFAAVLSGMIFVAAVLTGVVIHF")
        self.assertEqual(alignment[7], "-FLQLNSIFISILIEAIPFILIGVILSGIIQMFVSEEMIARIM--PKNRFLAVLFGALAGVLFPACECGIIPITRRLLLKGVPLHAGV-AFMLTAPIINPIVLFSTYIAFGNRWSVVFYRGGLALAVSLIIGVILSYQFKDNQLLKPD------------------------------EPGHHHHHHG-------------------TLLQKLG---G-----TLRHAIDEF-FSVG-------KYLIIGAFIAAAMQTYV-KTSTLLAI---GQNDVS-------SSLVMMGLAFVLSLCSEVD-AFIASSFSSTFSLGSLIAFLVFGAMVDIKNLLMMLAAFKKRFVFLLITYIVVIVLAGSLLVKG")
        self.assertEqual(alignment[8], "-WMNVNTIFLGIVIEAVPFILLGVFVSALIQIYVKEDTIQRYL--PKNAYAALLPAAVLGAIFPICECAIVPIVRRLIKKGMPLHVGV-VFLVAAPILNPIVAASTYFAFRTDLTVLYARMGLAFILSIVIGGLLYVMFKNSDQLKWTKEE---------------------------LVGRVPVQSD------------------MELKPKMN---RLKQ--TLYHASDEF-FLMG-------KYLIAGAFIAALFQTFL-DRNILVTI---GSNEWS-------STGVMMAFAFILSLCSEAD-AFVAASFGSTFTTGSLIAFLVYGPMLDLKNTIMLFAFFKSKFVLAFMITVTVVVFLAVMVLQF")
        self.assertEqual(alignment[9], "QLHEAFTIFLSLLVEAIPFLTFGVVLSSALLVFSDEKKLIAYI--PRNPFLGAIAGSLVGFMFPVCECGNVPVARRFLMQGLPPSVAV-AFLLAAPTINPIVIWSTWVAFRDQPGMVVARVVCSLIITVIVSWVFSRQLDAVPLLKPALGRRLAYLTRPEESPTAIACESPLLQSGTFLLGSGNSGQLLKLD----------EQAVETLLPPIA---PSRWEMFTDNIVQEL-RELG-------GMLILGSLIAAVIQVFI-PREWILLL---GQGTIS-------SILAMMLLSVVVSVCSTVD-SFFALSFVSTFTSSSLLAFLVFGPMIDVKSIGLLLSVFQRRIVIYLLLLTGQLTFLLSLAHSY")
        self.assertEqual(alignment[10], "EFNLFLDLLGSALLLSLPWLLLGIIISSTFLIWTDEQKWVANF--PRNRLLSSLVGSALGFLLPLGAFGSVPLVRRLLLQGAPIPLAV-SFLVAAPTLNIFAIVRVLSSRQSQYGLIFLCISCSWLMAIVMGLVFSTYRLARQQAEDEGETALLNIPLLRSGALIILQSSMEA-----SPRQGGLVFA------------------SGVNPVADFSWRQKLHLFGRNIIEEF-QEFG-------GVLVIGTAIACGIVFFL-PQAWLLQWA--GLGPVR-------QTVLMMGWSFILPLGNFSN-PDLLAPLGEQLWRGSMVAFLLWGSLFNLQTIGLWLVTLRLRPLSYLVVLVGLSVFLFAMVTNY")
        self.assertEqual(alignment.column_annotations['consensus_sequence'], ".htphhslhhhhslcslhhLlhuhhluuslpsahscpplhchL..s+s+hluhhlAulhGhlhssCSCuslPlspslhc+GsslusAh.sFLluuPslN.lslhhshhlhG..aplshhcllsuhllulllGllhthlh.spthtcsshph.............hh............lhspssltps...................tlhssls...s.h...hs+ptlcEa.hchh.......shLlIGshIAGsIpsal.Ppshlhshh..Gsssls.......ushluslluhlhahsohsshPhlsuLhspGhshGoslAaLlhGshLslPshhhltphhtt+hshshlshlslhshlsGhlhsh")
        self.assertEqual(alignment.column_annotations['reference_coordinate_annotation'], "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxx..xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx................................................xxxxxxxx...xxxx..xxxxxxxxx.xxxx.......xxxxxxxxxxxxxxxxx.xxxxxxxxx..xxxxxx.......xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates,
                numpy.array([[  0,   1,   3,  43,  44,  44,  48,  50,  52,  54,  87,  87, 109,
        109, 131, 132, 144, 145, 146, 147, 149, 149, 149, 149, 149, 149,
        149, 149, 149, 149, 159, 159, 159, 159, 159, 159, 160, 167, 167,
        168, 171, 171, 180, 181, 185, 185, 202, 202, 210, 211, 211, 217,
        217, 217, 217, 236, 237, 256, 257, 299, 300],
       [  0,   1,   3,  43,  43,  43,  47,  49,  51,  53,  86,  86, 108,
        108, 130, 131, 143, 144, 145, 146, 146, 146, 146, 146, 146, 146,
        146, 146, 146, 146, 156, 156, 156, 156, 156, 156, 156, 163, 163,
        163, 163, 163, 172, 173, 177, 177, 194, 194, 202, 203, 203, 209,
        209, 209, 209, 228, 229, 248, 249, 291, 292],
       [  0,   1,   3,  43,  44,  45,  49,  51,  53,  55,  88,  88, 110,
        110, 132, 133, 145, 146, 147, 148, 150, 150, 152, 155, 161, 165,
        166, 166, 166, 168, 178, 182, 182, 182, 182, 186, 187, 194, 194,
        195, 198, 198, 207, 208, 212, 219, 236, 236, 244, 245, 245, 251,
        251, 251, 251, 270, 271, 290, 291, 333, 334],
       [  0,   1,   3,  43,  44,  45,  49,  51,  53,  55,  88,  88, 110,
        110, 132, 133, 145, 146, 147, 148, 150, 155, 157, 157, 163, 167,
        168, 169, 169, 171, 181, 185, 186, 186, 187, 191, 192, 199, 199,
        200, 203, 203, 212, 213, 217, 224, 241, 242, 250, 251, 251, 257,
        257, 257, 257, 276, 277, 296, 297, 339, 340],
       [  0,   0,   0,  40,  41,  42,  46,  48,  50,  52,  85,  85, 107,
        107, 129, 130, 142, 143, 143, 144, 146, 151, 153, 156, 162, 166,
        167, 168, 169, 171, 181, 185, 186, 194, 195, 199, 200, 207, 207,
        208, 211, 211, 220, 221, 225, 232, 249, 249, 257, 258, 258, 264,
        264, 264, 264, 283, 284, 303, 304, 346, 347],
       [  0,   0,   2,  42,  43,  44,  48,  48,  50,  52,  85,  85, 107,
        107, 129, 129, 141, 142, 143, 144, 146, 151, 153, 156, 162, 162,
        162, 162, 162, 162, 172, 172, 172, 172, 172, 172, 173, 180, 180,
        181, 181, 181, 190, 190, 194, 194, 211, 211, 219, 220, 222, 228,
        229, 229, 231, 250, 251, 270, 270, 312, 312],
       [  0,   1,   3,  43,  44,  45,  49,  51,  53,  53,  86,  87, 109,
        109, 131, 132, 144, 145, 146, 147, 149, 154, 156, 159, 165, 169,
        170, 170, 170, 172, 182, 186, 187, 195, 196, 200, 201, 208, 208,
        209, 212, 212, 221, 221, 225, 225, 242, 242, 250, 251, 251, 257,
        258, 262, 264, 283, 284, 303, 303, 345, 346],
       [  0,   0,   2,  42,  42,  42,  46,  48,  50,  52,  85,  85, 107,
        109, 131, 132, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
        144, 144, 144, 144, 154, 154, 154, 154, 154, 154, 154, 161, 161,
        162, 162, 162, 171, 171, 175, 175, 192, 192, 200, 200, 200, 206,
        206, 206, 206, 225, 225, 244, 245, 287, 288],
       [  0,   0,   2,  42,  42,  42,  46,  48,  50,  52,  85,  85, 107,
        109, 131, 132, 144, 145, 146, 147, 147, 147, 147, 147, 147, 147,
        147, 147, 147, 147, 157, 157, 157, 157, 157, 157, 158, 165, 165,
        166, 169, 169, 178, 178, 182, 182, 199, 199, 207, 207, 207, 213,
        213, 213, 213, 232, 232, 251, 252, 294, 295],
       [  0,   1,   3,  43,  43,  43,  47,  49,  51,  53,  86,  86, 108,
        110, 132, 133, 145, 146, 147, 148, 150, 155, 157, 160, 166, 170,
        171, 172, 173, 175, 185, 189, 189, 189, 189, 193, 194, 201, 201,
        202, 205, 207, 216, 216, 220, 220, 237, 237, 245, 245, 245, 251,
        251, 251, 251, 270, 270, 289, 290, 332, 333],
       [  0,   1,   3,  43,  43,  43,  47,  49,  51,  53,  86,  86, 108,
        110, 132, 133, 145, 146, 147, 148, 150, 155, 157, 160, 166, 170,
        170, 170, 170, 170, 180, 180, 180, 180, 180, 180, 181, 188, 191,
        192, 195, 197, 206, 206, 210, 210, 227, 227, 235, 236, 236, 242,
        242, 242, 242, 261, 261, 280, 281, 323, 324]])))

    def test_reading_alignments_pfam6(self):
        """Test parsing Pfam record COX2_TM."""
        path = "Stockholm/pfam6.seed.txt"
        with open(path) as stream:
            alignments = stockholm.AlignmentIterator(path)
            alignment = next(alignments)
            self.assertRaises(StopIteration, next, alignments)
        self.assertEqual(alignment.annotations["identification"], "COX2_TM")
        self.assertEqual(alignment.annotations["accession"], "PF02790.17")
        self.assertEqual(alignment.annotations["definition"], "Cytochrome C oxidase subunit II, transmembrane domain")
        self.assertEqual(len(alignment.annotations["author"]), 2)
        self.assertEqual(alignment.annotations["author"][0], "Sonnhammer ELL;0000-0002-9015-5588")
        self.assertEqual(alignment.annotations["author"][1], "Griffiths-Jones SR;0000-0001-6043-807X")
        self.assertEqual(alignment.annotations["source of seed"], "Prosite")
        self.assertEqual(alignment.annotations["gathering method"], "22.80 18.00;")
        self.assertEqual(alignment.annotations["trusted cutoff"], "22.80 21.40;")
        self.assertEqual(alignment.annotations["noise cutoff"], "22.70 17.90;")
        self.assertEqual(alignment.annotations["build method"], "hmmbuild HMM.ann SEED.ann")
        self.assertEqual(alignment.annotations["search method"], "hmmsearch -Z 57096847 -E 1000 --cpu 4 HMM pfamseq")
        self.assertEqual(alignment.annotations["type"], "Family")
        self.assertEqual(alignment.annotations["wikipedia"], ["Cytochrome_c_oxidase_subunit_II"])
        self.assertEqual(len(alignment.annotations["references"]), 1)
        self.assertEqual(alignment.annotations["references"][0]["number"], 1)
        self.assertEqual(alignment.annotations["references"][0]["medline"], "8638158")
        self.assertEqual(alignment.annotations["references"][0]["title"], "The whole structure of the 13-subunit oxidized cytochrome c oxidase at 2.8 A.")
        self.assertEqual(alignment.annotations["references"][0]["author"], "Tsukihara T, Aoyama H, Yamashita E, Tomizaki T, Yamaguchi H, Shinzawa-Itoh K, Nakashima R, Yaono R, Yoshikawa S;")
        self.assertEqual(alignment.annotations["references"][0]["location"], "Science 1996;272:1136-1144.")
        self.assertEqual(len(alignment.annotations["database_references"]), 5)
        self.assertEqual(alignment.annotations["database_references"][0]["reference"], "INTERPRO; IPR011759;")
        self.assertEqual(alignment.annotations["database_references"][1]["reference"], "PROSITE; PDOC00075;")
        self.assertEqual(alignment.annotations["database_references"][2]["reference"], "SCOP; 1occ; fa;")
        self.assertEqual(alignment.annotations["database_references"][2]["comment"], "This family corresponds to chains b and o.")
        self.assertEqual(alignment.annotations["database_references"][3]["reference"], "TC; 3.D.4;")
        self.assertEqual(alignment.annotations["database_references"][4]["reference"], "SO; 0100021; polypeptide_conserved_region;")
        self.assertEqual(alignment.annotations["comment"], "The N-terminal domain of cytochrome C oxidase contains two transmembrane alpha-helices.")
        self.assertEqual(len(alignment.sequences), 11)
        self.assertEqual(alignment.sequences[0].id, "COX2_SCHPO/11-99")
        self.assertEqual(alignment.sequences[1].id, "COX2_CANGA/17-103")
        self.assertEqual(alignment.sequences[2].id, "COX2_NEUCR/14-102")
        self.assertEqual(alignment.sequences[3].id, "H9D0Q0_EMENI/15-102")
        self.assertEqual(alignment.sequences[4].id, "COX2_ARATH/17-103")
        self.assertEqual(alignment.sequences[5].id, "COX2_ANOGA/1-83")
        self.assertEqual(alignment.sequences[6].id, "COX2_CHICK/1-82")
        self.assertEqual(alignment.sequences[7].id, "COX2_SHEEP/1-83")
        self.assertEqual(alignment.sequences[8].id, "COX2_STRPU/1-83")
        self.assertEqual(alignment.sequences[9].id, "COX2_SYNY3/19-111")
        self.assertEqual(alignment.sequences[10].id, "A1BA41_PARDP/42-128")
        self.assertEqual(alignment.sequences[0].annotations["accession"], "P21534.4")
        self.assertEqual(alignment.sequences[1].annotations["accession"], "P43373.2")
        self.assertEqual(alignment.sequences[2].annotations["accession"], "P00411.2")
        self.assertEqual(alignment.sequences[3].annotations["accession"], "H9D0Q0.1")
        self.assertEqual(alignment.sequences[4].annotations["accession"], "P93285.2")
        self.assertEqual(alignment.sequences[5].annotations["accession"], "P34840.1")
        self.assertEqual(alignment.sequences[6].annotations["accession"], "P18944.1")
        self.assertEqual(alignment.sequences[7].annotations["accession"], "O78750.1")
        self.assertEqual(alignment.sequences[8].annotations["accession"], "P15545.1")
        self.assertEqual(alignment.sequences[9].annotations["accession"], "Q06474.2")
        self.assertEqual(alignment.sequences[10].annotations["accession"], "A1BA41.1")
        self.assertEqual(alignment.sequences[0].seq, "APSSWALYFQDGASPSYLGVTHLNDYLMFYLTFIFIGVIYAICKAVIEYNYNSHPIAAKYTTHGSIVEFIWTLIPALILILVALPSFKL")
        self.assertEqual(alignment.sequences[1].seq, "VPTPYGIYFQDSATPNQEGILELHDNIMFYLFIILGLVSWMLFTIVKTYSKNPMAYKYIKHGQTIEIIWTMFPAVILLIIAFPSFIL")
        self.assertEqual(alignment.sequences[2].seq, "APSPWGIYFQDSATPQMEGLVELHDNIMYYLVVILFGVGWILLSIIRNYISTKSPISHKYLNHGTLIELIWTITPAVILILIAFPSFKL")
        self.assertEqual(alignment.sequences[3].seq, "PTPWGIFFQDSASPQMEGIEELHNNIMFYLAIILFTVTWMMITIIRNFVAKKSPIAHKYMNHGTLIELIWTITPAFILILIAFPSFKL")
        self.assertEqual(alignment.sequences[4].seq, "AEPWQLGFQDAATPIMQGIIDLHHDIFFFLILILVFVLWILVRALWHFHYKKNAIPQRIVHGTTIEILWTIFPSIILMFIAIPSFAL")
        self.assertEqual(alignment.sequences[5].seq, "MATWANLGLQDSSSPLMEQLNFFHDHTLLILTMITILVGYIMGMLSFNKFTNRFLLHGQTIEIIWTVLPAIILMFIAFPSLRL")
        self.assertEqual(alignment.sequences[6].seq, "MANHSQLGFQDASSPIMEELVEFHDHALMVALAICSLVLYLLTLMLMEKLSSNTVDAQEVELIWTILPAIVLVLLALPSLQI")
        self.assertEqual(alignment.sequences[7].seq, "MAYPMQLGFQDATSPIMEELLHFHDHTLMIVFLISSLVLYIISLMLTTKLTHTSTMDAQEVETIWTILPAIILIMIALPSLRI")
        self.assertEqual(alignment.sequences[8].seq, "MGTWAQFGLQDASSPLMEELTYFHDYALIVLTLITILVFYGLVSLLVSSNTNRFFFEGQELETIWTVIPALILILIALPSLQL")
        self.assertEqual(alignment.sequences[9].seq, "VSLWYGQNHGLMPVAASADAEKVDGIFNYMMTIATGLFLLVEGVLVYCLIRFRRRKDDQTDGPPIEGNVPLEILWTAIPTVIVFTLAVYSFEV")
        self.assertEqual(alignment.sequences[10].seq, "PVNGGMNFQPASSPLAHDQQWLDHFVLYIITAVTIFVCLLLLICIVRFNRRANPVPARFTHNTPIEVIWTLVPVLILVAIGAFSLPI")
        self.assertEqual(alignment[0], "APSSWALY---FQDGASPSYLGVTHLNDYLMFYLTFIFIGVIYAICKAVIEYNYNSHPIAAKYTTHGSI-VEFIWTLIPALILILVALPSFKL")
        self.assertEqual(alignment[1], "VPTPYGIY---FQDSATPNQEGILELHDNIMFYLFIILGLVSWMLFTIVKTY--SKNPMAYKYIKHGQT-IEIIWTMFPAVILLIIAFPSFIL")
        self.assertEqual(alignment[2], "APSPWGIY---FQDSATPQMEGLVELHDNIMYYLVVILFGVGWILLSIIRNYISTKSPISHKYLNHGTL-IELIWTITPAVILILIAFPSFKL")
        self.assertEqual(alignment[3], "-PTPWGIF---FQDSASPQMEGIEELHNNIMFYLAIILFTVTWMMITIIRNFVAKKSPIAHKYMNHGTL-IELIWTITPAFILILIAFPSFKL")
        self.assertEqual(alignment[4], "-AEPWQLG---FQDAATPIMQGIIDLHHDIFFFLILILVFVLWILVRALWHFHYKKNAIPQR-IVHGTT-IEILWTIFPSIILMFIAIPSFAL")
        self.assertEqual(alignment[5], "MATWANLG---LQDSSSPLMEQLNFFHDHTLLILTMITILVGYIMGMLSFN------KFTNRFLLHGQT-IEIIWTVLPAIILMFIAFPSLRL")
        self.assertEqual(alignment[6], "MANHSQLG---FQDASSPIMEELVEFHDHALMVALAICSLVLYLLTLMLME------KLS-SNTVDAQE-VELIWTILPAIVLVLLALPSLQI")
        self.assertEqual(alignment[7], "MAYPMQLG---FQDATSPIMEELLHFHDHTLMIVFLISSLVLYIISLMLTT------KLTHTSTMDAQE-VETIWTILPAIILIMIALPSLRI")
        self.assertEqual(alignment[8], "MGTWAQFG---LQDASSPLMEELTYFHDYALIVLTLITILVFYGLVSLLVS------SNTNRFFFEGQE-LETIWTVIPALILILIALPSLQL")
        self.assertEqual(alignment[9], "VSLWYGQNHGLMPVAASADAEKVDGIFNYMMTIATGLFLLVEGVLVYCLIRFRRRKDDQTDGPPIEGNVPLEILWTAIPTVIVFTLAVYSFEV")
        self.assertEqual(alignment[10], "-PVNGGMN---FQPASSPLAHDQQWLDHFVLYIITAVTIFVCLLLLICIVRFNRRANPVPAR-FTHNTP-IEVIWTLVPVLILVAIGAFSLPI")
        self.assertEqual(alignment.column_annotations['consensus_sequence'], "hssshsls...FQDuuSP.MEtlhclHDahhhhLshIhhhVhalLshhlhpa..ptpslsp+.hhHGph.lElIWTllPAlILlhIAhPShpL")
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates,
                numpy.array([
                    [0, 1, 8,  8, 48, 49, 51, 54, 57, 58, 59, 60, 66, 66, 89],
                    [0, 1, 8,  8, 48, 49, 49, 52, 55, 56, 57, 58, 64, 64, 87],
                    [0, 1, 8,  8, 48, 49, 51, 54, 57, 58, 59, 60, 66, 66, 89],
                    [0, 0, 7,  7, 47, 48, 50, 53, 56, 57, 58, 59, 65, 65, 88],
                    [0, 0, 7,  7, 47, 48, 50, 53, 56, 57, 58, 58, 64, 64, 87],
                    [0, 1, 8,  8, 48, 48, 48, 48, 51, 52, 53, 54, 60, 60, 83],
                    [0, 1, 8,  8, 48, 48, 48, 48, 51, 51, 52, 53, 59, 59, 82],
                    [0, 1, 8,  8, 48, 48, 48, 48, 51, 52, 53, 54, 60, 60, 83],
                    [0, 1, 8,  8, 48, 48, 48, 48, 51, 52, 53, 54, 60, 60, 83],
                    [0, 1, 8, 11, 51, 52, 54, 57, 60, 61, 62, 63, 69, 70, 93],
                    [0, 0, 7,  7, 47, 48, 50, 53, 56, 57, 58, 58, 64, 64, 87]],
                )
            )
        )

    def test_reading_alignments_cath(self):
        """Test parsing CATH record 3.40.50.300/FF/634591."""
        path = "Stockholm/cath.sth"
        with open(path) as stream:
            alignments = stockholm.AlignmentIterator(path)
            alignment = next(alignments)
        self.assertEqual(alignment.annotations["identification"], "3.40.50.300/FF/634591")
        self.assertEqual(alignment.annotations["definition"], "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.annotations["accession"], "3.40.50.300/FF/634591")
        self.assertEqual(alignment.annotations["type"], "FunFam")
        self.assertEqual(alignment.annotations["database_references"][0]['reference'], "CATH: 4.2")
        self.assertEqual(alignment.annotations["database_references"][1]['reference'], "DOPS: 93.321")
        self.assertEqual(alignment.sequences[0].id, "Q76PD3/407-601")
        self.assertEqual(alignment.sequences[0].annotations["accession"], "Q76PD3")
        self.assertEqual(alignment.sequences[0].annotations["organism"], "Schizosaccharomyces pombe 972h-")
        self.assertEqual(alignment.sequences[0].description, "ATP-dependent RNA helicase dbp6")
        self.assertEqual(alignment.sequences[0].annotations["database_references"][0]["reference"], "GENE3D; dcf1549b8c827b8d28cb75f5ebe40523/407-601;")
        self.assertEqual(alignment.sequences[0].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Ascomycota; Taphrinomycotina; Schizosaccharomycetes; Schizosaccharomycetales; Schizosaccharomycetaceae; Schizosaccharomyces; Schizosaccharomyces pombe;")
        self.assertEqual(alignment.sequences[0].annotations["database_references"][2]["reference"], "GO; GO:0004004; GO:0005634; GO:0005730; GO:0005829; GO:0006364;")
        self.assertEqual(alignment.sequences[0].annotations["database_references"][3]["reference"], "EC; 3.6.4.13;")
        self.assertEqual(alignment.sequences[1].id, "G7E7V6/594-765")
        self.assertEqual(alignment.sequences[1].annotations["accession"], "G7E7V6")
        self.assertEqual(alignment.sequences[1].annotations["organism"], "Mixia osmundae IAM 14324")
        self.assertEqual(alignment.sequences[1].description, "Non-specific serine/threonine protein kinase")
        self.assertEqual(alignment.sequences[1].annotations["database_references"][0]["reference"], "GENE3D; e447debb4a700162e488214b6e658294/594-765;")
        self.assertEqual(alignment.sequences[1].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Pucciniomycotina; Mixiomycetes; Mixiales; Mixiaceae; Mixia; Mixia osmundae;")
        self.assertEqual(alignment.sequences[1].annotations["database_references"][2]["reference"], "EC; 2.7.11.1;")
        self.assertEqual(alignment.sequences[2].id, "Q8N8A6/480-666")
        self.assertEqual(alignment.sequences[2].annotations["accession"], "Q8N8A6")
        self.assertEqual(alignment.sequences[2].annotations["organism"], "Homo sapiens")
        self.assertEqual(alignment.sequences[2].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[2].annotations["database_references"][0]["reference"], "GENE3D; 70229c852ea6b3718588f7273753c8a7/480-666;")
        self.assertEqual(alignment.sequences[2].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Euarchontoglires; Primates; Haplorrhini; Simiiformes; Catarrhini; Hominoidea; Hominidae; Homininae; Homo; Homo sapiens;")
        self.assertEqual(alignment.sequences[2].annotations["database_references"][2]["reference"], "GO; GO:0003723; GO:0016020;")
        self.assertEqual(alignment.sequences[2].annotations["database_references"][3]["reference"], "EC; 3.6.4.13;")
        self.assertEqual(alignment.sequences[3].id, "Q6P9R1/453-639")
        self.assertEqual(alignment.sequences[3].annotations["accession"], "Q6P9R1")
        self.assertEqual(alignment.sequences[3].annotations["organism"], "Mus musculus")
        self.assertEqual(alignment.sequences[3].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[3].annotations["database_references"][0]["reference"], "GENE3D; cfb4177e1266d4f03c272873f98b50be/453-639;")
        self.assertEqual(alignment.sequences[3].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Euarchontoglires; Rodentia; Myomorpha; Muridae; Murinae; Mus; Mus; Mus musculus;")
        self.assertEqual(alignment.sequences[3].annotations["database_references"][2]["reference"], "GO; GO:0003723; GO:0016020;")
        self.assertEqual(alignment.sequences[3].annotations["database_references"][3]["reference"], "EC; 3.6.4.13;")
        self.assertEqual(alignment.sequences[4].id, "Q7FGZ2/321-520")
        self.assertEqual(alignment.sequences[4].annotations["accession"], "Q7FGZ2")
        self.assertEqual(alignment.sequences[4].annotations["organism"], "Arabidopsis thaliana")
        self.assertEqual(alignment.sequences[4].description, "DEAD-box ATP-dependent RNA helicase 1")
        self.assertEqual(alignment.sequences[4].annotations["database_references"][0]["reference"], "GENE3D; 0a909f3948cbbc529e8a71299ff94c58/321-520;")
        self.assertEqual(alignment.sequences[4].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Brassicales; Brassicaceae; Camelineae; Arabidopsis; Arabidopsis thaliana;")
        self.assertEqual(alignment.sequences[4].annotations["database_references"][2]["reference"], "GO; GO:0017151;")
        self.assertEqual(alignment.sequences[4].annotations["database_references"][3]["reference"], "EC; 3.6.4.13;")
        self.assertEqual(alignment.sequences[5].id, "P26802/422-682")
        self.assertEqual(alignment.sequences[5].annotations["accession"], "P26802")
        self.assertEqual(alignment.sequences[5].annotations["organism"], "Drosophila melanogaster")
        self.assertEqual(alignment.sequences[5].description, "Probable ATP-dependent RNA helicase Dbp73D")
        self.assertEqual(alignment.sequences[5].annotations["database_references"][0]["reference"], "GENE3D; 17a046f18dea1ba30123e25a3d2ef210/422-682;")
        self.assertEqual(alignment.sequences[5].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Brachycera; Muscomorpha; Ephydroidea; Drosophilidae; Drosophilinae; Drosophilini; Drosophila; Sophophora; melanogaster group; melanogaster subgroup; Drosophila melanogaster;")
        self.assertEqual(alignment.sequences[5].annotations["database_references"][2]["reference"], "EC; 3.6.4.13;")
        self.assertEqual(alignment.sequences[6].id, "Q6IS54/73-260")
        self.assertEqual(alignment.sequences[6].annotations["accession"], "Q6IS54")
        self.assertEqual(alignment.sequences[6].annotations["organism"], "Mus musculus")
        self.assertEqual(alignment.sequences[6].description, "Ddx51 protein")
        self.assertEqual(alignment.sequences[6].annotations["database_references"][0]["reference"], "GENE3D; 6e0c6a461c25f0d96fdd8379a4416ab2/73-260;")
        self.assertEqual(alignment.sequences[6].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Euarchontoglires; Rodentia; Myomorpha; Muridae; Murinae; Mus; Mus; Mus musculus;")
        self.assertEqual(alignment.sequences[7].id, "Q54BD6/292-561")
        self.assertEqual(alignment.sequences[7].annotations["accession"], "Q54BD6")
        self.assertEqual(alignment.sequences[7].annotations["organism"], "Dictyostelium discoideum")
        self.assertEqual(alignment.sequences[7].description, "Probable ATP-dependent RNA helicase ddx51")
        self.assertEqual(alignment.sequences[7].annotations["database_references"][0]["reference"], "GENE3D; 21295e0ac0f6c76d8a48b9fed775cd77/292-561;")
        self.assertEqual(alignment.sequences[7].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Dictyosteliida; Dictyostelium; Dictyostelium discoideum;")
        self.assertEqual(alignment.sequences[7].annotations["database_references"][2]["reference"], "EC; 3.6.4.13;")
        self.assertEqual(alignment.sequences[8].id, "K4CB60/311-513")
        self.assertEqual(alignment.sequences[8].annotations["accession"], "K4CB60")
        self.assertEqual(alignment.sequences[8].annotations["organism"], "Solanum lycopersicum")
        self.assertEqual(alignment.sequences[8].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[8].annotations["database_references"][0]["reference"], "GENE3D; 37fc7075b21a436ea9f0b35d01872f53/311-513;")
        self.assertEqual(alignment.sequences[8].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; asterids; Solanales; Solanaceae; Solanoideae; Solaneae; Solanum; Lycopersicon; Solanum lycopersicum;")
        self.assertEqual(alignment.sequences[9].id, "A8I6W1/162-318")
        self.assertEqual(alignment.sequences[9].annotations["accession"], "A8I6W1")
        self.assertEqual(alignment.sequences[9].annotations["organism"], "Chlamydomonas reinhardtii")
        self.assertEqual(alignment.sequences[9].description, "Predicted protein")
        self.assertEqual(alignment.sequences[9].annotations["database_references"][0]["reference"], "GENE3D; 4ae1bb5f9d359e9eeace4edb250153d6/162-318;")
        self.assertEqual(alignment.sequences[9].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Chlorophyta; Chlorophyceae; Chlamydomonadales; Chlamydomonadaceae; Chlamydomonas; Chlamydomonas reinhardtii;")
        self.assertEqual(alignment.sequences[10].id, "V4B0G8/355-546")
        self.assertEqual(alignment.sequences[10].annotations["accession"], "V4B0G8")
        self.assertEqual(alignment.sequences[10].annotations["organism"], "Lottia gigantea")
        self.assertEqual(alignment.sequences[10].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[10].annotations["database_references"][0]["reference"], "GENE3D; 487686eeb3fd88feb1484fa1e8c4d4d8/355-546;")
        self.assertEqual(alignment.sequences[10].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Mollusca; Gastropoda; Lottioidea; Lottiidae; Lottia; Lottia gigantea;")
        self.assertEqual(alignment.sequences[11].id, "W1NMC9/2-202")
        self.assertEqual(alignment.sequences[11].annotations["accession"], "W1NMC9")
        self.assertEqual(alignment.sequences[11].annotations["organism"], "Amborella trichopoda")
        self.assertEqual(alignment.sequences[11].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[11].annotations["database_references"][0]["reference"], "GENE3D; 69185c099e20b4c98ddc47be0fc8d9a9/2-202;")
        self.assertEqual(alignment.sequences[11].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Amborellales; Amborellaceae; Amborella; Amborella trichopoda;")
        self.assertEqual(alignment.sequences[12].id, "A9T7C5/320-461")
        self.assertEqual(alignment.sequences[12].annotations["accession"], "A9T7C5")
        self.assertEqual(alignment.sequences[12].annotations["organism"], "Physcomitrella patens")
        self.assertEqual(alignment.sequences[12].description, "Predicted protein")
        self.assertEqual(alignment.sequences[12].annotations["database_references"][0]["reference"], "GENE3D; 7a38cb64f74d125cf77cc5a5412a245d/320-461;")
        self.assertEqual(alignment.sequences[12].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Bryopsida; Funariidae; Funariales; Funariaceae; Physcomitrella; Physcomitrella patens;")
        self.assertEqual(alignment.sequences[13].id, "T1G264/312-497")
        self.assertEqual(alignment.sequences[13].annotations["accession"], "T1G264")
        self.assertEqual(alignment.sequences[13].annotations["organism"], "Helobdella robusta")
        self.assertEqual(alignment.sequences[13].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[13].annotations["database_references"][0]["reference"], "GENE3D; ac665c429b40883e0bdf8912fa671542/312-497;")
        self.assertEqual(alignment.sequences[13].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Annelida; Clitellata; Hirudinea; Rhynchobdellida; Glossiphoniidae; Helobdella; Helobdella robusta;")
        self.assertEqual(alignment.sequences[14].id, "W4XGG4/630-774")
        self.assertEqual(alignment.sequences[14].annotations["accession"], "W4XGG4")
        self.assertEqual(alignment.sequences[14].annotations["organism"], "Strongylocentrotus purpuratus")
        self.assertEqual(alignment.sequences[14].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[14].annotations["database_references"][0]["reference"], "GENE3D; cf110f21fe91f07a6f0c1bcfcdfef199/630-774;")
        self.assertEqual(alignment.sequences[14].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Echinodermata; Echinozoa; Echinoidea; Euechinoidea; Echinacea; Echinoida; Strongylocentrotidae; Strongylocentrotus; Strongylocentrotus purpuratus;")
        self.assertEqual(alignment.sequences[15].id, "D7TKB7/307-516")
        self.assertEqual(alignment.sequences[15].annotations["accession"], "D7TKB7")
        self.assertEqual(alignment.sequences[15].annotations["organism"], "Vitis vinifera")
        self.assertEqual(alignment.sequences[15].description, "Putative uncharacterized protein")
        self.assertEqual(alignment.sequences[15].annotations["database_references"][0]["reference"], "GENE3D; ce742b4a71edacbfc43e7eae054ea03d/307-516;")
        self.assertEqual(alignment.sequences[15].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Vitales; Vitaceae; Vitis; Vitis vinifera;")
        self.assertEqual(alignment.sequences[16].id, "D6WD90/391-601")
        self.assertEqual(alignment.sequences[16].annotations["accession"], "D6WD90")
        self.assertEqual(alignment.sequences[16].annotations["organism"], "Tribolium castaneum")
        self.assertEqual(alignment.sequences[16].description, "Putative ATP-dependent RNA helicase Dbp73D-like Protein")
        self.assertEqual(alignment.sequences[16].annotations["database_references"][0]["reference"], "GENE3D; d93f836a15a08bb7894422d23f9187a2/391-601;")
        self.assertEqual(alignment.sequences[16].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Coleoptera; Polyphaga; Cucujiformia; Tenebrionoidea; Tenebrionidae; Tribolium; Tribolium castaneum;")
        self.assertEqual(alignment.sequences[17].id, "D8S637/300-502")
        self.assertEqual(alignment.sequences[17].annotations["accession"], "D8S637")
        self.assertEqual(alignment.sequences[17].annotations["organism"], "Selaginella moellendorffii")
        self.assertEqual(alignment.sequences[17].description, "Putative uncharacterized protein")
        self.assertEqual(alignment.sequences[17].annotations["database_references"][0]["reference"], "GENE3D; cf7ddf46e6b471883007bd9a36b770ad/300-502;")
        self.assertEqual(alignment.sequences[17].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Lycopodiopsida; Selaginellales; Selaginellaceae; Selaginella; Selaginella moellendorffii;")
        self.assertEqual(alignment.sequences[18].id, "E9HCC2/503-718")
        self.assertEqual(alignment.sequences[18].annotations["accession"], "E9HCC2")
        self.assertEqual(alignment.sequences[18].annotations["organism"], "Daphnia pulex")
        self.assertEqual(alignment.sequences[18].description, "Putative uncharacterized protein")
        self.assertEqual(alignment.sequences[18].annotations["database_references"][0]["reference"], "GENE3D; 5877131e0b86512dc6bb99ff5498488b/503-718;")
        self.assertEqual(alignment.sequences[18].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Crustacea; Branchiopoda; Phyllopoda; Diplostraca; Cladocera; Anomopoda; Daphniidae; Daphnia; Daphnia pulex;")
        self.assertEqual(alignment.sequences[19].id, "I1GI00/458-663")
        self.assertEqual(alignment.sequences[19].annotations["accession"], "I1GI00")
        self.assertEqual(alignment.sequences[19].annotations["organism"], "Amphimedon queenslandica")
        self.assertEqual(alignment.sequences[19].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[19].annotations["database_references"][0]["reference"], "GENE3D; 5e78d6b5d2ea7b7236023cd5aa8516d9/458-663;")
        self.assertEqual(alignment.sequences[19].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Porifera; Demospongiae; Heteroscleromorpha; Haplosclerida; Niphatidae; Amphimedon; Amphimedon queenslandica;")
        self.assertEqual(alignment.sequences[20].id, "E0VWC9/299-516")
        self.assertEqual(alignment.sequences[20].annotations["accession"], "E0VWC9")
        self.assertEqual(alignment.sequences[20].annotations["organism"], "Pediculus humanus corporis")
        self.assertEqual(alignment.sequences[20].description, "DEAD box ATP-dependent RNA helicase, putative")
        self.assertEqual(alignment.sequences[20].annotations["database_references"][0]["reference"], "GENE3D; 789ccaf623a41ff057223f51007ab26c/299-516;")
        self.assertEqual(alignment.sequences[20].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Paraneoptera; Psocodea; Phthiraptera; Anoplura; Pediculidae; Pediculus; Pediculus humanus; Pediculus humanus corporis;")
        self.assertEqual(alignment.sequences[21].id, "D8RWL4/300-502")
        self.assertEqual(alignment.sequences[21].annotations["accession"], "D8RWL4")
        self.assertEqual(alignment.sequences[21].annotations["organism"], "Selaginella moellendorffii")
        self.assertEqual(alignment.sequences[21].description, "Putative uncharacterized protein")
        self.assertEqual(alignment.sequences[21].annotations["database_references"][0]["reference"], "GENE3D; 88bb6dff8eab23722f2d90cd1dbc8a1f/300-502;")
        self.assertEqual(alignment.sequences[21].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Lycopodiopsida; Selaginellales; Selaginellaceae; Selaginella; Selaginella moellendorffii;")
        self.assertEqual(alignment.sequences[22].id, "Q7QIL5/450-647")
        self.assertEqual(alignment.sequences[22].annotations["accession"], "Q7QIL5")
        self.assertEqual(alignment.sequences[22].annotations["organism"], "Anopheles gambiae")
        self.assertEqual(alignment.sequences[22].description, "AGAP006941-PA")
        self.assertEqual(alignment.sequences[22].annotations["database_references"][0]["reference"], "GENE3D; e10d00f37e65291952589fa876f834c8/450-647;")
        self.assertEqual(alignment.sequences[22].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Nematocera; Culicomorpha; Culicoidea; Culicidae; Anophelinae; Anopheles; Cellia; Anopheles gambiae;")
        self.assertEqual(alignment.sequences[23].id, "A0A067QQD0/459-680")
        self.assertEqual(alignment.sequences[23].annotations["accession"], "A0A067QQD0")
        self.assertEqual(alignment.sequences[23].annotations["organism"], "Zootermopsis nevadensis")
        self.assertEqual(alignment.sequences[23].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[23].annotations["database_references"][0]["reference"], "GENE3D; fecdd3b04d54e40424c6228b74a9dfd0/459-680;")
        self.assertEqual(alignment.sequences[23].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Polyneoptera; Blattodea; Blattoidea; Termopsidae; Termopsinae; Termopsini; Zootermopsis; Zootermopsis nevadensis;")
        self.assertEqual(alignment.sequences[24].id, "Q0DWT8/314-520")
        self.assertEqual(alignment.sequences[24].annotations["accession"], "Q0DWT8")
        self.assertEqual(alignment.sequences[24].annotations["organism"], "Oryza sativa Japonica Group")
        self.assertEqual(alignment.sequences[24].description, "DEAD-box ATP-dependent RNA helicase 1")
        self.assertEqual(alignment.sequences[24].annotations["database_references"][0]["reference"], "GENE3D; 979b2f14d8289ffaa79786ef2fc2e7cc/314-520;")
        self.assertEqual(alignment.sequences[24].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Oryzoideae; Oryzeae; Oryzinae; Oryza; Oryza sativa;")
        self.assertEqual(alignment.sequences[24].annotations["database_references"][2]["reference"], "EC; 3.6.4.13;")
        self.assertEqual(alignment.sequences[25].id, "A0A061I6T2/320-498")
        self.assertEqual(alignment.sequences[25].annotations["accession"], "A0A061I6T2")
        self.assertEqual(alignment.sequences[25].annotations["organism"], "Cricetulus griseus")
        self.assertEqual(alignment.sequences[25].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[25].annotations["database_references"][0]["reference"], "GENE3D; 6e9c8567a3e1946fa2b2d820fb16a52e/320-498;")
        self.assertEqual(alignment.sequences[25].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Euarchontoglires; Rodentia; Myomorpha; Cricetidae; Cricetinae; Cricetulus; Cricetulus griseus;")
        self.assertEqual(alignment.sequences[25].annotations["database_references"][2]["reference"], "EC; 3.6.4.13;")
        self.assertEqual(alignment.sequences[26].id, "A0A0B2R4Y0/426-614")
        self.assertEqual(alignment.sequences[26].annotations["accession"], "A0A0B2R4Y0")
        self.assertEqual(alignment.sequences[26].annotations["organism"], "Glycine soja")
        self.assertEqual(alignment.sequences[26].description, "DEAD-box ATP-dependent RNA helicase 1")
        self.assertEqual(alignment.sequences[26].annotations["database_references"][0]["reference"], "GENE3D; 7d672842404944b435d5a2364e19b675/426-614;")
        self.assertEqual(alignment.sequences[26].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Fabales; Fabaceae; Papilionoideae; Phaseoleae; Glycine; Soja; Glycine soja;")
        self.assertEqual(alignment.sequences[26].annotations["database_references"][2]["reference"], "EC; 3.6.4.13;")
        self.assertEqual(alignment.sequences[27].id, "Q6DRI7/466-652")
        self.assertEqual(alignment.sequences[27].annotations["accession"], "Q6DRI7")
        self.assertEqual(alignment.sequences[27].annotations["organism"], "Danio rerio")
        self.assertEqual(alignment.sequences[27].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[27].annotations["database_references"][0]["reference"], "GENE3D; ec9a39c0fe23837cbf8b92c076096592/466-652;")
        self.assertEqual(alignment.sequences[27].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Actinopterygii; Actinopteri; Neopterygii; Teleostei; Cypriniphysae; Cypriniformes; Cyprinoidea; Cyprinidae; Danio; Danio rerio;")
        self.assertEqual(alignment.sequences[27].annotations["database_references"][2]["reference"], "EC; 3.6.4.13;")
        self.assertEqual(alignment.sequences[28].id, "A0A0S1VVS2/306-516")
        self.assertEqual(alignment.sequences[28].annotations["accession"], "A0A0S1VVS2")
        self.assertEqual(alignment.sequences[28].annotations["organism"], "Chlamydomonas sp. ICE-L")
        self.assertEqual(alignment.sequences[28].description, "DEAD box RNA helicase CiRH63")
        self.assertEqual(alignment.sequences[28].annotations["database_references"][0]["reference"], "GENE3D; cb60f7661cee35c1446fa39b386d5eb3/306-516;")
        self.assertEqual(alignment.sequences[28].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Chlorophyta; Chlorophyceae; Chlamydomonadales; Chlamydomonadaceae; Chlamydomonas; Chlamydomonas sp. ICE-L;")
        self.assertEqual(alignment.sequences[28].annotations["database_references"][2]["reference"], "EC; 3.6.4.13;")
        self.assertEqual(alignment.sequences[29].id, "D0MZI2/319-547")
        self.assertEqual(alignment.sequences[29].annotations["accession"], "D0MZI2")
        self.assertEqual(alignment.sequences[29].annotations["organism"], "Phytophthora infestans T30-4")
        self.assertEqual(alignment.sequences[29].description, "DEAD/DEAH box RNA helicase, putative")
        self.assertEqual(alignment.sequences[29].annotations["database_references"][0]["reference"], "GENE3D; e578b1bd31a1dc3c86579f840fd2137c/319-547;")
        self.assertEqual(alignment.sequences[29].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Oomycetes; Peronosporales; Phytophthora; Phytophthora infestans;")
        self.assertEqual(alignment.sequences[30].id, "A3AC95/292-498")
        self.assertEqual(alignment.sequences[30].annotations["accession"], "A3AC95")
        self.assertEqual(alignment.sequences[30].annotations["organism"], "Oryza sativa Japonica Group")
        self.assertEqual(alignment.sequences[30].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[30].annotations["database_references"][0]["reference"], "GENE3D; f0ba689f9abdd99fa63da1d5a44a1b15/292-498;")
        self.assertEqual(alignment.sequences[30].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Oryzoideae; Oryzeae; Oryzinae; Oryza; Oryza sativa;")
        self.assertEqual(alignment.sequences[31].id, "E3JUP7/666-870")
        self.assertEqual(alignment.sequences[31].annotations["accession"], "E3JUP7")
        self.assertEqual(alignment.sequences[31].annotations["organism"], "Puccinia graminis f. sp. tritici CRL 75-36-700-3")
        self.assertEqual(alignment.sequences[31].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[31].annotations["database_references"][0]["reference"], "GENE3D; 139fd0cd426d2d5bd38dbd059ba741f3/666-870;")
        self.assertEqual(alignment.sequences[31].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Pucciniomycotina; Pucciniomycetes; Pucciniales; Pucciniaceae; Puccinia; Puccinia graminis;")
        self.assertEqual(alignment.sequences[32].id, "A0A087HS80/323-525")
        self.assertEqual(alignment.sequences[32].annotations["accession"], "A0A087HS80")
        self.assertEqual(alignment.sequences[32].annotations["organism"], "Arabis alpina")
        self.assertEqual(alignment.sequences[32].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[32].annotations["database_references"][0]["reference"], "GENE3D; 012fc781b6aa4a2250d0a315f3cfef41/323-525;")
        self.assertEqual(alignment.sequences[32].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Brassicales; Brassicaceae; Arabideae; Arabis; Arabis alpina;")
        self.assertEqual(alignment.sequences[33].id, "E2R5R1/445-631")
        self.assertEqual(alignment.sequences[33].annotations["accession"], "E2R5R1")
        self.assertEqual(alignment.sequences[33].annotations["organism"], "Canis lupus familiaris")
        self.assertEqual(alignment.sequences[33].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[33].annotations["database_references"][0]["reference"], "GENE3D; 02e1f2aa69f31a2eb84b1954e4efb8fa/445-631;")
        self.assertEqual(alignment.sequences[33].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Laurasiatheria; Carnivora; Caniformia; Canidae; Canis; Canis lupus; Canis lupus familiaris;")
        self.assertEqual(alignment.sequences[34].id, "A0A093G9P3/455-643")
        self.assertEqual(alignment.sequences[34].annotations["accession"], "A0A093G9P3")
        self.assertEqual(alignment.sequences[34].annotations["organism"], "Picoides pubescens")
        self.assertEqual(alignment.sequences[34].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[34].annotations["database_references"][0]["reference"], "GENE3D; 02f30cc5ab10919c807eaa6a1592cea7/455-643;")
        self.assertEqual(alignment.sequences[34].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Aves; Neognathae; Piciformes; Picidae; Picoides; Picoides pubescens;")
        self.assertEqual(alignment.sequences[35].id, "W5PQS9/463-648")
        self.assertEqual(alignment.sequences[35].annotations["accession"], "W5PQS9")
        self.assertEqual(alignment.sequences[35].annotations["organism"], "Ovis aries")
        self.assertEqual(alignment.sequences[35].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[35].annotations["database_references"][0]["reference"], "GENE3D; 04fdb2d410257b6670c8468a300c529f/463-648;")
        self.assertEqual(alignment.sequences[35].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Laurasiatheria; Ruminantia; Pecora; Bovidae; Caprinae; Ovis; Ovis aries;")
        self.assertEqual(alignment.sequences[36].id, "A0A094L3W5/389-576")
        self.assertEqual(alignment.sequences[36].annotations["accession"], "A0A094L3W5")
        self.assertEqual(alignment.sequences[36].annotations["organism"], "Podiceps cristatus")
        self.assertEqual(alignment.sequences[36].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[36].annotations["database_references"][0]["reference"], "GENE3D; 0695d5eaf3b291b0d28136efaa41282c/389-576;")
        self.assertEqual(alignment.sequences[36].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Aves; Neognathae; Podicipediformes; Podicipedidae; Podiceps; Podiceps cristatus;")
        self.assertEqual(alignment.sequences[37].id, "A0A162Q2T1/229-385")
        self.assertEqual(alignment.sequences[37].annotations["accession"], "A0A162Q2T1")
        self.assertEqual(alignment.sequences[37].annotations["organism"], "Mucor circinelloides f. lusitanicus CBS 277.49")
        self.assertEqual(alignment.sequences[37].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[37].annotations["database_references"][0]["reference"], "GENE3D; 0aaad0ea3c92d8fd0c2cf6389c81cce4/229-385;")
        self.assertEqual(alignment.sequences[37].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Mucoromycota; Mucoromycotina; Mucorales; Mucorineae; Mucoraceae; Mucor; Mucor circinelloides; Mucor circinelloides f. lusitanicus;")
        self.assertEqual(alignment.sequences[38].id, "A0A022QZJ5/320-524")
        self.assertEqual(alignment.sequences[38].annotations["accession"], "A0A022QZJ5")
        self.assertEqual(alignment.sequences[38].annotations["organism"], "Erythranthe guttata")
        self.assertEqual(alignment.sequences[38].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[38].annotations["database_references"][0]["reference"], "GENE3D; 0b5222f644569bf475bc551c07a7a032/320-524;")
        self.assertEqual(alignment.sequences[38].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; asterids; Lamiales; Phrymaceae; Erythranthe; Erythranthe guttata;")
        self.assertEqual(alignment.sequences[39].id, "G1Q8B3/280-463")
        self.assertEqual(alignment.sequences[39].annotations["accession"], "G1Q8B3")
        self.assertEqual(alignment.sequences[39].annotations["organism"], "Myotis lucifugus")
        self.assertEqual(alignment.sequences[39].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[39].annotations["database_references"][0]["reference"], "GENE3D; 0be7ffb2f3c48c6869e60167f25bea77/280-463;")
        self.assertEqual(alignment.sequences[39].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Laurasiatheria; Chiroptera; Microchiroptera; Vespertilionidae; Myotis; Myotis lucifugus;")
        self.assertEqual(alignment.sequences[40].id, "B9H0T9/310-517")
        self.assertEqual(alignment.sequences[40].annotations["accession"], "B9H0T9")
        self.assertEqual(alignment.sequences[40].annotations["organism"], "Populus trichocarpa")
        self.assertEqual(alignment.sequences[40].description, "DEAD/DEAH box helicase family protein")
        self.assertEqual(alignment.sequences[40].annotations["database_references"][0]["reference"], "GENE3D; 0e31d1c3a42deac1a0014cee88f7192c/310-517;")
        self.assertEqual(alignment.sequences[40].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Malpighiales; Salicaceae; Saliceae; Populus; Populus trichocarpa;")
        self.assertEqual(alignment.sequences[41].id, "M5BYP5/376-569")
        self.assertEqual(alignment.sequences[41].annotations["accession"], "M5BYP5")
        self.assertEqual(alignment.sequences[41].annotations["organism"], "Rhizoctonia solani AG-1 IB")
        self.assertEqual(alignment.sequences[41].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[41].annotations["database_references"][0]["reference"], "GENE3D; 0e4bb4f62730ecd1d9496dc5041ae780/376-569;")
        self.assertEqual(alignment.sequences[41].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Cantharellales; Ceratobasidiaceae; Rhizoctonia; Rhizoctonia solani;")
        self.assertEqual(alignment.sequences[42].id, "A0A091SMA3/388-575")
        self.assertEqual(alignment.sequences[42].annotations["accession"], "A0A091SMA3")
        self.assertEqual(alignment.sequences[42].annotations["organism"], "Pelecanus crispus")
        self.assertEqual(alignment.sequences[42].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[42].annotations["database_references"][0]["reference"], "GENE3D; 0efdfe2c337bd259b2122bb02075ddea/388-575;")
        self.assertEqual(alignment.sequences[42].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Aves; Neognathae; Pelecaniformes; Pelecanidae; Pelecanus; Pelecanus crispus;")
        self.assertEqual(alignment.sequences[43].id, "I3IZK1/486-666")
        self.assertEqual(alignment.sequences[43].annotations["accession"], "I3IZK1")
        self.assertEqual(alignment.sequences[43].annotations["organism"], "Oreochromis niloticus")
        self.assertEqual(alignment.sequences[43].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[43].annotations["database_references"][0]["reference"], "GENE3D; 102cbac382c5b2bd72fabea27f46ecfb/486-666;")
        self.assertEqual(alignment.sequences[43].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Actinopterygii; Actinopteri; Neopterygii; Teleostei; Cichlomorphae; Cichliformes; Cichlidae; Pseudocrenilabrinae; Oreochromini; Oreochromis; Oreochromis niloticus;")
        self.assertEqual(alignment.sequences[44].id, "A0A0D9S5M5/485-667")
        self.assertEqual(alignment.sequences[44].annotations["accession"], "A0A0D9S5M5")
        self.assertEqual(alignment.sequences[44].annotations["organism"], "Chlorocebus sabaeus")
        self.assertEqual(alignment.sequences[44].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[44].annotations["database_references"][0]["reference"], "GENE3D; 1073cd52ae710f3fe37193ea82165359/485-667;")
        self.assertEqual(alignment.sequences[44].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Euarchontoglires; Primates; Haplorrhini; Simiiformes; Catarrhini; Cercopithecoidea; Cercopithecidae; Cercopithecinae; Chlorocebus; Chlorocebus sabaeus;")
        self.assertEqual(alignment.sequences[45].id, "A0A066WC08/333-528")
        self.assertEqual(alignment.sequences[45].annotations["accession"], "A0A066WC08")
        self.assertEqual(alignment.sequences[45].annotations["organism"], "Rhizoctonia solani AG-8 WAC10335")
        self.assertEqual(alignment.sequences[45].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[45].annotations["database_references"][0]["reference"], "GENE3D; 1049cb00d4cc3199e08f6a1c081c1cc5/333-528;")
        self.assertEqual(alignment.sequences[45].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Cantharellales; Ceratobasidiaceae; Rhizoctonia; Rhizoctonia solani;")
        self.assertEqual(alignment.sequences[46].id, "A0A0D9YZM5/252-424")
        self.assertEqual(alignment.sequences[46].annotations["accession"], "A0A0D9YZM5")
        self.assertEqual(alignment.sequences[46].annotations["organism"], "Oryza glumipatula")
        self.assertEqual(alignment.sequences[46].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[46].annotations["database_references"][0]["reference"], "GENE3D; 120127a000ea5b92ae9ebea9051ef0e7/252-424;")
        self.assertEqual(alignment.sequences[46].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Oryzoideae; Oryzeae; Oryzinae; Oryza; Oryza glumipatula;")
        self.assertEqual(alignment.sequences[47].id, "S7N4U4/330-522")
        self.assertEqual(alignment.sequences[47].annotations["accession"], "S7N4U4")
        self.assertEqual(alignment.sequences[47].annotations["organism"], "Myotis brandtii")
        self.assertEqual(alignment.sequences[47].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[47].annotations["database_references"][0]["reference"], "GENE3D; 11d5af334e18f3fc7f9d6236074863a8/330-522;")
        self.assertEqual(alignment.sequences[47].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Laurasiatheria; Chiroptera; Microchiroptera; Vespertilionidae; Myotis; Myotis brandtii;")
        self.assertEqual(alignment.sequences[48].id, "A0A162U0Y3/249-425")
        self.assertEqual(alignment.sequences[48].annotations["accession"], "A0A162U0Y3")
        self.assertEqual(alignment.sequences[48].annotations["organism"], "Phycomyces blakesleeanus NRRL 1555(-)")
        self.assertEqual(alignment.sequences[48].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[48].annotations["database_references"][0]["reference"], "GENE3D; 12938687a7dd7d739d160f889ab5cb3e/249-425;")
        self.assertEqual(alignment.sequences[48].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Mucoromycota; Mucoromycotina; Mucorales; Phycomycetaceae; Phycomyces; Phycomyces blakesleeanus;")
        self.assertEqual(alignment.sequences[49].id, "F7FVU4/455-636")
        self.assertEqual(alignment.sequences[49].annotations["accession"], "F7FVU4")
        self.assertEqual(alignment.sequences[49].annotations["organism"], "Ornithorhynchus anatinus")
        self.assertEqual(alignment.sequences[49].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[49].annotations["database_references"][0]["reference"], "GENE3D; 12f63531b877bd96b89e51b6e5d5eb5f/455-636;")
        self.assertEqual(alignment.sequences[49].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Monotremata; Ornithorhynchidae; Ornithorhynchus; Ornithorhynchus anatinus;")
        self.assertEqual(alignment.sequences[50].id, "A0A151TJ67/289-484")
        self.assertEqual(alignment.sequences[50].annotations["accession"], "A0A151TJ67")
        self.assertEqual(alignment.sequences[50].annotations["organism"], "Cajanus cajan")
        self.assertEqual(alignment.sequences[50].description, "DEAD-box ATP-dependent RNA helicase 1")
        self.assertEqual(alignment.sequences[50].annotations["database_references"][0]["reference"], "GENE3D; 13c932ace2bfc86e0ac863499f4dd014/289-484;")
        self.assertEqual(alignment.sequences[50].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Fabales; Fabaceae; Papilionoideae; Phaseoleae; Cajanus; Cajanus cajan;")
        self.assertEqual(alignment.sequences[51].id, "A0A091QYY5/400-586")
        self.assertEqual(alignment.sequences[51].annotations["accession"], "A0A091QYY5")
        self.assertEqual(alignment.sequences[51].annotations["organism"], "Mesitornis unicolor")
        self.assertEqual(alignment.sequences[51].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[51].annotations["database_references"][0]["reference"], "GENE3D; 14b7a58ab53db7950ad703cf1f833ac0/400-586;")
        self.assertEqual(alignment.sequences[51].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Aves; Neognathae; Gruiformes; Mesitornithidae; Mesitornis; Mesitornis unicolor;")
        self.assertEqual(alignment.sequences[52].id, "R9AH27/439-622")
        self.assertEqual(alignment.sequences[52].annotations["accession"], "R9AH27")
        self.assertEqual(alignment.sequences[52].annotations["organism"], "Wallemia ichthyophaga EXF-994")
        self.assertEqual(alignment.sequences[52].description, "ATP-dependent RNA helicase dbp6")
        self.assertEqual(alignment.sequences[52].annotations["database_references"][0]["reference"], "GENE3D; 17d096e485d2573f26c36aadcdc2dc00/439-622;")
        self.assertEqual(alignment.sequences[52].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Wallemiomycetes; Wallemiales; Wallemia; Wallemia ichthyophaga;")
        self.assertEqual(alignment.sequences[53].id, "F6WXI5/470-622")
        self.assertEqual(alignment.sequences[53].annotations["accession"], "F6WXI5")
        self.assertEqual(alignment.sequences[53].annotations["organism"], "Monodelphis domestica")
        self.assertEqual(alignment.sequences[53].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[53].annotations["database_references"][0]["reference"], "GENE3D; 17fce0be4018d8fee35bddbff22ab181/470-622;")
        self.assertEqual(alignment.sequences[53].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Didelphimorphia; Didelphidae; Didelphinae; Monodelphis; Monodelphis domestica;")
        self.assertEqual(alignment.sequences[54].id, "H3C0Y4/454-632")
        self.assertEqual(alignment.sequences[54].annotations["accession"], "H3C0Y4")
        self.assertEqual(alignment.sequences[54].annotations["organism"], "Tetraodon nigroviridis")
        self.assertEqual(alignment.sequences[54].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[54].annotations["database_references"][0]["reference"], "GENE3D; 187ac6deae93f5410e8ab07e8662258b/454-632;")
        self.assertEqual(alignment.sequences[54].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Actinopterygii; Actinopteri; Neopterygii; Teleostei; Tetraodontiformes; Tetraodontoidei; Tetradontoidea; Tetraodontidae; Tetraodon; Tetraodon nigroviridis;")
        self.assertEqual(alignment.sequences[55].id, "A0A0F8BC58/483-667")
        self.assertEqual(alignment.sequences[55].annotations["accession"], "A0A0F8BC58")
        self.assertEqual(alignment.sequences[55].annotations["organism"], "Larimichthys crocea")
        self.assertEqual(alignment.sequences[55].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[55].annotations["database_references"][0]["reference"], "GENE3D; 18960a1d6afc408e883a87d3ce5348c3/483-667;")
        self.assertEqual(alignment.sequences[55].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Actinopterygii; Actinopteri; Neopterygii; Teleostei; Sciaenidae; Larimichthys; Larimichthys crocea;")
        self.assertEqual(alignment.sequences[56].id, "W2PUL7/319-558")
        self.assertEqual(alignment.sequences[56].annotations["accession"], "W2PUL7")
        self.assertEqual(alignment.sequences[56].annotations["organism"], "Phytophthora parasitica INRA-310")
        self.assertEqual(alignment.sequences[56].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[56].annotations["database_references"][0]["reference"], "GENE3D; 1a40ef36bed9a853d491b73b83b8d8ef/319-558;")
        self.assertEqual(alignment.sequences[56].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Oomycetes; Peronosporales; Phytophthora; Phytophthora parasitica;")
        self.assertEqual(alignment.sequences[57].id, "A0A096MX16/468-654")
        self.assertEqual(alignment.sequences[57].annotations["accession"], "A0A096MX16")
        self.assertEqual(alignment.sequences[57].annotations["organism"], "Papio anubis")
        self.assertEqual(alignment.sequences[57].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[57].annotations["database_references"][0]["reference"], "GENE3D; 1e1a1615010ab2d2a0cfb55357b2ed18/468-654;")
        self.assertEqual(alignment.sequences[57].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Euarchontoglires; Primates; Haplorrhini; Simiiformes; Catarrhini; Cercopithecoidea; Cercopithecidae; Cercopithecinae; Papio; Papio anubis;")
        self.assertEqual(alignment.sequences[58].id, "A0A024U6E4/279-518")
        self.assertEqual(alignment.sequences[58].annotations["accession"], "A0A024U6E4")
        self.assertEqual(alignment.sequences[58].annotations["organism"], "Aphanomyces invadans")
        self.assertEqual(alignment.sequences[58].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[58].annotations["database_references"][0]["reference"], "GENE3D; 1fabf3039d30489dc04100f9ed5a2311/279-518;")
        self.assertEqual(alignment.sequences[58].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Oomycetes; Saprolegniales; Saprolegniaceae; Aphanomyces; Aphanomyces invadans;")
        self.assertEqual(alignment.sequences[59].id, "A0A091ELI2/386-575")
        self.assertEqual(alignment.sequences[59].annotations["accession"], "A0A091ELI2")
        self.assertEqual(alignment.sequences[59].annotations["organism"], "Corvus brachyrhynchos")
        self.assertEqual(alignment.sequences[59].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[59].annotations["database_references"][0]["reference"], "GENE3D; 2082f819d2b8e65c86c9b41a0e0248a7/386-575;")
        self.assertEqual(alignment.sequences[59].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Aves; Neognathae; Passeriformes; Corvoidea; Corvidae; Corvus; Corvus brachyrhynchos;")
        self.assertEqual(alignment.sequences[60].id, "A0A084W143/452-675")
        self.assertEqual(alignment.sequences[60].annotations["accession"], "A0A084W143")
        self.assertEqual(alignment.sequences[60].annotations["organism"], "Anopheles sinensis")
        self.assertEqual(alignment.sequences[60].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[60].annotations["database_references"][0]["reference"], "GENE3D; 2438de824780964b7e60ea046f845faa/452-675;")
        self.assertEqual(alignment.sequences[60].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Nematocera; Culicomorpha; Culicoidea; Culicidae; Anophelinae; Anopheles; Anopheles; hyrcanus group; Anopheles sinensis;")
        self.assertEqual(alignment.sequences[61].id, "W5G5B1/319-520")
        self.assertEqual(alignment.sequences[61].annotations["accession"], "W5G5B1")
        self.assertEqual(alignment.sequences[61].annotations["organism"], "Triticum aestivum")
        self.assertEqual(alignment.sequences[61].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[61].annotations["database_references"][0]["reference"], "GENE3D; 273d5f92320924fa41d92dc466975356/319-520;")
        self.assertEqual(alignment.sequences[61].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Pooideae; Triticeae; Triticinae; Triticum; Triticum aestivum;")
        self.assertEqual(alignment.sequences[62].id, "A0A091KVH2/260-448")
        self.assertEqual(alignment.sequences[62].annotations["accession"], "A0A091KVH2")
        self.assertEqual(alignment.sequences[62].annotations["organism"], "Chlamydotis macqueenii")
        self.assertEqual(alignment.sequences[62].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[62].annotations["database_references"][0]["reference"], "GENE3D; 291ffc161668e4aa950f6d1d8fcdeb73/260-448;")
        self.assertEqual(alignment.sequences[62].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Aves; Neognathae; Gruiformes; Otididae; Chlamydotis; Chlamydotis macqueenii;")
        self.assertEqual(alignment.sequences[63].id, "V9EPS8/319-559")
        self.assertEqual(alignment.sequences[63].annotations["accession"], "V9EPS8")
        self.assertEqual(alignment.sequences[63].annotations["organism"], "Phytophthora parasitica P1569")
        self.assertEqual(alignment.sequences[63].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[63].annotations["database_references"][0]["reference"], "GENE3D; 286271cb39865c5afff5b71c4d7e0278/319-559;")
        self.assertEqual(alignment.sequences[63].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Oomycetes; Peronosporales; Phytophthora; Phytophthora parasitica;")
        self.assertEqual(alignment.sequences[64].id, "A0A1C7N1N1/357-538")
        self.assertEqual(alignment.sequences[64].annotations["accession"], "A0A1C7N1N1")
        self.assertEqual(alignment.sequences[64].annotations["organism"], "Choanephora cucurbitarum")
        self.assertEqual(alignment.sequences[64].description, "ATP-dependent RNA helicase dbp6")
        self.assertEqual(alignment.sequences[64].annotations["database_references"][0]["reference"], "GENE3D; 2d0921a53775328b1258ca16de3a8e72/357-538;")
        self.assertEqual(alignment.sequences[64].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Mucoromycota; Mucoromycotina; Mucorales; Mucorineae; Choanephoraceae; Choanephoroideae; Choanephora; Choanephora cucurbitarum;")
        self.assertEqual(alignment.sequences[65].id, "A0A0E0K6A3/322-533")
        self.assertEqual(alignment.sequences[65].annotations["accession"], "A0A0E0K6A3")
        self.assertEqual(alignment.sequences[65].annotations["organism"], "Oryza punctata")
        self.assertEqual(alignment.sequences[65].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[65].annotations["database_references"][0]["reference"], "GENE3D; 2d641811ddf4dc12afd3fa5aa8f0ebc4/322-533;")
        self.assertEqual(alignment.sequences[65].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Oryzoideae; Oryzeae; Oryzinae; Oryza; Oryza punctata;")
        self.assertEqual(alignment.sequences[66].id, "A0A164VKN3/463-659")
        self.assertEqual(alignment.sequences[66].annotations["accession"], "A0A164VKN3")
        self.assertEqual(alignment.sequences[66].annotations["organism"], "Sistotremastrum niveocremeum HHB9708")
        self.assertEqual(alignment.sequences[66].description, "DEAD-domain-containing protein")
        self.assertEqual(alignment.sequences[66].annotations["database_references"][0]["reference"], "GENE3D; 2f1c8eadb8903c902274d47169559b45/463-659;")
        self.assertEqual(alignment.sequences[66].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Trechisporales; Hydnodontaceae; Sistotremastrum; Sistotremastrum niveocremeum;")
        self.assertEqual(alignment.sequences[67].id, "R0GYT5/359-559")
        self.assertEqual(alignment.sequences[67].annotations["accession"], "R0GYT5")
        self.assertEqual(alignment.sequences[67].annotations["organism"], "Capsella rubella")
        self.assertEqual(alignment.sequences[67].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[67].annotations["database_references"][0]["reference"], "GENE3D; 2cee662e2728628112913c1d02073975/359-559;")
        self.assertEqual(alignment.sequences[67].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Brassicales; Brassicaceae; Camelineae; Capsella; Capsella rubella;")
        self.assertEqual(alignment.sequences[68].id, "U3JXN4/502-689")
        self.assertEqual(alignment.sequences[68].annotations["accession"], "U3JXN4")
        self.assertEqual(alignment.sequences[68].annotations["organism"], "Ficedula albicollis")
        self.assertEqual(alignment.sequences[68].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[68].annotations["database_references"][0]["reference"], "GENE3D; 307be37f0b36b6ceb3e54140c700c570/502-689;")
        self.assertEqual(alignment.sequences[68].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Aves; Neognathae; Passeriformes; Muscicapidae; Ficedula; Ficedula albicollis;")
        self.assertEqual(alignment.sequences[69].id, "A0A1C7M6A8/356-547")
        self.assertEqual(alignment.sequences[69].annotations["accession"], "A0A1C7M6A8")
        self.assertEqual(alignment.sequences[69].annotations["organism"], "Grifola frondosa")
        self.assertEqual(alignment.sequences[69].description, "Oligomycin resistance ATP-dependent permease YOR1")
        self.assertEqual(alignment.sequences[69].annotations["database_references"][0]["reference"], "GENE3D; 369d50914a210823c56a68dd41e36100/356-547;")
        self.assertEqual(alignment.sequences[69].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Agaricomycetidae; Agaricales; Schizophyllaceae; Grifola; Grifola frondosa;")
        self.assertEqual(alignment.sequences[70].id, "M3WDX4/368-549")
        self.assertEqual(alignment.sequences[70].annotations["accession"], "M3WDX4")
        self.assertEqual(alignment.sequences[70].annotations["organism"], "Felis catus")
        self.assertEqual(alignment.sequences[70].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[70].annotations["database_references"][0]["reference"], "GENE3D; 3bf5de582bdd3f32d5929bd1649eef88/368-549;")
        self.assertEqual(alignment.sequences[70].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Laurasiatheria; Carnivora; Feliformia; Felidae; Felinae; Felis; Felis catus;")
        self.assertEqual(alignment.sequences[71].id, "A0A059C5T6/186-381")
        self.assertEqual(alignment.sequences[71].annotations["accession"], "A0A059C5T6")
        self.assertEqual(alignment.sequences[71].annotations["organism"], "Eucalyptus grandis")
        self.assertEqual(alignment.sequences[71].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[71].annotations["database_references"][0]["reference"], "GENE3D; 40d4c531b0b20d3d0d0e030f62ae2b93/186-381;")
        self.assertEqual(alignment.sequences[71].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Myrtales; Myrtaceae; Myrtoideae; Eucalypteae; Eucalyptus; Eucalyptus grandis;")
        self.assertEqual(alignment.sequences[72].id, "W5K211/496-682")
        self.assertEqual(alignment.sequences[72].annotations["accession"], "W5K211")
        self.assertEqual(alignment.sequences[72].annotations["organism"], "Astyanax mexicanus")
        self.assertEqual(alignment.sequences[72].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[72].annotations["database_references"][0]["reference"], "GENE3D; 419ab3d2b4a32d72202dd21e31889b84/496-682;")
        self.assertEqual(alignment.sequences[72].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Actinopterygii; Actinopteri; Neopterygii; Teleostei; Characiphysae; Characiformes; Characoidei; Characidae; Astyanax; Astyanax mexicanus;")
        self.assertEqual(alignment.sequences[73].id, "A0A0B7NNL3/443-603")
        self.assertEqual(alignment.sequences[73].annotations["accession"], "A0A0B7NNL3")
        self.assertEqual(alignment.sequences[73].annotations["organism"], "Parasitella parasitica")
        self.assertEqual(alignment.sequences[73].description, "Cytoplasmic tRNA 2-thiolation protein 1")
        self.assertEqual(alignment.sequences[73].annotations["database_references"][0]["reference"], "GENE3D; 4399cb0ed8d9be01597bf3981a6df52b/443-603;")
        self.assertEqual(alignment.sequences[73].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Mucoromycota; Mucoromycotina; Mucorales; Mucorineae; Mucoraceae; Parasitella; Parasitella parasitica;")
        self.assertEqual(alignment.sequences[74].id, "A0A0R3VVB5/390-575")
        self.assertEqual(alignment.sequences[74].annotations["accession"], "A0A0R3VVB5")
        self.assertEqual(alignment.sequences[74].annotations["organism"], "Taenia asiatica")
        self.assertEqual(alignment.sequences[74].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[74].annotations["database_references"][0]["reference"], "GENE3D; 466e5186f95e44d062f6a98ce9e9195f/390-575;")
        self.assertEqual(alignment.sequences[74].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Platyhelminthes; Cestoda; Eucestoda; Cyclophyllidea; Taeniidae; Taenia; Taenia asiatica;")
        self.assertEqual(alignment.sequences[75].id, "K3W7F1/343-589")
        self.assertEqual(alignment.sequences[75].annotations["accession"], "K3W7F1")
        self.assertEqual(alignment.sequences[75].annotations["organism"], "Pythium ultimum DAOM BR144")
        self.assertEqual(alignment.sequences[75].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[75].annotations["database_references"][0]["reference"], "GENE3D; 46ff473a92070386863164d99196ad2c/343-589;")
        self.assertEqual(alignment.sequences[75].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Oomycetes; Pythiales; Pythiaceae; Pythium; Pythium ultimum;")
        self.assertEqual(alignment.sequences[76].id, "A0A1D6ARD2/319-520")
        self.assertEqual(alignment.sequences[76].annotations["accession"], "A0A1D6ARD2")
        self.assertEqual(alignment.sequences[76].annotations["organism"], "Triticum aestivum")
        self.assertEqual(alignment.sequences[76].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[76].annotations["database_references"][0]["reference"], "GENE3D; 46d9161c638bfbb0276501cab466ac50/319-520;")
        self.assertEqual(alignment.sequences[76].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Pooideae; Triticeae; Triticinae; Triticum; Triticum aestivum;")
        self.assertEqual(alignment.sequences[77].id, "A0A151WAK3/462-655")
        self.assertEqual(alignment.sequences[77].annotations["accession"], "A0A151WAK3")
        self.assertEqual(alignment.sequences[77].annotations["organism"], "Hypsizygus marmoreus")
        self.assertEqual(alignment.sequences[77].description, "ATP-dependent RNA helicase dbp6")
        self.assertEqual(alignment.sequences[77].annotations["database_references"][0]["reference"], "GENE3D; 4814342ea85f8aef770c097cd629846c/462-655;")
        self.assertEqual(alignment.sequences[77].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Agaricomycetidae; Agaricales; Lyophyllaceae; Hypsizygus; Hypsizygus marmoreus;")
        self.assertEqual(alignment.sequences[78].id, "H0XR79/478-665")
        self.assertEqual(alignment.sequences[78].annotations["accession"], "H0XR79")
        self.assertEqual(alignment.sequences[78].annotations["organism"], "Otolemur garnettii")
        self.assertEqual(alignment.sequences[78].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[78].annotations["database_references"][0]["reference"], "GENE3D; 4852f863d69dd338ea0a19371643a643/478-665;")
        self.assertEqual(alignment.sequences[78].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Euarchontoglires; Primates; Strepsirrhini; Lorisiformes; Galagidae; Otolemur; Otolemur garnettii;")
        self.assertEqual(alignment.sequences[79].id, "V4MH43/323-525")
        self.assertEqual(alignment.sequences[79].annotations["accession"], "V4MH43")
        self.assertEqual(alignment.sequences[79].annotations["organism"], "Eutrema salsugineum")
        self.assertEqual(alignment.sequences[79].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[79].annotations["database_references"][0]["reference"], "GENE3D; 4815da9706ca975888aa3840fa0cb2b2/323-525;")
        self.assertEqual(alignment.sequences[79].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Brassicales; Brassicaceae; Eutremeae; Eutrema; Eutrema salsugineum;")
        self.assertEqual(alignment.sequences[80].id, "A0A087R3E4/390-577")
        self.assertEqual(alignment.sequences[80].annotations["accession"], "A0A087R3E4")
        self.assertEqual(alignment.sequences[80].annotations["organism"], "Aptenodytes forsteri")
        self.assertEqual(alignment.sequences[80].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[80].annotations["database_references"][0]["reference"], "GENE3D; 4a3ef0637a9db567312085c9ff6bb520/390-577;")
        self.assertEqual(alignment.sequences[80].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Aves; Neognathae; Sphenisciformes; Spheniscidae; Aptenodytes; Aptenodytes forsteri;")
        self.assertEqual(alignment.sequences[81].id, "A0A0D9YZM3/252-430")
        self.assertEqual(alignment.sequences[81].annotations["accession"], "A0A0D9YZM3")
        self.assertEqual(alignment.sequences[81].annotations["organism"], "Oryza glumipatula")
        self.assertEqual(alignment.sequences[81].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[81].annotations["database_references"][0]["reference"], "GENE3D; 4bdfbb456939f25a8341bc1d3e063d66/252-430;")
        self.assertEqual(alignment.sequences[81].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Oryzoideae; Oryzeae; Oryzinae; Oryza; Oryza glumipatula;")
        self.assertEqual(alignment.sequences[82].id, "A0A109FGZ7/368-556")
        self.assertEqual(alignment.sequences[82].annotations["accession"], "A0A109FGZ7")
        self.assertEqual(alignment.sequences[82].annotations["organism"], "Rhodotorula sp. JG-1b")
        self.assertEqual(alignment.sequences[82].description, "DEAD-domain-containing protein")
        self.assertEqual(alignment.sequences[82].annotations["database_references"][0]["reference"], "GENE3D; 4cf1be66ff01cd03889f32635ce3b1fe/368-556;")
        self.assertEqual(alignment.sequences[82].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Rhodotorula; Rhodotorula sp. JG-1b;")
        self.assertEqual(alignment.sequences[83].id, "A0A1D6S7I6/309-438")
        self.assertEqual(alignment.sequences[83].annotations["accession"], "A0A1D6S7I6")
        self.assertEqual(alignment.sequences[83].annotations["organism"], "Triticum aestivum")
        self.assertEqual(alignment.sequences[83].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[83].annotations["database_references"][0]["reference"], "GENE3D; 4e27939a9be0cddd9bd7e51a21a5e2d6/309-438;")
        self.assertEqual(alignment.sequences[83].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Pooideae; Triticeae; Triticinae; Triticum; Triticum aestivum;")
        self.assertEqual(alignment.sequences[84].id, "A0A0L0FV40/1-199")
        self.assertEqual(alignment.sequences[84].annotations["accession"], "A0A0L0FV40")
        self.assertEqual(alignment.sequences[84].annotations["organism"], "Sphaeroforma arctica JP610")
        self.assertEqual(alignment.sequences[84].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[84].annotations["database_references"][0]["reference"], "GENE3D; 4e8a70fb5ebbc8cf41009bad851ba72b/1-199;")
        self.assertEqual(alignment.sequences[84].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Ichthyosporea; Ichthyophonida; Sphaeroforma; Sphaeroforma arctica;")
        self.assertEqual(alignment.sequences[85].id, "A2XAJ5/292-498")
        self.assertEqual(alignment.sequences[85].annotations["accession"], "A2XAJ5")
        self.assertEqual(alignment.sequences[85].annotations["organism"], "Oryza sativa Indica Group")
        self.assertEqual(alignment.sequences[85].description, "Putative uncharacterized protein")
        self.assertEqual(alignment.sequences[85].annotations["database_references"][0]["reference"], "GENE3D; 5014d4f3282c4babc0ccb9a7715f115d/292-498;")
        self.assertEqual(alignment.sequences[85].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Oryzoideae; Oryzeae; Oryzinae; Oryza; Oryza sativa;")
        self.assertEqual(alignment.sequences[86].id, "W5K201/500-686")
        self.assertEqual(alignment.sequences[86].annotations["accession"], "W5K201")
        self.assertEqual(alignment.sequences[86].annotations["organism"], "Astyanax mexicanus")
        self.assertEqual(alignment.sequences[86].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[86].annotations["database_references"][0]["reference"], "GENE3D; 5399f7525760784280b03e132b26b405/500-686;")
        self.assertEqual(alignment.sequences[86].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Actinopterygii; Actinopteri; Neopterygii; Teleostei; Characiphysae; Characiformes; Characoidei; Characidae; Astyanax; Astyanax mexicanus;")
        self.assertEqual(alignment.sequences[87].id, "A0A087URP2/444-651")
        self.assertEqual(alignment.sequences[87].annotations["accession"], "A0A087URP2")
        self.assertEqual(alignment.sequences[87].annotations["organism"], "Stegodyphus mimosarum")
        self.assertEqual(alignment.sequences[87].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[87].annotations["database_references"][0]["reference"], "GENE3D; 5317bc09daf2d16dc08216e7e07fe7bf/444-651;")
        self.assertEqual(alignment.sequences[87].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Chelicerata; Arachnida; Araneae; Araneomorphae; Eresoidea; Eresidae; Stegodyphus; Stegodyphus mimosarum;")
        self.assertEqual(alignment.sequences[88].id, "A0A0P1B227/319-459")
        self.assertEqual(alignment.sequences[88].annotations["accession"], "A0A0P1B227")
        self.assertEqual(alignment.sequences[88].annotations["organism"], "Plasmopara halstedii")
        self.assertEqual(alignment.sequences[88].description, "Dead deah box rna")
        self.assertEqual(alignment.sequences[88].annotations["database_references"][0]["reference"], "GENE3D; 543e0659a15ce922cae0b7415b714c87/319-459;")
        self.assertEqual(alignment.sequences[88].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Oomycetes; Peronosporales; Peronosporaceae; Plasmopara; Plasmopara halstedii;")
        self.assertEqual(alignment.sequences[89].id, "A0A0L0DMX5/442-649")
        self.assertEqual(alignment.sequences[89].annotations["accession"], "A0A0L0DMX5")
        self.assertEqual(alignment.sequences[89].annotations["organism"], "Thecamonas trahens ATCC 50062")
        self.assertEqual(alignment.sequences[89].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[89].annotations["database_references"][0]["reference"], "GENE3D; 5407ce25eea9257778c0e6849654bcfe/442-649;")
        self.assertEqual(alignment.sequences[89].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Apusomonadidae; Thecamonas; Thecamonas trahens;")
        self.assertEqual(alignment.sequences[90].id, "B4HK61/422-681")
        self.assertEqual(alignment.sequences[90].annotations["accession"], "B4HK61")
        self.assertEqual(alignment.sequences[90].annotations["organism"], "Drosophila sechellia")
        self.assertEqual(alignment.sequences[90].description, "GM24369")
        self.assertEqual(alignment.sequences[90].annotations["database_references"][0]["reference"], "GENE3D; 5688a60bf39961084f8dcb7143a37b3e/422-681;")
        self.assertEqual(alignment.sequences[90].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Brachycera; Muscomorpha; Ephydroidea; Drosophilidae; Drosophilinae; Drosophilini; Drosophila; Sophophora; melanogaster group; melanogaster subgroup; Drosophila sechellia;")
        self.assertEqual(alignment.sequences[91].id, "G1TG37/309-496")
        self.assertEqual(alignment.sequences[91].annotations["accession"], "G1TG37")
        self.assertEqual(alignment.sequences[91].annotations["organism"], "Oryctolagus cuniculus")
        self.assertEqual(alignment.sequences[91].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[91].annotations["database_references"][0]["reference"], "GENE3D; 5696473f3b1b14a482c501dc885eeb16/309-496;")
        self.assertEqual(alignment.sequences[91].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Euarchontoglires; Lagomorpha; Leporidae; Oryctolagus; Oryctolagus cuniculus;")
        self.assertEqual(alignment.sequences[92].id, "A0A059C6E9/306-443")
        self.assertEqual(alignment.sequences[92].annotations["accession"], "A0A059C6E9")
        self.assertEqual(alignment.sequences[92].annotations["organism"], "Eucalyptus grandis")
        self.assertEqual(alignment.sequences[92].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[92].annotations["database_references"][0]["reference"], "GENE3D; 57760252216f2cc09476f3341537c516/306-443;")
        self.assertEqual(alignment.sequences[92].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Myrtales; Myrtaceae; Myrtoideae; Eucalypteae; Eucalyptus; Eucalyptus grandis;")
        self.assertEqual(alignment.sequences[93].id, "B4MM57/417-678")
        self.assertEqual(alignment.sequences[93].annotations["accession"], "B4MM57")
        self.assertEqual(alignment.sequences[93].annotations["organism"], "Drosophila willistoni")
        self.assertEqual(alignment.sequences[93].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[93].annotations["database_references"][0]["reference"], "GENE3D; 52f585371061ee8e5e664e8735d93a4c/417-678;")
        self.assertEqual(alignment.sequences[93].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Brachycera; Muscomorpha; Ephydroidea; Drosophilidae; Drosophilinae; Drosophilini; Drosophila; Sophophora; willistoni group; willistoni subgroup; Drosophila willistoni;")
        self.assertEqual(alignment.sequences[94].id, "A0A061H3Y9/586-784")
        self.assertEqual(alignment.sequences[94].annotations["accession"], "A0A061H3Y9")
        self.assertEqual(alignment.sequences[94].annotations["organism"], "Anthracocystis flocculosa PF-1")
        self.assertEqual(alignment.sequences[94].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[94].annotations["database_references"][0]["reference"], "GENE3D; 59a2da1a4a82c47b5c441d92e9c59523/586-784;")
        self.assertEqual(alignment.sequences[94].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Ustilaginomycotina; Ustilaginomycetes; Ustilaginales; Ustilaginaceae; Anthracocystis; Anthracocystis flocculosa;")
        self.assertEqual(alignment.sequences[95].id, "A0A087V364/386-573")
        self.assertEqual(alignment.sequences[95].annotations["accession"], "A0A087V364")
        self.assertEqual(alignment.sequences[95].annotations["organism"], "Balearica regulorum gibbericeps")
        self.assertEqual(alignment.sequences[95].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[95].annotations["database_references"][0]["reference"], "GENE3D; 5f0bdcc5762766b1c42282115cbaad91/386-573;")
        self.assertEqual(alignment.sequences[95].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Aves; Neognathae; Gruiformes; Gruidae; Balearica; Balearica regulorum; Balearica regulorum gibbericeps;")
        self.assertEqual(alignment.sequences[96].id, "A0A067CH47/273-463")
        self.assertEqual(alignment.sequences[96].annotations["accession"], "A0A067CH47")
        self.assertEqual(alignment.sequences[96].annotations["organism"], "Saprolegnia parasitica CBS 223.65")
        self.assertEqual(alignment.sequences[96].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[96].annotations["database_references"][0]["reference"], "GENE3D; 5f65da15fb07e4f249507d9d7f369d1b/273-463;")
        self.assertEqual(alignment.sequences[96].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Oomycetes; Saprolegniales; Saprolegniaceae; Saprolegnia; Saprolegnia parasitica;")
        self.assertEqual(alignment.sequences[97].id, "A0A0D2TQL8/305-510")
        self.assertEqual(alignment.sequences[97].annotations["accession"], "A0A0D2TQL8")
        self.assertEqual(alignment.sequences[97].annotations["organism"], "Gossypium raimondii")
        self.assertEqual(alignment.sequences[97].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[97].annotations["database_references"][0]["reference"], "GENE3D; 60ff543b7e6e5514e52426ed724a572f/305-510;")
        self.assertEqual(alignment.sequences[97].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Malvales; Malvaceae; Malvoideae; Gossypium; Gossypium raimondii;")
        self.assertEqual(alignment.sequences[98].id, "A0A0G2K4S4/456-635")
        self.assertEqual(alignment.sequences[98].annotations["accession"], "A0A0G2K4S4")
        self.assertEqual(alignment.sequences[98].annotations["organism"], "Rattus norvegicus")
        self.assertEqual(alignment.sequences[98].description, "DEAD-box helicase 51")
        self.assertEqual(alignment.sequences[98].annotations["database_references"][0]["reference"], "GENE3D; 5ccac3dba68c0184b2e93e69a6c0ddf2/456-635;")
        self.assertEqual(alignment.sequences[98].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Euarchontoglires; Rodentia; Myomorpha; Muridae; Murinae; Rattus; Rattus norvegicus;")
        self.assertEqual(alignment.sequences[99].id, "A0A0A0KNZ7/305-517")
        self.assertEqual(alignment.sequences[99].annotations["accession"], "A0A0A0KNZ7")
        self.assertEqual(alignment.sequences[99].annotations["organism"], "Cucumis sativus")
        self.assertEqual(alignment.sequences[99].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[99].annotations["database_references"][0]["reference"], "GENE3D; 6328a1de5dfde6537e65fc29c322f6bb/305-517;")
        self.assertEqual(alignment.sequences[99].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Cucurbitales; Cucurbitaceae; Benincaseae; Cucumis; Cucumis sativus;")
        self.assertEqual(alignment.sequences[100].id, "M5WN51/306-506")
        self.assertEqual(alignment.sequences[100].annotations["accession"], "M5WN51")
        self.assertEqual(alignment.sequences[100].annotations["organism"], "Prunus persica")
        self.assertEqual(alignment.sequences[100].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[100].annotations["database_references"][0]["reference"], "GENE3D; 5ea7f38c6588d8630c6e4868bd891fc0/306-506;")
        self.assertEqual(alignment.sequences[100].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Rosales; Rosaceae; Maloideae; Amygdaleae; Prunus; Prunus persica;")
        self.assertEqual(alignment.sequences[101].id, "A0A0L9ULA6/7-189")
        self.assertEqual(alignment.sequences[101].annotations["accession"], "A0A0L9ULA6")
        self.assertEqual(alignment.sequences[101].annotations["organism"], "Vigna angularis")
        self.assertEqual(alignment.sequences[101].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[101].annotations["database_references"][0]["reference"], "GENE3D; 638dd0407f278b79739c0a944c7a2070/7-189;")
        self.assertEqual(alignment.sequences[101].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Fabales; Fabaceae; Papilionoideae; Phaseoleae; Vigna; Vigna angularis;")
        self.assertEqual(alignment.sequences[102].id, "L8GG81/7-236")
        self.assertEqual(alignment.sequences[102].annotations["accession"], "L8GG81")
        self.assertEqual(alignment.sequences[102].annotations["organism"], "Acanthamoeba castellanii str. Neff")
        self.assertEqual(alignment.sequences[102].description, "Helicase conserved Cterminal domain containing protein")
        self.assertEqual(alignment.sequences[102].annotations["database_references"][0]["reference"], "GENE3D; 64d7613b5c1512dbcc2b332666d4aaa1/7-236;")
        self.assertEqual(alignment.sequences[102].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Longamoebia; Acanthamoebidae; Acanthamoeba; Acanthamoeba castellanii;")
        self.assertEqual(alignment.sequences[103].id, "A0A094L5S3/387-574")
        self.assertEqual(alignment.sequences[103].annotations["accession"], "A0A094L5S3")
        self.assertEqual(alignment.sequences[103].annotations["organism"], "Antrostomus carolinensis")
        self.assertEqual(alignment.sequences[103].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[103].annotations["database_references"][0]["reference"], "GENE3D; 66faa8ceac2c48105d5dc034111514ec/387-574;")
        self.assertEqual(alignment.sequences[103].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Aves; Neognathae; Caprimulgiformes; Caprimulgidae; Antrostomus; Antrostomus carolinensis;")
        self.assertEqual(alignment.sequences[104].id, "A0A059C641/306-501")
        self.assertEqual(alignment.sequences[104].annotations["accession"], "A0A059C641")
        self.assertEqual(alignment.sequences[104].annotations["organism"], "Eucalyptus grandis")
        self.assertEqual(alignment.sequences[104].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[104].annotations["database_references"][0]["reference"], "GENE3D; 6600aa11e9244baeee0a81478c701f77/306-501;")
        self.assertEqual(alignment.sequences[104].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Myrtales; Myrtaceae; Myrtoideae; Eucalypteae; Eucalyptus; Eucalyptus grandis;")
        self.assertEqual(alignment.sequences[105].id, "A0A0C3BDB0/438-623")
        self.assertEqual(alignment.sequences[105].annotations["accession"], "A0A0C3BDB0")
        self.assertEqual(alignment.sequences[105].annotations["organism"], "Piloderma croceum F 1598")
        self.assertEqual(alignment.sequences[105].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[105].annotations["database_references"][0]["reference"], "GENE3D; 66a17a0e175f9f0aefc590199d009164/438-623;")
        self.assertEqual(alignment.sequences[105].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Agaricomycetidae; Atheliales; Atheliaceae; Piloderma; Piloderma croceum;")
        self.assertEqual(alignment.sequences[106].id, "A0A058YZR3/519-738")
        self.assertEqual(alignment.sequences[106].annotations["accession"], "A0A058YZR3")
        self.assertEqual(alignment.sequences[106].annotations["organism"], "Fonticula alba")
        self.assertEqual(alignment.sequences[106].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[106].annotations["database_references"][0]["reference"], "GENE3D; 691404443045f466787dacddcda12ff6/519-738;")
        self.assertEqual(alignment.sequences[106].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fonticula; Fonticula alba;")
        self.assertEqual(alignment.sequences[107].id, "A0A1E5W8G9/135-300")
        self.assertEqual(alignment.sequences[107].annotations["accession"], "A0A1E5W8G9")
        self.assertEqual(alignment.sequences[107].annotations["organism"], "Dichanthelium oligosanthes")
        self.assertEqual(alignment.sequences[107].description, "DEAD-box ATP-dependent RNA helicase 1")
        self.assertEqual(alignment.sequences[107].annotations["database_references"][0]["reference"], "GENE3D; 6b201bca985e8cbe2de695f803f0a5b0/135-300;")
        self.assertEqual(alignment.sequences[107].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Panicoideae; Paniceae; Dichantheliinae; Dichanthelium; Dichanthelium oligosanthes;")
        self.assertEqual(alignment.sequences[108].id, "A0A132ABS7/364-567")
        self.assertEqual(alignment.sequences[108].annotations["accession"], "A0A132ABS7")
        self.assertEqual(alignment.sequences[108].annotations["organism"], "Sarcoptes scabiei")
        self.assertEqual(alignment.sequences[108].description, "ATP-dependent RNA helicase DDX51-like protein")
        self.assertEqual(alignment.sequences[108].annotations["database_references"][0]["reference"], "GENE3D; 6bf827b4e099774ed7edadc71ad57ee7/364-567;")
        self.assertEqual(alignment.sequences[108].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Chelicerata; Arachnida; Acari; Acariformes; Astigmata; Sarcoptoidea; Sarcoptidae; Sarcoptinae; Sarcoptes; Sarcoptes scabiei;")
        self.assertEqual(alignment.sequences[109].id, "M3XTF7/308-493")
        self.assertEqual(alignment.sequences[109].annotations["accession"], "M3XTF7")
        self.assertEqual(alignment.sequences[109].annotations["organism"], "Mustela putorius furo")
        self.assertEqual(alignment.sequences[109].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[109].annotations["database_references"][0]["reference"], "GENE3D; 685b8d59f4093360c116ab137875e962/308-493;")
        self.assertEqual(alignment.sequences[109].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Laurasiatheria; Carnivora; Caniformia; Mustelidae; Mustelinae; Mustela; Mustela putorius; Mustela putorius furo;")
        self.assertEqual(alignment.sequences[110].id, "M1AS98/261-463")
        self.assertEqual(alignment.sequences[110].annotations["accession"], "M1AS98")
        self.assertEqual(alignment.sequences[110].annotations["organism"], "Solanum tuberosum")
        self.assertEqual(alignment.sequences[110].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[110].annotations["database_references"][0]["reference"], "GENE3D; 6d7af2f7ec2fa9ef859d272a8788af17/261-463;")
        self.assertEqual(alignment.sequences[110].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; asterids; Solanales; Solanaceae; Solanoideae; Solaneae; Solanum; Solanum tuberosum;")
        self.assertEqual(alignment.sequences[111].id, "L9L0R6/275-478")
        self.assertEqual(alignment.sequences[111].annotations["accession"], "L9L0R6")
        self.assertEqual(alignment.sequences[111].annotations["organism"], "Tupaia chinensis")
        self.assertEqual(alignment.sequences[111].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[111].annotations["database_references"][0]["reference"], "GENE3D; 6eb01e4d45e8d6f42c7709d83539abed/275-478;")
        self.assertEqual(alignment.sequences[111].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Euarchontoglires; Scandentia; Tupaiidae; Tupaia; Tupaia chinensis;")
        self.assertEqual(alignment.sequences[112].id, "A0A091UZP3/390-571")
        self.assertEqual(alignment.sequences[112].annotations["accession"], "A0A091UZP3")
        self.assertEqual(alignment.sequences[112].annotations["organism"], "Nipponia nippon")
        self.assertEqual(alignment.sequences[112].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[112].annotations["database_references"][0]["reference"], "GENE3D; 7006b9065c4c82b140c740db741e36d6/390-571;")
        self.assertEqual(alignment.sequences[112].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Aves; Neognathae; Pelecaniformes; Threskiornithidae; Nipponia; Nipponia nippon;")
        self.assertEqual(alignment.sequences[113].id, "J3LHZ8/311-516")
        self.assertEqual(alignment.sequences[113].annotations["accession"], "J3LHZ8")
        self.assertEqual(alignment.sequences[113].annotations["organism"], "Oryza brachyantha")
        self.assertEqual(alignment.sequences[113].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[113].annotations["database_references"][0]["reference"], "GENE3D; 6f5f8bd27e76508204fab3cb4928049f/311-516;")
        self.assertEqual(alignment.sequences[113].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Oryzoideae; Oryzeae; Oryzinae; Oryza; Oryza brachyantha;")
        self.assertEqual(alignment.sequences[114].id, "G4TJG0/1399-1590")
        self.assertEqual(alignment.sequences[114].annotations["accession"], "G4TJG0")
        self.assertEqual(alignment.sequences[114].annotations["organism"], "Serendipita indica DSM 11827")
        self.assertEqual(alignment.sequences[114].description, "Related to DBP6-ATP-dependent RNA helicase")
        self.assertEqual(alignment.sequences[114].annotations["database_references"][0]["reference"], "GENE3D; 6b4ce4b8ec7c9c42733e92ba3ebed26d/1399-1590;")
        self.assertEqual(alignment.sequences[114].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Sebacinales; Serendipitaceae; Serendipita; Serendipita indica;")
        self.assertEqual(alignment.sequences[115].id, "A0A068XN68/385-607")
        self.assertEqual(alignment.sequences[115].annotations["accession"], "A0A068XN68")
        self.assertEqual(alignment.sequences[115].annotations["organism"], "Hymenolepis microstoma")
        self.assertEqual(alignment.sequences[115].description, "ATP dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[115].annotations["database_references"][0]["reference"], "GENE3D; 70dd7195a717111c19859aedc3ea4981/385-607;")
        self.assertEqual(alignment.sequences[115].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Platyhelminthes; Cestoda; Eucestoda; Cyclophyllidea; Hymenolepididae; Hymenolepis; Hymenolepis microstoma;")
        self.assertEqual(alignment.sequences[116].id, "F6PH49/253-444")
        self.assertEqual(alignment.sequences[116].annotations["accession"], "F6PH49")
        self.assertEqual(alignment.sequences[116].annotations["organism"], "Ciona intestinalis")
        self.assertEqual(alignment.sequences[116].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[116].annotations["database_references"][0]["reference"], "GENE3D; 725a33598d1e85ea71a841074e52980e/253-444;")
        self.assertEqual(alignment.sequences[116].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Tunicata; Ascidiacea; Enterogona; Phlebobranchia; Cionidae; Ciona; Ciona intestinalis;")
        self.assertEqual(alignment.sequences[117].id, "F1MGC9/361-546")
        self.assertEqual(alignment.sequences[117].annotations["accession"], "F1MGC9")
        self.assertEqual(alignment.sequences[117].annotations["organism"], "Bos taurus")
        self.assertEqual(alignment.sequences[117].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[117].annotations["database_references"][0]["reference"], "GENE3D; 717cd12af01339fba89aa55f2b640165/361-546;")
        self.assertEqual(alignment.sequences[117].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Laurasiatheria; Ruminantia; Pecora; Bovidae; Bovinae; Bos; Bos taurus;")
        self.assertEqual(alignment.sequences[118].id, "A0A0M5J467/318-563")
        self.assertEqual(alignment.sequences[118].annotations["accession"], "A0A0M5J467")
        self.assertEqual(alignment.sequences[118].annotations["organism"], "Drosophila busckii")
        self.assertEqual(alignment.sequences[118].description, "Dbp73D")
        self.assertEqual(alignment.sequences[118].annotations["database_references"][0]["reference"], "GENE3D; 73c1139218fbecc5b510bb8bfa070cb8/318-563;")
        self.assertEqual(alignment.sequences[118].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Brachycera; Muscomorpha; Ephydroidea; Drosophilidae; Drosophilinae; Drosophilini; Drosophila; Dorsilopha; Drosophila busckii;")
        self.assertEqual(alignment.sequences[119].id, "W4FWB4/288-492")
        self.assertEqual(alignment.sequences[119].annotations["accession"], "W4FWB4")
        self.assertEqual(alignment.sequences[119].annotations["organism"], "Aphanomyces astaci")
        self.assertEqual(alignment.sequences[119].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[119].annotations["database_references"][0]["reference"], "GENE3D; 6dc7eaa4cbef1d4c465d132d6858da5c/288-492;")
        self.assertEqual(alignment.sequences[119].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Oomycetes; Saprolegniales; Saprolegniaceae; Aphanomyces; Aphanomyces astaci;")
        self.assertEqual(alignment.sequences[120].id, "A0A067N6H6/373-567")
        self.assertEqual(alignment.sequences[120].annotations["accession"], "A0A067N6H6")
        self.assertEqual(alignment.sequences[120].annotations["organism"], "Botryobasidium botryosum FD-172 SS1")
        self.assertEqual(alignment.sequences[120].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[120].annotations["database_references"][0]["reference"], "GENE3D; 6f0153c21fd6f9932d2dcb0e6fb288bb/373-567;")
        self.assertEqual(alignment.sequences[120].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Cantharellales; Botryobasidiaceae; Botryobasidium; Botryobasidium botryosum;")
        self.assertEqual(alignment.sequences[121].id, "A0A0C3B8Z7/269-452")
        self.assertEqual(alignment.sequences[121].annotations["accession"], "A0A0C3B8Z7")
        self.assertEqual(alignment.sequences[121].annotations["organism"], "Serendipita vermifera MAFF 305830")
        self.assertEqual(alignment.sequences[121].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[121].annotations["database_references"][0]["reference"], "GENE3D; 76214b734b81166b7cd5e0a3e1295196/269-452;")
        self.assertEqual(alignment.sequences[121].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Sebacinales; Serendipitaceae; Serendipita; Serendipita vermifera;")
        self.assertEqual(alignment.sequences[122].id, "G3WE26/507-691")
        self.assertEqual(alignment.sequences[122].annotations["accession"], "G3WE26")
        self.assertEqual(alignment.sequences[122].annotations["organism"], "Sarcophilus harrisii")
        self.assertEqual(alignment.sequences[122].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[122].annotations["database_references"][0]["reference"], "GENE3D; 763cf171cf61db28d0e91c8ce73a7c80/507-691;")
        self.assertEqual(alignment.sequences[122].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Dasyuromorphia; Dasyuridae; Sarcophilus; Sarcophilus harrisii;")
        self.assertEqual(alignment.sequences[123].id, "E1ZNU6/322-510")
        self.assertEqual(alignment.sequences[123].annotations["accession"], "E1ZNU6")
        self.assertEqual(alignment.sequences[123].annotations["organism"], "Chlorella variabilis")
        self.assertEqual(alignment.sequences[123].description, "Putative uncharacterized protein")
        self.assertEqual(alignment.sequences[123].annotations["database_references"][0]["reference"], "GENE3D; 76e810ec20383006c99a46f398045e9d/322-510;")
        self.assertEqual(alignment.sequences[123].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Chlorophyta; Trebouxiophyceae; Chlorellales; Chlorellaceae; Chlorella; Chlorella variabilis;")
        self.assertEqual(alignment.sequences[124].id, "A0A0C3KYY8/327-517")
        self.assertEqual(alignment.sequences[124].annotations["accession"], "A0A0C3KYY8")
        self.assertEqual(alignment.sequences[124].annotations["organism"], "Pisolithus tinctorius Marx 270")
        self.assertEqual(alignment.sequences[124].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[124].annotations["database_references"][0]["reference"], "GENE3D; 797c12632c56a59c43cb28cc77241ff4/327-517;")
        self.assertEqual(alignment.sequences[124].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Agaricomycetidae; Boletales; Sclerodermatineae; Pisolithaceae; Pisolithus; Pisolithus tinctorius;")
        self.assertEqual(alignment.sequences[125].id, "S9VWJ9/408-600")
        self.assertEqual(alignment.sequences[125].annotations["accession"], "S9VWJ9")
        self.assertEqual(alignment.sequences[125].annotations["organism"], "Schizosaccharomyces cryophilus OY26")
        self.assertEqual(alignment.sequences[125].description, "ATP-dependent RNA helicase Dbp6")
        self.assertEqual(alignment.sequences[125].annotations["database_references"][0]["reference"], "GENE3D; 7c30817a07dc8ce36b94ba60d2b3b0ff/408-600;")
        self.assertEqual(alignment.sequences[125].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Ascomycota; Taphrinomycotina; Schizosaccharomycetes; Schizosaccharomycetales; Schizosaccharomycetaceae; Schizosaccharomyces; Schizosaccharomyces cryophilus;")
        self.assertEqual(alignment.sequences[126].id, "V4SI31/305-477")
        self.assertEqual(alignment.sequences[126].annotations["accession"], "V4SI31")
        self.assertEqual(alignment.sequences[126].annotations["organism"], "Citrus clementina")
        self.assertEqual(alignment.sequences[126].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[126].annotations["database_references"][0]["reference"], "GENE3D; 7acb9fcc21db5df5cbdbffa8f5087783/305-477;")
        self.assertEqual(alignment.sequences[126].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Sapindales; Rutaceae; Aurantioideae; Citrus; Citrus clementina;")
        self.assertEqual(alignment.sequences[127].id, "A0A0P7UI89/371-568")
        self.assertEqual(alignment.sequences[127].annotations["accession"], "A0A0P7UI89")
        self.assertEqual(alignment.sequences[127].annotations["organism"], "Scleropages formosus")
        self.assertEqual(alignment.sequences[127].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[127].annotations["database_references"][0]["reference"], "GENE3D; 7c7ed745f28300785d809fc97eef27db/371-568;")
        self.assertEqual(alignment.sequences[127].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Actinopterygii; Actinopteri; Neopterygii; Teleostei; Osteoglossiformes; Osteoglossidae; Scleropages; Scleropages formosus;")
        self.assertEqual(alignment.sequences[128].id, "A0A0U9HIS1/685-867")
        self.assertEqual(alignment.sequences[128].annotations["accession"], "A0A0U9HIS1")
        self.assertEqual(alignment.sequences[128].annotations["organism"], "Klebsormidium flaccidum")
        self.assertEqual(alignment.sequences[128].description, "Putative DEAD-like helicases superfamily protein")
        self.assertEqual(alignment.sequences[128].annotations["database_references"][0]["reference"], "GENE3D; 7c83d6be5c115c7e78cbd9e23fc6ff28/685-867;")
        self.assertEqual(alignment.sequences[128].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Klebsormidiophyceae; Klebsormidiales; Klebsormidiaceae; Klebsormidium; Klebsormidium flaccidum;")
        self.assertEqual(alignment.sequences[129].id, "A0A024GET9/305-513")
        self.assertEqual(alignment.sequences[129].annotations["accession"], "A0A024GET9")
        self.assertEqual(alignment.sequences[129].annotations["organism"], "Albugo candida")
        self.assertEqual(alignment.sequences[129].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[129].annotations["database_references"][0]["reference"], "GENE3D; 7c8ac7660bb716b07f9be5f1f13868e8/305-513;")
        self.assertEqual(alignment.sequences[129].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Oomycetes; Albuginales; Albuginaceae; Albugo; Albugo candida;")
        self.assertEqual(alignment.sequences[130].id, "I3MV59/342-529")
        self.assertEqual(alignment.sequences[130].annotations["accession"], "I3MV59")
        self.assertEqual(alignment.sequences[130].annotations["organism"], "Ictidomys tridecemlineatus")
        self.assertEqual(alignment.sequences[130].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[130].annotations["database_references"][0]["reference"], "GENE3D; 821a946f72402f9b94a2c31bd7ae153d/342-529;")
        self.assertEqual(alignment.sequences[130].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Euarchontoglires; Rodentia; Sciuromorpha; Sciuridae; Xerinae; Marmotini; Ictidomys; Ictidomys tridecemlineatus;")
        self.assertEqual(alignment.sequences[131].id, "H2ZLF9/456-641")
        self.assertEqual(alignment.sequences[131].annotations["accession"], "H2ZLF9")
        self.assertEqual(alignment.sequences[131].annotations["organism"], "Ciona savignyi")
        self.assertEqual(alignment.sequences[131].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[131].annotations["database_references"][0]["reference"], "GENE3D; 873302fef2fcc50f07f18c2b21dd2c08/456-641;")
        self.assertEqual(alignment.sequences[131].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Tunicata; Ascidiacea; Enterogona; Phlebobranchia; Cionidae; Ciona; Ciona savignyi;")
        self.assertEqual(alignment.sequences[132].id, "A0A0C3C8D7/468-659")
        self.assertEqual(alignment.sequences[132].annotations["accession"], "A0A0C3C8D7")
        self.assertEqual(alignment.sequences[132].annotations["organism"], "Hebeloma cylindrosporum h7")
        self.assertEqual(alignment.sequences[132].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[132].annotations["database_references"][0]["reference"], "GENE3D; 87361515fec1a61311c983058ccb5561/468-659;")
        self.assertEqual(alignment.sequences[132].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Agaricomycetidae; Agaricales; Cortinariaceae; Hebeloma; Hebeloma cylindrosporum;")
        self.assertEqual(alignment.sequences[133].id, "A0A0C9MGL8/469-653")
        self.assertEqual(alignment.sequences[133].annotations["accession"], "A0A0C9MGL8")
        self.assertEqual(alignment.sequences[133].annotations["organism"], "Mucor ambiguus")
        self.assertEqual(alignment.sequences[133].description, "DEAD-domain-containing protein")
        self.assertEqual(alignment.sequences[133].annotations["database_references"][0]["reference"], "GENE3D; 864ac2945525f3103dbfaa204d671efb/469-653;")
        self.assertEqual(alignment.sequences[133].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Mucoromycota; Mucoromycotina; Mucorales; Mucorineae; Mucoraceae; Mucor; Mucor ambiguus;")
        self.assertEqual(alignment.sequences[134].id, "A0A091H4L8/390-570")
        self.assertEqual(alignment.sequences[134].annotations["accession"], "A0A091H4L8")
        self.assertEqual(alignment.sequences[134].annotations["organism"], "Buceros rhinoceros silvestris")
        self.assertEqual(alignment.sequences[134].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[134].annotations["database_references"][0]["reference"], "GENE3D; 81193668fd02c6631b7b46dece0d1a0a/390-570;")
        self.assertEqual(alignment.sequences[134].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Aves; Neognathae; Bucerotiformes; Bucerotidae; Buceros; Buceros rhinoceros; Buceros rhinoceros silvestris;")
        self.assertEqual(alignment.sequences[135].id, "N6TWN3/338-551")
        self.assertEqual(alignment.sequences[135].annotations["accession"], "N6TWN3")
        self.assertEqual(alignment.sequences[135].annotations["organism"], "Dendroctonus ponderosae")
        self.assertEqual(alignment.sequences[135].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[135].annotations["database_references"][0]["reference"], "GENE3D; 881a8750d84f793b81dd32e3d9758314/338-551;")
        self.assertEqual(alignment.sequences[135].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Coleoptera; Polyphaga; Cucujiformia; Curculionoidea; Curculionidae; Scolytinae; Dendroctonus; Dendroctonus ponderosae;")
        self.assertEqual(alignment.sequences[136].id, "H2U574/469-652")
        self.assertEqual(alignment.sequences[136].annotations["accession"], "H2U574")
        self.assertEqual(alignment.sequences[136].annotations["organism"], "Takifugu rubripes")
        self.assertEqual(alignment.sequences[136].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[136].annotations["database_references"][0]["reference"], "GENE3D; 88402b9d49f1d2284879356be14881f7/469-652;")
        self.assertEqual(alignment.sequences[136].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Actinopterygii; Actinopteri; Neopterygii; Teleostei; Tetraodontiformes; Tetraodontoidei; Tetradontoidea; Tetraodontidae; Takifugu; Takifugu rubripes;")
        self.assertEqual(alignment.sequences[137].id, "A0A0E0K6A4/322-541")
        self.assertEqual(alignment.sequences[137].annotations["accession"], "A0A0E0K6A4")
        self.assertEqual(alignment.sequences[137].annotations["organism"], "Oryza punctata")
        self.assertEqual(alignment.sequences[137].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[137].annotations["database_references"][0]["reference"], "GENE3D; 8b25195c01b3485ff52302fe35658652/322-541;")
        self.assertEqual(alignment.sequences[137].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Oryzoideae; Oryzeae; Oryzinae; Oryza; Oryza punctata;")
        self.assertEqual(alignment.sequences[138].id, "M0RMU4/307-512")
        self.assertEqual(alignment.sequences[138].annotations["accession"], "M0RMU4")
        self.assertEqual(alignment.sequences[138].annotations["organism"], "Musa acuminata subsp. malaccensis")
        self.assertEqual(alignment.sequences[138].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[138].annotations["database_references"][0]["reference"], "GENE3D; 8db9a947b0feaf1b8733b0c20d955226/307-512;")
        self.assertEqual(alignment.sequences[138].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Zingiberales; Musaceae; Musa; Musa acuminata; Musa acuminata subsp. malaccensis;")
        self.assertEqual(alignment.sequences[139].id, "A0A0P9IR69/379-575")
        self.assertEqual(alignment.sequences[139].annotations["accession"], "A0A0P9IR69")
        self.assertEqual(alignment.sequences[139].annotations["organism"], "Rhodotorula graminis WP1")
        self.assertEqual(alignment.sequences[139].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[139].annotations["database_references"][0]["reference"], "GENE3D; 867ecc44a8e180ed4e7a4bff40605cc3/379-575;")
        self.assertEqual(alignment.sequences[139].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Pucciniomycotina; Microbotryomycetes; Sporidiobolales; Sporidiobolaceae; Rhodotorula; Rhodotorula graminis;")
        self.assertEqual(alignment.sequences[140].id, "A0A0C9SX68/474-665")
        self.assertEqual(alignment.sequences[140].annotations["accession"], "A0A0C9SX68")
        self.assertEqual(alignment.sequences[140].annotations["organism"], "Paxillus involutus ATCC 200175")
        self.assertEqual(alignment.sequences[140].description, "Unplaced genomic scaffold PAXINscaffold_22, whole genome shotgun sequence")
        self.assertEqual(alignment.sequences[140].annotations["database_references"][0]["reference"], "GENE3D; 9069335fb073b28ac33eb85f0515a393/474-665;")
        self.assertEqual(alignment.sequences[140].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Agaricomycetidae; Boletales; Paxilineae; Paxillaceae; Paxillus; Paxillus involutus;")
        self.assertEqual(alignment.sequences[141].id, "W9R784/307-511")
        self.assertEqual(alignment.sequences[141].annotations["accession"], "W9R784")
        self.assertEqual(alignment.sequences[141].annotations["organism"], "Morus notabilis")
        self.assertEqual(alignment.sequences[141].description, "DEAD-box ATP-dependent RNA helicase 1")
        self.assertEqual(alignment.sequences[141].annotations["database_references"][0]["reference"], "GENE3D; 8f0d68f981a78cc86125eca04cb31750/307-511;")
        self.assertEqual(alignment.sequences[141].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Rosales; Moraceae; Morus; Morus notabilis;")
        self.assertEqual(alignment.sequences[142].id, "V7CNC8/295-493")
        self.assertEqual(alignment.sequences[142].annotations["accession"], "V7CNC8")
        self.assertEqual(alignment.sequences[142].annotations["organism"], "Phaseolus vulgaris")
        self.assertEqual(alignment.sequences[142].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[142].annotations["database_references"][0]["reference"], "GENE3D; 8a0d6effc861ee1bd241cff055caf621/295-493;")
        self.assertEqual(alignment.sequences[142].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Fabales; Fabaceae; Papilionoideae; Phaseoleae; Phaseolus; Phaseolus vulgaris;")
        self.assertEqual(alignment.sequences[143].id, "A0A066VQF8/467-659")
        self.assertEqual(alignment.sequences[143].annotations["accession"], "A0A066VQF8")
        self.assertEqual(alignment.sequences[143].annotations["organism"], "Tilletiaria anomala UBC 951")
        self.assertEqual(alignment.sequences[143].description, "DEAD-domain-containing protein")
        self.assertEqual(alignment.sequences[143].annotations["database_references"][0]["reference"], "GENE3D; 91a54d9d3532f09bff9be739b7487d7c/467-659;")
        self.assertEqual(alignment.sequences[143].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Ustilaginomycotina; Exobasidiomycetes; Georgefischeriales; Tilletiariaceae; Tilletiaria; Tilletiaria anomala;")
        self.assertEqual(alignment.sequences[144].id, "G7KG11/305-497")
        self.assertEqual(alignment.sequences[144].annotations["accession"], "G7KG11")
        self.assertEqual(alignment.sequences[144].annotations["organism"], "Medicago truncatula")
        self.assertEqual(alignment.sequences[144].description, "DEAD-box ATP-dependent RNA helicase")
        self.assertEqual(alignment.sequences[144].annotations["database_references"][0]["reference"], "GENE3D; 8c14ac2e7d39af1eb5c86720ec5a1b13/305-497;")
        self.assertEqual(alignment.sequences[144].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Fabales; Fabaceae; Papilionoideae; Trifolieae; Medicago; Medicago truncatula;")
        self.assertEqual(alignment.sequences[145].id, "G3R420/429-615")
        self.assertEqual(alignment.sequences[145].annotations["accession"], "G3R420")
        self.assertEqual(alignment.sequences[145].annotations["organism"], "Gorilla gorilla gorilla")
        self.assertEqual(alignment.sequences[145].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[145].annotations["database_references"][0]["reference"], "GENE3D; 95b7d31250a2ac606efa76532abb2e78/429-615;")
        self.assertEqual(alignment.sequences[145].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Euarchontoglires; Primates; Haplorrhini; Simiiformes; Catarrhini; Hominoidea; Hominidae; Homininae; Gorilla; Gorilla gorilla; Gorilla gorilla gorilla;")
        self.assertEqual(alignment.sequences[146].id, "H2RD50/306-492")
        self.assertEqual(alignment.sequences[146].annotations["accession"], "H2RD50")
        self.assertEqual(alignment.sequences[146].annotations["organism"], "Pan troglodytes")
        self.assertEqual(alignment.sequences[146].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[146].annotations["database_references"][0]["reference"], "GENE3D; 8fc568b2d5c739f661560c66a3afbe64/306-492;")
        self.assertEqual(alignment.sequences[146].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Euarchontoglires; Primates; Haplorrhini; Simiiformes; Catarrhini; Hominoidea; Hominidae; Homininae; Pan; Pan troglodytes;")
        self.assertEqual(alignment.sequences[147].id, "A0A0P5CYV8/476-697")
        self.assertEqual(alignment.sequences[147].annotations["accession"], "A0A0P5CYV8")
        self.assertEqual(alignment.sequences[147].annotations["organism"], "Daphnia magna")
        self.assertEqual(alignment.sequences[147].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[147].annotations["database_references"][0]["reference"], "GENE3D; 9803762b9ebe084b430db8253cc97cbb/476-697;")
        self.assertEqual(alignment.sequences[147].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Crustacea; Branchiopoda; Phyllopoda; Diplostraca; Cladocera; Anomopoda; Daphniidae; Daphnia; Daphnia magna;")
        self.assertEqual(alignment.sequences[148].id, "A0A197JCM0/577-631_740-864")
        self.assertEqual(alignment.sequences[148].annotations["accession"], "A0A197JCM0")
        self.assertEqual(alignment.sequences[148].annotations["organism"], "Mortierella elongata AG-77")
        self.assertEqual(alignment.sequences[148].description, "DEAD-domain-containing protein")
        self.assertEqual(alignment.sequences[148].annotations["database_references"][0]["reference"], "GENE3D; 9ba199d4d1a38a621f531034ab83b159/577-631_740-864;")
        self.assertEqual(alignment.sequences[148].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Mucoromycota; Mortierellomycotina; Mortierellales; Mortierellaceae; Mortierella; Mortierella elongata;")
        self.assertEqual(alignment.sequences[149].id, "A0A0D9VM52/290-455")
        self.assertEqual(alignment.sequences[149].annotations["accession"], "A0A0D9VM52")
        self.assertEqual(alignment.sequences[149].annotations["organism"], "Leersia perrieri")
        self.assertEqual(alignment.sequences[149].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[149].annotations["database_references"][0]["reference"], "GENE3D; 9a533e8b132a3f47f83784766d3347ba/290-455;")
        self.assertEqual(alignment.sequences[149].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Oryzoideae; Oryzeae; Oryzinae; Leersia; Leersia perrieri;")
        self.assertEqual(alignment.sequences[150].id, "A0A0R3X429/372-559")
        self.assertEqual(alignment.sequences[150].annotations["accession"], "A0A0R3X429")
        self.assertEqual(alignment.sequences[150].annotations["organism"], "Hydatigera taeniaeformis")
        self.assertEqual(alignment.sequences[150].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[150].annotations["database_references"][0]["reference"], "GENE3D; 9af21fd33df8884d421bdfbf917495d2/372-559;")
        self.assertEqual(alignment.sequences[150].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Platyhelminthes; Cestoda; Eucestoda; Cyclophyllidea; Taeniidae; Hydatigera; Hydatigera taeniaeformis;")
        self.assertEqual(alignment.sequences[151].id, "G1RB26/400-577")
        self.assertEqual(alignment.sequences[151].annotations["accession"], "G1RB26")
        self.assertEqual(alignment.sequences[151].annotations["organism"], "Nomascus leucogenys")
        self.assertEqual(alignment.sequences[151].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[151].annotations["database_references"][0]["reference"], "GENE3D; 9bd38a768d0586fb8b386bcbc75581c7/400-577;")
        self.assertEqual(alignment.sequences[151].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Euarchontoglires; Primates; Haplorrhini; Simiiformes; Catarrhini; Hominoidea; Hylobatidae; Nomascus; Nomascus leucogenys;")
        self.assertEqual(alignment.sequences[152].id, "A0A060STD4/422-611")
        self.assertEqual(alignment.sequences[152].annotations["accession"], "A0A060STD4")
        self.assertEqual(alignment.sequences[152].annotations["organism"], "Trametes cinnabarina")
        self.assertEqual(alignment.sequences[152].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[152].annotations["database_references"][0]["reference"], "GENE3D; 95800963b1888da77cd086ec1628e168/422-611;")
        self.assertEqual(alignment.sequences[152].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Polyporales; Coriolaceae; Trametes; Trametes cinnabarina;")
        self.assertEqual(alignment.sequences[153].id, "A0A096Q9L0/313-518")
        self.assertEqual(alignment.sequences[153].annotations["accession"], "A0A096Q9L0")
        self.assertEqual(alignment.sequences[153].annotations["organism"], "Zea mays")
        self.assertEqual(alignment.sequences[153].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[153].annotations["database_references"][0]["reference"], "GENE3D; 9d1512b0071ef1aad5e235272aeaef30/313-518;")
        self.assertEqual(alignment.sequences[153].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Panicoideae; Andropogoneae; Tripsacinae; Zea; Zea mays;")
        self.assertEqual(alignment.sequences[154].id, "A0A072TSM9/122-313")
        self.assertEqual(alignment.sequences[154].annotations["accession"], "A0A072TSM9")
        self.assertEqual(alignment.sequences[154].annotations["organism"], "Medicago truncatula")
        self.assertEqual(alignment.sequences[154].description, "DEAD-box ATP-dependent RNA helicase-like protein")
        self.assertEqual(alignment.sequences[154].annotations["database_references"][0]["reference"], "GENE3D; 9ce7ec8c12139b6f6ff9522046f20f05/122-313;")
        self.assertEqual(alignment.sequences[154].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Fabales; Fabaceae; Papilionoideae; Trifolieae; Medicago; Medicago truncatula;")
        self.assertEqual(alignment.sequences[155].id, "V4SI27/299-471")
        self.assertEqual(alignment.sequences[155].annotations["accession"], "V4SI27")
        self.assertEqual(alignment.sequences[155].annotations["organism"], "Citrus clementina")
        self.assertEqual(alignment.sequences[155].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[155].annotations["database_references"][0]["reference"], "GENE3D; a0004d7844c3dae20c31dadf9d4670dc/299-471;")
        self.assertEqual(alignment.sequences[155].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Sapindales; Rutaceae; Aurantioideae; Citrus; Citrus clementina;")
        self.assertEqual(alignment.sequences[156].id, "V4RYZ4/260-432")
        self.assertEqual(alignment.sequences[156].annotations["accession"], "V4RYZ4")
        self.assertEqual(alignment.sequences[156].annotations["organism"], "Citrus clementina")
        self.assertEqual(alignment.sequences[156].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[156].annotations["database_references"][0]["reference"], "GENE3D; 9fb28ed37407404dd70eb01c045e348b/260-432;")
        self.assertEqual(alignment.sequences[156].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Sapindales; Rutaceae; Aurantioideae; Citrus; Citrus clementina;")
        self.assertEqual(alignment.sequences[157].id, "A0A0R3U050/329-553")
        self.assertEqual(alignment.sequences[157].annotations["accession"], "A0A0R3U050")
        self.assertEqual(alignment.sequences[157].annotations["organism"], "Hymenolepis nana")
        self.assertEqual(alignment.sequences[157].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[157].annotations["database_references"][0]["reference"], "GENE3D; a03679eecfa35195542dd4dadbc39694/329-553;")
        self.assertEqual(alignment.sequences[157].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Platyhelminthes; Cestoda; Eucestoda; Cyclophyllidea; Hymenolepididae; Hymenolepis; Hymenolepis nana;")
        self.assertEqual(alignment.sequences[158].id, "A0A0L8G0Z2/552-752")
        self.assertEqual(alignment.sequences[158].annotations["accession"], "A0A0L8G0Z2")
        self.assertEqual(alignment.sequences[158].annotations["organism"], "Octopus bimaculoides")
        self.assertEqual(alignment.sequences[158].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[158].annotations["database_references"][0]["reference"], "GENE3D; 9980f5d5b61e3d7eeac276d133b9b7d8/552-752;")
        self.assertEqual(alignment.sequences[158].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Mollusca; Cephalopoda; Coleoidea; Neocoleoidea; Octopodiformes; Octopoda; Incirrata; Octopodidae; Octopus; Octopus bimaculoides;")
        self.assertEqual(alignment.sequences[159].id, "A0A0J8BUR7/307-515")
        self.assertEqual(alignment.sequences[159].annotations["accession"], "A0A0J8BUR7")
        self.assertEqual(alignment.sequences[159].annotations["organism"], "Beta vulgaris subsp. vulgaris")
        self.assertEqual(alignment.sequences[159].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[159].annotations["database_references"][0]["reference"], "GENE3D; a2a24c6ab91f2ed456d9a8605c63a193/307-515;")
        self.assertEqual(alignment.sequences[159].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Caryophyllales; Chenopodiaceae; Betoideae; Beta; Beta vulgaris; Beta vulgaris subsp. vulgaris;")
        self.assertEqual(alignment.sequences[160].id, "K3YRL9/313-518")
        self.assertEqual(alignment.sequences[160].annotations["accession"], "K3YRL9")
        self.assertEqual(alignment.sequences[160].annotations["organism"], "Setaria italica")
        self.assertEqual(alignment.sequences[160].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[160].annotations["database_references"][0]["reference"], "GENE3D; 9b3a5df9aac2b10c857a241b554fa886/313-518;")
        self.assertEqual(alignment.sequences[160].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Panicoideae; Paniceae; Cenchrinae; Setaria; Setaria italica;")
        self.assertEqual(alignment.sequences[161].id, "A0A0D9VM53/293-497")
        self.assertEqual(alignment.sequences[161].annotations["accession"], "A0A0D9VM53")
        self.assertEqual(alignment.sequences[161].annotations["organism"], "Leersia perrieri")
        self.assertEqual(alignment.sequences[161].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[161].annotations["database_references"][0]["reference"], "GENE3D; 9b55ec0355b4162199c7cee00bc89555/293-497;")
        self.assertEqual(alignment.sequences[161].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Oryzoideae; Oryzeae; Oryzinae; Leersia; Leersia perrieri;")
        self.assertEqual(alignment.sequences[162].id, "A0A068S719/460-643")
        self.assertEqual(alignment.sequences[162].annotations["accession"], "A0A068S719")
        self.assertEqual(alignment.sequences[162].annotations["organism"], "Lichtheimia corymbifera JMRC:FSU:9682")
        self.assertEqual(alignment.sequences[162].description, "Dead-domain-containing protein")
        self.assertEqual(alignment.sequences[162].annotations["database_references"][0]["reference"], "GENE3D; a4cf2f624cd60ba97aa77bc33930c62a/460-643;")
        self.assertEqual(alignment.sequences[162].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Mucoromycota; Mucoromycotina; Mucorales; Lichtheimiaceae; Lichtheimia; Lichtheimia corymbifera;")
        self.assertEqual(alignment.sequences[163].id, "K5VVX8/411-596")
        self.assertEqual(alignment.sequences[163].annotations["accession"], "K5VVX8")
        self.assertEqual(alignment.sequences[163].annotations["organism"], "Agaricus bisporus var. burnettii JB137-S8")
        self.assertEqual(alignment.sequences[163].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[163].annotations["database_references"][0]["reference"], "GENE3D; 9d733832d3b0fae210f3c64ff0d0b9a1/411-596;")
        self.assertEqual(alignment.sequences[163].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Agaricomycetidae; Agaricales; Agaricaceae; Agaricus; Agaricus bisporus; Agaricus bisporus var. burnettii;")
        self.assertEqual(alignment.sequences[164].id, "A0A0C2WPV0/342-525")
        self.assertEqual(alignment.sequences[164].annotations["accession"], "A0A0C2WPV0")
        self.assertEqual(alignment.sequences[164].annotations["organism"], "Amanita muscaria Koide BX008")
        self.assertEqual(alignment.sequences[164].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[164].annotations["database_references"][0]["reference"], "GENE3D; a57b011e1a1c73cb5d54ebdb4f2f1bf2/342-525;")
        self.assertEqual(alignment.sequences[164].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Agaricomycetidae; Agaricales; Amanitaceae; Amanita; Amanita muscaria;")
        self.assertEqual(alignment.sequences[165].id, "F6ZE32/361-548")
        self.assertEqual(alignment.sequences[165].annotations["accession"], "F6ZE32")
        self.assertEqual(alignment.sequences[165].annotations["organism"], "Equus caballus")
        self.assertEqual(alignment.sequences[165].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[165].annotations["database_references"][0]["reference"], "GENE3D; a585e8f703dce9f3bf479043bd344646/361-548;")
        self.assertEqual(alignment.sequences[165].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Laurasiatheria; Perissodactyla; Equidae; Equus; Equus; Equus caballus;")
        self.assertEqual(alignment.sequences[166].id, "A0A166IKS6/323-519")
        self.assertEqual(alignment.sequences[166].annotations["accession"], "A0A166IKS6")
        self.assertEqual(alignment.sequences[166].annotations["organism"], "Daucus carota subsp. sativus")
        self.assertEqual(alignment.sequences[166].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[166].annotations["database_references"][0]["reference"], "GENE3D; a85c8e41a0986613585384d8163c4960/323-519;")
        self.assertEqual(alignment.sequences[166].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; asterids; Apiales; Apiineae; Apiaceae; Apioideae; Scandiceae; Daucinae; Daucus; Daucus sect. Daucus; Daucus carota; Daucus carota subsp. sativus;")
        self.assertEqual(alignment.sequences[167].id, "A0A1B7MHT5/489-678")
        self.assertEqual(alignment.sequences[167].annotations["accession"], "A0A1B7MHT5")
        self.assertEqual(alignment.sequences[167].annotations["organism"], "Rhizopogon vinicolor AM-OR11-026")
        self.assertEqual(alignment.sequences[167].description, "p-loop containing nucleoside triphosphate hydrolase protein")
        self.assertEqual(alignment.sequences[167].annotations["database_references"][0]["reference"], "GENE3D; aac75a7f5aef5fcc38cf0aafea50e212/489-678;")
        self.assertEqual(alignment.sequences[167].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Agaricomycetidae; Boletales; Suillineae; Rhizopogonaceae; Rhizopogon; Rhizopogon vinicolor;")
        self.assertEqual(alignment.sequences[168].id, "G3SJW9/315-501")
        self.assertEqual(alignment.sequences[168].annotations["accession"], "G3SJW9")
        self.assertEqual(alignment.sequences[168].annotations["organism"], "Gorilla gorilla gorilla")
        self.assertEqual(alignment.sequences[168].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[168].annotations["database_references"][0]["reference"], "GENE3D; aeab83be23fff2e6e690085be20c14bc/315-501;")
        self.assertEqual(alignment.sequences[168].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Euarchontoglires; Primates; Haplorrhini; Simiiformes; Catarrhini; Hominoidea; Hominidae; Homininae; Gorilla; Gorilla gorilla; Gorilla gorilla gorilla;")
        self.assertEqual(alignment.sequences[169].id, "A0A152A4W8/284-523")
        self.assertEqual(alignment.sequences[169].annotations["accession"], "A0A152A4W8")
        self.assertEqual(alignment.sequences[169].annotations["organism"], "Dictyostelium lacteum")
        self.assertEqual(alignment.sequences[169].description, "Putative RNA helicase")
        self.assertEqual(alignment.sequences[169].annotations["database_references"][0]["reference"], "GENE3D; add3dac5ed95338a5e0c8fab63900315/284-523;")
        self.assertEqual(alignment.sequences[169].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Dictyosteliida; Dictyostelium; Dictyostelium lacteum;")
        self.assertEqual(alignment.sequences[170].id, "A0A099ZBQ0/388-570")
        self.assertEqual(alignment.sequences[170].annotations["accession"], "A0A099ZBQ0")
        self.assertEqual(alignment.sequences[170].annotations["organism"], "Tinamus guttatus")
        self.assertEqual(alignment.sequences[170].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[170].annotations["database_references"][0]["reference"], "GENE3D; ae1788f03fd2ba98be003f3d7eb87ac7/388-570;")
        self.assertEqual(alignment.sequences[170].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Aves; Palaeognathae; Tinamiformes; Tinamidae; Tinamus; Tinamus guttatus;")
        self.assertEqual(alignment.sequences[171].id, "I1P555/314-520")
        self.assertEqual(alignment.sequences[171].annotations["accession"], "I1P555")
        self.assertEqual(alignment.sequences[171].annotations["organism"], "Oryza glaberrima")
        self.assertEqual(alignment.sequences[171].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[171].annotations["database_references"][0]["reference"], "GENE3D; af94b5dbadb4da591c6ed95f404a63f7/314-520;")
        self.assertEqual(alignment.sequences[171].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Oryzoideae; Oryzeae; Oryzinae; Oryza; Oryza glaberrima;")
        self.assertEqual(alignment.sequences[172].id, "Q29DT5/429-652")
        self.assertEqual(alignment.sequences[172].annotations["accession"], "Q29DT5")
        self.assertEqual(alignment.sequences[172].annotations["organism"], "Drosophila pseudoobscura pseudoobscura")
        self.assertEqual(alignment.sequences[172].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[172].annotations["database_references"][0]["reference"], "GENE3D; b3dfc51b4a6fa8a41740107324e179fa/429-652;")
        self.assertEqual(alignment.sequences[172].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Brachycera; Muscomorpha; Ephydroidea; Drosophilidae; Drosophilinae; Drosophilini; Drosophila; Sophophora; obscura group; pseudoobscura subgroup; Drosophila pseudoobscura; Drosophila pseudoobscura pseudoobscura;")
        self.assertEqual(alignment.sequences[173].id, "W2WKC2/319-558")
        self.assertEqual(alignment.sequences[173].annotations["accession"], "W2WKC2")
        self.assertEqual(alignment.sequences[173].annotations["organism"], "Phytophthora parasitica CJ01A1")
        self.assertEqual(alignment.sequences[173].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[173].annotations["database_references"][0]["reference"], "GENE3D; b493788528678b9a95e6c933debdb543/319-558;")
        self.assertEqual(alignment.sequences[173].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Oomycetes; Peronosporales; Phytophthora; Phytophthora parasitica;")
        self.assertEqual(alignment.sequences[174].id, "A0A0W8C5X9/319-558")
        self.assertEqual(alignment.sequences[174].annotations["accession"], "A0A0W8C5X9")
        self.assertEqual(alignment.sequences[174].annotations["organism"], "Phytophthora nicotianae")
        self.assertEqual(alignment.sequences[174].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[174].annotations["database_references"][0]["reference"], "GENE3D; b493788528678b9a95e6c933debdb543/319-558;")
        self.assertEqual(alignment.sequences[174].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Oomycetes; Peronosporales; Phytophthora; Phytophthora nicotianae;")
        self.assertEqual(alignment.sequences[175].id, "W2IHF7/319-558")
        self.assertEqual(alignment.sequences[175].annotations["accession"], "W2IHF7")
        self.assertEqual(alignment.sequences[175].annotations["organism"], "Phytophthora parasitica")
        self.assertEqual(alignment.sequences[175].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[175].annotations["database_references"][0]["reference"], "GENE3D; b493788528678b9a95e6c933debdb543/319-558;")
        self.assertEqual(alignment.sequences[175].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Oomycetes; Peronosporales; Phytophthora; Phytophthora parasitica;")
        self.assertEqual(alignment.sequences[176].id, "W5MIT8/486-672")
        self.assertEqual(alignment.sequences[176].annotations["accession"], "W5MIT8")
        self.assertEqual(alignment.sequences[176].annotations["organism"], "Lepisosteus oculatus")
        self.assertEqual(alignment.sequences[176].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[176].annotations["database_references"][0]["reference"], "GENE3D; b45a91316881818e478cd7aca0a7c4b5/486-672;")
        self.assertEqual(alignment.sequences[176].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Actinopterygii; Actinopteri; Neopterygii; Holostei; Semionotiformes; Lepisosteidae; Lepisosteus; Lepisosteus oculatus;")
        self.assertEqual(alignment.sequences[177].id, "A0A0L0CB09/426-670")
        self.assertEqual(alignment.sequences[177].annotations["accession"], "A0A0L0CB09")
        self.assertEqual(alignment.sequences[177].annotations["organism"], "Lucilia cuprina")
        self.assertEqual(alignment.sequences[177].description, "Putative ATP-dependent RNA helicase Dbp73D")
        self.assertEqual(alignment.sequences[177].annotations["database_references"][0]["reference"], "GENE3D; ac385264f5f646827b83ac466110ce8d/426-670;")
        self.assertEqual(alignment.sequences[177].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Brachycera; Muscomorpha; Oestroidea; Calliphoridae; Luciliinae; Lucilia; Lucilia cuprina;")
        self.assertEqual(alignment.sequences[178].id, "A0A194RGE4/405-617")
        self.assertEqual(alignment.sequences[178].annotations["accession"], "A0A194RGE4")
        self.assertEqual(alignment.sequences[178].annotations["organism"], "Papilio machaon")
        self.assertEqual(alignment.sequences[178].description, "Putative ATP-dependent RNA helicase Dbp73D")
        self.assertEqual(alignment.sequences[178].annotations["database_references"][0]["reference"], "GENE3D; b406bae8243c987291d7a9cf1a47da40/405-617;")
        self.assertEqual(alignment.sequences[178].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Lepidoptera; Glossata; Neolepidoptera; Heteroneura; Papilionoidea; Papilionidae; Papilioninae; Papilionini; Papilio; Papilio machaon;")
        self.assertEqual(alignment.sequences[179].id, "G1N6H9/379-568")
        self.assertEqual(alignment.sequences[179].annotations["accession"], "G1N6H9")
        self.assertEqual(alignment.sequences[179].annotations["organism"], "Meleagris gallopavo")
        self.assertEqual(alignment.sequences[179].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[179].annotations["database_references"][0]["reference"], "GENE3D; b7ada1515185417579cd0b44d542caa2/379-568;")
        self.assertEqual(alignment.sequences[179].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Aves; Neognathae; Galliformes; Phasianidae; Meleagridinae; Meleagris; Meleagris gallopavo;")
        self.assertEqual(alignment.sequences[180].id, "I1IDG2/322-521")
        self.assertEqual(alignment.sequences[180].annotations["accession"], "I1IDG2")
        self.assertEqual(alignment.sequences[180].annotations["organism"], "Brachypodium distachyon")
        self.assertEqual(alignment.sequences[180].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[180].annotations["database_references"][0]["reference"], "GENE3D; b62d8fe5b4c2ff374bcd61a09a1b0aa6/322-521;")
        self.assertEqual(alignment.sequences[180].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Pooideae; Brachypodieae; Brachypodium; Brachypodium distachyon;")
        self.assertEqual(alignment.sequences[181].id, "G3T1I0/403-587")
        self.assertEqual(alignment.sequences[181].annotations["accession"], "G3T1I0")
        self.assertEqual(alignment.sequences[181].annotations["organism"], "Loxodonta africana")
        self.assertEqual(alignment.sequences[181].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[181].annotations["database_references"][0]["reference"], "GENE3D; aedffc2754576ef5a38b586af1f1b38c/403-587;")
        self.assertEqual(alignment.sequences[181].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Afrotheria; Proboscidea; Elephantidae; Loxodonta; Loxodonta africana;")
        self.assertEqual(alignment.sequences[182].id, "A0A0C3S4G6/487-676")
        self.assertEqual(alignment.sequences[182].annotations["accession"], "A0A0C3S4G6")
        self.assertEqual(alignment.sequences[182].annotations["organism"], "Phlebiopsis gigantea 11061_1 CR5-6")
        self.assertEqual(alignment.sequences[182].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[182].annotations["database_references"][0]["reference"], "GENE3D; b96a96889b7a02892eb9657b324d6f8b/487-676;")
        self.assertEqual(alignment.sequences[182].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Polyporales; Phanerochaetaceae; Phlebiopsis; Phlebiopsis gigantea;")
        self.assertEqual(alignment.sequences[183].id, "A0A0D0AAX1/507-703")
        self.assertEqual(alignment.sequences[183].annotations["accession"], "A0A0D0AAX1")
        self.assertEqual(alignment.sequences[183].annotations["organism"], "Suillus luteus UH-Slu-Lm8-n1")
        self.assertEqual(alignment.sequences[183].description, "Unplaced genomic scaffold CY34scaffold_16, whole genome shotgun sequence")
        self.assertEqual(alignment.sequences[183].annotations["database_references"][0]["reference"], "GENE3D; b6f1221e1aaeb2f0c8c1f50a8bd8fb87/507-703;")
        self.assertEqual(alignment.sequences[183].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Agaricomycetidae; Boletales; Suillineae; Suillaceae; Suillus; Suillus luteus;")
        self.assertEqual(alignment.sequences[184].id, "A0A0K9QM27/308-515")
        self.assertEqual(alignment.sequences[184].annotations["accession"], "A0A0K9QM27")
        self.assertEqual(alignment.sequences[184].annotations["organism"], "Spinacia oleracea")
        self.assertEqual(alignment.sequences[184].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[184].annotations["database_references"][0]["reference"], "GENE3D; bb5ed87794073ca577b79a7763843ec3/308-515;")
        self.assertEqual(alignment.sequences[184].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Caryophyllales; Chenopodiaceae; Chenopodioideae; Anserineae; Spinacia; Spinacia oleracea;")
        self.assertEqual(alignment.sequences[185].id, "A0A067KPD9/313-523")
        self.assertEqual(alignment.sequences[185].annotations["accession"], "A0A067KPD9")
        self.assertEqual(alignment.sequences[185].annotations["organism"], "Jatropha curcas")
        self.assertEqual(alignment.sequences[185].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[185].annotations["database_references"][0]["reference"], "GENE3D; be637f3af0a9891b5bd3ad48c85881ec/313-523;")
        self.assertEqual(alignment.sequences[185].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Malpighiales; Euphorbiaceae; Crotonoideae; Jatropheae; Jatropha; Jatropha curcas;")
        self.assertEqual(alignment.sequences[186].id, "A0A0H2RYG8/391-584")
        self.assertEqual(alignment.sequences[186].annotations["accession"], "A0A0H2RYG8")
        self.assertEqual(alignment.sequences[186].annotations["organism"], "Schizopora paradoxa")
        self.assertEqual(alignment.sequences[186].description, "DEAD-domain-containing protein")
        self.assertEqual(alignment.sequences[186].annotations["database_references"][0]["reference"], "GENE3D; be50a11b7855d21d6f868d4217032027/391-584;")
        self.assertEqual(alignment.sequences[186].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Hymenochaetales; Schizoporaceae; Schizopora; Schizopora paradoxa;")
        self.assertEqual(alignment.sequences[187].id, "A0A067Q132/478-673")
        self.assertEqual(alignment.sequences[187].annotations["accession"], "A0A067Q132")
        self.assertEqual(alignment.sequences[187].annotations["organism"], "Jaapia argillacea MUCL 33604")
        self.assertEqual(alignment.sequences[187].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[187].annotations["database_references"][0]["reference"], "GENE3D; c296bbf84d029640923b898dfb44310b/478-673;")
        self.assertEqual(alignment.sequences[187].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Agaricomycetidae; Jaapiales; Jaapiaceae; Jaapia; Jaapia argillacea;")
        self.assertEqual(alignment.sequences[188].id, "I4YG47/487-669")
        self.assertEqual(alignment.sequences[188].annotations["accession"], "I4YG47")
        self.assertEqual(alignment.sequences[188].annotations["organism"], "Wallemia mellicola CBS 633.66")
        self.assertEqual(alignment.sequences[188].description, "p-loop containing nucleoside triphosphate hydrolase protein")
        self.assertEqual(alignment.sequences[188].annotations["database_references"][0]["reference"], "GENE3D; c2eaa9a83c63650d4c13378f266610c7/487-669;")
        self.assertEqual(alignment.sequences[188].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Wallemiomycetes; Wallemiales; Wallemia; Wallemia mellicola;")
        self.assertEqual(alignment.sequences[189].id, "H2MU31/462-647")
        self.assertEqual(alignment.sequences[189].annotations["accession"], "H2MU31")
        self.assertEqual(alignment.sequences[189].annotations["organism"], "Oryzias latipes")
        self.assertEqual(alignment.sequences[189].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[189].annotations["database_references"][0]["reference"], "GENE3D; c5919205aeccfbe07729e133af340902/462-647;")
        self.assertEqual(alignment.sequences[189].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Actinopterygii; Actinopteri; Neopterygii; Teleostei; Atherinomorphae; Beloniformes; Adrianichthyoidei; Adrianichthyidae; Oryziinae; Oryzias; Oryzias latipes;")
        self.assertEqual(alignment.sequences[190].id, "A0A0L0UZP2/407-458_496-626")
        self.assertEqual(alignment.sequences[190].annotations["accession"], "A0A0L0UZP2")
        self.assertEqual(alignment.sequences[190].annotations["organism"], "Puccinia striiformis f. sp. tritici PST-78")
        self.assertEqual(alignment.sequences[190].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[190].annotations["database_references"][0]["reference"], "GENE3D; c6df92d6fbc9b9d1b3b8e81f77c30f1e/407-458_496-626;")
        self.assertEqual(alignment.sequences[190].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Pucciniomycotina; Pucciniomycetes; Pucciniales; Pucciniaceae; Puccinia; Puccinia striiformis;")
        self.assertEqual(alignment.sequences[191].id, "K7F7E1/322-511")
        self.assertEqual(alignment.sequences[191].annotations["accession"], "K7F7E1")
        self.assertEqual(alignment.sequences[191].annotations["organism"], "Pelodiscus sinensis")
        self.assertEqual(alignment.sequences[191].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[191].annotations["database_references"][0]["reference"], "GENE3D; bf9ed9e85c93bbc450fe6b21b0c34a97/322-511;")
        self.assertEqual(alignment.sequences[191].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Testudines; Cryptodira; Trionychidae; Pelodiscus; Pelodiscus sinensis;")
        self.assertEqual(alignment.sequences[192].id, "A0A068Y7R8/366-570")
        self.assertEqual(alignment.sequences[192].annotations["accession"], "A0A068Y7R8")
        self.assertEqual(alignment.sequences[192].annotations["organism"], "Echinococcus multilocularis")
        self.assertEqual(alignment.sequences[192].description, "ATP dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[192].annotations["database_references"][0]["reference"], "GENE3D; cc9d87d1256c40e07c8f50fd82800792/366-570;")
        self.assertEqual(alignment.sequences[192].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Platyhelminthes; Cestoda; Eucestoda; Cyclophyllidea; Taeniidae; Echinococcus; Echinococcus multilocularis;")
        self.assertEqual(alignment.sequences[193].id, "W5JV16/438-697")
        self.assertEqual(alignment.sequences[193].annotations["accession"], "W5JV16")
        self.assertEqual(alignment.sequences[193].annotations["organism"], "Anopheles darlingi")
        self.assertEqual(alignment.sequences[193].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[193].annotations["database_references"][0]["reference"], "GENE3D; cde02e6c539325e435b52d242a116722/438-697;")
        self.assertEqual(alignment.sequences[193].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Nematocera; Culicomorpha; Culicoidea; Culicidae; Anophelinae; Anopheles; Nyssorhynchus; darlingi group; Anopheles darlingi;")
        self.assertEqual(alignment.sequences[194].id, "D7MAB9/321-521")
        self.assertEqual(alignment.sequences[194].annotations["accession"], "D7MAB9")
        self.assertEqual(alignment.sequences[194].annotations["organism"], "Arabidopsis lyrata subsp. lyrata")
        self.assertEqual(alignment.sequences[194].description, "Putative uncharacterized protein")
        self.assertEqual(alignment.sequences[194].annotations["database_references"][0]["reference"], "GENE3D; cd1c2dc58bd23330c58727f085656e3b/321-521;")
        self.assertEqual(alignment.sequences[194].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Brassicales; Brassicaceae; Camelineae; Arabidopsis; Arabidopsis lyrata; Arabidopsis lyrata subsp. lyrata;")
        self.assertEqual(alignment.sequences[195].id, "I0ZA33/377-560")
        self.assertEqual(alignment.sequences[195].annotations["accession"], "I0ZA33")
        self.assertEqual(alignment.sequences[195].annotations["organism"], "Coccomyxa subellipsoidea C-169")
        self.assertEqual(alignment.sequences[195].description, "p-loop containing nucleoside triphosphate hydrolase protein")
        self.assertEqual(alignment.sequences[195].annotations["database_references"][0]["reference"], "GENE3D; cca9f76fdf73d44a2a383233c74702af/377-560;")
        self.assertEqual(alignment.sequences[195].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Chlorophyta; Trebouxiophyceae; Coccomyxaceae; Coccomyxa; Coccomyxa subellipsoidea;")
        self.assertEqual(alignment.sequences[196].id, "H3GNQ4/321-539")
        self.assertEqual(alignment.sequences[196].annotations["accession"], "H3GNQ4")
        self.assertEqual(alignment.sequences[196].annotations["organism"], "Phytophthora ramorum")
        self.assertEqual(alignment.sequences[196].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[196].annotations["database_references"][0]["reference"], "GENE3D; c4d1ac5829dce197d56c58a564990f3f/321-539;")
        self.assertEqual(alignment.sequences[196].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Oomycetes; Peronosporales; Phytophthora; Phytophthora ramorum;")
        self.assertEqual(alignment.sequences[197].id, "W5GZZ3/319-520")
        self.assertEqual(alignment.sequences[197].annotations["accession"], "W5GZZ3")
        self.assertEqual(alignment.sequences[197].annotations["organism"], "Triticum aestivum")
        self.assertEqual(alignment.sequences[197].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[197].annotations["database_references"][0]["reference"], "GENE3D; d0d4f50aa18552b466884da54a606271/319-520;")
        self.assertEqual(alignment.sequences[197].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Pooideae; Triticeae; Triticinae; Triticum; Triticum aestivum;")
        self.assertEqual(alignment.sequences[198].id, "B9T3L1/282-439")
        self.assertEqual(alignment.sequences[198].annotations["accession"], "B9T3L1")
        self.assertEqual(alignment.sequences[198].annotations["organism"], "Ricinus communis")
        self.assertEqual(alignment.sequences[198].description, "Dead box ATP-dependent RNA helicase, putative")
        self.assertEqual(alignment.sequences[198].annotations["database_references"][0]["reference"], "GENE3D; d14c58054c1bf6fdec795c74423cbffb/282-439;")
        self.assertEqual(alignment.sequences[198].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Malpighiales; Euphorbiaceae; Acalyphoideae; Acalypheae; Ricinus; Ricinus communis;")
        self.assertEqual(alignment.sequences[199].id, "V4SN06/305-508")
        self.assertEqual(alignment.sequences[199].annotations["accession"], "V4SN06")
        self.assertEqual(alignment.sequences[199].annotations["organism"], "Citrus clementina")
        self.assertEqual(alignment.sequences[199].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[199].annotations["database_references"][0]["reference"], "GENE3D; c669009f38e4837cb10b93d8948d0bda/305-508;")
        self.assertEqual(alignment.sequences[199].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Sapindales; Rutaceae; Aurantioideae; Citrus; Citrus clementina;")
        self.assertEqual(alignment.sequences[200].id, "A0A0A1P6R7/344-528")
        self.assertEqual(alignment.sequences[200].annotations["accession"], "A0A0A1P6R7")
        self.assertEqual(alignment.sequences[200].annotations["organism"], "Rhizopus microsporus")
        self.assertEqual(alignment.sequences[200].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[200].annotations["database_references"][0]["reference"], "GENE3D; c742218d64dd7126f88044a4297e3e56/344-528;")
        self.assertEqual(alignment.sequences[200].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Mucoromycota; Mucoromycotina; Mucorales; Mucorineae; Rhizopodaceae; Rhizopus; Rhizopus microsporus;")
        self.assertEqual(alignment.sequences[201].id, "G7PJH3/308-494")
        self.assertEqual(alignment.sequences[201].annotations["accession"], "G7PJH3")
        self.assertEqual(alignment.sequences[201].annotations["organism"], "Macaca fascicularis")
        self.assertEqual(alignment.sequences[201].description, "Putative uncharacterized protein")
        self.assertEqual(alignment.sequences[201].annotations["database_references"][0]["reference"], "GENE3D; d1f9d85b5acf7803094338b1471ff73d/308-494;")
        self.assertEqual(alignment.sequences[201].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Euarchontoglires; Primates; Haplorrhini; Simiiformes; Catarrhini; Cercopithecoidea; Cercopithecidae; Cercopithecinae; Macaca; Macaca fascicularis;")
        self.assertEqual(alignment.sequences[202].id, "F7HHJ8/466-644")
        self.assertEqual(alignment.sequences[202].annotations["accession"], "F7HHJ8")
        self.assertEqual(alignment.sequences[202].annotations["organism"], "Callithrix jacchus")
        self.assertEqual(alignment.sequences[202].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[202].annotations["database_references"][0]["reference"], "GENE3D; d48a6df8443874e2fd9f65c2ef61863f/466-644;")
        self.assertEqual(alignment.sequences[202].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Euarchontoglires; Primates; Haplorrhini; Simiiformes; Platyrrhini; Cebidae; Callitrichinae; Callithrix; Callithrix; Callithrix jacchus;")
        self.assertEqual(alignment.sequences[203].id, "K7M6B0/424-558")
        self.assertEqual(alignment.sequences[203].annotations["accession"], "K7M6B0")
        self.assertEqual(alignment.sequences[203].annotations["organism"], "Glycine max")
        self.assertEqual(alignment.sequences[203].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[203].annotations["database_references"][0]["reference"], "GENE3D; d35d0fedbcb60898affce63a5947101b/424-558;")
        self.assertEqual(alignment.sequences[203].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Fabales; Fabaceae; Papilionoideae; Phaseoleae; Glycine; Soja; Glycine max;")
        self.assertEqual(alignment.sequences[204].id, "K5WGH8/487-681")
        self.assertEqual(alignment.sequences[204].annotations["accession"], "K5WGH8")
        self.assertEqual(alignment.sequences[204].annotations["organism"], "Phanerochaete carnosa HHB-10118-sp")
        self.assertEqual(alignment.sequences[204].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[204].annotations["database_references"][0]["reference"], "GENE3D; cad4ac78e29254900958812a7eef3b7d/487-681;")
        self.assertEqual(alignment.sequences[204].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Polyporales; Phanerochaetaceae; Phanerochaete; Phanerochaete carnosa;")
        self.assertEqual(alignment.sequences[205].id, "A0A093EVL6/384-571")
        self.assertEqual(alignment.sequences[205].annotations["accession"], "A0A093EVL6")
        self.assertEqual(alignment.sequences[205].annotations["organism"], "Tyto alba")
        self.assertEqual(alignment.sequences[205].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[205].annotations["database_references"][0]["reference"], "GENE3D; d72f2232e29100e9a220c60c92af5dad/384-571;")
        self.assertEqual(alignment.sequences[205].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Aves; Neognathae; Strigiformes; Tytonidae; Tyto; Tyto alba;")
        self.assertEqual(alignment.sequences[206].id, "A0A0K9PYK0/505-705")
        self.assertEqual(alignment.sequences[206].annotations["accession"], "A0A0K9PYK0")
        self.assertEqual(alignment.sequences[206].annotations["organism"], "Zostera marina")
        self.assertEqual(alignment.sequences[206].description, "DEAD-box ATP-dependent RNA helicase 1")
        self.assertEqual(alignment.sequences[206].annotations["database_references"][0]["reference"], "GENE3D; d9546b9c256e7ab5fd4f476f12eaa7ed/505-705;")
        self.assertEqual(alignment.sequences[206].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Alismatales; Zosteraceae; Zostera; Zostera marina;")
        self.assertEqual(alignment.sequences[207].id, "A0A0D7AJ84/389-589")
        self.assertEqual(alignment.sequences[207].annotations["accession"], "A0A0D7AJ84")
        self.assertEqual(alignment.sequences[207].annotations["organism"], "Fistulina hepatica ATCC 64428")
        self.assertEqual(alignment.sequences[207].description, "DEAD-domain-containing protein")
        self.assertEqual(alignment.sequences[207].annotations["database_references"][0]["reference"], "GENE3D; ddf2a1165bd2d6cda45c21024ab3a313/389-589;")
        self.assertEqual(alignment.sequences[207].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Agaricomycetidae; Agaricales; Fistulinaceae; Fistulina; Fistulina hepatica;")
        self.assertEqual(alignment.sequences[208].id, "A0A087XRY4/476-660")
        self.assertEqual(alignment.sequences[208].annotations["accession"], "A0A087XRY4")
        self.assertEqual(alignment.sequences[208].annotations["organism"], "Poecilia formosa")
        self.assertEqual(alignment.sequences[208].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[208].annotations["database_references"][0]["reference"], "GENE3D; dc411bdd3541a4adbc536db1f0af6e2d/476-660;")
        self.assertEqual(alignment.sequences[208].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Actinopterygii; Actinopteri; Neopterygii; Teleostei; Atherinomorphae; Cyprinodontiformes; Cyprinodontoidei; Poeciliidae; Poeciliinae; Poecilia; Poecilia formosa;")
        self.assertEqual(alignment.sequences[209].id, "A0A0D3A7T7/330-528")
        self.assertEqual(alignment.sequences[209].annotations["accession"], "A0A0D3A7T7")
        self.assertEqual(alignment.sequences[209].annotations["organism"], "Brassica oleracea var. oleracea")
        self.assertEqual(alignment.sequences[209].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[209].annotations["database_references"][0]["reference"], "GENE3D; dba3f7823173409b7cec544225f224d4/330-528;")
        self.assertEqual(alignment.sequences[209].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Brassicales; Brassicaceae; Brassiceae; Brassica; Brassica oleracea; Brassica oleracea var. oleracea;")
        self.assertEqual(alignment.sequences[210].id, "A0A078I297/330-528")
        self.assertEqual(alignment.sequences[210].annotations["accession"], "A0A078I297")
        self.assertEqual(alignment.sequences[210].annotations["organism"], "Brassica napus")
        self.assertEqual(alignment.sequences[210].description, "BnaC01g22220D protein")
        self.assertEqual(alignment.sequences[210].annotations["database_references"][0]["reference"], "GENE3D; dba3f7823173409b7cec544225f224d4/330-528;")
        self.assertEqual(alignment.sequences[210].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Brassicales; Brassicaceae; Brassiceae; Brassica; Brassica napus;")
        self.assertEqual(alignment.sequences[211].id, "V4ULK4/305-454")
        self.assertEqual(alignment.sequences[211].annotations["accession"], "V4ULK4")
        self.assertEqual(alignment.sequences[211].annotations["organism"], "Citrus clementina")
        self.assertEqual(alignment.sequences[211].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[211].annotations["database_references"][0]["reference"], "GENE3D; dd17f283a5a4c39fbc90e849bb9193ea/305-454;")
        self.assertEqual(alignment.sequences[211].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Sapindales; Rutaceae; Aurantioideae; Citrus; Citrus clementina;")
        self.assertEqual(alignment.sequences[212].id, "H3ASF2/496-675")
        self.assertEqual(alignment.sequences[212].annotations["accession"], "H3ASF2")
        self.assertEqual(alignment.sequences[212].annotations["organism"], "Latimeria chalumnae")
        self.assertEqual(alignment.sequences[212].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[212].annotations["database_references"][0]["reference"], "GENE3D; dfd2a765be903af6bf70cb7b51dd5dbe/496-675;")
        self.assertEqual(alignment.sequences[212].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Coelacanthiformes; Coelacanthidae; Latimeria; Latimeria chalumnae;")
        self.assertEqual(alignment.sequences[213].id, "A0A0L7QPA2/418-619")
        self.assertEqual(alignment.sequences[213].annotations["accession"], "A0A0L7QPA2")
        self.assertEqual(alignment.sequences[213].annotations["organism"], "Habropoda laboriosa")
        self.assertEqual(alignment.sequences[213].description, "Putative ATP-dependent RNA helicase Dbp73D")
        self.assertEqual(alignment.sequences[213].annotations["database_references"][0]["reference"], "GENE3D; dde1c6fb272fa343ab95594a49966309/418-619;")
        self.assertEqual(alignment.sequences[213].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Hymenoptera; Apocrita; Aculeata; Apoidea; Apidae; Anthophorinae; Anthophorini; Habropoda; Habropoda laboriosa;")
        self.assertEqual(alignment.sequences[214].id, "T0QQU0/278-524")
        self.assertEqual(alignment.sequences[214].annotations["accession"], "T0QQU0")
        self.assertEqual(alignment.sequences[214].annotations["organism"], "Saprolegnia diclina VS20")
        self.assertEqual(alignment.sequences[214].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[214].annotations["database_references"][0]["reference"], "GENE3D; de5e89d33cea0b0469cb31b1ea6d79ce/278-524;")
        self.assertEqual(alignment.sequences[214].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Oomycetes; Saprolegniales; Saprolegniaceae; Saprolegnia; Saprolegnia diclina;")
        self.assertEqual(alignment.sequences[215].id, "A0A163IVK9/442-625")
        self.assertEqual(alignment.sequences[215].annotations["accession"], "A0A163IVK9")
        self.assertEqual(alignment.sequences[215].annotations["organism"], "Absidia glauca")
        self.assertEqual(alignment.sequences[215].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[215].annotations["database_references"][0]["reference"], "GENE3D; e0f18e84a549ad8cf58498e38f66f4b2/442-625;")
        self.assertEqual(alignment.sequences[215].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Mucoromycota; Mucoromycotina; Mucorales; Cunninghamellaceae; Absidia; Absidia glauca;")
        self.assertEqual(alignment.sequences[216].id, "A0A093R4D9/390-576")
        self.assertEqual(alignment.sequences[216].annotations["accession"], "A0A093R4D9")
        self.assertEqual(alignment.sequences[216].annotations["organism"], "Phalacrocorax carbo")
        self.assertEqual(alignment.sequences[216].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[216].annotations["database_references"][0]["reference"], "GENE3D; e3c10df6de1c1bfeb5d68ef37086d750/390-576;")
        self.assertEqual(alignment.sequences[216].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Aves; Neognathae; Pelecaniformes; Phalacrocoracidae; Phalacrocorax; Phalacrocorax carbo;")
        self.assertEqual(alignment.sequences[217].id, "G3PF36/469-653")
        self.assertEqual(alignment.sequences[217].annotations["accession"], "G3PF36")
        self.assertEqual(alignment.sequences[217].annotations["organism"], "Gasterosteus aculeatus")
        self.assertEqual(alignment.sequences[217].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[217].annotations["database_references"][0]["reference"], "GENE3D; e24c9aa89a1c38bb1599273dc0bf5d9d/469-653;")
        self.assertEqual(alignment.sequences[217].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Actinopterygii; Actinopteri; Neopterygii; Teleostei; Perciformes; Cottioidei; Gasterosteales; Gasterosteidae; Gasterosteus; Gasterosteus aculeatus;")
        self.assertEqual(alignment.sequences[218].id, "D7FSH0/597-656_691-821")
        self.assertEqual(alignment.sequences[218].annotations["accession"], "D7FSH0")
        self.assertEqual(alignment.sequences[218].annotations["organism"], "Ectocarpus siliculosus")
        self.assertEqual(alignment.sequences[218].description, "DEAD box helicase")
        self.assertEqual(alignment.sequences[218].annotations["database_references"][0]["reference"], "GENE3D; e60460c676bd1c5bb21868fe504e425d/597-656_691-821;")
        self.assertEqual(alignment.sequences[218].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Phaeophyceae; Ectocarpales; Ectocarpaceae; Ectocarpus; Ectocarpus siliculosus;")
        self.assertEqual(alignment.sequences[219].id, "M4B1B7/320-566")
        self.assertEqual(alignment.sequences[219].annotations["accession"], "M4B1B7")
        self.assertEqual(alignment.sequences[219].annotations["organism"], "Hyaloperonospora arabidopsidis Emoy2")
        self.assertEqual(alignment.sequences[219].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[219].annotations["database_references"][0]["reference"], "GENE3D; e7662b4d5bd54412311e8c2f145f79d3/320-566;")
        self.assertEqual(alignment.sequences[219].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Oomycetes; Peronosporales; Peronosporaceae; Hyaloperonospora; Hyaloperonospora arabidopsidis;")
        self.assertEqual(alignment.sequences[220].id, "A0A061GER8/306-514")
        self.assertEqual(alignment.sequences[220].annotations["accession"], "A0A061GER8")
        self.assertEqual(alignment.sequences[220].annotations["organism"], "Theobroma cacao")
        self.assertEqual(alignment.sequences[220].description, "RNA helicase 1")
        self.assertEqual(alignment.sequences[220].annotations["database_references"][0]["reference"], "GENE3D; e421a0c7dc1061c9e2cac58e033be3a1/306-514;")
        self.assertEqual(alignment.sequences[220].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Malvales; Malvaceae; Byttnerioideae; Theobroma; Theobroma cacao;")
        self.assertEqual(alignment.sequences[221].id, "F7B824/479-661")
        self.assertEqual(alignment.sequences[221].annotations["accession"], "F7B824")
        self.assertEqual(alignment.sequences[221].annotations["organism"], "Callithrix jacchus")
        self.assertEqual(alignment.sequences[221].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[221].annotations["database_references"][0]["reference"], "GENE3D; eaa0259ad34e6bc9f18df18b92083598/479-661;")
        self.assertEqual(alignment.sequences[221].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Euarchontoglires; Primates; Haplorrhini; Simiiformes; Platyrrhini; Cebidae; Callitrichinae; Callithrix; Callithrix; Callithrix jacchus;")
        self.assertEqual(alignment.sequences[222].id, "H0VZP1/456-640")
        self.assertEqual(alignment.sequences[222].annotations["accession"], "H0VZP1")
        self.assertEqual(alignment.sequences[222].annotations["organism"], "Cavia porcellus")
        self.assertEqual(alignment.sequences[222].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[222].annotations["database_references"][0]["reference"], "GENE3D; e7866833da8ea38b9e25cfe4048bc7f6/456-640;")
        self.assertEqual(alignment.sequences[222].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Euarchontoglires; Rodentia; Hystricomorpha; Caviidae; Cavia; Cavia porcellus;")
        self.assertEqual(alignment.sequences[223].id, "M8A2C2/229-433")
        self.assertEqual(alignment.sequences[223].annotations["accession"], "M8A2C2")
        self.assertEqual(alignment.sequences[223].annotations["organism"], "Triticum urartu")
        self.assertEqual(alignment.sequences[223].description, "DEAD-box ATP-dependent RNA helicase 1")
        self.assertEqual(alignment.sequences[223].annotations["database_references"][0]["reference"], "GENE3D; ec43c28d8b495f0e217433d758eb5472/229-433;")
        self.assertEqual(alignment.sequences[223].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Pooideae; Triticeae; Triticinae; Triticum; Triticum urartu;")
        self.assertEqual(alignment.sequences[224].id, "H2U576/320-502")
        self.assertEqual(alignment.sequences[224].annotations["accession"], "H2U576")
        self.assertEqual(alignment.sequences[224].annotations["organism"], "Takifugu rubripes")
        self.assertEqual(alignment.sequences[224].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[224].annotations["database_references"][0]["reference"], "GENE3D; ec7789bdeefd0b96d5496442c4f8df01/320-502;")
        self.assertEqual(alignment.sequences[224].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Actinopterygii; Actinopteri; Neopterygii; Teleostei; Tetraodontiformes; Tetraodontoidei; Tetradontoidea; Tetraodontidae; Takifugu; Takifugu rubripes;")
        self.assertEqual(alignment.sequences[225].id, "M4EXI2/330-530")
        self.assertEqual(alignment.sequences[225].annotations["accession"], "M4EXI2")
        self.assertEqual(alignment.sequences[225].annotations["organism"], "Brassica rapa subsp. pekinensis")
        self.assertEqual(alignment.sequences[225].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[225].annotations["database_references"][0]["reference"], "GENE3D; e3f40b02932d5f710313be8839423e3e/330-530;")
        self.assertEqual(alignment.sequences[225].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Brassicales; Brassicaceae; Brassiceae; Brassica; Brassica rapa; Brassica rapa subsp. pekinensis;")
        self.assertEqual(alignment.sequences[226].id, "A0A0E0NM47/292-498")
        self.assertEqual(alignment.sequences[226].annotations["accession"], "A0A0E0NM47")
        self.assertEqual(alignment.sequences[226].annotations["organism"], "Oryza rufipogon")
        self.assertEqual(alignment.sequences[226].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[226].annotations["database_references"][0]["reference"], "GENE3D; f0ba689f9abdd99fa63da1d5a44a1b15/292-498;")
        self.assertEqual(alignment.sequences[226].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Oryzoideae; Oryzeae; Oryzinae; Oryza; Oryza rufipogon;")
        self.assertEqual(alignment.sequences[227].id, "B3M4E5/420-655")
        self.assertEqual(alignment.sequences[227].annotations["accession"], "B3M4E5")
        self.assertEqual(alignment.sequences[227].annotations["organism"], "Drosophila ananassae")
        self.assertEqual(alignment.sequences[227].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[227].annotations["database_references"][0]["reference"], "GENE3D; f15c18af6b9ea078d1b845373f55a826/420-655;")
        self.assertEqual(alignment.sequences[227].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Brachycera; Muscomorpha; Ephydroidea; Drosophilidae; Drosophilinae; Drosophilini; Drosophila; Sophophora; melanogaster group; ananassae subgroup; Drosophila ananassae;")
        self.assertEqual(alignment.sequences[228].id, "B4KXL0/424-666")
        self.assertEqual(alignment.sequences[228].annotations["accession"], "B4KXL0")
        self.assertEqual(alignment.sequences[228].annotations["organism"], "Drosophila mojavensis")
        self.assertEqual(alignment.sequences[228].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[228].annotations["database_references"][0]["reference"], "GENE3D; e6281f07e6c35ec9db04a68e038edaf4/424-666;")
        self.assertEqual(alignment.sequences[228].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Brachycera; Muscomorpha; Ephydroidea; Drosophilidae; Drosophilinae; Drosophilini; Drosophila; Drosophila; repleta group; mulleri subgroup; Drosophila mojavensis;")
        self.assertEqual(alignment.sequences[229].id, "A0A091X893/387-574")
        self.assertEqual(alignment.sequences[229].annotations["accession"], "A0A091X893")
        self.assertEqual(alignment.sequences[229].annotations["organism"], "Opisthocomus hoazin")
        self.assertEqual(alignment.sequences[229].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[229].annotations["database_references"][0]["reference"], "GENE3D; f3f0756ddda7c4b851aa5c8e8f789dd2/387-574;")
        self.assertEqual(alignment.sequences[229].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Aves; Neognathae; Opisthocomiformes; Opisthocomidae; Opisthocomus; Opisthocomus hoazin;")
        self.assertEqual(alignment.sequences[230].id, "A0A1D5PR75/442-624")
        self.assertEqual(alignment.sequences[230].annotations["accession"], "A0A1D5PR75")
        self.assertEqual(alignment.sequences[230].annotations["organism"], "Gallus gallus")
        self.assertEqual(alignment.sequences[230].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[230].annotations["database_references"][0]["reference"], "GENE3D; f51a5f957a482bc1562a7d47d59f391f/442-624;")
        self.assertEqual(alignment.sequences[230].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Aves; Neognathae; Galliformes; Phasianidae; Phasianinae; Gallus; Gallus gallus;")
        self.assertEqual(alignment.sequences[231].id, "A0A091DKW2/322-508")
        self.assertEqual(alignment.sequences[231].annotations["accession"], "A0A091DKW2")
        self.assertEqual(alignment.sequences[231].annotations["organism"], "Fukomys damarensis")
        self.assertEqual(alignment.sequences[231].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[231].annotations["database_references"][0]["reference"], "GENE3D; f4375ff64feedf87fde02b60d1b6f612/322-508;")
        self.assertEqual(alignment.sequences[231].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Euarchontoglires; Rodentia; Hystricomorpha; Bathyergidae; Fukomys; Fukomys damarensis;")
        self.assertEqual(alignment.sequences[232].id, "A0A0D9YZM4/252-430")
        self.assertEqual(alignment.sequences[232].annotations["accession"], "A0A0D9YZM4")
        self.assertEqual(alignment.sequences[232].annotations["organism"], "Oryza glumipatula")
        self.assertEqual(alignment.sequences[232].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[232].annotations["database_references"][0]["reference"], "GENE3D; eae4a75641a197f84de26275e46ea641/252-430;")
        self.assertEqual(alignment.sequences[232].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Oryzoideae; Oryzeae; Oryzinae; Oryza; Oryza glumipatula;")
        self.assertEqual(alignment.sequences[233].id, "A0A194PMW9/405-617")
        self.assertEqual(alignment.sequences[233].annotations["accession"], "A0A194PMW9")
        self.assertEqual(alignment.sequences[233].annotations["organism"], "Papilio xuthus")
        self.assertEqual(alignment.sequences[233].description, "Putative ATP-dependent RNA helicase Dbp73D")
        self.assertEqual(alignment.sequences[233].annotations["database_references"][0]["reference"], "GENE3D; fa2365f2cef26cb2c6782aca1cc8c065/405-617;")
        self.assertEqual(alignment.sequences[233].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Lepidoptera; Glossata; Neolepidoptera; Heteroneura; Papilionoidea; Papilionidae; Papilioninae; Papilionini; Papilio; Papilio xuthus;")
        self.assertEqual(alignment.sequences[234].id, "A0A0A0B3C6/389-576")
        self.assertEqual(alignment.sequences[234].annotations["accession"], "A0A0A0B3C6")
        self.assertEqual(alignment.sequences[234].annotations["organism"], "Charadrius vociferus")
        self.assertEqual(alignment.sequences[234].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[234].annotations["database_references"][0]["reference"], "GENE3D; fa1df2866de96e00d63d5519daee3250/389-576;")
        self.assertEqual(alignment.sequences[234].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Aves; Neognathae; Charadriiformes; Charadriidae; Charadrius; Charadrius vociferus;")
        self.assertEqual(alignment.sequences[235].id, "B4IXF5/426-650")
        self.assertEqual(alignment.sequences[235].annotations["accession"], "B4IXF5")
        self.assertEqual(alignment.sequences[235].annotations["organism"], "Drosophila grimshawi")
        self.assertEqual(alignment.sequences[235].description, "GH15223")
        self.assertEqual(alignment.sequences[235].annotations["database_references"][0]["reference"], "GENE3D; fc624bc4512c98bbabcd20383df70701/426-650;")
        self.assertEqual(alignment.sequences[235].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Brachycera; Muscomorpha; Ephydroidea; Drosophilidae; Drosophilinae; Drosophilini; Drosophila; grimshawi group; grimshawi subgroup; Drosophila grimshawi;")
        self.assertEqual(alignment.sequences[236].id, "A0A091N2K9/389-577")
        self.assertEqual(alignment.sequences[236].annotations["accession"], "A0A091N2K9")
        self.assertEqual(alignment.sequences[236].annotations["organism"], "Apaloderma vittatum")
        self.assertEqual(alignment.sequences[236].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[236].annotations["database_references"][0]["reference"], "GENE3D; fe2af59f4be91a319375680d41de3d76/389-577;")
        self.assertEqual(alignment.sequences[236].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Aves; Neognathae; Trogoniformes; Trogonidae; Apaloderma; Apaloderma vittatum;")
        self.assertEqual(alignment.sequences[237].id, "B4LG52/437-674")
        self.assertEqual(alignment.sequences[237].annotations["accession"], "B4LG52")
        self.assertEqual(alignment.sequences[237].annotations["organism"], "Drosophila virilis")
        self.assertEqual(alignment.sequences[237].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[237].annotations["database_references"][0]["reference"], "GENE3D; 0022538d17af2653f8ec535c70687b86/437-674;")
        self.assertEqual(alignment.sequences[237].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Brachycera; Muscomorpha; Ephydroidea; Drosophilidae; Drosophilinae; Drosophilini; Drosophila; Drosophila; virilis group; Drosophila virilis;")
        self.assertEqual(alignment.sequences[238].id, "U3ICX4/384-564")
        self.assertEqual(alignment.sequences[238].annotations["accession"], "U3ICX4")
        self.assertEqual(alignment.sequences[238].annotations["organism"], "Anas platyrhynchos")
        self.assertEqual(alignment.sequences[238].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[238].annotations["database_references"][0]["reference"], "GENE3D; ff05fab01cbea93fe5c4beb0dfff16ea/384-564;")
        self.assertEqual(alignment.sequences[238].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Aves; Neognathae; Anseriformes; Anatidae; Anas; Anas platyrhynchos;")
        self.assertEqual(alignment.sequences[239].id, "A0A0D6EPL6/225-399")
        self.assertEqual(alignment.sequences[239].annotations["accession"], "A0A0D6EPL6")
        self.assertEqual(alignment.sequences[239].annotations["organism"], "Sporidiobolus salmonicolor")
        self.assertEqual(alignment.sequences[239].description, "SPOSA6832_03466-mRNA-1:cds")
        self.assertEqual(alignment.sequences[239].annotations["database_references"][0]["reference"], "GENE3D; 004839c25d85ae6629b8916f2a377be5/225-399;")
        self.assertEqual(alignment.sequences[239].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Pucciniomycotina; Microbotryomycetes; Sporidiobolales; Sporidiobolaceae; Sporidiobolus; Sporidiobolus salmonicolor;")
        self.assertEqual(alignment.sequences[240].id, "T1PJQ9/263-473")
        self.assertEqual(alignment.sequences[240].annotations["accession"], "T1PJQ9")
        self.assertEqual(alignment.sequences[240].annotations["organism"], "Musca domestica")
        self.assertEqual(alignment.sequences[240].description, "DEAD/DEAH box helicase")
        self.assertEqual(alignment.sequences[240].annotations["database_references"][0]["reference"], "GENE3D; 024bca2324aa042a16fdd30ab6dad91e/263-473;")
        self.assertEqual(alignment.sequences[240].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Brachycera; Muscomorpha; Muscoidea; Muscidae; Muscinae; Muscini; Musca; Musca; Musca domestica;")
        self.assertEqual(alignment.sequences[241].id, "A0A093KTA6/387-574")
        self.assertEqual(alignment.sequences[241].annotations["accession"], "A0A093KTA6")
        self.assertEqual(alignment.sequences[241].annotations["organism"], "Fulmarus glacialis")
        self.assertEqual(alignment.sequences[241].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[241].annotations["database_references"][0]["reference"], "GENE3D; 03f282d8af2518b2e1be6153031d3616/387-574;")
        self.assertEqual(alignment.sequences[241].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Aves; Neognathae; Procellariiformes; Procellariidae; Fulmarus; Fulmarus glacialis;")
        self.assertEqual(alignment.sequences[242].id, "M1AS96/385-535")
        self.assertEqual(alignment.sequences[242].annotations["accession"], "M1AS96")
        self.assertEqual(alignment.sequences[242].annotations["organism"], "Solanum tuberosum")
        self.assertEqual(alignment.sequences[242].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[242].annotations["database_references"][0]["reference"], "GENE3D; 05d1af586e71af4e17a020618c39ed2a/385-535;")
        self.assertEqual(alignment.sequences[242].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; asterids; Solanales; Solanaceae; Solanoideae; Solaneae; Solanum; Solanum tuberosum;")
        self.assertEqual(alignment.sequences[243].id, "A0A0A9JM15/139-346")
        self.assertEqual(alignment.sequences[243].annotations["accession"], "A0A0A9JM15")
        self.assertEqual(alignment.sequences[243].annotations["organism"], "Arundo donax")
        self.assertEqual(alignment.sequences[243].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[243].annotations["database_references"][0]["reference"], "GENE3D; 09562bea22dcc7b1a47ce938f98b5a3b/139-346;")
        self.assertEqual(alignment.sequences[243].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Arundinoideae; Arundineae; Arundo; Arundo donax;")
        self.assertEqual(alignment.sequences[244].id, "A0A182JFD2/473-743")
        self.assertEqual(alignment.sequences[244].annotations["accession"], "A0A182JFD2")
        self.assertEqual(alignment.sequences[244].annotations["organism"], "Anopheles atroparvus")
        self.assertEqual(alignment.sequences[244].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[244].annotations["database_references"][0]["reference"], "GENE3D; 096c385e5e0908e5b84e108b10378109/473-743;")
        self.assertEqual(alignment.sequences[244].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Nematocera; Culicomorpha; Culicoidea; Culicidae; Anophelinae; Anopheles; Anopheles; maculipennis group; Anopheles atroparvus;")
        self.assertEqual(alignment.sequences[245].id, "A0A1M2W5R6/470-677")
        self.assertEqual(alignment.sequences[245].annotations["accession"], "A0A1M2W5R6")
        self.assertEqual(alignment.sequences[245].annotations["organism"], "Trametes pubescens")
        self.assertEqual(alignment.sequences[245].description, "Oligomycin resistance ATP-dependent permease YOR1")
        self.assertEqual(alignment.sequences[245].annotations["database_references"][0]["reference"], "GENE3D; 09e8452752d7eaca113a538f57e85911/470-677;")
        self.assertEqual(alignment.sequences[245].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Polyporales; Coriolaceae; Trametes; Trametes pubescens;")
        self.assertEqual(alignment.sequences[246].id, "A0A182RJL1/470-757")
        self.assertEqual(alignment.sequences[246].annotations["accession"], "A0A182RJL1")
        self.assertEqual(alignment.sequences[246].annotations["organism"], "Anopheles funestus")
        self.assertEqual(alignment.sequences[246].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[246].annotations["database_references"][0]["reference"], "GENE3D; 0c00085132986d4e03b8597279f15841/470-757;")
        self.assertEqual(alignment.sequences[246].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Nematocera; Culicomorpha; Culicoidea; Culicidae; Anophelinae; Anopheles; Cellia; funestus group; funestus subgroup; Anopheles funestus;")
        self.assertEqual(alignment.sequences[247].id, "F1QGF7/2-149")
        self.assertEqual(alignment.sequences[247].annotations["accession"], "F1QGF7")
        self.assertEqual(alignment.sequences[247].annotations["organism"], "Danio rerio")
        self.assertEqual(alignment.sequences[247].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[247].annotations["database_references"][0]["reference"], "GENE3D; fe8513f839a46189c3cf3833ad9dac26/2-149;")
        self.assertEqual(alignment.sequences[247].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Actinopterygii; Actinopteri; Neopterygii; Teleostei; Cypriniphysae; Cypriniformes; Cyprinoidea; Cyprinidae; Danio; Danio rerio;")
        self.assertEqual(alignment.sequences[248].id, "M0WCV2/139-344")
        self.assertEqual(alignment.sequences[248].annotations["accession"], "M0WCV2")
        self.assertEqual(alignment.sequences[248].annotations["organism"], "Hordeum vulgare subsp. vulgare")
        self.assertEqual(alignment.sequences[248].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[248].annotations["database_references"][0]["reference"], "GENE3D; 0ecc7d36820fd975f3ce86ff89c1e880/139-344;")
        self.assertEqual(alignment.sequences[248].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Pooideae; Triticeae; Hordeinae; Hordeum; Hordeum vulgare; Hordeum vulgare subsp. vulgare;")
        self.assertEqual(alignment.sequences[249].id, "A0A061BL31/825-1016")
        self.assertEqual(alignment.sequences[249].annotations["accession"], "A0A061BL31")
        self.assertEqual(alignment.sequences[249].annotations["organism"], "Rhodotorula toruloides")
        self.assertEqual(alignment.sequences[249].description, "RHTO0S19e02212g1_1")
        self.assertEqual(alignment.sequences[249].annotations["database_references"][0]["reference"], "GENE3D; 120d7b8275d87c4a90f9771969b8f0f1/825-1016;")
        self.assertEqual(alignment.sequences[249].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Pucciniomycotina; Microbotryomycetes; Sporidiobolales; Sporidiobolaceae; Rhodotorula; Rhodotorula toruloides;")
        self.assertEqual(alignment.sequences[250].id, "M7WQ05/825-1016")
        self.assertEqual(alignment.sequences[250].annotations["accession"], "M7WQ05")
        self.assertEqual(alignment.sequences[250].annotations["organism"], "Rhodotorula toruloides NP11")
        self.assertEqual(alignment.sequences[250].description, "ATP-dependent DNA helicase")
        self.assertEqual(alignment.sequences[250].annotations["database_references"][0]["reference"], "GENE3D; 120d7b8275d87c4a90f9771969b8f0f1/825-1016;")
        self.assertEqual(alignment.sequences[250].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Pucciniomycotina; Microbotryomycetes; Sporidiobolales; Sporidiobolaceae; Rhodotorula; Rhodotorula toruloides;")
        self.assertEqual(alignment.sequences[251].id, "H2U575/320-504")
        self.assertEqual(alignment.sequences[251].annotations["accession"], "H2U575")
        self.assertEqual(alignment.sequences[251].annotations["organism"], "Takifugu rubripes")
        self.assertEqual(alignment.sequences[251].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[251].annotations["database_references"][0]["reference"], "GENE3D; 1250a709a4ce8ccc36ed166ef0c4c7fc/320-504;")
        self.assertEqual(alignment.sequences[251].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Actinopterygii; Actinopteri; Neopterygii; Teleostei; Tetraodontiformes; Tetraodontoidei; Tetradontoidea; Tetraodontidae; Takifugu; Takifugu rubripes;")
        self.assertEqual(alignment.sequences[252].id, "M4A6E1/472-657")
        self.assertEqual(alignment.sequences[252].annotations["accession"], "M4A6E1")
        self.assertEqual(alignment.sequences[252].annotations["organism"], "Xiphophorus maculatus")
        self.assertEqual(alignment.sequences[252].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[252].annotations["database_references"][0]["reference"], "GENE3D; 15089f67995be4a8fb3c368669670d79/472-657;")
        self.assertEqual(alignment.sequences[252].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Actinopterygii; Actinopteri; Neopterygii; Teleostei; Atherinomorphae; Cyprinodontiformes; Cyprinodontoidei; Poeciliidae; Poeciliinae; Xiphophorus; Xiphophorus maculatus;")
        self.assertEqual(alignment.sequences[253].id, "A0A182ZTN9/266-405")
        self.assertEqual(alignment.sequences[253].annotations["accession"], "A0A182ZTN9")
        self.assertEqual(alignment.sequences[253].annotations["organism"], "Biomphalaria glabrata")
        self.assertEqual(alignment.sequences[253].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[253].annotations["database_references"][0]["reference"], "GENE3D; 1cb27afabb5babf1da2198d68eae5d55/266-405;")
        self.assertEqual(alignment.sequences[253].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Mollusca; Gastropoda; Planorboidea; Planorbidae; Biomphalaria; Biomphalaria glabrata;")
        self.assertEqual(alignment.sequences[254].id, "A0A0K8UPS4/472-728")
        self.assertEqual(alignment.sequences[254].annotations["accession"], "A0A0K8UPS4")
        self.assertEqual(alignment.sequences[254].annotations["organism"], "Bactrocera latifrons")
        self.assertEqual(alignment.sequences[254].description, "Putative ATP-dependent RNA helicase Dbp73D")
        self.assertEqual(alignment.sequences[254].annotations["database_references"][0]["reference"], "GENE3D; 1cea6b1881d1c0bca87f03613eaff58f/472-728;")
        self.assertEqual(alignment.sequences[254].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Brachycera; Muscomorpha; Tephritoidea; Tephritidae; Dacinae; Dacini; Bactrocera; Bactrocera; Bactrocera latifrons;")
        self.assertEqual(alignment.sequences[255].id, "A0A146NSJ0/468-653")
        self.assertEqual(alignment.sequences[255].annotations["accession"], "A0A146NSJ0")
        self.assertEqual(alignment.sequences[255].annotations["organism"], "Fundulus heteroclitus")
        self.assertEqual(alignment.sequences[255].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[255].annotations["database_references"][0]["reference"], "GENE3D; 0d261592f47b62a4a6c284ded27b4971/468-653;")
        self.assertEqual(alignment.sequences[255].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Actinopterygii; Actinopteri; Neopterygii; Teleostei; Atherinomorphae; Cyprinodontiformes; Cyprinodontoidei; Fundulidae; Fundulus; Fundulus heteroclitus;")
        self.assertEqual(alignment.sequences[256].id, "A0A1D1VRY6/409-584")
        self.assertEqual(alignment.sequences[256].annotations["accession"], "A0A1D1VRY6")
        self.assertEqual(alignment.sequences[256].annotations["organism"], "Ramazzottius varieornatus")
        self.assertEqual(alignment.sequences[256].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[256].annotations["database_references"][0]["reference"], "GENE3D; 2756604fe0b4ed78be2fe23fbe635a8d/409-584;")
        self.assertEqual(alignment.sequences[256].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Tardigrada; Eutardigrada; Parachela; Hypsibiidae; Ramazzottius; Ramazzottius varieornatus;")
        self.assertEqual(alignment.sequences[257].id, "A0A0P6CRN9/531-748")
        self.assertEqual(alignment.sequences[257].annotations["accession"], "A0A0P6CRN9")
        self.assertEqual(alignment.sequences[257].annotations["organism"], "Daphnia magna")
        self.assertEqual(alignment.sequences[257].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[257].annotations["database_references"][0]["reference"], "GENE3D; 2a2fb88c10fa22ecff3eabc3046a4937/531-748;")
        self.assertEqual(alignment.sequences[257].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Crustacea; Branchiopoda; Phyllopoda; Diplostraca; Cladocera; Anomopoda; Daphniidae; Daphnia; Daphnia magna;")
        self.assertEqual(alignment.sequences[258].id, "T2M9J0/470-659")
        self.assertEqual(alignment.sequences[258].annotations["accession"], "T2M9J0")
        self.assertEqual(alignment.sequences[258].annotations["organism"], "Hydra vulgaris")
        self.assertEqual(alignment.sequences[258].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[258].annotations["database_references"][0]["reference"], "GENE3D; 2be5b6cfb331ebcf3e9ba4d3ebb2ecf3/470-659;")
        self.assertEqual(alignment.sequences[258].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Cnidaria; Hydrozoa; Hydroidolina; Anthoathecata; Aplanulata; Hydridae; Hydra; Hydra vulgaris;")
        self.assertEqual(alignment.sequences[259].id, "A0A077WSC1/451-634")
        self.assertEqual(alignment.sequences[259].annotations["accession"], "A0A077WSC1")
        self.assertEqual(alignment.sequences[259].annotations["organism"], "Lichtheimia ramosa")
        self.assertEqual(alignment.sequences[259].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[259].annotations["database_references"][0]["reference"], "GENE3D; 268380ee655b73efa0d81fe48aed7828/451-634;")
        self.assertEqual(alignment.sequences[259].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Mucoromycota; Mucoromycotina; Mucorales; Lichtheimiaceae; Lichtheimia; Lichtheimia ramosa;")
        self.assertEqual(alignment.sequences[260].id, "A0A182PIJ1/537-763")
        self.assertEqual(alignment.sequences[260].annotations["accession"], "A0A182PIJ1")
        self.assertEqual(alignment.sequences[260].annotations["organism"], "Anopheles epiroticus")
        self.assertEqual(alignment.sequences[260].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[260].annotations["database_references"][0]["reference"], "GENE3D; 32fc0fd5644139c60be577665916e48d/537-763;")
        self.assertEqual(alignment.sequences[260].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Nematocera; Culicomorpha; Culicoidea; Culicidae; Anophelinae; Anopheles; Cellia; Anopheles epiroticus;")
        self.assertEqual(alignment.sequences[261].id, "S8FX04/411-602")
        self.assertEqual(alignment.sequences[261].annotations["accession"], "S8FX04")
        self.assertEqual(alignment.sequences[261].annotations["organism"], "Fomitopsis pinicola FP-58527 SS1")
        self.assertEqual(alignment.sequences[261].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[261].annotations["database_references"][0]["reference"], "GENE3D; 28943be18f5eb2afa9769257494c3166/411-602;")
        self.assertEqual(alignment.sequences[261].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Polyporales; Fomitopsidaceae; Fomitopsis; Fomitopsis pinicola;")
        self.assertEqual(alignment.sequences[262].id, "A0A182Q8N8/457-745")
        self.assertEqual(alignment.sequences[262].annotations["accession"], "A0A182Q8N8")
        self.assertEqual(alignment.sequences[262].annotations["organism"], "Anopheles farauti")
        self.assertEqual(alignment.sequences[262].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[262].annotations["database_references"][0]["reference"], "GENE3D; 36554ed9f72a7678f4bf3a076c0d832f/457-745;")
        self.assertEqual(alignment.sequences[262].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Nematocera; Culicomorpha; Culicoidea; Culicidae; Anophelinae; Anopheles; Cellia; Anopheles farauti;")
        self.assertEqual(alignment.sequences[263].id, "A0A150H315/266-457")
        self.assertEqual(alignment.sequences[263].annotations["accession"], "A0A150H315")
        self.assertEqual(alignment.sequences[263].annotations["organism"], "Gonium pectorale")
        self.assertEqual(alignment.sequences[263].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[263].annotations["database_references"][0]["reference"], "GENE3D; 36852ac75b5415a347790c1b24cff828/266-457;")
        self.assertEqual(alignment.sequences[263].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Chlorophyta; Chlorophyceae; Chlamydomonadales; Volvocaceae; Gonium; Gonium pectorale;")
        self.assertEqual(alignment.sequences[264].id, "A0A131XI92/479-685")
        self.assertEqual(alignment.sequences[264].annotations["accession"], "A0A131XI92")
        self.assertEqual(alignment.sequences[264].annotations["organism"], "Hyalomma excavatum")
        self.assertEqual(alignment.sequences[264].description, "Putative atp-dependent rna helicase")
        self.assertEqual(alignment.sequences[264].annotations["database_references"][0]["reference"], "GENE3D; 38404096abd8b4e4f999de112fafa972/479-685;")
        self.assertEqual(alignment.sequences[264].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Chelicerata; Arachnida; Acari; Parasitiformes; Ixodida; Ixodoidea; Ixodidae; Hyalomminae; Hyalomma; Hyalomma excavatum;")
        self.assertEqual(alignment.sequences[265].id, "A0A1A6GQZ3/441-627")
        self.assertEqual(alignment.sequences[265].annotations["accession"], "A0A1A6GQZ3")
        self.assertEqual(alignment.sequences[265].annotations["organism"], "Neotoma lepida")
        self.assertEqual(alignment.sequences[265].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[265].annotations["database_references"][0]["reference"], "GENE3D; 2a730808e534fb1669582cbcb46b7e14/441-627;")
        self.assertEqual(alignment.sequences[265].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Euarchontoglires; Rodentia; Myomorpha; Cricetidae; Neotominae; Neotoma; Neotoma lepida;")
        self.assertEqual(alignment.sequences[266].id, "G3HCC7/419-605")
        self.assertEqual(alignment.sequences[266].annotations["accession"], "G3HCC7")
        self.assertEqual(alignment.sequences[266].annotations["organism"], "Cricetulus griseus")
        self.assertEqual(alignment.sequences[266].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[266].annotations["database_references"][0]["reference"], "GENE3D; 2ec114546b271ed978b6adfb71057b97/419-605;")
        self.assertEqual(alignment.sequences[266].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Euarchontoglires; Rodentia; Myomorpha; Cricetidae; Cricetinae; Cricetulus; Cricetulus griseus;")
        self.assertEqual(alignment.sequences[267].id, "A0A1J1IBZ4/427-640")
        self.assertEqual(alignment.sequences[267].annotations["accession"], "A0A1J1IBZ4")
        self.assertEqual(alignment.sequences[267].annotations["organism"], "Clunio marinus")
        self.assertEqual(alignment.sequences[267].description, "CLUMA_CG011176, isoform A")
        self.assertEqual(alignment.sequences[267].annotations["database_references"][0]["reference"], "GENE3D; 3e1b205bdbadcd0b925891d0b7cb60e2/427-640;")
        self.assertEqual(alignment.sequences[267].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Nematocera; Culicomorpha; Chironomoidea; Chironomidae; Orthocladiinae; Clunio; Clunio marinus;")
        self.assertEqual(alignment.sequences[268].id, "A0A0P6IVI1/416-692")
        self.assertEqual(alignment.sequences[268].annotations["accession"], "A0A0P6IVI1")
        self.assertEqual(alignment.sequences[268].annotations["organism"], "Aedes aegypti")
        self.assertEqual(alignment.sequences[268].description, "Putative atp-dependent rna helicase")
        self.assertEqual(alignment.sequences[268].annotations["database_references"][0]["reference"], "GENE3D; 3e93236f4f4bfbc76c8aa9e6ae3da04b/416-692;")
        self.assertEqual(alignment.sequences[268].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Nematocera; Culicomorpha; Culicoidea; Culicidae; Culicinae; Aedini; Aedes; Stegomyia; Aedes aegypti;")
        self.assertEqual(alignment.sequences[269].id, "A0A0V0IN26/311-523")
        self.assertEqual(alignment.sequences[269].annotations["accession"], "A0A0V0IN26")
        self.assertEqual(alignment.sequences[269].annotations["organism"], "Solanum chacoense")
        self.assertEqual(alignment.sequences[269].description, "Putative DEAD-box ATP-dependent RNA helicase 1-like")
        self.assertEqual(alignment.sequences[269].annotations["database_references"][0]["reference"], "GENE3D; 3f918a8e1c6e318424e899556df5d7e6/311-523;")
        self.assertEqual(alignment.sequences[269].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; asterids; Solanales; Solanaceae; Solanoideae; Solaneae; Solanum; Solanum chacoense;")
        self.assertEqual(alignment.sequences[270].id, "A0A080ZQG4/319-558")
        self.assertEqual(alignment.sequences[270].annotations["accession"], "A0A080ZQG4")
        self.assertEqual(alignment.sequences[270].annotations["organism"], "Phytophthora parasitica P1976")
        self.assertEqual(alignment.sequences[270].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[270].annotations["database_references"][0]["reference"], "GENE3D; 326d4de7bf7866e7e941a65462dac0f9/319-558;")
        self.assertEqual(alignment.sequences[270].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Oomycetes; Peronosporales; Phytophthora; Phytophthora parasitica;")
        self.assertEqual(alignment.sequences[271].id, "A0A182N9A6/449-712")
        self.assertEqual(alignment.sequences[271].annotations["accession"], "A0A182N9A6")
        self.assertEqual(alignment.sequences[271].annotations["organism"], "Anopheles dirus")
        self.assertEqual(alignment.sequences[271].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[271].annotations["database_references"][0]["reference"], "GENE3D; 448a844271490bff8e7d79706c14a667/449-712;")
        self.assertEqual(alignment.sequences[271].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Nematocera; Culicomorpha; Culicoidea; Culicidae; Anophelinae; Anopheles; Cellia; leucosphyrus group; leucosphyrus subgroup; Anopheles dirus;")
        self.assertEqual(alignment.sequences[272].id, "A0A158QJI2/98-324")
        self.assertEqual(alignment.sequences[272].annotations["accession"], "A0A158QJI2")
        self.assertEqual(alignment.sequences[272].annotations["organism"], "Hymenolepis nana")
        self.assertEqual(alignment.sequences[272].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[272].annotations["database_references"][0]["reference"], "GENE3D; 3655183013be7dedbfce829454eb57c0/98-324;")
        self.assertEqual(alignment.sequences[272].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Platyhelminthes; Cestoda; Eucestoda; Cyclophyllidea; Hymenolepididae; Hymenolepis; Hymenolepis nana;")
        self.assertEqual(alignment.sequences[273].id, "A0A199UXI5/231-443")
        self.assertEqual(alignment.sequences[273].annotations["accession"], "A0A199UXI5")
        self.assertEqual(alignment.sequences[273].annotations["organism"], "Ananas comosus")
        self.assertEqual(alignment.sequences[273].description, "DEAD-box ATP-dependent RNA helicase 1")
        self.assertEqual(alignment.sequences[273].annotations["database_references"][0]["reference"], "GENE3D; 3a08c30a879212977363887c4c948679/231-443;")
        self.assertEqual(alignment.sequences[273].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Bromeliaceae; Bromelioideae; Ananas; Ananas comosus;")
        self.assertEqual(alignment.sequences[274].id, "A0A1I8NT35/449-726")
        self.assertEqual(alignment.sequences[274].annotations["accession"], "A0A1I8NT35")
        self.assertEqual(alignment.sequences[274].annotations["organism"], "Stomoxys calcitrans")
        self.assertEqual(alignment.sequences[274].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[274].annotations["database_references"][0]["reference"], "GENE3D; 4bb3a9710c1cd7061154b51a44795c89/449-726;")
        self.assertEqual(alignment.sequences[274].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Brachycera; Muscomorpha; Muscoidea; Muscidae; Muscinae; Stomoxyini; Stomoxys; Stomoxys calcitrans;")
        self.assertEqual(alignment.sequences[275].id, "A0A165TAP1/505-703")
        self.assertEqual(alignment.sequences[275].annotations["accession"], "A0A165TAP1")
        self.assertEqual(alignment.sequences[275].annotations["organism"], "Daedalea quercina L-15889")
        self.assertEqual(alignment.sequences[275].description, "DEAD-domain-containing protein")
        self.assertEqual(alignment.sequences[275].annotations["database_references"][0]["reference"], "GENE3D; 3b2d0a21fe79876b7958de954c5f3d70/505-703;")
        self.assertEqual(alignment.sequences[275].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Polyporales; Coriolaceae; Daedalea; Daedalea quercina;")
        self.assertEqual(alignment.sequences[276].id, "A0A067TGJ4/527-720")
        self.assertEqual(alignment.sequences[276].annotations["accession"], "A0A067TGJ4")
        self.assertEqual(alignment.sequences[276].annotations["organism"], "Galerina marginata CBS 339.88")
        self.assertEqual(alignment.sequences[276].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[276].annotations["database_references"][0]["reference"], "GENE3D; 3fbdf61b6fe91a94700e36c39f2d66f5/527-720;")
        self.assertEqual(alignment.sequences[276].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Agaricomycetidae; Agaricales; Strophariaceae; Galerina; Galerina marginata;")
        self.assertEqual(alignment.sequences[277].id, "S9R9Q0/411-603")
        self.assertEqual(alignment.sequences[277].annotations["accession"], "S9R9Q0")
        self.assertEqual(alignment.sequences[277].annotations["organism"], "Schizosaccharomyces octosporus yFS286")
        self.assertEqual(alignment.sequences[277].description, "ATP-dependent RNA helicase Dbp6")
        self.assertEqual(alignment.sequences[277].annotations["database_references"][0]["reference"], "GENE3D; 40b2a22184e5437d0791c01eba2d0043/411-603;")
        self.assertEqual(alignment.sequences[277].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Ascomycota; Taphrinomycotina; Schizosaccharomycetes; Schizosaccharomycetales; Schizosaccharomycetaceae; Schizosaccharomyces; Schizosaccharomyces octosporus;")
        self.assertEqual(alignment.sequences[278].id, "A0A1B6C6W5/502-733")
        self.assertEqual(alignment.sequences[278].annotations["accession"], "A0A1B6C6W5")
        self.assertEqual(alignment.sequences[278].annotations["organism"], "Clastoptera arizonana")
        self.assertEqual(alignment.sequences[278].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[278].annotations["database_references"][0]["reference"], "GENE3D; 53071921151e8254261ebebf61a445ed/502-733;")
        self.assertEqual(alignment.sequences[278].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Paraneoptera; Hemiptera; Auchenorrhyncha; Cicadomorpha; Cercopoidea; Clastopteridae; Clastoptera; Clastoptera arizonana;")
        self.assertEqual(alignment.sequences[279].id, "A0A165ERX2/515-712")
        self.assertEqual(alignment.sequences[279].annotations["accession"], "A0A165ERX2")
        self.assertEqual(alignment.sequences[279].annotations["organism"], "Laetiporus sulphureus 93-53")
        self.assertEqual(alignment.sequences[279].description, "DEAD-domain-containing protein")
        self.assertEqual(alignment.sequences[279].annotations["database_references"][0]["reference"], "GENE3D; 3ffaf854f65ead2eb326c57b7cbda403/515-712;")
        self.assertEqual(alignment.sequences[279].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Polyporales; Coriolaceae; Laetiporus; Laetiporus sulphureus;")
        self.assertEqual(alignment.sequences[280].id, "A0A0E0GE16/310-522")
        self.assertEqual(alignment.sequences[280].annotations["accession"], "A0A0E0GE16")
        self.assertEqual(alignment.sequences[280].annotations["organism"], "Oryza nivara")
        self.assertEqual(alignment.sequences[280].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[280].annotations["database_references"][0]["reference"], "GENE3D; 41ee59e01751322ff09b866b7e5fa68b/310-522;")
        self.assertEqual(alignment.sequences[280].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Oryzoideae; Oryzeae; Oryzinae; Oryza; Oryza nivara;")
        self.assertEqual(alignment.sequences[281].id, "A0A182JRN8/446-697")
        self.assertEqual(alignment.sequences[281].annotations["accession"], "A0A182JRN8")
        self.assertEqual(alignment.sequences[281].annotations["organism"], "Anopheles christyi")
        self.assertEqual(alignment.sequences[281].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[281].annotations["database_references"][0]["reference"], "GENE3D; 562f2bfd0baf76dc9f6c3e52f391b794/446-697;")
        self.assertEqual(alignment.sequences[281].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Nematocera; Culicomorpha; Culicoidea; Culicidae; Anophelinae; Anopheles; Cellia; Anopheles christyi;")
        self.assertEqual(alignment.sequences[282].id, "A0A0D0DTR5/369-559")
        self.assertEqual(alignment.sequences[282].annotations["accession"], "A0A0D0DTR5")
        self.assertEqual(alignment.sequences[282].annotations["organism"], "Paxillus rubicundulus Ve08.2h10")
        self.assertEqual(alignment.sequences[282].description, "Unplaced genomic scaffold scaffold_496, whole genome shotgun sequence")
        self.assertEqual(alignment.sequences[282].annotations["database_references"][0]["reference"], "GENE3D; 43a2348b1af1279eda2d9f2ab4559f9d/369-559;")
        self.assertEqual(alignment.sequences[282].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Agaricomycetidae; Boletales; Paxilineae; Paxillaceae; Paxillus; Paxillus rubicundulus;")
        self.assertEqual(alignment.sequences[283].id, "A0A182VAG1/465-664")
        self.assertEqual(alignment.sequences[283].annotations["accession"], "A0A182VAG1")
        self.assertEqual(alignment.sequences[283].annotations["organism"], "Anopheles merus")
        self.assertEqual(alignment.sequences[283].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[283].annotations["database_references"][0]["reference"], "GENE3D; 58632fc5a676da724d3b31f203bfaa18/465-664;")
        self.assertEqual(alignment.sequences[283].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Nematocera; Culicomorpha; Culicoidea; Culicidae; Anophelinae; Anopheles; Cellia; Anopheles merus;")
        self.assertEqual(alignment.sequences[284].id, "W8BUG2/428-684")
        self.assertEqual(alignment.sequences[284].annotations["accession"], "W8BUG2")
        self.assertEqual(alignment.sequences[284].annotations["organism"], "Ceratitis capitata")
        self.assertEqual(alignment.sequences[284].description, "Putative ATP-dependent RNA helicase Dbp73D")
        self.assertEqual(alignment.sequences[284].annotations["database_references"][0]["reference"], "GENE3D; 5a2fe6f24641deb600b3c8486c6ee846/428-684;")
        self.assertEqual(alignment.sequences[284].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Brachycera; Muscomorpha; Tephritoidea; Tephritidae; Dacinae; Ceratitidini; Ceratitis; Ceratitis; Ceratitis capitata;")
        self.assertEqual(alignment.sequences[285].id, "A0A1A9W4X8/417-664")
        self.assertEqual(alignment.sequences[285].annotations["accession"], "A0A1A9W4X8")
        self.assertEqual(alignment.sequences[285].annotations["organism"], "Glossina brevipalpis")
        self.assertEqual(alignment.sequences[285].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[285].annotations["database_references"][0]["reference"], "GENE3D; 5d2fa8274aa4f4e259ede7474042b78c/417-664;")
        self.assertEqual(alignment.sequences[285].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Brachycera; Muscomorpha; Hippoboscoidea; Glossinidae; Glossina; Austenina; Glossina brevipalpis;")
        self.assertEqual(alignment.sequences[286].id, "C5XUG2/313-518")
        self.assertEqual(alignment.sequences[286].annotations["accession"], "C5XUG2")
        self.assertEqual(alignment.sequences[286].annotations["organism"], "Sorghum bicolor")
        self.assertEqual(alignment.sequences[286].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[286].annotations["database_references"][0]["reference"], "GENE3D; 49cda6e32b655a64961c77fb9f6e9471/313-518;")
        self.assertEqual(alignment.sequences[286].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Panicoideae; Andropogoneae; Sorghinae; Sorghum; Sorghum bicolor;")
        self.assertEqual(alignment.sequences[287].id, "A0A166ULV3/476-668")
        self.assertEqual(alignment.sequences[287].annotations["accession"], "A0A166ULV3")
        self.assertEqual(alignment.sequences[287].annotations["organism"], "Fibulorhizoctonia sp. CBS 109695")
        self.assertEqual(alignment.sequences[287].description, "DEAD-domain-containing protein")
        self.assertEqual(alignment.sequences[287].annotations["database_references"][0]["reference"], "GENE3D; 4ae871e16771e95e88bec0299579e978/476-668;")
        self.assertEqual(alignment.sequences[287].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Agaricomycetidae; Atheliales; Atheliaceae; Fibulorhizoctonia; Fibulorhizoctonia sp. CBS 109695;")
        self.assertEqual(alignment.sequences[288].id, "S2K9H7/454-638")
        self.assertEqual(alignment.sequences[288].annotations["accession"], "S2K9H7")
        self.assertEqual(alignment.sequences[288].annotations["organism"], "Mucor circinelloides f. circinelloides 1006PhL")
        self.assertEqual(alignment.sequences[288].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[288].annotations["database_references"][0]["reference"], "GENE3D; 4e579483c05aeea2d43e4503b311e85a/454-638;")
        self.assertEqual(alignment.sequences[288].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Mucoromycota; Mucoromycotina; Mucorales; Mucorineae; Mucoraceae; Mucor; Mucor circinelloides; Mucor circinelloides f. circinelloides;")
        self.assertEqual(alignment.sequences[289].id, "A0A182T214/264-445")
        self.assertEqual(alignment.sequences[289].annotations["accession"], "A0A182T214")
        self.assertEqual(alignment.sequences[289].annotations["organism"], "Anopheles maculatus")
        self.assertEqual(alignment.sequences[289].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[289].annotations["database_references"][0]["reference"], "GENE3D; 657c58b3eb78b41e3b9981ba788f85a9/264-445;")
        self.assertEqual(alignment.sequences[289].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Nematocera; Culicomorpha; Culicoidea; Culicidae; Anophelinae; Anopheles; Cellia; Anopheles maculatus;")
        self.assertEqual(alignment.sequences[290].id, "W2YSW0/319-558")
        self.assertEqual(alignment.sequences[290].annotations["accession"], "W2YSW0")
        self.assertEqual(alignment.sequences[290].annotations["organism"], "Phytophthora parasitica P10297")
        self.assertEqual(alignment.sequences[290].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[290].annotations["database_references"][0]["reference"], "GENE3D; 511c34c0ad5098cc2ab6a7d19f0b0e06/319-558;")
        self.assertEqual(alignment.sequences[290].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Oomycetes; Peronosporales; Phytophthora; Phytophthora parasitica;")
        self.assertEqual(alignment.sequences[291].id, "A0A0W0FST0/456-640")
        self.assertEqual(alignment.sequences[291].annotations["accession"], "A0A0W0FST0")
        self.assertEqual(alignment.sequences[291].annotations["organism"], "Moniliophthora roreri")
        self.assertEqual(alignment.sequences[291].description, "Putative P-loop containing nucleoside triphosphate hydrolase protein")
        self.assertEqual(alignment.sequences[291].annotations["database_references"][0]["reference"], "GENE3D; 51dcc49f4a16ff631c9eba7a591edcd8/456-640;")
        self.assertEqual(alignment.sequences[291].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Agaricomycetidae; Agaricales; Marasmiaceae; Moniliophthora; Moniliophthora roreri;")
        self.assertEqual(alignment.sequences[292].id, "A0A166I7F4/503-696")
        self.assertEqual(alignment.sequences[292].annotations["accession"], "A0A166I7F4")
        self.assertEqual(alignment.sequences[292].annotations["organism"], "Peniophora sp. CONT")
        self.assertEqual(alignment.sequences[292].description, "DEAD-domain-containing protein")
        self.assertEqual(alignment.sequences[292].annotations["database_references"][0]["reference"], "GENE3D; 4f4aefd1a73eff5dec82d96d2258455f/503-696;")
        self.assertEqual(alignment.sequences[292].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Russulales; Peniophoraceae; Peniophora; Peniophora sp. CONT;")
        self.assertEqual(alignment.sequences[293].id, "M2R6Y7/502-698")
        self.assertEqual(alignment.sequences[293].annotations["accession"], "M2R6Y7")
        self.assertEqual(alignment.sequences[293].annotations["organism"], "Gelatoporia subvermispora B")
        self.assertEqual(alignment.sequences[293].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[293].annotations["database_references"][0]["reference"], "GENE3D; 570eb81877d8fce9e6f3b564de43998c/502-698;")
        self.assertEqual(alignment.sequences[293].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Polyporales; Coriolaceae; Gelatoporia; Gelatoporia subvermispora;")
        self.assertEqual(alignment.sequences[294].id, "A0A1J6IE82/3-196")
        self.assertEqual(alignment.sequences[294].annotations["accession"], "A0A1J6IE82")
        self.assertEqual(alignment.sequences[294].annotations["organism"], "Nicotiana attenuata")
        self.assertEqual(alignment.sequences[294].description, "Dead-box atp-dependent rna helicase 1")
        self.assertEqual(alignment.sequences[294].annotations["database_references"][0]["reference"], "GENE3D; 70fb5f9b5b1dde93745e7c1b81cbfbc9/3-196;")
        self.assertEqual(alignment.sequences[294].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; asterids; Solanales; Solanaceae; Nicotianoideae; Nicotianeae; Nicotiana; Nicotiana attenuata;")
        self.assertEqual(alignment.sequences[295].id, "A0A1B0C2P6/426-592")
        self.assertEqual(alignment.sequences[295].annotations["accession"], "A0A1B0C2P6")
        self.assertEqual(alignment.sequences[295].annotations["organism"], "Glossina palpalis gambiensis")
        self.assertEqual(alignment.sequences[295].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[295].annotations["database_references"][0]["reference"], "GENE3D; 712b9fed09b53afae86b472c0ef87d79/426-592;")
        self.assertEqual(alignment.sequences[295].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Brachycera; Muscomorpha; Hippoboscoidea; Glossinidae; Glossina; Nemorhina; Glossina palpalis; Glossina palpalis gambiensis;")
        self.assertEqual(alignment.sequences[296].id, "B5X0P8/491-677")
        self.assertEqual(alignment.sequences[296].annotations["accession"], "B5X0P8")
        self.assertEqual(alignment.sequences[296].annotations["organism"], "Salmo salar")
        self.assertEqual(alignment.sequences[296].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[296].annotations["database_references"][0]["reference"], "GENE3D; 62c0e2f3a5ecbe2373719123da407727/491-677;")
        self.assertEqual(alignment.sequences[296].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Actinopterygii; Actinopteri; Neopterygii; Teleostei; Salmoniformes; Salmonidae; Salmoninae; Salmo; Salmo salar;")
        self.assertEqual(alignment.sequences[297].id, "A0A0E0K6A6/284-503")
        self.assertEqual(alignment.sequences[297].annotations["accession"], "A0A0E0K6A6")
        self.assertEqual(alignment.sequences[297].annotations["organism"], "Oryza punctata")
        self.assertEqual(alignment.sequences[297].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[297].annotations["database_references"][0]["reference"], "GENE3D; 58f384126ebe4994da29ad53d88296fa/284-503;")
        self.assertEqual(alignment.sequences[297].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Oryzoideae; Oryzeae; Oryzinae; Oryza; Oryza punctata;")
        self.assertEqual(alignment.sequences[298].id, "A0A078G8Y1/330-530")
        self.assertEqual(alignment.sequences[298].annotations["accession"], "A0A078G8Y1")
        self.assertEqual(alignment.sequences[298].annotations["organism"], "Brassica napus")
        self.assertEqual(alignment.sequences[298].description, "BnaA01g18280D protein")
        self.assertEqual(alignment.sequences[298].annotations["database_references"][0]["reference"], "GENE3D; 5afdab33137f22e802d68f76043170ed/330-530;")
        self.assertEqual(alignment.sequences[298].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Brassicales; Brassicaceae; Brassiceae; Brassica; Brassica napus;")
        self.assertEqual(alignment.sequences[299].id, "A0A0E0GE17/310-516")
        self.assertEqual(alignment.sequences[299].annotations["accession"], "A0A0E0GE17")
        self.assertEqual(alignment.sequences[299].annotations["organism"], "Oryza nivara")
        self.assertEqual(alignment.sequences[299].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[299].annotations["database_references"][0]["reference"], "GENE3D; 5f3fed90198d803a5409547c64ae287f/310-516;")
        self.assertEqual(alignment.sequences[299].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Oryzoideae; Oryzeae; Oryzinae; Oryza; Oryza nivara;")
        self.assertEqual(alignment.sequences[300].id, "A0A1D1Y5Y8/369-583")
        self.assertEqual(alignment.sequences[300].annotations["accession"], "A0A1D1Y5Y8")
        self.assertEqual(alignment.sequences[300].annotations["organism"], "Anthurium amnicola")
        self.assertEqual(alignment.sequences[300].description, "DEAD-box ATP-dependent RNA helicase 1")
        self.assertEqual(alignment.sequences[300].annotations["database_references"][0]["reference"], "GENE3D; 79c6bb3802798a60a5f1d1d7f441392f/369-583;")
        self.assertEqual(alignment.sequences[300].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Alismatales; Araceae; Pothoideae; Potheae; Anthurium; Anthurium amnicola;")
        self.assertEqual(alignment.sequences[301].id, "F7BEA4/473-660")
        self.assertEqual(alignment.sequences[301].annotations["accession"], "F7BEA4")
        self.assertEqual(alignment.sequences[301].annotations["organism"], "Xenopus tropicalis")
        self.assertEqual(alignment.sequences[301].description, "DEAD-box helicase 51")
        self.assertEqual(alignment.sequences[301].annotations["database_references"][0]["reference"], "GENE3D; 6210fa8be0bbf44c4eb3e328b1991b60/473-660;")
        self.assertEqual(alignment.sequences[301].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Amphibia; Batrachia; Anura; Pipoidea; Pipidae; Xenopodinae; Xenopus; Silurana; Xenopus tropicalis;")
        self.assertEqual(alignment.sequences[302].id, "A0A0W8D286/190-430")
        self.assertEqual(alignment.sequences[302].annotations["accession"], "A0A0W8D286")
        self.assertEqual(alignment.sequences[302].annotations["organism"], "Phytophthora nicotianae")
        self.assertEqual(alignment.sequences[302].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[302].annotations["database_references"][0]["reference"], "GENE3D; 62282bbc89ec6b01b42d894d6ff24ef3/190-430;")
        self.assertEqual(alignment.sequences[302].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Oomycetes; Peronosporales; Phytophthora; Phytophthora nicotianae;")
        self.assertEqual(alignment.sequences[303].id, "A0A0C9ZRU3/320-509")
        self.assertEqual(alignment.sequences[303].annotations["accession"], "A0A0C9ZRU3")
        self.assertEqual(alignment.sequences[303].annotations["organism"], "Pisolithus microcarpus 441")
        self.assertEqual(alignment.sequences[303].description, "Unplaced genomic scaffold scaffold_7, whole genome shotgun sequence")
        self.assertEqual(alignment.sequences[303].annotations["database_references"][0]["reference"], "GENE3D; 5fe74bc2b41636a3c7c1afbf40bb551c/320-509;")
        self.assertEqual(alignment.sequences[303].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Agaricomycetidae; Boletales; Sclerodermatineae; Pisolithaceae; Pisolithus; Pisolithus microcarpus;")
        self.assertEqual(alignment.sequences[304].id, "A0A1I8M450/423-638")
        self.assertEqual(alignment.sequences[304].annotations["accession"], "A0A1I8M450")
        self.assertEqual(alignment.sequences[304].annotations["organism"], "Musca domestica")
        self.assertEqual(alignment.sequences[304].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[304].annotations["database_references"][0]["reference"], "GENE3D; 802737f34145a0cff2b416de231fe054/423-638;")
        self.assertEqual(alignment.sequences[304].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Brachycera; Muscomorpha; Muscoidea; Muscidae; Muscinae; Muscini; Musca; Musca; Musca domestica;")
        self.assertEqual(alignment.sequences[305].id, "A0A0P5NBT4/524-744")
        self.assertEqual(alignment.sequences[305].annotations["accession"], "A0A0P5NBT4")
        self.assertEqual(alignment.sequences[305].annotations["organism"], "Daphnia magna")
        self.assertEqual(alignment.sequences[305].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[305].annotations["database_references"][0]["reference"], "GENE3D; 818abf0918571af6bb462333439251ff/524-744;")
        self.assertEqual(alignment.sequences[305].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Crustacea; Branchiopoda; Phyllopoda; Diplostraca; Cladocera; Anomopoda; Daphniidae; Daphnia; Daphnia magna;")
        self.assertEqual(alignment.sequences[306].id, "A0A0A1P4N7/78-262")
        self.assertEqual(alignment.sequences[306].annotations["accession"], "A0A0A1P4N7")
        self.assertEqual(alignment.sequences[306].annotations["organism"], "Rhizopus microsporus")
        self.assertEqual(alignment.sequences[306].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[306].annotations["database_references"][0]["reference"], "GENE3D; 62cee3ea1ebd25bf0fc557dfd0a512a6/78-262;")
        self.assertEqual(alignment.sequences[306].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Mucoromycota; Mucoromycotina; Mucorales; Mucorineae; Rhizopodaceae; Rhizopus; Rhizopus microsporus;")
        self.assertEqual(alignment.sequences[307].id, "B3NDI1/422-683")
        self.assertEqual(alignment.sequences[307].annotations["accession"], "B3NDI1")
        self.assertEqual(alignment.sequences[307].annotations["organism"], "Drosophila erecta")
        self.assertEqual(alignment.sequences[307].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[307].annotations["database_references"][0]["reference"], "GENE3D; 674bb65ef085d21121d49a6d15c7e786/422-683;")
        self.assertEqual(alignment.sequences[307].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Brachycera; Muscomorpha; Ephydroidea; Drosophilidae; Drosophilinae; Drosophilini; Drosophila; Sophophora; melanogaster group; melanogaster subgroup; Drosophila erecta;")
        self.assertEqual(alignment.sequences[308].id, "A0A166EUZ3/356-535")
        self.assertEqual(alignment.sequences[308].annotations["accession"], "A0A166EUZ3")
        self.assertEqual(alignment.sequences[308].annotations["organism"], "Sistotremastrum suecicum HHB10207 ss-3")
        self.assertEqual(alignment.sequences[308].description, "DEAD-domain-containing protein")
        self.assertEqual(alignment.sequences[308].annotations["database_references"][0]["reference"], "GENE3D; 6476c691ec705df5ccc670d155a9262c/356-535;")
        self.assertEqual(alignment.sequences[308].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Trechisporales; Hydnodontaceae; Sistotremastrum; Sistotremastrum suecicum;")
        self.assertEqual(alignment.sequences[309].id, "A0A068UK17/319-513")
        self.assertEqual(alignment.sequences[309].annotations["accession"], "A0A068UK17")
        self.assertEqual(alignment.sequences[309].annotations["organism"], "Coffea canephora")
        self.assertEqual(alignment.sequences[309].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[309].annotations["database_references"][0]["reference"], "GENE3D; 86ef8d6e51494e37faa968e86f430e0b/319-513;")
        self.assertEqual(alignment.sequences[309].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; asterids; Gentianales; Rubiaceae; Ixoroideae; Coffeeae; Coffea; Coffea canephora;")
        self.assertEqual(alignment.sequences[310].id, "G6CL86/402-624")
        self.assertEqual(alignment.sequences[310].annotations["accession"], "G6CL86")
        self.assertEqual(alignment.sequences[310].annotations["organism"], "Danaus plexippus")
        self.assertEqual(alignment.sequences[310].description, "Putative ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[310].annotations["database_references"][0]["reference"], "GENE3D; 6af71096b67209cb2076fbf878653a58/402-624;")
        self.assertEqual(alignment.sequences[310].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Lepidoptera; Glossata; Neolepidoptera; Heteroneura; Papilionoidea; Nymphalidae; Danainae; Danaini; Danaina; Danaus; Danaus; Danaus plexippus;")
        self.assertEqual(alignment.sequences[311].id, "G1M4Z3/366-551")
        self.assertEqual(alignment.sequences[311].annotations["accession"], "G1M4Z3")
        self.assertEqual(alignment.sequences[311].annotations["organism"], "Ailuropoda melanoleuca")
        self.assertEqual(alignment.sequences[311].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[311].annotations["database_references"][0]["reference"], "GENE3D; 66c9b86fcc94b65709bdb1a0b0ff3fb6/366-551;")
        self.assertEqual(alignment.sequences[311].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Laurasiatheria; Carnivora; Caniformia; Ursidae; Ailuropoda; Ailuropoda melanoleuca;")
        self.assertEqual(alignment.sequences[312].id, "V9KIG8/552-739")
        self.assertEqual(alignment.sequences[312].annotations["accession"], "V9KIG8")
        self.assertEqual(alignment.sequences[312].annotations["organism"], "Callorhinchus milii")
        self.assertEqual(alignment.sequences[312].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[312].annotations["database_references"][0]["reference"], "GENE3D; 7840ae421d3a665ba15e93f06d2f885c/552-739;")
        self.assertEqual(alignment.sequences[312].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Chondrichthyes; Holocephali; Chimaeriformes; Callorhinchidae; Callorhinchus; Callorhinchus milii;")
        self.assertEqual(alignment.sequences[313].id, "W2MXC5/319-559")
        self.assertEqual(alignment.sequences[313].annotations["accession"], "W2MXC5")
        self.assertEqual(alignment.sequences[313].annotations["organism"], "Phytophthora parasitica")
        self.assertEqual(alignment.sequences[313].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[313].annotations["database_references"][0]["reference"], "GENE3D; 6d02de735a3be7235e34ff24d33a92bc/319-559;")
        self.assertEqual(alignment.sequences[313].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Oomycetes; Peronosporales; Phytophthora; Phytophthora parasitica;")
        self.assertEqual(alignment.sequences[314].id, "A0A0C2Z4N3/468-656")
        self.assertEqual(alignment.sequences[314].annotations["accession"], "A0A0C2Z4N3")
        self.assertEqual(alignment.sequences[314].annotations["organism"], "Scleroderma citrinum Foug A")
        self.assertEqual(alignment.sequences[314].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[314].annotations["database_references"][0]["reference"], "GENE3D; 6b342fefd99b9784f7e6e28ccfd94ea0/468-656;")
        self.assertEqual(alignment.sequences[314].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Agaricomycetidae; Boletales; Sclerodermatineae; Sclerodermataceae; Scleroderma; Scleroderma citrinum;")
        self.assertEqual(alignment.sequences[315].id, "G5AWT2/357-535")
        self.assertEqual(alignment.sequences[315].annotations["accession"], "G5AWT2")
        self.assertEqual(alignment.sequences[315].annotations["organism"], "Heterocephalus glaber")
        self.assertEqual(alignment.sequences[315].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[315].annotations["database_references"][0]["reference"], "GENE3D; 6d2de924c50dd68be681481991985860/357-535;")
        self.assertEqual(alignment.sequences[315].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Euarchontoglires; Rodentia; Hystricomorpha; Bathyergidae; Heterocephalus; Heterocephalus glaber;")
        self.assertEqual(alignment.sequences[316].id, "V2WYP5/456-639")
        self.assertEqual(alignment.sequences[316].annotations["accession"], "V2WYP5")
        self.assertEqual(alignment.sequences[316].annotations["organism"], "Moniliophthora roreri MCA 2997")
        self.assertEqual(alignment.sequences[316].description, "Atp-dependent rna helicase")
        self.assertEqual(alignment.sequences[316].annotations["database_references"][0]["reference"], "GENE3D; 6e0ea0ecf94888c99071fc441a74adeb/456-639;")
        self.assertEqual(alignment.sequences[316].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Agaricomycetidae; Agaricales; Marasmiaceae; Moniliophthora; Moniliophthora roreri;")
        self.assertEqual(alignment.sequences[317].id, "B1H1U3/491-678")
        self.assertEqual(alignment.sequences[317].annotations["accession"], "B1H1U3")
        self.assertEqual(alignment.sequences[317].annotations["organism"], "Xenopus laevis")
        self.assertEqual(alignment.sequences[317].description, "LOC100158308 protein")
        self.assertEqual(alignment.sequences[317].annotations["database_references"][0]["reference"], "GENE3D; 83d6e14617daf75d1a2fe30f6ab1f642/491-678;")
        self.assertEqual(alignment.sequences[317].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Amphibia; Batrachia; Anura; Pipoidea; Pipidae; Xenopodinae; Xenopus; Xenopus; Xenopus laevis;")
        self.assertEqual(alignment.sequences[318].id, "A0A093Q9S1/388-569")
        self.assertEqual(alignment.sequences[318].annotations["accession"], "A0A093Q9S1")
        self.assertEqual(alignment.sequences[318].annotations["organism"], "Manacus vitellinus")
        self.assertEqual(alignment.sequences[318].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[318].annotations["database_references"][0]["reference"], "GENE3D; 75abd5d07d5f85b5cfa5683172f53f64/388-569;")
        self.assertEqual(alignment.sequences[318].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Aves; Neognathae; Passeriformes; Pipridae; Manacus; Manacus vitellinus;")
        self.assertEqual(alignment.sequences[319].id, "B4QMY0/422-682")
        self.assertEqual(alignment.sequences[319].annotations["accession"], "B4QMY0")
        self.assertEqual(alignment.sequences[319].annotations["organism"], "Drosophila simulans")
        self.assertEqual(alignment.sequences[319].description, "GD12444")
        self.assertEqual(alignment.sequences[319].annotations["database_references"][0]["reference"], "GENE3D; 72dbe97b2ff335d688370c36ec251514/422-682;")
        self.assertEqual(alignment.sequences[319].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Brachycera; Muscomorpha; Ephydroidea; Drosophilidae; Drosophilinae; Drosophilini; Drosophila; Sophophora; melanogaster group; melanogaster subgroup; Drosophila simulans;")
        self.assertEqual(alignment.sequences[320].id, "W5U5C5/471-657")
        self.assertEqual(alignment.sequences[320].annotations["accession"], "W5U5C5")
        self.assertEqual(alignment.sequences[320].annotations["organism"], "Ictalurus punctatus")
        self.assertEqual(alignment.sequences[320].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[320].annotations["database_references"][0]["reference"], "GENE3D; 88691de03a50c0301d1380017e4e38e0/471-657;")
        self.assertEqual(alignment.sequences[320].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Actinopterygii; Actinopteri; Neopterygii; Teleostei; Characiphysae; Siluriformes; Siluroidei; Ictaluridae; Ictalurus; Ictalurus punctatus;")
        self.assertEqual(alignment.sequences[321].id, "A0A182WBI4/443-669")
        self.assertEqual(alignment.sequences[321].annotations["accession"], "A0A182WBI4")
        self.assertEqual(alignment.sequences[321].annotations["organism"], "Anopheles minimus")
        self.assertEqual(alignment.sequences[321].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[321].annotations["database_references"][0]["reference"], "GENE3D; 9a00240578851404ecdaae5ff3ad982f/443-669;")
        self.assertEqual(alignment.sequences[321].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Nematocera; Culicomorpha; Culicoidea; Culicidae; Anophelinae; Anopheles; Cellia; minimus group; Anopheles minimus;")
        self.assertEqual(alignment.sequences[322].id, "A0A0S7ID16/3-175")
        self.assertEqual(alignment.sequences[322].annotations["accession"], "A0A0S7ID16")
        self.assertEqual(alignment.sequences[322].annotations["organism"], "Poeciliopsis prolifica")
        self.assertEqual(alignment.sequences[322].description, "DDX51")
        self.assertEqual(alignment.sequences[322].annotations["database_references"][0]["reference"], "GENE3D; 8a607236c5c95ae675afa7dfe6bef6db/3-175;")
        self.assertEqual(alignment.sequences[322].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Actinopterygii; Actinopteri; Neopterygii; Teleostei; Atherinomorphae; Cyprinodontiformes; Cyprinodontoidei; Poeciliidae; Poeciliinae; Poeciliopsis; Poeciliopsis prolifica;")
        self.assertEqual(alignment.sequences[323].id, "A0A023GL25/305-505")
        self.assertEqual(alignment.sequences[323].annotations["accession"], "A0A023GL25")
        self.assertEqual(alignment.sequences[323].annotations["organism"], "Amblyomma triste")
        self.assertEqual(alignment.sequences[323].description, "Putative dead-box atp-dependent rna helicase")
        self.assertEqual(alignment.sequences[323].annotations["database_references"][0]["reference"], "GENE3D; 9ca06d2f76f75f7d4cf172b635edc045/305-505;")
        self.assertEqual(alignment.sequences[323].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Chelicerata; Arachnida; Acari; Parasitiformes; Ixodida; Ixodoidea; Ixodidae; Amblyomminae; Amblyomma; Amblyomma triste;")
        self.assertEqual(alignment.sequences[324].id, "A0A1A8EQ27/249-436")
        self.assertEqual(alignment.sequences[324].annotations["accession"], "A0A1A8EQ27")
        self.assertEqual(alignment.sequences[324].annotations["organism"], "Nothobranchius korthausae")
        self.assertEqual(alignment.sequences[324].description, "DEAD (Asp-Glu-Ala-Asp) box polypeptide 51")
        self.assertEqual(alignment.sequences[324].annotations["database_references"][0]["reference"], "GENE3D; 8f18078fd7444bea88341e8fff2c23b6/249-436;")
        self.assertEqual(alignment.sequences[324].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Actinopterygii; Actinopteri; Neopterygii; Teleostei; Atherinomorphae; Cyprinodontiformes; Aplocheiloidei; Nothobranchiidae; Nothobranchius; Nothobranchius korthausae;")
        self.assertEqual(alignment.sequences[325].id, "A0A0R3S946/372-602")
        self.assertEqual(alignment.sequences[325].annotations["accession"], "A0A0R3S946")
        self.assertEqual(alignment.sequences[325].annotations["organism"], "Hymenolepis diminuta")
        self.assertEqual(alignment.sequences[325].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[325].annotations["database_references"][0]["reference"], "GENE3D; 79108ca14b325639fd2c9251821773ff/372-602;")
        self.assertEqual(alignment.sequences[325].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Platyhelminthes; Cestoda; Eucestoda; Cyclophyllidea; Hymenolepididae; Hymenolepis; Hymenolepis diminuta;")
        self.assertEqual(alignment.sequences[326].id, "K7L8A6/424-614")
        self.assertEqual(alignment.sequences[326].annotations["accession"], "K7L8A6")
        self.assertEqual(alignment.sequences[326].annotations["organism"], "Glycine max")
        self.assertEqual(alignment.sequences[326].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[326].annotations["database_references"][0]["reference"], "GENE3D; 7967f9c2959273bac3d5ec383db64a11/424-614;")
        self.assertEqual(alignment.sequences[326].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Fabales; Fabaceae; Papilionoideae; Phaseoleae; Glycine; Soja; Glycine max;")
        self.assertEqual(alignment.sequences[327].id, "K9IT15/349-535")
        self.assertEqual(alignment.sequences[327].annotations["accession"], "K9IT15")
        self.assertEqual(alignment.sequences[327].annotations["organism"], "Desmodus rotundus")
        self.assertEqual(alignment.sequences[327].description, "Putative atp-dependent rna helicase")
        self.assertEqual(alignment.sequences[327].annotations["database_references"][0]["reference"], "GENE3D; a609ae0fff1965e749984535700a701b/349-535;")
        self.assertEqual(alignment.sequences[327].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Laurasiatheria; Chiroptera; Microchiroptera; Phyllostomidae; Desmodontinae; Desmodus; Desmodus rotundus;")
        self.assertEqual(alignment.sequences[328].id, "H0ZJ00/308-489")
        self.assertEqual(alignment.sequences[328].annotations["accession"], "H0ZJ00")
        self.assertEqual(alignment.sequences[328].annotations["organism"], "Taeniopygia guttata")
        self.assertEqual(alignment.sequences[328].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[328].annotations["database_references"][0]["reference"], "GENE3D; 83e365440b528f9ad061af877330c474/308-489;")
        self.assertEqual(alignment.sequences[328].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Aves; Neognathae; Passeriformes; Passeroidea; Estrildidae; Estrildinae; Taeniopygia; Taeniopygia guttata;")
        self.assertEqual(alignment.sequences[329].id, "L7MEC9/584-783")
        self.assertEqual(alignment.sequences[329].annotations["accession"], "L7MEC9")
        self.assertEqual(alignment.sequences[329].annotations["organism"], "Rhipicephalus pulchellus")
        self.assertEqual(alignment.sequences[329].description, "Putative atp-dependent rna helicase")
        self.assertEqual(alignment.sequences[329].annotations["database_references"][0]["reference"], "GENE3D; a772f1cd2b44617d5a38670a7081e2dc/584-783;")
        self.assertEqual(alignment.sequences[329].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Chelicerata; Arachnida; Acari; Parasitiformes; Ixodida; Ixodoidea; Ixodidae; Rhipicephalinae; Rhipicephalus; Rhipicephalus; Rhipicephalus pulchellus;")
        self.assertEqual(alignment.sequences[330].id, "I4DNQ9/36-248")
        self.assertEqual(alignment.sequences[330].annotations["accession"], "I4DNQ9")
        self.assertEqual(alignment.sequences[330].annotations["organism"], "Papilio xuthus")
        self.assertEqual(alignment.sequences[330].description, "Dead box protein 73D")
        self.assertEqual(alignment.sequences[330].annotations["database_references"][0]["reference"], "GENE3D; add67c345350a74ce448b3c3fdeed734/36-248;")
        self.assertEqual(alignment.sequences[330].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Lepidoptera; Glossata; Neolepidoptera; Heteroneura; Papilionoidea; Papilionidae; Papilioninae; Papilionini; Papilio; Papilio xuthus;")
        self.assertEqual(alignment.sequences[331].id, "F0WNK9/288-493")
        self.assertEqual(alignment.sequences[331].annotations["accession"], "F0WNK9")
        self.assertEqual(alignment.sequences[331].annotations["organism"], "Albugo laibachii Nc14")
        self.assertEqual(alignment.sequences[331].description, "DEAD/DEAH box RNA helicase putative")
        self.assertEqual(alignment.sequences[331].annotations["database_references"][0]["reference"], "GENE3D; 8991e25f089d795bec2e0bd99aa11c3c/288-493;")
        self.assertEqual(alignment.sequences[331].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Oomycetes; Albuginales; Albuginaceae; Albugo; Albugo laibachii;")
        self.assertEqual(alignment.sequences[332].id, "F8NXN3/469-644")
        self.assertEqual(alignment.sequences[332].annotations["accession"], "F8NXN3")
        self.assertEqual(alignment.sequences[332].annotations["organism"], "Serpula lacrymans var. lacrymans S7.9")
        self.assertEqual(alignment.sequences[332].description, "Putative uncharacterized protein")
        self.assertEqual(alignment.sequences[332].annotations["database_references"][0]["reference"], "GENE3D; 8a81cfed717a51a0f7dd5db5d3bcba82/469-644;")
        self.assertEqual(alignment.sequences[332].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Agaricomycetidae; Boletales; Coniophorineae; Serpulaceae; Serpula; Serpula lacrymans; Serpula lacrymans var. lacrymans;")
        self.assertEqual(alignment.sequences[333].id, "V4RYW9/305-478")
        self.assertEqual(alignment.sequences[333].annotations["accession"], "V4RYW9")
        self.assertEqual(alignment.sequences[333].annotations["organism"], "Citrus clementina")
        self.assertEqual(alignment.sequences[333].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[333].annotations["database_references"][0]["reference"], "GENE3D; 85e69633f58b57ca4684620758b93bc0/305-478;")
        self.assertEqual(alignment.sequences[333].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Sapindales; Rutaceae; Aurantioideae; Citrus; Citrus clementina;")
        self.assertEqual(alignment.sequences[334].id, "A0A182Y2B7/442-676")
        self.assertEqual(alignment.sequences[334].annotations["accession"], "A0A182Y2B7")
        self.assertEqual(alignment.sequences[334].annotations["organism"], "Anopheles stephensi")
        self.assertEqual(alignment.sequences[334].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[334].annotations["database_references"][0]["reference"], "GENE3D; b463a17cf77eca87dc73c60efcb44a4c/442-676;")
        self.assertEqual(alignment.sequences[334].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Nematocera; Culicomorpha; Culicoidea; Culicidae; Anophelinae; Anopheles; Cellia; Anopheles stephensi;")
        self.assertEqual(alignment.sequences[335].id, "A0A0K9PD62/406-604")
        self.assertEqual(alignment.sequences[335].annotations["accession"], "A0A0K9PD62")
        self.assertEqual(alignment.sequences[335].annotations["organism"], "Zostera marina")
        self.assertEqual(alignment.sequences[335].description, "DEAD-box ATP-dependent RNA helicase 1")
        self.assertEqual(alignment.sequences[335].annotations["database_references"][0]["reference"], "GENE3D; 899f0bf36662e53ea000155314b09ca0/406-604;")
        self.assertEqual(alignment.sequences[335].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Alismatales; Zosteraceae; Zostera; Zostera marina;")
        self.assertEqual(alignment.sequences[336].id, "B4PKA4/425-680")
        self.assertEqual(alignment.sequences[336].annotations["accession"], "B4PKA4")
        self.assertEqual(alignment.sequences[336].annotations["organism"], "Drosophila yakuba")
        self.assertEqual(alignment.sequences[336].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[336].annotations["database_references"][0]["reference"], "GENE3D; 91f08015020f6a22d57de3085a278607/425-680;")
        self.assertEqual(alignment.sequences[336].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Brachycera; Muscomorpha; Ephydroidea; Drosophilidae; Drosophilinae; Drosophilini; Drosophila; Sophophora; melanogaster group; melanogaster subgroup; Drosophila yakuba;")
        self.assertEqual(alignment.sequences[337].id, "A0A1A8A3P8/461-647")
        self.assertEqual(alignment.sequences[337].annotations["accession"], "A0A1A8A3P8")
        self.assertEqual(alignment.sequences[337].annotations["organism"], "Nothobranchius furzeri")
        self.assertEqual(alignment.sequences[337].description, "DEAD (Asp-Glu-Ala-Asp) box polypeptide 51")
        self.assertEqual(alignment.sequences[337].annotations["database_references"][0]["reference"], "GENE3D; ac98ca9b95f4efb404e9e3373414ff73/461-647;")
        self.assertEqual(alignment.sequences[337].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Actinopterygii; Actinopteri; Neopterygii; Teleostei; Atherinomorphae; Cyprinodontiformes; Aplocheiloidei; Nothobranchiidae; Nothobranchius; Nothobranchius furzeri;")
        self.assertEqual(alignment.sequences[338].id, "A0A0E0CSJ7/314-519")
        self.assertEqual(alignment.sequences[338].annotations["accession"], "A0A0E0CSJ7")
        self.assertEqual(alignment.sequences[338].annotations["organism"], "Oryza meridionalis")
        self.assertEqual(alignment.sequences[338].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[338].annotations["database_references"][0]["reference"], "GENE3D; 94c83b77dde571f21a2e69b3bcd46136/314-519;")
        self.assertEqual(alignment.sequences[338].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Oryzoideae; Oryzeae; Oryzinae; Oryza; Oryza meridionalis;")
        self.assertEqual(alignment.sequences[339].id, "F6PH64/461-652")
        self.assertEqual(alignment.sequences[339].annotations["accession"], "F6PH64")
        self.assertEqual(alignment.sequences[339].annotations["organism"], "Ciona intestinalis")
        self.assertEqual(alignment.sequences[339].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[339].annotations["database_references"][0]["reference"], "GENE3D; 952baeaccaf98e46302be064973691eb/461-652;")
        self.assertEqual(alignment.sequences[339].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Tunicata; Ascidiacea; Enterogona; Phlebobranchia; Cionidae; Ciona; Ciona intestinalis;")
        self.assertEqual(alignment.sequences[340].id, "A0A0P6BUL9/534-755")
        self.assertEqual(alignment.sequences[340].annotations["accession"], "A0A0P6BUL9")
        self.assertEqual(alignment.sequences[340].annotations["organism"], "Daphnia magna")
        self.assertEqual(alignment.sequences[340].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[340].annotations["database_references"][0]["reference"], "GENE3D; c062349b0c7f6b12a69b152133453210/534-755;")
        self.assertEqual(alignment.sequences[340].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Crustacea; Branchiopoda; Phyllopoda; Diplostraca; Cladocera; Anomopoda; Daphniidae; Daphnia; Daphnia magna;")
        self.assertEqual(alignment.sequences[341].id, "A0A091FQN8/391-578")
        self.assertEqual(alignment.sequences[341].annotations["accession"], "A0A091FQN8")
        self.assertEqual(alignment.sequences[341].annotations["organism"], "Cuculus canorus")
        self.assertEqual(alignment.sequences[341].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[341].annotations["database_references"][0]["reference"], "GENE3D; 91672dd837c25abaa8c6141ab90fa813/391-578;")
        self.assertEqual(alignment.sequences[341].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Aves; Neognathae; Cuculiformes; Cuculidae; Cuculus; Cuculus canorus;")
        self.assertEqual(alignment.sequences[342].id, "A0A093PCE3/401-588")
        self.assertEqual(alignment.sequences[342].annotations["accession"], "A0A093PCE3")
        self.assertEqual(alignment.sequences[342].annotations["organism"], "Pygoscelis adeliae")
        self.assertEqual(alignment.sequences[342].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[342].annotations["database_references"][0]["reference"], "GENE3D; bac9df2db985c5229eb6f49588a3e2cd/401-588;")
        self.assertEqual(alignment.sequences[342].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Aves; Neognathae; Sphenisciformes; Spheniscidae; Pygoscelis; Pygoscelis adeliae;")
        self.assertEqual(alignment.sequences[343].id, "A0A1A8N7J5/150-337")
        self.assertEqual(alignment.sequences[343].annotations["accession"], "A0A1A8N7J5")
        self.assertEqual(alignment.sequences[343].annotations["organism"], "Nothobranchius rachovii")
        self.assertEqual(alignment.sequences[343].description, "DEAD (Asp-Glu-Ala-Asp) box polypeptide 51")
        self.assertEqual(alignment.sequences[343].annotations["database_references"][0]["reference"], "GENE3D; bdeb83bfa12a47bb31b052e2f8d6f654/150-337;")
        self.assertEqual(alignment.sequences[343].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Actinopterygii; Actinopteri; Neopterygii; Teleostei; Atherinomorphae; Cyprinodontiformes; Aplocheiloidei; Nothobranchiidae; Nothobranchius; Nothobranchius rachovii;")
        self.assertEqual(alignment.sequences[344].id, "B0W5M0/423-647")
        self.assertEqual(alignment.sequences[344].annotations["accession"], "B0W5M0")
        self.assertEqual(alignment.sequences[344].annotations["organism"], "Culex quinquefasciatus")
        self.assertEqual(alignment.sequences[344].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[344].annotations["database_references"][0]["reference"], "GENE3D; 9abd3383008389352b4958dc5d4e6ad7/423-647;")
        self.assertEqual(alignment.sequences[344].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Nematocera; Culicomorpha; Culicoidea; Culicidae; Culicinae; Culicini; Culex; Culex; Culex quinquefasciatus;")
        self.assertEqual(alignment.sequences[345].id, "S4NZ25/189-411")
        self.assertEqual(alignment.sequences[345].annotations["accession"], "S4NZ25")
        self.assertEqual(alignment.sequences[345].annotations["organism"], "Pararge aegeria")
        self.assertEqual(alignment.sequences[345].description, "DEAD box ATP-dependent RNA helicase")
        self.assertEqual(alignment.sequences[345].annotations["database_references"][0]["reference"], "GENE3D; d0c6d468df35361e2682b07b3dc25f7d/189-411;")
        self.assertEqual(alignment.sequences[345].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Lepidoptera; Glossata; Neolepidoptera; Heteroneura; Papilionoidea; Nymphalidae; Satyrinae; Satyrini; Parargina; Pararge; Pararge aegeria;")
        self.assertEqual(alignment.sequences[346].id, "A0A091K6V3/385-572")
        self.assertEqual(alignment.sequences[346].annotations["accession"], "A0A091K6V3")
        self.assertEqual(alignment.sequences[346].annotations["organism"], "Egretta garzetta")
        self.assertEqual(alignment.sequences[346].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[346].annotations["database_references"][0]["reference"], "GENE3D; 9cb022eb559d619b16c8cd4d1bc525b5/385-572;")
        self.assertEqual(alignment.sequences[346].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Aves; Neognathae; Pelecaniformes; Ardeidae; Egretta; Egretta garzetta;")
        self.assertEqual(alignment.sequences[347].id, "A0A1E1X2W9/542-747")
        self.assertEqual(alignment.sequences[347].annotations["accession"], "A0A1E1X2W9")
        self.assertEqual(alignment.sequences[347].annotations["organism"], "Amblyomma aureolatum")
        self.assertEqual(alignment.sequences[347].description, "Putative atp-dependent rna helicase")
        self.assertEqual(alignment.sequences[347].annotations["database_references"][0]["reference"], "GENE3D; d16184d5dead7b605e160d00622fabee/542-747;")
        self.assertEqual(alignment.sequences[347].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Chelicerata; Arachnida; Acari; Parasitiformes; Ixodida; Ixodoidea; Ixodidae; Amblyomminae; Amblyomma; Amblyomma aureolatum;")
        self.assertEqual(alignment.sequences[348].id, "A0A165M8L1/381-557")
        self.assertEqual(alignment.sequences[348].annotations["accession"], "A0A165M8L1")
        self.assertEqual(alignment.sequences[348].annotations["organism"], "Neolentinus lepideus HHB14362 ss-1")
        self.assertEqual(alignment.sequences[348].description, "DEAD-domain-containing protein")
        self.assertEqual(alignment.sequences[348].annotations["database_references"][0]["reference"], "GENE3D; aa029de6309beab1ea56f2e01f401364/381-557;")
        self.assertEqual(alignment.sequences[348].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Gloeophyllales; Gloeophyllaceae; Neolentinus; Neolentinus lepideus;")
        self.assertEqual(alignment.sequences[349].id, "A0A1I8INV5/337-507")
        self.assertEqual(alignment.sequences[349].annotations["accession"], "A0A1I8INV5")
        self.assertEqual(alignment.sequences[349].annotations["organism"], "Macrostomum lignano")
        self.assertEqual(alignment.sequences[349].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[349].annotations["database_references"][0]["reference"], "GENE3D; d8a6ec8268e8ce02787a9cf2273b47b4/337-507;")
        self.assertEqual(alignment.sequences[349].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Platyhelminthes; Macrostomida; Macrostomidae; Macrostomum; Macrostomum lignano;")
        self.assertEqual(alignment.sequences[350].id, "A0A067NC19/370-525")
        self.assertEqual(alignment.sequences[350].annotations["accession"], "A0A067NC19")
        self.assertEqual(alignment.sequences[350].annotations["organism"], "Pleurotus ostreatus PC15")
        self.assertEqual(alignment.sequences[350].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[350].annotations["database_references"][0]["reference"], "GENE3D; a2f3bf763e333b94494631b0bbf9e1c5/370-525;")
        self.assertEqual(alignment.sequences[350].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Agaricomycetidae; Agaricales; Pleurotaceae; Pleurotus; Pleurotus ostreatus;")
        self.assertEqual(alignment.sequences[351].id, "A0A1D5WJX1/236-394")
        self.assertEqual(alignment.sequences[351].annotations["accession"], "A0A1D5WJX1")
        self.assertEqual(alignment.sequences[351].annotations["organism"], "Triticum aestivum")
        self.assertEqual(alignment.sequences[351].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[351].annotations["database_references"][0]["reference"], "GENE3D; a34687ef6830ae882754408668d2c688/236-394;")
        self.assertEqual(alignment.sequences[351].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Pooideae; Triticeae; Triticinae; Triticum; Triticum aestivum;")
        self.assertEqual(alignment.sequences[352].id, "H9IZG9/396-607")
        self.assertEqual(alignment.sequences[352].annotations["accession"], "H9IZG9")
        self.assertEqual(alignment.sequences[352].annotations["organism"], "Bombyx mori")
        self.assertEqual(alignment.sequences[352].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[352].annotations["database_references"][0]["reference"], "GENE3D; a34935d8231f31cfc718e44f61b2509e/396-607;")
        self.assertEqual(alignment.sequences[352].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Lepidoptera; Glossata; Neolepidoptera; Heteroneura; Bombycoidea; Bombycidae; Bombycinae; Bombyx; Bombyx mori;")
        self.assertEqual(alignment.sequences[353].id, "A0A0A1NCA1/350-533")
        self.assertEqual(alignment.sequences[353].annotations["accession"], "A0A0A1NCA1")
        self.assertEqual(alignment.sequences[353].annotations["organism"], "Rhizopus microsporus")
        self.assertEqual(alignment.sequences[353].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[353].annotations["database_references"][0]["reference"], "GENE3D; abe9ccf481130a52b571e882b408eebe/350-533;")
        self.assertEqual(alignment.sequences[353].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Mucoromycota; Mucoromycotina; Mucorales; Mucorineae; Rhizopodaceae; Rhizopus; Rhizopus microsporus;")
        self.assertEqual(alignment.sequences[354].id, "A0A1J3HZV6/323-525")
        self.assertEqual(alignment.sequences[354].annotations["accession"], "A0A1J3HZV6")
        self.assertEqual(alignment.sequences[354].annotations["organism"], "Noccaea caerulescens")
        self.assertEqual(alignment.sequences[354].description, "DEAD-box ATP-dependent RNA helicase 1")
        self.assertEqual(alignment.sequences[354].annotations["database_references"][0]["reference"], "GENE3D; dc2da93f2bf879895cbf2adc932d57a3/323-525;")
        self.assertEqual(alignment.sequences[354].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Brassicales; Brassicaceae; Coluteocarpeae; Noccaea; Noccaea caerulescens;")
        self.assertEqual(alignment.sequences[355].id, "I1IDG3/310-456")
        self.assertEqual(alignment.sequences[355].annotations["accession"], "I1IDG3")
        self.assertEqual(alignment.sequences[355].annotations["organism"], "Brachypodium distachyon")
        self.assertEqual(alignment.sequences[355].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[355].annotations["database_references"][0]["reference"], "GENE3D; aef1579f67d9b0f8deaf1fed7ee5ed88/310-456;")
        self.assertEqual(alignment.sequences[355].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Pooideae; Brachypodieae; Brachypodium; Brachypodium distachyon;")
        self.assertEqual(alignment.sequences[356].id, "D8Q409/381-562")
        self.assertEqual(alignment.sequences[356].annotations["accession"], "D8Q409")
        self.assertEqual(alignment.sequences[356].annotations["organism"], "Schizophyllum commune H4-8")
        self.assertEqual(alignment.sequences[356].description, "Putative uncharacterized protein")
        self.assertEqual(alignment.sequences[356].annotations["database_references"][0]["reference"], "GENE3D; a8f07ecb38d8ce9dec6f6f48ffe64671/381-562;")
        self.assertEqual(alignment.sequences[356].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Agaricomycetidae; Agaricales; Schizophyllaceae; Schizophyllum; Schizophyllum commune;")
        self.assertEqual(alignment.sequences[357].id, "A0A0B6ZF66/391-580")
        self.assertEqual(alignment.sequences[357].annotations["accession"], "A0A0B6ZF66")
        self.assertEqual(alignment.sequences[357].annotations["organism"], "Arion vulgaris")
        self.assertEqual(alignment.sequences[357].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[357].annotations["database_references"][0]["reference"], "GENE3D; e24508be500e90ed0226ae459607c9c3/391-580;")
        self.assertEqual(alignment.sequences[357].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Mollusca; Gastropoda; Stylommatophora; Arionoidea; Arionidae; Arion; Arion vulgaris;")
        self.assertEqual(alignment.sequences[358].id, "A0A0C7BFR2/356-539")
        self.assertEqual(alignment.sequences[358].annotations["accession"], "A0A0C7BFR2")
        self.assertEqual(alignment.sequences[358].annotations["organism"], "Rhizopus microsporus")
        self.assertEqual(alignment.sequences[358].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[358].annotations["database_references"][0]["reference"], "GENE3D; e4f6ff16c87bb7c1df2af16351a31155/356-539;")
        self.assertEqual(alignment.sequences[358].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Mucoromycota; Mucoromycotina; Mucorales; Mucorineae; Rhizopodaceae; Rhizopus; Rhizopus microsporus;")
        self.assertEqual(alignment.sequences[359].id, "A0A0A1WSX0/456-711")
        self.assertEqual(alignment.sequences[359].annotations["accession"], "A0A0A1WSX0")
        self.assertEqual(alignment.sequences[359].annotations["organism"], "Bactrocera cucurbitae")
        self.assertEqual(alignment.sequences[359].description, "Probable ATP-dependent RNA helicase Dbp73D")
        self.assertEqual(alignment.sequences[359].annotations["database_references"][0]["reference"], "GENE3D; e68a01aeb429199093bff328980b5d7d/456-711;")
        self.assertEqual(alignment.sequences[359].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Brachycera; Muscomorpha; Tephritoidea; Tephritidae; Dacinae; Dacini; Bactrocera; Zeugodacus; Bactrocera cucurbitae;")
        self.assertEqual(alignment.sequences[360].id, "H2NJ65/465-651")
        self.assertEqual(alignment.sequences[360].annotations["accession"], "H2NJ65")
        self.assertEqual(alignment.sequences[360].annotations["organism"], "Pongo abelii")
        self.assertEqual(alignment.sequences[360].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[360].annotations["database_references"][0]["reference"], "GENE3D; ad768e9881d039abd510126f3972dcb9/465-651;")
        self.assertEqual(alignment.sequences[360].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Euarchontoglires; Primates; Haplorrhini; Simiiformes; Catarrhini; Hominoidea; Hominidae; Ponginae; Pongo; Pongo abelii;")
        self.assertEqual(alignment.sequences[361].id, "A0A0P5U7P8/367-588")
        self.assertEqual(alignment.sequences[361].annotations["accession"], "A0A0P5U7P8")
        self.assertEqual(alignment.sequences[361].annotations["organism"], "Daphnia magna")
        self.assertEqual(alignment.sequences[361].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[361].annotations["database_references"][0]["reference"], "GENE3D; e7a0b04c0b8c9f080d38bca8a76c2793/367-588;")
        self.assertEqual(alignment.sequences[361].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Crustacea; Branchiopoda; Phyllopoda; Diplostraca; Cladocera; Anomopoda; Daphniidae; Daphnia; Daphnia magna;")
        self.assertEqual(alignment.sequences[362].id, "A0A0R3UIR4/369-550")
        self.assertEqual(alignment.sequences[362].annotations["accession"], "A0A0R3UIR4")
        self.assertEqual(alignment.sequences[362].annotations["organism"], "Mesocestoides corti")
        self.assertEqual(alignment.sequences[362].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[362].annotations["database_references"][0]["reference"], "GENE3D; ae151ea00351d1de985fe12e53d7c729/369-550;")
        self.assertEqual(alignment.sequences[362].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Platyhelminthes; Cestoda; Eucestoda; Cyclophyllidea; Mesocestoididae; Mesocestoides; Mesocestoides corti;")
        self.assertEqual(alignment.sequences[363].id, "A0A182FEM3/434-667")
        self.assertEqual(alignment.sequences[363].annotations["accession"], "A0A182FEM3")
        self.assertEqual(alignment.sequences[363].annotations["organism"], "Anopheles albimanus")
        self.assertEqual(alignment.sequences[363].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[363].annotations["database_references"][0]["reference"], "GENE3D; e9b22df3ac2c476d8a798363f89bf742/434-667;")
        self.assertEqual(alignment.sequences[363].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Nematocera; Culicomorpha; Culicoidea; Culicidae; Anophelinae; Anopheles; Nyssorhynchus; Anopheles albimanus;")
        self.assertEqual(alignment.sequences[364].id, "A0A1D2NIM7/362-583")
        self.assertEqual(alignment.sequences[364].annotations["accession"], "A0A1D2NIM7")
        self.assertEqual(alignment.sequences[364].annotations["organism"], "Orchesella cincta")
        self.assertEqual(alignment.sequences[364].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[364].annotations["database_references"][0]["reference"], "GENE3D; ea82d047be6acc90f68ba8368fe88f1f/362-583;")
        self.assertEqual(alignment.sequences[364].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Collembola; Entomobryomorpha; Entomobryoidea; Entomobryidae; Orchesellinae; Orchesella; Orchesella cincta;")
        self.assertEqual(alignment.sequences[365].id, "F1R9W2/466-652")
        self.assertEqual(alignment.sequences[365].annotations["accession"], "F1R9W2")
        self.assertEqual(alignment.sequences[365].annotations["organism"], "Danio rerio")
        self.assertEqual(alignment.sequences[365].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[365].annotations["database_references"][0]["reference"], "GENE3D; b0ae3b27fb858bea10f6860caa9b2cf7/466-652;")
        self.assertEqual(alignment.sequences[365].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Actinopterygii; Actinopteri; Neopterygii; Teleostei; Cypriniphysae; Cypriniformes; Cyprinoidea; Cyprinidae; Danio; Danio rerio;")
        self.assertEqual(alignment.sequences[366].id, "A0A0B7FFP8/436-634")
        self.assertEqual(alignment.sequences[366].annotations["accession"], "A0A0B7FFP8")
        self.assertEqual(alignment.sequences[366].annotations["organism"], "Rhizoctonia solani AG-1 IB")
        self.assertEqual(alignment.sequences[366].description, "ATP-dependent RNA helicase dbp6 OS=Schizosaccharomyces pombe (Strain 972 / ATCC 24843) GN=dbp6 PE=2 SV=1")
        self.assertEqual(alignment.sequences[366].annotations["database_references"][0]["reference"], "GENE3D; ec6c719dc70cbb85ca563966cff01ae9/436-634;")
        self.assertEqual(alignment.sequences[366].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Cantharellales; Ceratobasidiaceae; Rhizoctonia; Rhizoctonia solani;")
        self.assertEqual(alignment.sequences[367].id, "A0A096MLS6/560-746")
        self.assertEqual(alignment.sequences[367].annotations["accession"], "A0A096MLS6")
        self.assertEqual(alignment.sequences[367].annotations["organism"], "Papio anubis")
        self.assertEqual(alignment.sequences[367].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[367].annotations["database_references"][0]["reference"], "GENE3D; be112fb30837f5ad3c04ee1fbd1a42c4/560-746;")
        self.assertEqual(alignment.sequences[367].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Mammalia; Euarchontoglires; Primates; Haplorrhini; Simiiformes; Catarrhini; Cercopithecoidea; Cercopithecidae; Cercopithecinae; Papio; Papio anubis;")
        self.assertEqual(alignment.sequences[368].id, "A0A074SSV6/532-714")
        self.assertEqual(alignment.sequences[368].annotations["accession"], "A0A074SSV6")
        self.assertEqual(alignment.sequences[368].annotations["organism"], "Rhizoctonia solani 123E")
        self.assertEqual(alignment.sequences[368].description, "DEAD-box helicase family protein")
        self.assertEqual(alignment.sequences[368].annotations["database_references"][0]["reference"], "GENE3D; b549fd85456c9217199090c4b4fb716b/532-714;")
        self.assertEqual(alignment.sequences[368].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Cantharellales; Ceratobasidiaceae; Rhizoctonia; Rhizoctonia solani;")
        self.assertEqual(alignment.sequences[369].id, "R7VB28/390-576")
        self.assertEqual(alignment.sequences[369].annotations["accession"], "R7VB28")
        self.assertEqual(alignment.sequences[369].annotations["organism"], "Capitella teleta")
        self.assertEqual(alignment.sequences[369].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[369].annotations["database_references"][0]["reference"], "GENE3D; bfbf8b4c043bc8f1c7a46b51e59a3aaf/390-576;")
        self.assertEqual(alignment.sequences[369].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Annelida; Polychaeta; Scolecida; Capitellida; Capitellidae; Capitella; Capitella teleta;")
        self.assertEqual(alignment.sequences[370].id, "A0A182MFL8/441-676")
        self.assertEqual(alignment.sequences[370].annotations["accession"], "A0A182MFL8")
        self.assertEqual(alignment.sequences[370].annotations["organism"], "Anopheles culicifacies")
        self.assertEqual(alignment.sequences[370].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[370].annotations["database_references"][0]["reference"], "GENE3D; f38c65a72273f847711908d3d087cceb/441-676;")
        self.assertEqual(alignment.sequences[370].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Diptera; Nematocera; Culicomorpha; Culicoidea; Culicidae; Anophelinae; Anopheles; Cellia; Anopheles culicifacies;")
        self.assertEqual(alignment.sequences[371].id, "X8J400/531-724")
        self.assertEqual(alignment.sequences[371].annotations["accession"], "X8J400")
        self.assertEqual(alignment.sequences[371].annotations["organism"], "Rhizoctonia solani AG-3 Rhs1AP")
        self.assertEqual(alignment.sequences[371].description, "DEAD-box helicase family protein")
        self.assertEqual(alignment.sequences[371].annotations["database_references"][0]["reference"], "GENE3D; c09fe832ff681c75dd8b0cf09b4421e6/531-724;")
        self.assertEqual(alignment.sequences[371].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Cantharellales; Ceratobasidiaceae; Rhizoctonia; Rhizoctonia solani;")
        self.assertEqual(alignment.sequences[372].id, "A8NUN2/496-690")
        self.assertEqual(alignment.sequences[372].annotations["accession"], "A8NUN2")
        self.assertEqual(alignment.sequences[372].annotations["organism"], "Coprinopsis cinerea okayama7#130")
        self.assertEqual(alignment.sequences[372].description, "ATP-dependent RNA helicase")
        self.assertEqual(alignment.sequences[372].annotations["database_references"][0]["reference"], "GENE3D; c161543d15bd3c3e4dd2bc8c6fb8dc11/496-690;")
        self.assertEqual(alignment.sequences[372].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Agaricomycetidae; Agaricales; Psathyrellaceae; Coprinopsis; Coprinopsis cinerea;")
        self.assertEqual(alignment.sequences[373].id, "A0A146HPL6/2369-2556")
        self.assertEqual(alignment.sequences[373].annotations["accession"], "A0A146HPL6")
        self.assertEqual(alignment.sequences[373].annotations["organism"], "Mycena chlorophos")
        self.assertEqual(alignment.sequences[373].description, "ABC protein")
        self.assertEqual(alignment.sequences[373].annotations["database_references"][0]["reference"], "GENE3D; f5e7ae9f1e93232c53268d4e93a59d20/2369-2556;")
        self.assertEqual(alignment.sequences[373].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Agaricomycetidae; Agaricales; Tricholomataceae; Mycena; Mycena chlorophos;")
        self.assertEqual(alignment.sequences[374].id, "A0A151N4A6/546-735")
        self.assertEqual(alignment.sequences[374].annotations["accession"], "A0A151N4A6")
        self.assertEqual(alignment.sequences[374].annotations["organism"], "Alligator mississippiensis")
        self.assertEqual(alignment.sequences[374].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[374].annotations["database_references"][0]["reference"], "GENE3D; b9028b0a5a1288c9a12e5a48738d6dd4/546-735;")
        self.assertEqual(alignment.sequences[374].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Crocodylia; Alligatoridae; Alligatorinae; Alligator; Alligator mississippiensis;")
        self.assertEqual(alignment.sequences[375].id, "A0A0D7B243/447-638")
        self.assertEqual(alignment.sequences[375].annotations["accession"], "A0A0D7B243")
        self.assertEqual(alignment.sequences[375].annotations["organism"], "Cylindrobasidium torrendii FP15055 ss-10")
        self.assertEqual(alignment.sequences[375].description, "DEAD-domain-containing protein")
        self.assertEqual(alignment.sequences[375].annotations["database_references"][0]["reference"], "GENE3D; c1c0f3e8a780990cb03b798035927d46/447-638;")
        self.assertEqual(alignment.sequences[375].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Agaricomycetidae; Agaricales; Physalacriaceae; Cylindrobasidium; Cylindrobasidium torrendii;")
        self.assertEqual(alignment.sequences[376].id, "M7B4U2/629-801")
        self.assertEqual(alignment.sequences[376].annotations["accession"], "M7B4U2")
        self.assertEqual(alignment.sequences[376].annotations["organism"], "Chelonia mydas")
        self.assertEqual(alignment.sequences[376].description, "ATP-dependent RNA helicase DDX51")
        self.assertEqual(alignment.sequences[376].annotations["database_references"][0]["reference"], "GENE3D; d14d2874c862bf5363b4088597d6fbcf/629-801;")
        self.assertEqual(alignment.sequences[376].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Chordata; Craniata; Testudines; Cryptodira; Chelonioidea; Cheloniidae; Chelonia; Chelonia mydas;")
        self.assertEqual(alignment.sequences[377].id, "W4KCF3/508-707")
        self.assertEqual(alignment.sequences[377].annotations["accession"], "W4KCF3")
        self.assertEqual(alignment.sequences[377].annotations["organism"], "Heterobasidion irregulare TC 32-1")
        self.assertEqual(alignment.sequences[377].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[377].annotations["database_references"][0]["reference"], "GENE3D; cda080d69eac0c49267a446095a33e4f/508-707;")
        self.assertEqual(alignment.sequences[377].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Russulales; Bondarzewiaceae; Heterobasidion; Heterobasidion irregulare;")
        self.assertEqual(alignment.sequences[378].id, "A0A0E0K6A5/284-495")
        self.assertEqual(alignment.sequences[378].annotations["accession"], "A0A0E0K6A5")
        self.assertEqual(alignment.sequences[378].annotations["organism"], "Oryza punctata")
        self.assertEqual(alignment.sequences[378].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[378].annotations["database_references"][0]["reference"], "GENE3D; dbbcdb5f3fd0b4d6874976f77e7d7f9f/284-495;")
        self.assertEqual(alignment.sequences[378].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Oryzoideae; Oryzeae; Oryzinae; Oryza; Oryza punctata;")
        self.assertEqual(alignment.sequences[379].id, "A0A0K6FQL6/435-629")
        self.assertEqual(alignment.sequences[379].annotations["accession"], "A0A0K6FQL6")
        self.assertEqual(alignment.sequences[379].annotations["organism"], "Rhizoctonia solani")
        self.assertEqual(alignment.sequences[379].description, "ATP-dependent RNA helicase dbp6 [Schizosaccharomyces pombe 972h-]")
        self.assertEqual(alignment.sequences[379].annotations["database_references"][0]["reference"], "GENE3D; d63e795201e792f272a83696d147c1da/435-629;")
        self.assertEqual(alignment.sequences[379].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Cantharellales; Ceratobasidiaceae; Rhizoctonia; Rhizoctonia solani;")
        self.assertEqual(alignment.sequences[380].id, "K7M6A5/208-401")
        self.assertEqual(alignment.sequences[380].annotations["accession"], "K7M6A5")
        self.assertEqual(alignment.sequences[380].annotations["organism"], "Glycine max")
        self.assertEqual(alignment.sequences[380].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[380].annotations["database_references"][0]["reference"], "GENE3D; e3d04607984e6ae5d1b6ad6d98bc56ac/208-401;")
        self.assertEqual(alignment.sequences[380].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Fabales; Fabaceae; Papilionoideae; Phaseoleae; Glycine; Soja; Glycine max;")
        self.assertEqual(alignment.sequences[381].id, "S7Q3N2/248-444")
        self.assertEqual(alignment.sequences[381].annotations["accession"], "S7Q3N2")
        self.assertEqual(alignment.sequences[381].annotations["organism"], "Gloeophyllum trabeum ATCC 11539")
        self.assertEqual(alignment.sequences[381].description, "DEAD-domain-containing protein")
        self.assertEqual(alignment.sequences[381].annotations["database_references"][0]["reference"], "GENE3D; e5db85a9ee8f66d9bf26741673af4849/248-444;")
        self.assertEqual(alignment.sequences[381].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Agaricomycotina; Agaricomycetes; Gloeophyllales; Gloeophyllaceae; Gloeophyllum; Gloeophyllum trabeum;")
        self.assertEqual(alignment.sequences[382].id, "F0ZBG3/286-558")
        self.assertEqual(alignment.sequences[382].annotations["accession"], "F0ZBG3")
        self.assertEqual(alignment.sequences[382].annotations["organism"], "Dictyostelium purpureum")
        self.assertEqual(alignment.sequences[382].description, "Putative uncharacterized protein")
        self.assertEqual(alignment.sequences[382].annotations["database_references"][0]["reference"], "GENE3D; e698280381d4e5395b3cc6cca293c514/286-558;")
        self.assertEqual(alignment.sequences[382].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Dictyosteliida; Dictyostelium; Dictyostelium purpureum;")
        self.assertEqual(alignment.sequences[383].id, "R7W0L5/311-512")
        self.assertEqual(alignment.sequences[383].annotations["accession"], "R7W0L5")
        self.assertEqual(alignment.sequences[383].annotations["organism"], "Aegilops tauschii")
        self.assertEqual(alignment.sequences[383].description, "DEAD-box ATP-dependent RNA helicase 1")
        self.assertEqual(alignment.sequences[383].annotations["database_references"][0]["reference"], "GENE3D; f31ed050e25a4c299a5846cb78128c84/311-512;")
        self.assertEqual(alignment.sequences[383].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Pooideae; Triticeae; Triticinae; Aegilops; Aegilops tauschii;")
        self.assertEqual(alignment.sequences[384].id, "A0A026WPF4/355-560")
        self.assertEqual(alignment.sequences[384].annotations["accession"], "A0A026WPF4")
        self.assertEqual(alignment.sequences[384].annotations["organism"], "Cerapachys biroi")
        self.assertEqual(alignment.sequences[384].description, "Putative ATP-dependent RNA helicase Dbp73D")
        self.assertEqual(alignment.sequences[384].annotations["database_references"][0]["reference"], "GENE3D; f3b620fc0ab7191c30bf8de68f1a1485/355-560;")
        self.assertEqual(alignment.sequences[384].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Arthropoda; Hexapoda; Insecta; Pterygota; Neoptera; Holometabola; Hymenoptera; Apocrita; Aculeata; Vespoidea; Formicidae; Cerapachyinae; Cerapachyini; Cerapachys; Cerapachys biroi;")
        self.assertEqual(alignment.sequences[385].id, "D3B3Z5/312-555")
        self.assertEqual(alignment.sequences[385].annotations["accession"], "D3B3Z5")
        self.assertEqual(alignment.sequences[385].annotations["organism"], "Polysphondylium pallidum")
        self.assertEqual(alignment.sequences[385].description, "Putative RNA helicase")
        self.assertEqual(alignment.sequences[385].annotations["database_references"][0]["reference"], "GENE3D; f4711c6ba63a5d2098a42ab4a6b9bdc0/312-555;")
        self.assertEqual(alignment.sequences[385].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Dictyosteliida; Polysphondylium; Polysphondylium pallidum;")
        self.assertEqual(alignment.sequences[386].id, "M1C3V3/311-513")
        self.assertEqual(alignment.sequences[386].annotations["accession"], "M1C3V3")
        self.assertEqual(alignment.sequences[386].annotations["organism"], "Solanum tuberosum")
        self.assertEqual(alignment.sequences[386].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[386].annotations["database_references"][0]["reference"], "GENE3D; fca864ff507153fdc87e10eb97fa4b30/311-513;")
        self.assertEqual(alignment.sequences[386].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; asterids; Solanales; Solanaceae; Solanoideae; Solaneae; Solanum; Solanum tuberosum;")
        self.assertEqual(alignment.sequences[387].id, "D8TY64/345-581")
        self.assertEqual(alignment.sequences[387].annotations["accession"], "D8TY64")
        self.assertEqual(alignment.sequences[387].annotations["organism"], "Volvox carteri f. nagariensis")
        self.assertEqual(alignment.sequences[387].description, "Putative uncharacterized protein")
        self.assertEqual(alignment.sequences[387].annotations["database_references"][0]["reference"], "GENE3D; fc1ee5b79ff2fb8ce6478f93b25da840/345-581;")
        self.assertEqual(alignment.sequences[387].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Chlorophyta; Chlorophyceae; Chlamydomonadales; Volvocaceae; Volvox; Volvox carteri; Volvox carteri f. nagariensis;")
        self.assertEqual(alignment.sequences[388].id, "V4ULK0/299-502")
        self.assertEqual(alignment.sequences[388].annotations["accession"], "V4ULK0")
        self.assertEqual(alignment.sequences[388].annotations["organism"], "Citrus clementina")
        self.assertEqual(alignment.sequences[388].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[388].annotations["database_references"][0]["reference"], "GENE3D; ff1369e42b0abd49e2dc4b543f81c627/299-502;")
        self.assertEqual(alignment.sequences[388].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; rosids; Sapindales; Rutaceae; Aurantioideae; Citrus; Citrus clementina;")
        self.assertEqual(alignment.sequences[389].id, "A0A0D3FBK7/156-356")
        self.assertEqual(alignment.sequences[389].annotations["accession"], "A0A0D3FBK7")
        self.assertEqual(alignment.sequences[389].annotations["organism"], "Oryza barthii")
        self.assertEqual(alignment.sequences[389].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[389].annotations["database_references"][0]["reference"], "GENE3D; fff61735f5304cd3759bcde5ba7bb22a/156-356;")
        self.assertEqual(alignment.sequences[389].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Liliopsida; Petrosaviidae; Poales; Poaceae; Oryzoideae; Oryzeae; Oryzinae; Oryza; Oryza barthii;")
        self.assertEqual(alignment.sequences[390].id, "A0A0C4F3R5/663-863")
        self.assertEqual(alignment.sequences[390].annotations["accession"], "A0A0C4F3R5")
        self.assertEqual(alignment.sequences[390].annotations["organism"], "Puccinia triticina 1-1 BBBD Race 1")
        self.assertEqual(alignment.sequences[390].description, "Uncharacterized protein")
        self.assertEqual(alignment.sequences[390].annotations["database_references"][0]["reference"], "GENE3D; 7422d6818c19222fdee1b1a28f19c71c/663-863;")
        self.assertEqual(alignment.sequences[390].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Fungi; Dikarya; Basidiomycota; Pucciniomycotina; Pucciniomycetes; Pucciniales; Pucciniaceae; Puccinia; Puccinia triticina;")
        self.assertEqual(alignment.sequences[391].id, "G7YX55/878-1092")
        self.assertEqual(alignment.sequences[391].annotations["accession"], "G7YX55")
        self.assertEqual(alignment.sequences[391].annotations["organism"], "Clonorchis sinensis")
        self.assertEqual(alignment.sequences[391].description, "ATP-dependent RNA helicase DDX51/DBP6")
        self.assertEqual(alignment.sequences[391].annotations["database_references"][0]["reference"], "GENE3D; b62c3dde689ddcf638535c07dc61ccf3/878-1092;")
        self.assertEqual(alignment.sequences[391].annotations["database_references"][1]["reference"], "ORG; Eukaryota; Metazoa; Platyhelminthes; Trematoda; Digenea; Opisthorchiida; Opisthorchiata; Opisthorchiidae; Clonorchis; Clonorchis sinensis;")
        self.assertEqual(alignment.sequences[392].id, "G4YF51/316-544")
        self.assertEqual(alignment.sequences[392].annotations["accession"], "G4YF51")
        self.assertEqual(alignment.sequences[392].annotations["organism"], "")
        self.assertEqual(alignment.sequences[392].description, "Putative uncharacterized protein")
        self.assertEqual(alignment.sequences[392].annotations["database_references"][0]["reference"], "GENE3D; 0eb989d2e9eee4efe6ce613965168467/316-544;")
        self.assertEqual(alignment.sequences[392].annotations["database_references"][1]["reference"], "ORG;")
        self.assertEqual(alignment.annotations["trusted cutoff"], "15.7 1.1E-04")
        self.assertEqual(alignment.sequences[0].seq, "LQEYHVSVSSEKPILLYHLIHSKNLTNILCFVKSNEAAARLHRLLELIHESLNQSFSCGLFTSSLSRDERKKIISRFATGDLNLLVCSDLMARGIDVANTQNVINYDPPLSVRSYVHRIGRTARAGREGFAWTLVQSHEGHHFSKLVKQLRRTLPIKRIKIEFSHISEEFVVAYDKALEALRVEVFNSRYPQQKS")
        self.assertEqual(alignment.sequences[1].seq, "KEHMLVTSSGSKPLMLFYLLHAKSLSNVLCFTKSVESAQRLAKLVELFETEYASRSEGADNQGFKVKEFSGSLPVPQRKKILAAFVAGEIDMLICSDIIARGIDLPSVAHVISYDVPVDMRKYVHRVGRTARAGRPGDAWSLVESQEANFFKALLTDAQHLSRDRGARSVAT")
        self.assertEqual(alignment.sequences[2].seq, "THHYVPCSLSSKPLVVLHLVLEMGFSRVLCFTNSRENSHRLFLLVQAFGGVDVAEFSSRYGPGQRRMILKQFEQGKIQLLISTDATARGIDVQGVELVVNYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQERRFLRMLTEAGAPELQRHELSSKLLQPLVPRYEEALSQLEESVKEERKQRAA")
        self.assertEqual(alignment.sequences[3].seq, "THHYVPCRLSSKPLIVLHLVLRMSCSRALCFTNSRENSHRLYLLAQAFGGVSVAEFSSRYGPGQRKKILKQFEQGKIQLLISTDATARGIDVQGVELVINYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQERKFLQMVSEAGVPELTHHEIPRKLLQPLVARYETALSQLEKTVKEEQKLKAA")
        self.assertEqual(alignment.sequences[4].seq, "MKPVYLVALLKSWEGEKCIIFTSSVETTRRLCKLLNFFGDPKIKAKEYSGGLNQSLRSKELKAFRKGDIQVLVASDALTRGMDVKGVTNVINYDMPPFAKTFIHRAGRTARAGQAGRCFTLLSNHEVRRFSKLLEKVGSDSCPIYPIPPTSLDSIRATYTPALEKLKELVESEAPKKGRQAFRHNSRTGNSQTKLNKPRS")
        self.assertEqual(alignment.sequences[5].seq, "QYCVTELRLKPLTVFALVEKYKWKRFLCFTNSSDQATRLTFVLKVLFQKYSTKVSELSGNLSAKVRNERLRDFAAGKINGLICSDALARGIDVADVDVVLSYETPRHITTYIHRVGRTARAGRKGTAVTVLTEQDMTLFKKILSDANKGLGEEIHVSPDIEIQHAVEYKEALAGLRSEKVKNKNQKMAEKNRVATKALIHKKQEETATVRPLTLMEKLQIKANEIVQSSKKSSETKNSKTKADKTKYQPKETKKQIIAKQL")
        self.assertEqual(alignment.sequences[6].seq, "LTHHYVPCRLSSKPLIVLHLVLRMSCSRALCFTNSRENSHRLYLLAQAFGGVSVAEFSSRYGPGQRKKILKQFEQGKIQLLISTDATARGIDVQGVELVINYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQERKFLQMVSEAGVPELTHHEIPRKLLQPLVARYETALSQLEKTVKEEQKLKAA")
        self.assertEqual(alignment.sequences[7].seq, "LKECYIISNGDQKPLVLLNIIYESLLKNNANGENKKKIICFTKSVDITHRLNTLLKLIGQVDKLKFTCEEYSSSLSTVERADLLSRFKLNQIDILICSDIMSRGMDIQDIDVVINYNTPPNITLYVHRVGRTARAGNFGVSYTIVDKSEIKYYISMMKKAERSQTLHCLKWKPNVYEKFQSSYKLGLNQMRLIYSKRKINDIGDNGDDNNDNNNEDGNEIDGSVENIENNNNNNNNNNKNNNNNNFEKDYEVKLKHSLLEISKKKAKINF")
        self.assertEqual(alignment.sequences[8].seq, "ELKSFKVLCQSKLKPLYLVSLLQSLQGEKSIVFTSSVESTHRLCTLLKFFDNLQIEFKEYSRLQRQSVRSKTLRAFRSGQVQVLISSDAMTRGMDVEGVRNVINYDMPAYIKTFIHRAGRTARAGLSGCCFTLMHKDEVKRFKKMLQKADCNSCPTYSASSEVIESLRSVYTLALEKLRENVESEKFKKSKIRLKSSNVRKEK")
        self.assertEqual(alignment.sequences[9].seq, "PLALLALLADASAAGESVIVFTSSLEMTHKLYLMLSAVGDLAGKVVEYSSHVPAKERASGLERFRKGDAKVLVASDAMTRGMDVDCVQAVINYDAPVYAKTYVHRAGRTARAGKSGRVVTLLRDEDMRHFKAMIRKADNNFVRELKLPAERVESFRP")
        self.assertEqual(alignment.sequences[10].seq, "STPSTLKQLHVECKAMDKPLIVLHCLHNLQYRQILCFTNSVESTHRLYLLIKLYGDVEVREFSSALTVAAREKILQEFAQGKVDMVICSDAMARGIDIDNVQYVILYDRPLHIQNYIHRVGRTARAGKTGTAITILEKREVCTYKAMLRESGKDKFKKLKIKPNKLFSLKPRYNDSLRKLPMILKEEKRGKR")
        self.assertEqual(alignment.sequences[11].seq, "FCESKLKPLYLVALLQGLKEEKSIIFTSSIESTQRLSILLKCFTELPLKISQYSRLQRQSVRSNTLDAFRAGELQVLVASDAMTRGMDVDGIANVINYDMPNNVKTYIHRAGRTARAGRPGRCFTLLRREEIKRYRKLLKKAGSDGSRTYSIPVETVENLRPVYSSALEKLKEKVQSEKSRRRFSGSLSARTGNQKPKREK")
        self.assertEqual(alignment.sequences[12].seq, "AFKLITRASKKPLVLVALLEQFKNQSTIIFNASVEATHQLFLLLRHFYAGQEFSVVEYSSRQPQHIRRKALADFTDGKVHVIVASDAMTRGMDVEGVANVINYDVPVYAKTYVHRVGRTARAGQAGRAFTLLVKKEVNCNRH")
        self.assertEqual(alignment.sequences[13].seq, "LKENFVEVDKSRKPLVLLHILKTMPFKSILCFSNSVQSTNRLCSLMKLMEVKACEFSSNLHISKRDRVVKQFNTGKLNLMVCSDAMSRGLDLEAVDCVVSYDVATSLKTYIHRIGRTARAGKEGSAIALLEKKEIQYFKRLLKDGGKEKIKEIKVNQSKLKPYTSQYQKALAALAKTLQTENNKIK")
        self.assertEqual(alignment.sequences[14].seq, "SEYFVQCTAGEKPLVLQHFLLNLYFKQVLCFTNSVQTTHRLYLLLKLMGDVEVSEFSSNLSQSERQNILKQFKAGKIQILVCSDAMARGMDIENVRCVISYDLPPHLKTYIHRVGRTARAGRGGTAFSFIRKKEASGICLTDDDD")
        self.assertEqual(alignment.sequences[15].seq, "KLKSFKLICESKLKPLYLVALLRDLGGEKCIVFTSSVESAHRLCTLLNFFGDLQIKIGEYSGLQHQRVRSKTLEEFRGGKIQVLISSDGMTRGMDVEGVRNVINYDVPKFIKTYIHRAGRTARAGQTGRCFTLLRKDEDKRFKQLLQKADSDSCPVHSVASNSIEALHSVYVSALEKLKETVVSETTRKRKINFKSSGADKRKQEKHLKE")
        self.assertEqual(alignment.sequences[16].seq, "TPKELTEKYIVCSKDVKPLVLYAFLKRENLTKTLVFTHSVESAHRLKILLKSLFKKRLKIEEISSNLKGKSRDEFISSFTKGEVDLLICTDFLARGIDLPGVNCVISYSAPKYLKTYIHRAGRTARAGESGLAVTLLHEEQVPAFKTLLKKEIEEVEVGVEELEGLSEKYKKALGKLKEAVNEEQKVGMESVLSKKKAFKKLKKKVINSVK")
        self.assertEqual(alignment.sequences[17].seq, "EQLRSYTIICKAQQKPLKLVTLLHSLGDQRTVIFTSSVSNTHRLSTFLACFEDLPFRAVEYSSFQHQLARSKALAAFRAGEAQVLVASDAMARGMDVEGVTHIINYDMPPFARTYVHRVGRTARAGRSGSCFTLLRKEEVRYFKSILAKVQNSSCKTYKVSSESTKELRPRYWTALQKLKEILDAGAGKKGHEMYAEEVTAAD")
        self.assertEqual(alignment.sequences[18].seq, "PPMLKPLAVYCLLKKFKYHSALCFTNSRSATHRLCELLKQFGDLKVAECSSEISKAPRDKLLKDFSTGKIDLLVCTDAVSRGMDLGVVDCVISYDSPKYVKNYIHRAGRAARAGRPGTAITILMDSEMHGFNKLLAMAEKKNVTPLDMQVEEFETYEEQFRKALDGLKNTVKEEIHTKIVQNDRARQKRGFNPRSRTGKVVSKKFVKRKGKKVIKQ")
        self.assertEqual(alignment.sequences[19].seq, "LKEYSISCSSDYKPLVLLHLILTFDHHRILCFTHSRESTHRLTLLLKEYDAPVAEISGDLSQEKKNELIKKLTGKEIKALVCSDGMARGMDIPGIDCVINYDVPSHFRSYLHRVGRTARAGAEGAAYTLNTFEEVHKWQRMIREAGRKQIENVSITEDDLKQYVIKYSDALESVANSITCKHGEEDYDVTIQQIEMSKSVQLPTGE")
        self.assertEqual(alignment.sequences[20].seq, "TPAELKEYYTVCSKVNKPLLLHHLLISKSWKNILCFVNSSAATFKLAFILKKLCKKKYTVQQLSANIVQSKRNRILQNFENGKVDILISSDALARGIDIPNVKYVVSYDCPKFVKTYVHRIGRTGRAGKEGHSLAFLTSKEVTSFNKMVSAAGKNSVDVFNFEVEELEQYEVTYKKALLLLGNYLEKQKSKIIKKTKANKKVLPVSKKKVLTKKVNIP")
        self.assertEqual(alignment.sequences[21].seq, "EQLRSYTIICKAQQKPLKLVTLLHSLGDQRTVIFTSSVSNTHRLSTFLACFEDLPFRAVEYSSFQHQLARSKALAAFRAGEAQVLVASDAMARGMDVEGVTHIINYDMPPFARTYVHRVGRTARAGRSGSCFTLLRKEEVRYFKSILAKVQNSSCKTYKVSSESTKELRPRYWTALQKLKEILDAGAGKKGHEMYAEEVTAAD")
        self.assertEqual(alignment.sequences[22].seq, "KECICLTEQRSKPLTLYGLIRENGYRKFLVFTNGINTSHRLSFVLQRLFGTDMVIEEWSSSLSPATRKSVLNRFSLGKVNGIICTDALARGIDIENIEVVISYDMPNHIDKYIHRIGRTARAGLRGTAITLLAEDEKKKFNALLKEANKRELETMEVSPSLEEEFAAKYANVLNDLREALELETEVINKIRKGISIGN")
        self.assertEqual(alignment.sequences[23].seq, "YICIVTPESKPLILHYIITSNSWQHVLVFVGSRKDAHRLSLLLSHLGRNSFKVAEISSRLSRPAREKVLAKFAAGGIDVLISSDALARGMDIEGVEYVVLYSEPKSVKNYIHRVGRTGRAGRSGTAVTFLLDSQVAQFNEMLGVAGKGSLQKIDVQESQLEELEDKYKAALEQLKENLEKEEKQRLKVEKRSKKRDPSIQKCRDRKSRFKVRKQKKVDKGTA")
        self.assertEqual(alignment.sequences[24].seq, "KLQSYKLVCKSNLKPLSLIVLLQELRGEKCLVFTSSVESSHRLSTLLEFFEDLPFKFSEYSRLQRESTRRKTLDAFKEGKIDVLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEVKAFDKMLKKADNSSCSLHSLPEESVETLRPVFSSALKKLEESLESEATKKSKSGDKAPNASKRKRTIN")
        self.assertEqual(alignment.sequences[25].seq, "THHYVPCRLSSKPLIVLHLVLGMNFSRALCFTNSREHSHRLFLLAQAFGGVSVAEFSSRYGPGQRKKILKQFEQGKIQLLISTDATARGIDVQGVELVINYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQERKFLQMVSEAGVPELACHEIPRELLQPLVSRYEIALSQLEKTVK")
        self.assertEqual(alignment.sequences[26].seq, "LICERKVKPLYLVALLKSLGEEKCIVFTRSVESTHHLCKLLNCFGDLKIGIKEFSGLKHQRVRSKTVGEFRRGEFQVLVSSDAMTRGMDVEGVRNVINYDMPKYTKTYVHRAGRTARAGQTGRCFTLMSKDEVGGFEKLMKKAEASDCYEHTVPSSLIEALHSTYQSALTKLKEKILEARRKPRISLVN")
        self.assertEqual(alignment.sequences[27].seq, "SEYYVPCTFSKKPLIILHFLLRLKFSPALCFTNSREGAHRLYLLVKLFGGVEVAEFSSKLSPGERQKTLKDFEKGKIPLLISTDAAARGIDINGVKCVINYDAPQYIRTYIHRVGRTARAGKAGLAFTFLLKVQEKRFLKMVSDAGSPGIQKQHVHPEALKSMESRYEQVLAELGTIVKEENEKKRF")
        self.assertEqual(alignment.sequences[28].seq, "SLKEFMVVVPAAQKPVALLALLEQLKGQTTVVFTSSVETTHKLYLLLEAAHANPEQVVEFSSHVAEKVRRADLERFRSGSASILVASDAMTRGMDVENVENVVNYDAPTYTKTYVHRAGRTARAGRSGSVYSLLKISDVHHFKLMLRKADNTFVKELKLQREVMETHSERVKSALQQMQQLLEAEAAEEGDAGARSAAASRASKKRKEREH")
        self.assertEqual(alignment.sequences[29].seq, "NLDEYWIECDTGSKPLVLLELLSEFAGSLSIVFTASVNSTHRLARLLQLYSTHPERIREFSSSLSQKQRSSLVADCKAGRVETVVCSDAMARGMDIEDVANVVNYDVPSFIKTYIHRVGRTARAGRHGRCVTLVKLGQMKSMMRMLKKADNNKLKPYALQQEHMKTLVPRYTEALQQLKDTLEAEKAGKLQATSILRKNKMSVSGGDDIAEEDLTEEVVSADKKRAFSV")
        self.assertEqual(alignment.sequences[30].seq, "KLQSYKLVCKSNLKPLSLIVLLQELRGEKCLVFTSSVESSHRLSTLLEFFEDLPFKFSEYSRLQRESTRRKTLDAFKEGKIDVLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEVKAFDKMLKKADNSSCSLHSLPEESVETLRPVFSSALKKLEESLESEATKKSKSGDKAPNASKRKRTIN")
        self.assertEqual(alignment.sequences[31].seq, "KTLKQYLIVTRTDLKPLVFFKLLQSQRIEKALCFCKSIDGARRLTGLCRLMAEQFQALKSPNSDDPESNPKQKDQDQKDQKDDVDLVKLCKVECFSSDLSPVERKKLLNKFQSGEINMLICSDIIARGIDITGVQNVINYDSPIDIKKYVHRVGRTARANEHGRAFSLVESQEAKFVKAFLKTGFGSLAPEQQLARIRIDWLDLQ")
        self.assertEqual(alignment.sequences[32].seq, "MKPVYLVALLKSFGGGEKCIVFTSSVETTRRLCKLLNFFDDLNIKVKEYSGGLDQKIRREELKAFIKGDSQVLVASDALTRGIDVKGVTNVINYDMPQFPKTFIHRAGRTARAGQAGRCFTLLSDHEVRRFSNKILKKVGVDSCQTHSIPPTTLDPIRTTYADALEKLKKLVELEGAKKERRGSKRKSRTGNSQSKVNKTTSE")
        self.assertEqual(alignment.sequences[33].seq, "SHHYVPCSLRTKPLAILHLILERNFSRVLCFTNSRENSHRLFLLVQAFGGVAAAEFSSRCRPGQRKVVLKQFEQGKIQLLISTDAMARGIDVQGVQLVINYDAPQYLRTYVHRVGRTARAGRTGQAFTLLLKVQERRFLQMLAEAGVPKMARHDIHSELLQPLVPRYEEALSQLEQAVKEERRQKVA")
        self.assertEqual(alignment.sequences[34].seq, "EELLQCYVPCDLNSKPLILLHFMLTKQFTRVLCFTNSREASHRLFLLVQAFGGIPVAEFSSRLSPSERHRTMKEFEQGKIQLLISTDATARGIDVKQVNYVINYDAPQYIRTYIHRVGRTARAGRVGVAFSLVLRIQEQRFLRMLRDAGIQDIKKQPVKGNSLKPLVQQYEEALCKLEKTVKVIEMGNK")
        self.assertEqual(alignment.sequences[35].seq, "HHYVPCSLRFKPLVILHLILEMNFSRVLCFTNSRENSHRLFLLVQAFGGVTVAEFSSRYGPGQRKSILKQFEQGKIQLLISTDATARGIDVQGVQLVVNYDAPQYLRTYVHRVGRTARAGKSGQAFTLLLKVQERRFLHMLEEGGVPGMERHDTPSELLQPLVPRYEEALSVLEKAVKEERKQKAA")
        self.assertEqual(alignment.sequences[36].seq, "EGLSQCYVPCDLNSKPLLLLHFMLKMKFTRVLCFTNSREASHSVPLPTDSFGGVTVAEFSSRLPPNERRRTMKEFEQGKIQLLISTDATARGIDVEGVNYVINYDAPQFIRTYIHRVGRTARAGKVGVAFSLVLRIQERRFLRMLRDAGIQDIKKHPVKGNSLKPLVQQYEEALCKLEKTVKVIETGK")
        self.assertEqual(alignment.sequences[37].seq, "EDGSEAKQEFTTPEGLKEFMTICPTDKKPLMVIYLLHQMGIKSGLCFTKSVESTQRLFTLIEAYESTQPEEKRIRVKEYSSDLNPVQRKQMLKQFKQGNIDLLICSDLIGRGIDLDSVEFVISYDVPYYMDKYIHRVGRTARAGRQGEAYTLVEMQE")
        self.assertEqual(alignment.sequences[38].seq, "EQLKSFKVVCKSKLKPLYLLALLESLKWEKCIVFTSSVESTHRLCTLLNFFDGLQIKFEQYSRSQPQAIRSKTLRAFRAGRIQVLICSDLISRGMDVKGVKIVINYDMPAFTKTYVHRAGRTARAGQVGSCFTLLRNDEVKKFKKLLQKAGNESCPDYCVPSESVESFRLTYNTALERLKESIESGKIQRRQGGKKEKKALEETA")
        self.assertEqual(alignment.sequences[39].seq, "HHYVPCRLRAKPLVVLHLILHLGFSRILCFTNSRENSHRLFLLVQAFGGVTVAEFSSRYGPGQRKGILKQFEQGKIQLLISTDATARGIDVQGVQLVVNYDAPQYLRTYVHRVGRTARAGTGQAFTLLLKCRSGEEVPPMLTEAGVPELEHDTPSELLQPLVPQYEEALSQLERAVKEEWRQKA")
        self.assertEqual(alignment.sequences[40].seq, "KLESYKLICVSKLKPLYLVAVLQHLGGEKCIVFTSSVESTHRLCTLLNFFGDLKVKIKEYSGLQRQSVRSKTLKAFREGEIQVLVSSDAMTRGMDIEGVRNIINYDMPAYVKTYVHRAGRTARAGQTGRCITLLRTHEVKRFKKLLQKADNDSCPIYSIPSSSVKSLHPFYLSALEKLKETVQSETSRKGKVGIKFSRVSKGEKKSLE")
        self.assertEqual(alignment.sequences[41].seq, "CVCSPAEKPLILFYLVHTHGVRNTLIFTKSAESTTRLVQLFEFFEAARKQENPGGAKRVTIQAYSSDLSSQERKSVIERFKEGKIELLVCSDLVARGVDISHVAHVVSYDVPVDMRKYVHRVGRTARAGREGDAWSLVEDQEARYFKQMLRKSGHLSALKRLRIKEGEIAPLQASYETALQKLKEVYARTPTQV")
        self.assertEqual(alignment.sequences[42].seq, "GLSQCYVPCDLNSKPLLLLHFMLTMKFTRVLCFTNSREASHRLFLLVQAFGGVTVAEFSSRLPPNERRRTMKEFEQGKIQLLISTDATARGIDVKGVNYVINYDAPQFIRTYVHRVGRTARAGKAGVAFSLVLRIQERRFLRMLKDAGIQDIKKHPVKGNSLKPLVQQYEGALCKLEKTVKVIETGKK")
        self.assertEqual(alignment.sequences[43].seq, "GLTEYYVPCTMSSKPLLLLHFILRMKLHPILCFTNSRETAHRLHLLLQLFGGVQAAEFSSQLSPGDRKKTLKEFEQGKIQLLISTDAVARGIDISGVKCVVNYDAPQYIRTYIHRVGRTARAGKTGLAFTFLLRVQEKNFLQMVVKAGSPGIQKQVVKPENLRSMEGQYEKALQKLADVIK")
        self.assertEqual(alignment.sequences[44].seq, "VPCSLSSKPLVVLHLVLEMGFSRVLCFTNSRENSHRLFLLVQAFGGVDVAEFSSRYGPGQRRRILKQFEQGKIQLLISTDATARGIDVQGVELVVNYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQERRFLQMLTEAGAPELRRHELSSKLLQPLVPRYEEALSQLEESIKEEQKQRAA")
        self.assertEqual(alignment.sequences[45].seq, "SEHMCVCSPADKPLILFHLVHTHGVRNALIFTKSAESTTRLVQLFEFFEAARNKDSGETKSVTMQAYSSDLSTQERKSVIERFKEGRIDLLVCSDLVARGVDISHVAHVVSYDVPVDMRKYVHRVGRTARAGRKGDAWSLVEDQEARYFKQMLKKAGHLDVIKKLRTKESDTAPLQPYYETALQNLREVYARTSAQ")
        self.assertEqual(alignment.sequences[46].seq, "TTIRRSHRLSTLLEFFEDLPFKFSEYSRLQRESTRRKTLDAFKEGKIDVLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEVKAFDKMLKKADNSSCSLHSLPEESVETLRPVFSSALKKLEESLESEATKKSKSGDKAPNASKRKRTIN")
        self.assertEqual(alignment.sequences[47].seq, "HHYVPCRLRAKPLVVLHLILHLGFSRILCFTNSRENSHRLFLLVQAFGGVTVAEFSSRYGPGQRKGILKQFEQGKIQLLISTDATARGIDVQGVQLVVNYDAPQYLRTYVHRVGRTARAGNTGQAFTLLLKVQERRFLRMLTEAGVPELERHDTPSELLQPLVPQYEEALSQLERAVKRNEREALVTVTENRL")
        self.assertEqual(alignment.sequences[48].seq, "GLKEHMVVCNADQKPLMMIYLLHQVGITSGLCFTKSVESTQRLQLLIEAYEELNEGKKTRVAEYSSDLSVSQRKSLMKKFRAGEIDLMICSDLIGRGIDLDCVDTVISYDVPLFMDKYIHRVGRTARAGREGQAYTIVEKQEARHFKEILRDASHLSQVKTLRVEKEDLARYEENYK")
        self.assertEqual(alignment.sequences[49].seq, "HYYVPCSLSSKPMLVLHLLHQEDFPRVLCFTNSRENSHRLFLLIQAFGGVKVAEFSSRFGPGQRKLILKQFEQGKIQLLISTDATARGIDVEGVKLVINYDAPHYIRSYVHRVGRTARAGRTGLAYTFLLKVQEQKFLRMLREAGAPALQPYPIRRELLEPLVPQYQAALATLQETIKVRAP")
        self.assertEqual(alignment.sequences[50].seq, "PENLESYKLICERKVKPLYLVALLKSLGEEKCIVFTKSVDSTRRLCKLLNCFEDLQIDIKEYSGLQHQRVRSKTLNEFRKGEFQVLVSSDAMTRGMDVEGVRNVINYDMPKYIKTYVHRAGRTARAGHSGRCFTLMSKDEIGRFKKMMRKAEASAFQEHSVPSSLVEALTSTYQSALTKMKEIILETRKKPKKLES")
        self.assertEqual(alignment.sequences[51].seq, "GLSQCYVPCDLNSKPLILLHFMLVMKFTRVLCFTNSREASHRLFLLVQAFGGVTVAEFSSRLSPSERQRTMKEFEQGKIQLLISTDATARGIDIKGVNYVINYDAPQFIRTYIHRVGRTARAGKVGVAFSLVLRIQERRFLRMLKDAGIQDIKKQPVKGNSLKPLVQQYEEALCKLEKTVKVIEMGK")
        self.assertEqual(alignment.sequences[52].seq, "TLEERMIVSETAYKPLMLLHLLYQRGVKRALCFTKSVESATRLMHLLRLFNDQVGNGPTVASFSSDLSPQERQKMLTKFKDGEVDMLVSTDVIARGIDVQGIENVINYDIPLDMPKYVHRVGRTARAGLVGTAWTLVEVQEAKYFKGYTKNAKHQVKKVRPTTKEVEPLMEAYDVALSRLGRVY")
        self.assertEqual(alignment.sequences[53].seq, "HYYVPCSLNSKPLAILHLMHNMKFSRVLCFTNSREHSHRLFLLVKAFGGIPVAEFSSRFGPGQRKMILKQFEQGKIQLLISTDATARGIDVKGVKLVINYDAPQYIRTYVHRVGRTARAGNTGLAFTLLLKVQEQKFIQMLREQKLQSWGNIS")
        self.assertEqual(alignment.sequences[54].seq, "FYVPCTLSRKPLLILHFILRMKLSPILCFTNSRQAAHRLSLLVKLFGDVQAAELSPAVRKNTLKDFQQGSIQLLISTDAAARGIDISGVKCVVNYDAPQYVRTYVHRVGRTARAGKSGLAFTFLLGVQEKNFLKMVMDAGSPGIQKQIVKSESLKGMEGRYERVLQELAERIRVHINAL")
        self.assertEqual(alignment.sequences[55].seq, "LTEYYVPCTLSKKPLLILHFILRMKLSPILCFTNSRETAHRLYLLVQLFGGIQAAEFSSRLSPGERKKTLKEFEQGKIQLLISTDAAARGIDVSGVRCVVNYDAPQYIRTYIHRIGRTARAGKAGLAFTFLLGVQEKNFLQMVAEAGSPGIQKQIVKPENLKGMEARYEQTLQELANAIKDEKAK")
        self.assertEqual(alignment.sequences[56].seq, "NLDEYWIECDTGSKPLVLLELLSEFAGSLSIIFTASVNSTHRLARLLQLYSTDPERIREFSSSLSQKQRSALVADCKAGRVETVVCSDAMARGMDIEDVANVVNYDVPSFIKTYIHRVGRTARAGRHGRCVTLVKMGQMKGMMRMLKKADNNKLKPYPLQQEHMKTLVPRYTDALQQLKDTLEAEKAGKLQATSILRKNKITTSERNNDDVAEEGNLDEEVVTADKKRAFSVLNAQLERN")
        self.assertEqual(alignment.sequences[57].seq, "THHYVPCSLSSKPLVVLHLVLEMGFSRVLCFTNSRENSHRLFLLVQAFGGVDVAEFSSRYGPGQRRRILKQFEQGKIQLLISTDATARGIDVQGVELVVNYDAPQYLRTYVHRAGRTARAGKTGQAFTLLLRVQERRFLQMLTEAGVPELRRHELSSKLLQALVPRYEEALSQLEESIKEEHKQRAA")
        self.assertEqual(alignment.sequences[58].seq, "TPANLDESMIECDSTEKPLVLLELLHTFESQLTIVFTSSINATHRLCRLLQLFSSEPQSVREYSSGLTQKQRSQLVQQCKNGAIKVVVCSDAMARGMDIAHVSNVINYDVPPYLKTYIHRVGRTARAGRAGRAITLVKRGQTKGLSRMLAKAKKSELQSYAYDINHMKTLVPRYTACLASLKETLAKEKAGHLAITTKVSLKRSVDSIDDNDEADANLESVVQWTRDQVKQKLLEQLQRR")
        self.assertEqual(alignment.sequences[59].seq, "EGLSQCYVPCDLNSKPLLLLYFMLKMKFTRVLCFTNSREASHRLFLLVQAFGGVTVAEFSSRLPPNERQRTMKEFEQGKIQLLISTDATARGIDVKGVNYVINYDAPQFIRTYIHRVGRTARAGEAGVAFSLVLRIQERRFLRMLRDAGIQDIKKHPVKGNSLKPLVQQYEGALCKLEKTVKVMEMRKKI")
        self.assertEqual(alignment.sequences[60].seq, "FRIKPLTLFALLRENGYKKFLVFTNSIDAAHRLSFVLQRLSGTDLIIEEWSSLLSPAARRSVLSRFNLGKVNGIISTDALARGIDIDDIEVVISYDMPRHIHTYIHRIGRTGRAGNRGTSITMLIDEQKSKFNTMLKEAGKNELDAIDIKSSTEEELAGKYSSALNDLRDALELEKQTIIKIRNGMTIANMTNLNLLSKLKAQVKVGKENTTELIKSLQHVPQT")
        self.assertEqual(alignment.sequences[61].seq, "KLICTSNIKPLCLIVLLQELRGEKCLVFTKSVDDSHRLSTLLGFFEDLPFKFSEFSSLQRESTRRKTLAAFKEGKIDVLIGSDIMARGIHIDGLRYVINYEMPQYVKTYIHRAGRTARAGESGSCFTFLRKNEVKRFDKMLKKADGSSCILRSLPEESIDSLRPVFETALEKLKDKLKGSTEPEASKKSNKSGDKVPGALKR")
        self.assertEqual(alignment.sequences[62].seq, "EGLSQCYVPCDLNSKPLLLLHFMLKMKFTRVLCFTNSREASHRLFLLVRAFGGVTVAEFSSRLPPNERQRTMKEFEQGKIQLLISTDATARGIDVKGVNYVINYDAPQFIRTYIHRVGRTARAGKVGVAFSLVLRIQERRFLRMLKDAGIQDIKKHPVKGNSLKPLVQQYEEALSKLEKTVKVIEMGKK")
        self.assertEqual(alignment.sequences[63].seq, "NLDEYWIECDTGSKPLVLLELLSEFAGSLSIIFTASVNSTHRLARLLQLYSTDPERIREFSSSLSQKQRSALVADCKAGRVETVVCSDAMARGMDIEDVANVVNYDVPSFIKTYIHRVGRTARAGRHGRCVTLVKMGQMKGMMRMLKKADNNKLKPYPLQQEHMKTLVPRYTDALQQLKDTLEAEKAGKLQATSILRKNKITTSERNNDDVAEEGNLDEKVVTADKKRAFSVLNAQLERNL")
        self.assertEqual(alignment.sequences[64].seq, "EDGTQVKQEYTTPEGLKEYMTVCPTEKKPLMVIYLLHELGLKSGLCFTKSVESTQRLFMLIEAYEAMQPEEKRIRVKEYSSELRPVQRKQLLRQFKEGQIDLLICSDLIGRGIDLDAVEFVISYDVPYYMDKYIHRVGRTARAGREGVAYTLVEKQEARHFKEMVRQAGHLNQIKPLVLEKD")
        self.assertEqual(alignment.sequences[65].seq, "KLQSYKLVCKSNLKPLSLIVLLQELRGEKCLVFTSSVESSHRLSTLLEFFEDLPFKFSEYSRLQRESTRRKTLDAFKEGKIDVLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEVKAFDKMLKKADNSSCTLHSLPEESVETLRPVFSSALKKLEESLESEARKKSKSGDKAPNASKRKRTIHTFIHQ")
        self.assertEqual(alignment.sequences[66].seq, "SLVQHYSIIKTEDKPLLLFHLILSQSMTNVLVFTKSASSTQRLLKLLQFLNDGWSQQQSQESAFHIMATAFSSDLSVHDRKSILASFKEGKINVLVASDLVSRGIDLPHVSHVISYDVPIDMRKYVHRVGRTARAGRAGVAWTLVEKQEAHHFLEMMRESGHLQDVSKNRIEGNDLAPYSSLYENALSRLQSEYTRG")
        self.assertEqual(alignment.sequences[67].seq, "MKPVYLVALLKSWEGEKCIIFTSSVETTRRLCKLLNFFGDAKIKAKEYSGGLNQSVRSKELKAFRKGDIQVLVASDALTRGMDVKGVTNVINYDMPPFAKTFIHRAGRTARAGQAGRCFTLLSNHEVRRFSKLLKKVGSDSCPIYPIPPTSLGSIRATYTPALEKLKELVESEAPKKGRQAFRHNSRTGNSQTKVNKTTTE")
        self.assertEqual(alignment.sequences[68].seq, "GLLQCYVPCDLNSKPLLLLYFMLTMKFTRVLCFTNSREASHRLFLLVQAFGGITVAEFSSRLPPNERRRTMKEFEQGKIQLLISTDATARGIDVKGVNYVINYDAPQFIRTYIHRVGRTARAGEAGVAFSLVLRIQERRFLRMLRDAGIQDIKKHPVKGNSLKPLVQQYEGALCKLEKTVKNERAQRR")
        self.assertEqual(alignment.sequences[69].seq, "ATLTEHMVVCESSLKPLILFHLVHSHAVTNALVFTKSAESTTRLVRLFDFFDSAFALDASHIDRPRVVAQAYSSDLSASERKSILDKFKSQEIHILVCSDLISRGIDISHVSHVVSYDAPVDMRKYVHRVGRTARAGRAGDAWTLVEEQEARYFKAMLKDADHLHKVKRLRISDKDLALLRPLYEIALRQLK")
        self.assertEqual(alignment.sequences[70].seq, "PCSLRTKPLVILHLILEMNFSRVLCFTNSRENSHRLFLLVQAFGGVTAAEFSSRCGPGQRKAVLKQFEQGKIRLLISTDATARGIDMQGVQLVVNYDAPQYLRTYVHRVGRTARAGRTGRAFTLLLKVQERRFLRMLAEAGAPELARHDIPGELLRPLVPRYEEALSQLEQAVKEERRQKAA")
        self.assertEqual(alignment.sequences[71].seq, "KLESYKLICQSELKPIYLVALLQNLGGEKCIVFTSSVESTHRLCTLLNFFTDLPLKIKEYSGLQRQSVRSKTLKAFREGDVQVLVSSDAMTRGMDVEGVRNVINYEIPLYIKTYIHRAGRTARAGQTGRCFTLLRKDEVKRFKKMLQKADNNSCPVYSLPASSVESLRSSYTSALEKLKEAVESETSRKRKLGSKA")
        self.assertEqual(alignment.sequences[72].seq, "TEYYVPSTMNKKPLLILHFLLRLKYKPVLCFTNSREAAHRLFLLLKFYGGVEVAEFSSRLSPTERQKTLKSFEQGKIAMLISTDAAARGIDIKGVKCVINYDAPQYIRTYIHRVGRTARAGQAGVAFTFLLAIQMKRFQKMLLNAGSPGLQKHVVKPQHLSGLESRYEEILVELGEAIKEEKAQNRF")
        self.assertEqual(alignment.sequences[73].seq, "TTPEGLKEYMTICPTDKKPLMVIYLLHQMGIKSGLCFTKSVESTQQLCTLIEAYELTQPQDKRIRVKEYSSDLNPVQRKQMLKQFKQGHIDLLVCSDLIGRGIDLDSVEFVISYDVPYYMDKYIHRVGRTARAGREGEAYTLVEMQEARHFKEILRNAGHL")
        self.assertEqual(alignment.sequences[74].seq, "KEFFVELVERQKPLFLAHLIKRMGHERILCFTNSREATKRLAVLMSHFEGIKAEALNAGMPLQKRARLLSSFAGGEFQLLVCTDAVARGIDIANISCVVSYEAPQSVKTYVHRVGRTARAGKTGQAFTLLLRNQIRYFKSSLKSVGKRARNFPIHCSKLRAYKAIYKSALLQLEKEFRPKPKDAFG")
        self.assertEqual(alignment.sequences[75].seq, "SNLAEYVIECDAGSKPLVLLEILSEYKGTLSIVFTASVNSTHRLARLLQLYSDHPERIREYSSSLTQKQRTALVAECKANKIETVVCSDAMARGMDIDNVSNVINYDVPTFIKTYIHRVGRTARAGRAGRSVTLVKTGQMKGLTRMLKKAENNKLTPFPLQKEHMKTLIPRYMQALEQLKTTLDAEKTGKLSATTTLRTHGGGNSSSAKKSHQQTTDNAEASGLSADLKDADKKRALSVLYEQLEKN")
        self.assertEqual(alignment.sequences[76].seq, "KLICTSNIKPLCLIVLLQELRGEKCLVFTKSVDDSHRLSTLLGFFDDLPFKFSEFSSLQRESTRRKTLAAFKEGKIDVLIGSDIMARGIHIDGLRYVINYEMPQYVKTYIHRAGRTARAGESGSCFTFLRKNEVKRFAKMLKKADGSSCILRSLPEESIDSLRPVFETALEKLKDKLKGSAEPEASKKSNKSGDKAPGALKR")
        self.assertEqual(alignment.sequences[77].seq, "STLTEHMIVCESSQKPLMFFHLVHAHKVTNALVFTKSAESTTRLVRLFDFFEKARARHAMAGSVQQIVVHAYSSDLPAGERKTILEKFRAQEIQILVCSDLISRGIDISHVSHVVSYDVPVDMRKYVHRVGRTARAGRAGDAWTLVEEQEARYFKGILRDADHLEKVKRIRVGEKELSPLVPFYETALGQLKEA")
        self.assertEqual(alignment.sequences[78].seq, "LTHHYVPCSLSTKPLLVLHLILEKSFSRVLCFTNSRENSHRLFLLVQAFGGVSVAEFSSRYGPGQRKMILKQFEQGKIQLLISTDATARGIDVQGVELVINYDAPQYLRTYVHRVGRTARAGNAGQAFTLLLKVQERRFLRMLTEGGVPALQRHELLSELLQPLVPRYEEALSQLERTVKEERKQKAA")
        self.assertEqual(alignment.sequences[79].seq, "MKPVYLVALLKSWEGEKCIIFTSSVETTRRLCKLLNFFGDPKIKAKEYSGGLNQSLRSKELKAFRKGDIQVLVASDALTRGMDVKGVTNVINYDMPPFAKTFIHRAGRTARAGQSGRCFTLLSNHEVRRFSKLLKKVGNASCPIYPIPPTSFDSVRATYAPALEKLKELVESEAPRKRRQAFKHNSRTGNSQTKRNKTASEQA")
        self.assertEqual(alignment.sequences[80].seq, "GLSQCYVPCDLNSKPLLLLHFMLTMKFTRVLCFTNSREASHRLFLLVQAFGGVTAAEFSSRLPPNERQRTMKEFEQGKIQLLISTDATARGIDVKGVNYVINYDAPQFIRTYIHRVGRTARAGKAGVAFSLVLRIQERRFLRMLKDAGIQDIKKHPVKGNSLKPLVQQYEEALSKLEKTVKVIETGKK")
        self.assertEqual(alignment.sequences[81].seq, "TTIRRSHRLSTLLEFFEDLPFKFSEYSRLQRESTRRKTLDAFKEGKIDVLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEVKAFDKMLKKADNSSCSLHSLPEESVETLRPVFSSALKKLEESLESEATKKSKSGDKAPNASKRKRTINTNRYSL")
        self.assertEqual(alignment.sequences[82].seq, "EHMIISPASHKPLYLFHLLHTLAISSALCFTRSVEAATRLAKLVEFFEEARVASGIEGKKVVVRAFSSELAPNERNKVLRDFKKGEIQMLICSDLIARGIDIPNVSHVISYDIPADMRKYVHRVGRTARAGKEGDAWSLVEEQEVAPFRNIMAKAQHYQKIERVRVKDQLVEPFVPAYQTALERLKAHF")
        self.assertEqual(alignment.sequences[83].seq, "YRIPTKLESYKLICTSNIKPLCLIVLLQELRGEKCLVFTKSVDDSHRLSTLLGFFEDLPFKFSEFSSLQRESTRRKTLAAFKEGKIDVLIGSDIMARGIHIDGLRYVINYEMPQYVKTYIHRAGRTARAG")
        self.assertEqual(alignment.sequences[84].seq, "MVKCSPQEKPMVLLHMLLKLNFKKVLVFTSSVDSTHRLYLLLKLYGGIRVAEFSSGLSPTDRKRILQSFAQDKIDVLICSDAMSRGMDVSNVQYVVSYDAPSYIKTYIHRVGRTARAGRSGTAFTIVKRDEVKQFKQMMSKAAGHRLNEVKITPTELGMYQEDLNNTLQHLRVHLENEEGKLSDVVGQLKGQILMALSK")
        self.assertEqual(alignment.sequences[85].seq, "KLQSYKLVCKSNLKPLSLIVLLQELRGEKCLVFTSSVESSHRLSTLLEFFEDLPFKFSEYSRLQRESTRRKTLDAFKEGKIDVLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEVKAFDKMLKKADNSSCSLHSLPEESVETLRPVFSSALKKLEESLESEATKKSKLGDKAPNASKRKRTIN")
        self.assertEqual(alignment.sequences[86].seq, "TEYYVPSTMNKKPLLILHFLLRLKYKPVLCFTNSREAAHRLFLLLKFYGGVEVAEFSSRLSPTERQKTLKSFEQGKIAMLISTDAAARGIDIKGVKCVINYDAPQYIRTYIHRVGRTARAGQAGVAFTFLLAIQMKRFQKMLLNAGSPGLQKHVVKPQHLSGLESRYEEILVELGEAIKEEKAQNRF")
        self.assertEqual(alignment.sequences[87].seq, "CEIICEDAAKPMVLCHIIKQKAFKKVLCFTETAERAQSLHLILAEMGLLQVREISSYNRPIQRKIVLEHFVSGKVNILVCSDLVARGIDIEDIDCVVSYDVPTFVKTYIHRIGRTARAGKKGTAITLLSEVEIACFRKMLKTAEIPAPEREHVDTQDLTTYIPLYKKALKIADAKIKKFKIFKHQNFKGKKKVKRKNKLQQSTKWQHS")
        self.assertEqual(alignment.sequences[88].seq, "NLDEYWIECDTGSKPLVLLELLSEFANSLTIVFTASVSSTHRLARLLQLYSAHSERVREFSSNLSQKQRSSLVADCKAGRIQTVVCSDAMARGMDIEDVANVVNYDVPTFIKTYIHRVGRTARAGRHGRCVTLVKMGQMKA")
        self.assertEqual(alignment.sequences[89].seq, "LSDFYIVVPEEEKPLALLHAIRREKEAENSARSILVFTSSREHAHNLTRLLQLIDGEMRVAEFSAALSRSERLQAIQTFKDRKVDVLVCSDALTRGIDIETIDLVINYDAPAHLKTYVHRAGRTARAGHTGRVVTILLKKQARFFKHMMLTAAPPRKPTEDDFMSFRKTIKSNRSQYKVALDKLSNVLAREESGEITTTTPVDVLEFD")
        self.assertEqual(alignment.sequences[90].seq, "QYCVTELRLKPLTVFALVEKYKWKRFLCFTNSSDQASRLTFVLKVLFQKYSTNVSELSGNLSAKVRKERLRDFAAGKINGLICSDALARGIDVADVDVVLSYEIPRHITTYIHRVGRTARAGRKGTAVTLLTEYDMTLFKKILSDANKVLGEEIHVSPDIEIQHAVEYKEALAGLRTEKEKKKNQKMAEKNRVATKALIHKKQEETATVRPLTLMEKLQIKANEIVQSSKKSSETKNPKTKADKPKYQPKETKRQIIAKQ")
        self.assertEqual(alignment.sequences[91].seq, "LTHHYVPCRLRSKPLVVLHLILELKFSRVLCFTNSRENSHRLFLLVQAFGGVSVAEFSSRCGPGQRRGILKRFQQGKIQLLVSTDAAARGIDVQGVELVVNYDAPQYLRTYVHRVGRTARAGRTGQAFTLLLKVQERRFLQMLEEAGAPRLQRHETPSELLQPLVPRYEAALSQLEKTVREEQKQKAT")
        self.assertEqual(alignment.sequences[92].seq, "KLESYKLICQSELKPIYLVALLQNLGGEKCIVFTSSVESTHRLCTLLNFFTDLPLKIKEYSGLQRQSVRSKTLKAFREGDVQVLVSSDAMTRGMDVEGVRNVINYEIPLYIKTYIHRAGRTARAGQTGRCFTLLRKDE")
        self.assertEqual(alignment.sequences[93].seq, "LTEQYCVTEMRLKPLTLFALIQQYKWKRFLCFSNSADTANRLAFVLKILFQSYDITVEELSGNMSALERSTTLNNFARGKINGLICSDALARGIDVADVDIVISYEAARHIKTYIHRVGRTARAGKLGTAVTLLSDQDLDQFKKMLLDAGKAMGDEISVSTDFEVEHANLYSTAMSALKDQQSLEKSKKAITKRRLAHHAKLHKEMEHKDQRTLTLMEKLQLKTISDIKKPGEKVHKIDKSLQGVTKPKETKRKRQAKIFKA")
        self.assertEqual(alignment.sequences[94].seq, "LREHMLVTSAADKPLELLQLLHRPKSPLRRVLCFTKSVESAARLVKLVEFFEQAQTARGLPAITAENFSSELKAGRRQKIMDEFAKGQIDLLVCSDLISRGIDLPDVQHVISYDVPVDASKYVHRVGRTARANREGDAWTLVEEHEARYFKGLLKAVIRQGKVEKIKPTADSVDPRMRDDYAAALQKLADFYKRSGSEA")
        self.assertEqual(alignment.sequences[95].seq, "GLSQCYVPCDLNSKPLLLLHFMLTMKFTRVLCFTNSREASHRLFLLVQAFGGVTVAEFSSRLPPNERQRTMKEFEQGKIQLLISTDATARGIDVKGVNYVINYDAPQFIRTYVHRVGRTARAGKVGVAFSLVLRIQERRFLRMLKDAGIQDIKKHPVKGNSLKPLVQQYEEALRRLEKTVKVIETGKK")
        self.assertEqual(alignment.sequences[96].seq, "TPANLEEGMVECEAAEKPLVLLELLHSFGDQLTIIFTSSINATHRLCRLLQLYATNPESVREYSSTLNQKQRSQLVQACHRGTIKIVVCSDAMARGMDIAHVENVVNYDVPPYIKTYIHRVGRTARAGRAGRAVTLVKKGQTKGLSRMLAKAEKAPLPVYPVDAEHMQTLVPRYTVCLASLKETLAKEKAG")
        self.assertEqual(alignment.sequences[97].seq, "KLESYKLICESNLRPLYLVALLQELGEEKCIVFTSSTESTHRLCTLLNLFGDLGIKIKEYSGLQRQSRRSKTLKSFREGKVQVLVSSDAMTRGMDVQGVRNVINYDIPAYIKTYIHRAGRTARAGQAGRCFTLLHKYEVKRFKKMLQKADNESVPHYSVPSSSIETLRAAYNSALGKLKETVESEASRKRKFGSKFSKLSRTKPTD")
        self.assertEqual(alignment.sequences[98].seq, "RLSSKPLIVFHLVLGMNFSRALCFTNSRENSHRLFLLAQAFGGVSVAEFSSRYGPGQRKKILKQFEQGKIQLLISTDATARGIDVQGVELVINYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQERKFLQMVSEAGVPELACHEVPRKLLQPLVARYETALSQLEKTVKEEQKLKAA")
        self.assertEqual(alignment.sequences[99].seq, "PEKLESYMMICESKLKPLYLVALLQSLGEEKCIVFTSSVESTHRLCSLLNFFEDLELKIKEYSGLQRQSLRSKTLNAFRGGEIQVLVSSDAMTRGMDVEGVKNVINYDMPAFIKTYIHRAGRTARAGQSGRCFTLLRKDEVKRFKKLLQKADNDSCPVHNLPSSSIEFLQPTYVSALEKLKEKVESETSRKSTITSSSRAGKQKDRNSSKAKT")
        self.assertEqual(alignment.sequences[100].seq, "EKLQSYKLFCESKYKPLYLVALLQSLGEEKCIVFTSSVESTHRLCTLLNSFDNLPFKIKEYSGLQRQSVRSKTLKAFRKGDIQVLVSSDAMTRGMDVEGVRNVVNYDMPAYIKTYIHRAGRTARAGQTGCCFTLLREDEVKRFNKLLRKAENNSCSKYSLPSSYIEPLHSVYESALEKLKETVEMETSRKRKTGFKSSLSG")
        self.assertEqual(alignment.sequences[101].seq, "ENLESFKLICERKVKPLYLVALLKSLGEEKCIVFTRSVDSTHRLCNLLNCFGDLQIDIKEYSGRQHQRVRSKTLNEFRKGQFQVLVSSDAMTRGMDVEGVRNVINYDMPKYIKTYVHRAGRTARAGQTGRCFTLMSNDEVGRFKRLMKKAEASACLEHTVPSHLIEELHSTYQSGKYLKFDFW")
        self.assertEqual(alignment.sequences[102].seq, "AYKPLVLLYLLEMFDFKRTLCFTSSVESTHRLYLLLTLMGQTGVAEYSSTLPQRKRTQIIEKFAKGDIKIVIASDAMSRGLDIEDVENVINYDVPPFIKTYVHRVGRTARAGRQGKTYTLLLKSEAHHFRSMLKKAEHSTKINQVNIDYETELNKYMEQYQEALEKLKEILKPHMGKNDPTQRERPKTAEAEAKPAAQPQQQKKQKKQHEDKMEEVEAMVDDLDDEDKLL")
        self.assertEqual(alignment.sequences[103].seq, "GLSQCYVPCDLNSKPLLLLHFMLTMKFTRVLCFTNSREASHRLFLLVQAFGGVPVAEFSSRLPPNERQRTIKEFEQGKIQLLISTDATARGIDVKEVNYVINYDAPQFIRTYIHRVGRTARAGKVGVAFSLVLRIQERRFLRMLKDAGIHDIKKHPVKGNSLKPLVQQYEEALCKLEKTVKVIETEKK")
        self.assertEqual(alignment.sequences[104].seq, "KLESYKLICQSELKPIYLVALLQNLGGEKCIVFTSSVESTHRLCTLLNFFTDLPLKIKEYSGLQRQSVRSKTLKAFREGDVQVLVSSDAMTRGMDVEGVRNVINYEIPLYIKTYIHRAGRTARAGQTGRCFTLLRKDEVKRFKKMLQKADNNSCPVYSLPASSVESLRSSYTSALEKLKEAVESETSRKRKLGSKA")
        self.assertEqual(alignment.sequences[105].seq, "ATLTEHMIVCESSLKPLMLFHLVHTHGVVNALVFTKSAESTTRLVKLFELFETARVAEHCGEDRQIVIRAYSSDAGASERKTILEKFKAQEVQILVCSDLISRGIDISHISHVVSYDAPVDMRKYVHRVGRTARARRAGDAWTLIEEQEARYFKSMLKAADHLEKVKRLRVSEKDLAHLRPQYEVC")
        self.assertEqual(alignment.sequences[106].seq, "IEHMVVSAPEDKPLVLLYALRRLGMQKVVCFVSSVESTHRLFRLVQLLGGIEVAEFSGALDMKSRTRILNRFRNGHINLLICSDSMARGLDLDIIEHVINYDAPMRLPTYVHRAGRTARAGRTGHAHTICLPTEVRPFRDMHRRTIKSFGGQAPEANRLERWRVNFDRELEPMRPRFRRALAALKDLLAEEKLATTEKTRQSVAAAVQASEALLAKYALD")
        self.assertEqual(alignment.sequences[107].seq, "LLICKSNLKPLSLIVLLQKLQGNKCLVFTSSVESSHRLSTLLGFFEDLPFKFSEYSRLQRESTRRKTLEAFKEGEIDVLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRQHEVKTFEKMLKKADNASCSLHSLPEESIETLRPVF")
        self.assertEqual(alignment.sequences[108].seq, "ENLKEYLVIYDEDKKPLILWNIIENEKYSRILCFTNSVYNSHRLCQLMKKISTIKVREFSSRQNIQKRTKILKRFASGSIQMIISTDMTARGIDIEGIDCVVCYDLPRNETAYIHRIGRTARAGKFGTAITIISPNQLKHFNIIMRKLHRNNGAEKIERMAIKTSKLKPMKLIYKRALLELKSDANEEIIKLKFRKKLKKSNQS")
        self.assertEqual(alignment.sequences[109].seq, "SHHYVPCSLRTKPLAILHLILEKNFSRVLCFTNSRENSHRLFLLVQAFGGVTAAEFSSRCGPGQRKAVLKQFEQGKIQLLISTDATARGIDVQGVQLVVNYDAPQYLRTYVHRVGRTARAGRTGQAFTLLLKVQERRFLRMLAEAGVPDMTRQDIPSELLQPLVPRYEEALSQLERAVKEERRQKA")
        self.assertEqual(alignment.sequences[110].seq, "ELKSFKVLCQSKLKPLYLVSLLQSLQGEKSIVFTSSVESTHRLCTLLKFFDNLEIEFKEYSRLQRQSVRSKTLRAFRSGQVQVLISSDAMTRGMDVEGVRNVINYDMPAYIKTFIHRAGRTARAGLSGCCFTLMHKDEVKRFKKMLQKADCNSCPTYSASSEVIESLRSVYTSALEKLRENVESEKFKKSKIRLKSSNVRKEK")
        self.assertEqual(alignment.sequences[111].seq, "ALALVLRKDFSRIICFTNSRENSHSLSSKPLVALHLVLRKDFSRILCFTNSRENSHRLFLLVRAFGGVNAAEFSSRLGPGCRKRLLKQFEQGKIQLLISTDATARGIDVPGVELVLNYDAPQYPRAYVHRVGRTARAGQTGQAFTLLLRVQERRFLQMLAEAGVPTLERHEIPGDVLQPLVPRYEEALTELEGTVREEQKQKVA")
        self.assertEqual(alignment.sequences[112].seq, "GLSQCYVPCDLNSKPLLLLHFMLTMKFTRVLCFTNSREASHRLFLLVQAFGGVTVAEFSSRLPPNERQRTMKEFEQGKIQLLISTDATARGIDVKGVNYVINYDAPQFIRTYVHRVGRTARAGKAGVAFSLVLRIQERRFLRMLKDAGIQDIKKHPVKGNSLKPLVQQYEEALRKLEKTVKV")
        self.assertEqual(alignment.sequences[113].seq, "KLQSYKLVCKSNLKPLSLIVLLQELRGEKCLVFTSSVESSHRLSTLLEFFEDLPFKFSEYSRLQRESTRRKTLDAFKEGKIDVLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEIKAFDKMLKKADDSSCSLHSLPDESVETLRPVFSSALKKLEESLESEATKKSKSGDKAPNVSKRKRTV")
        self.assertEqual(alignment.sequences[114].seq, "TLREWMIVCESINKPLLLFYLAHKQQISDMLVFTKSAESTTRLLRLLGYFEDAMAEREVGSKKIIAEAFSSDLAPSQRKTVLEKFKAKQIDMLICSDLVSRGIDIPHVSHVVNYDIPVDVRKYIHRVGRTARAGREGDAWSLVEEQEMHHFKLMMKEAHHLHALKKKKVKSEDLSGLVDVYQVALGRMKVHY")
        self.assertEqual(alignment.sequences[115].seq, "EFFVELVERQKPIFLVHLVKKLGHQRILCFTNSREESKRLAAVLNHFDGIRAGALNAGMPLQKRTRLLSAFANGEYQLLICTDAVARGIDVKNISCVVSYKAPQSVKTYVHRIGRTARAGKSGEAYTLLNHNQIRYFKSSLKSVGKHAKNFPIHSSKLRPYEKDYKAALAELEKEYKAKPKDAFGVAKPPEEINGRRKRELNEKVDIMSKKSKLETGEQININ")
        self.assertEqual(alignment.sequences[116].seq, "LPHNIKQYMIHCTAGEKPLITLNLVLNKTRVLCFAGSIETTRKLSMLIQMYADKEGKKEFICTEFASHLPSSKRGKVLKDFISGKINVLVCSDSMARGLDVPCVEHVILYDVPPLIKTYIHRIGRTARAGATGTAYTLLRKQEIFHFKKMIADAGKCKVKTMKIPKESTQKMVSIYEQVLPMVAEKMKTLKR")
        self.assertEqual(alignment.sequences[117].seq, "HHYVPCSLRFKPLVILHLILEMNFSRVLCFTNSRENSHRLFLLVQAFGGVTVAEFSSRYGPGQRKSILKQFEQGKIQLLISTDAMARGIDVQGVQLVVNYDAPQYLRTYVHRVGRTARAGKSGQAFTLLLKVQERRFLRMLEEGGVPGLERHDTPSELLQPLVPQYEEALSLLEKAVKEERKQKAA")
        self.assertEqual(alignment.sequences[118].seq, "LTEVRLKPLTLFALVQQNGWKRFLCFTNSTDTADRLCFVLKQLFEDSPIKVEQLSAKCSAAQRAQRLNEFARGSIQGLICSDALARGIDVANVDIVISYEAARHIKTYIHRVGRTARAGQAGTAITLLTEKDQAQFKQMLNAAGKRMGEELSVSPDIEVQHAVLYKRALEALRQRQENQKNVQKVQKMRNSRKAAAHKPAPAAAAPAGQLTLMEQLQHNAASQLWSKQHSKAAKPTKAAQPKQQTQ")
        self.assertEqual(alignment.sequences[119].seq, "TPANLDESMIECDSMDKPLVLLELLHAFESQLTIVFTSSINATHRLCRLLQLFSPTPQSVREYSSGLTQKQRSQLVQQCKKGAIKVVVCSDAMARGMDIAHVGNVINYDVPPYLKTYIHRVGRTARAGRAGRAVTLVKRGQVKGLTRMLSKAKKAELPTYVYDAEHMKSLVPRYTACLASLKDTLAKEKAGHLATTTKVSLKRPV")
        self.assertEqual(alignment.sequences[120].seq, "ATLTEHMIVCQTIQKPLMLFYLVHTHSVTNALVFTKSAESTTRLVRLFEFFEHAWASKEGGRKPVVARAYSSDLSNAERKSILEKFRDEEIGILVCSDLISRGIDISHVNHVVSYDAPVDMRKYVHRVGRTARAGRTGDAWSLVEEQEARYFKKMLSTANHLNQVAKMKVADKVLAPFMEHYEDALKQLREVYSR")
        self.assertEqual(alignment.sequences[121].seq, "REWMYACESSQKPLLLFHLIHKSNIANALVFTKSAESTSRLMRLLHYFEAARVANVSSQGSQRKPLKAEAFSSDLTPSQRRAVLDSFKSQQVDLLICSDLVSRGMDISHVSHVINYDVPVDIRKYVHRVGRTARAGREGDAWSLVEEQEMHHFKAMMKEANHKKIKKLKVKSEDLKEFEQYYQV")
        self.assertEqual(alignment.sequences[122].seq, "FYVPCSLNSKPLVILHLMRNLKFSRVLCFTNSREHSHRLFLLVKAFGGIPVAEFSSRFGPGQRKMILKQFEQGKIQLLISTDATARGIDVKGVKLVINYDAPQYIRTYVHRVGRTARAGHTGLAFTLLLKVQEQKFLQMLREARAPELGKHLVRNEHLKSLVPQYEEALAELQKTIRNEWKQKNA")
        self.assertEqual(alignment.sequences[123].seq, "LKLVVPAERKPAALAALLQELRGEQTIVFTSSVEATHRLHLLLAALPCLPDRAVEFSSLVAPAERAARLEAFRSGKAKVLVCSDAMTRGMDVAGVANVVNYDAPVYVKTYVHRAGRTARAGRAGRVFTLLRHEDVRHFKGMLRKADNTFVRAHRLAKGALEAVRDDVDAALEAMGAALAAEAEAERARG")
        self.assertEqual(alignment.sequences[124].seq, "ATLTEHVVICDPSVKPLILLHLIYNLSIRSALVFTKSSESTSRLVRLVGFFEDASTDRERVVICAYSSDLPTGERKRILEKFKAQEIHILVCSDLISRGADISHISHVISYDAPVDMRKYVHRVGRTARAGRTGDAWTLVEEQEARYFKGMLREHSHLERVKRVKIPQKETEGLSTAYQIALQKLKEVYAR")
        self.assertEqual(alignment.sequences[125].seq, "LQEYRVSVSAEKPILLHHLIHSNNLNSVLCFVKSNEGAARLHRLLEIFNGIEGKNYPCGLVSGNISRDERKKMLNGFVSGELKLLVCSDLMARGIDVANTEHVINYDPPSSLRRYVHRIGRTARAGRYGYAWTLVQDHEGHHFSKLLKHLGRTLPLQRLRLHLKDLPKEYVELYDNALETLRTEVYESRKSSK")
        self.assertEqual(alignment.sequences[126].seq, "ERLESYKLICESKLKPLYLVALLQSLGEEKCIVFTSSVESTHRLCTLLNHFGELRIKIKEYSGLQRQSVRSKTLKAFREGKIQVLVSSDAMTRGMDVEGVNNVVNYDKPAYIKTYIHRAGRTARAGQLGRCFTLLHKDEVKRFKKLLQKADNDSCPIHSIPSSLIESLRPVYK")
        self.assertEqual(alignment.sequences[127].seq, "GLTEYYVSCTLSKKPLLILHLILRLKFSPILCFTNSREAAHRLHLLVKLFGGVQVAEFSSQLSASERKRALKDFEQGKIQLLISTDAAARGIDIEDVKCVVNYDAPQFIRTYIHRVGRTARAGKAGLAFTFLLGVQEKLFLQMLKDAGSPGIQKQIIKAENLKMLEAHYEKVLLELKKVTKVNPVRGTAEKESVQSSH")
        self.assertEqual(alignment.sequences[128].seq, "LQEYRLVCTAGEKPLYLIALLHQLKGQRTIVFTASVEATHRLFTLLQAFEGLPVLAGEYSSLQPQRARSATLEAFRRGEVDMLVSSDAMTRGMDVENVENVISYDAPVYAKTYVHRAGRTARAGRPGRCFTLLRREEVRHFKGLLRKVDNNFCPDYPLPSAATDALVPFYTAALEKLKETVAG")
        self.assertEqual(alignment.sequences[129].seq, "ETPEKLEEWLVECDSESKPLRLVQLLLQFHDQMTLVFTSSVNATHRLTRLLQLMFKELNGDDIGVQEYSSSLTLQQRRKLVAKCKKGLNRVLVCSDAMARGMDLDDVVNVINYDVPTHIKTYVHRAGRAARAGRYGRCVTLVKRGQTKGLQRMLQKTNKKQLLSFSLSPEEMQNLVPIYKKALQNLKETLEMEANGKLKATAKITQKRE")
        self.assertEqual(alignment.sequences[130].seq, "LTHHYVPCSLSSKPLAVLHLVLRTSVSRALCFTNSREHSHRLFLLAQAFGGVNVAEFSSRYGPGQRRKILKHFEQGKIQLLISTDATARGIDVQGVELVINYDAPQYLRTYVHRVGRTARAGRTGQAFTLLLKVQERRFLRMLAEAGAPELSRHEIPSELLQPMVPQYEEALSQLEKTIKEEQKQKVA")
        self.assertEqual(alignment.sequences[131].seq, "EEYLIKCTPGEKPLAVLHLALDKSRVLCFAGSIETARRLTVLIQLYAEAAGKSDFTCTEFASHLPTTKRSKVLKDFSAGKINILVCSDAMARGLDVPSVDHVILYDVPPLIKTYIHRIGRTARAGASGTAYTLIRKQEIFHFKKMINDAGKSKVKMLNIPEDSVKELTPIYEQVLPSVAEKLKCLK")
        self.assertEqual(alignment.sequences[132].seq, "KEHMIISDPTQKPLIFFHLVHTLNVTNALVFTKSAESTTRLVQLFDFFEKERTHGNGLSPLSVRAYSSDLPVNERKAILENFKSQKIHILVCSDLISRGIDISHVSHVVSYDVPVDMRKYVHRVGRTARAGREGDAWTLVEQQEARFFKQMLKEADHLEKVKRLRLGEKDLAPLLPHYEAALNKLKDLYTRQ")
        self.assertEqual(alignment.sequences[133].seq, "LKEFMTICPTDKKPLMVIYLLHQMGIKSGLCFTKSVESTQRLFTLIEAYESTQPEEKRIRVKEYSSDLNPVQRKQMLKQFKQGNIDLLICSDLIGRGIDLDSVEFVISYDVPYYMDKYIHRVGRTARAGRQGEAYTLVEMQEARHFKEILRHAGHLSQIKTLKIEKDKLKELVPDYEKAMSKITE")
        self.assertEqual(alignment.sequences[134].seq, "GLSQCYVPCDLNSKPLLLLHFMLTMKFSRVLCFTNSREASHRLFLLVQAFGGITVAEFSSRLSPNERQRTMKEFEQGKIQLLISTDATARGIDIREVNYIINYDAPQFIRTYVHRVGRTARAGKAGVAFSLVLRIQERRFLRMLKDAGIQDIKKHPVKGNSLKPLVQQYEEALCKLEKTVK")
        self.assertEqual(alignment.sequences[135].seq, "LTERYIETSIDLKPLVLFKFIKQEELRKTLVFTHSVESAHRLTILLKTMFGKERVVQEISSQLQPKSRVALINEFSEGTLDILISTDSLARGIDLPGVQCVINYSAPKYLKSYIHRAGRTARAGVQGLAVTFLHTSQLPKFKSLLKQADKHNVEEIKISEEDLEPLGEQYRKSLNELKAVVDKEEKLDLQKIKSAKRSKPKFKRKKADRVGKKA")
        self.assertEqual(alignment.sequences[136].seq, "FYVPCTLSRKPLLILHFVLRLKLSPILCFTNSREAAHRLYLLVQLFGGVQAAEFSSRLSPAERKQTLKDFQQGKIQLLISTDATARGIDVSGVKCVVNYDAPQYVRTYIHRVGRTARAGKSGLAFTFLLGVQEKKFLKMVMDAGSPGIQKQIVKSESLKGMEGRYERALQELAQAIKVKYEYFH")
        self.assertEqual(alignment.sequences[137].seq, "KLQSYKLVCKSNLKPLSLIVLLQELRGEKCLVFTSSVESSHRLSTLLEFFEDLPFKFSEYSRLQRESTRRKTLDAFKEGKIDVLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEVKAFDKMLKKADNSSCTLHSLPEESVETLRPVFSSALKKLEESLESEARKKSKSGDKAPNASKRKRTIHTQPIATCELKATK")
        self.assertEqual(alignment.sequences[138].seq, "ESFKLVCRSKLKPLYLVALLQTLGAEKSIVFTSSVESTHRLSTLLKFFGELPFKISEYSRRQCQPVRSKKLKAFREGKTQVLIATDAMTRGMDVEGIRNVINYDMPAFVKTYIHRAGRTARAGQSGRCFTLMRKDEVKRFNKLLEKADNNSCIIHSLPTDSVESLRPLYSSALEKLKEHEQSWTARKSRISFKSVRASKRKIVQKK")
        self.assertEqual(alignment.sequences[139].seq, "HMIISPSSHKPLYLFHLLHTLSISSALCFTKSVEAATRLAKLVEFFEEARIAAEGEGAKRVVVKAYSSELAPGERNKVLRDFKKGDVQMLICSDLIARGIDIPNVSHVISYDIPADMRKYVHRVGRTARAGNKGDAWSLVEEQEVAPFKSIMSSAQHYAKIGRVRVKDSAIEAFVSPYQAALERLRLHFATGRERER")
        self.assertEqual(alignment.sequences[140].seq, "ATLTEHMIVCEASNKPLMLIHLIHNHSIRNALVFTKSSESTTRLVRLLEFFEELSMSDRGRIVIRAYSSDLAAGERKNILEKFKAQEVHVLVCSDLISRGIDISHVSHVVSYDAPVDIRKYVHRVGRTARAGRDGDAWTLVEEQEARYFKTMLKEYDHLDRVKRMKVSQKETEPLTGNYQAALQMLKESYAR")
        self.assertEqual(alignment.sequences[141].seq, "EKLESYKLMCETKLKPLYLVALLQKLGGEKCIVFTSSVESTHRLCTLLNFFDDLPFIIKEYSGLQRQSVRSKTLKGFREGQIQVLVSSDAMTRGMDVEGVKYVINYDMPVYIKTYIHRAGRTARAGQAGRCFTLLSKDEAKHFKKLLQKADNNSCPGYAVPSSSIESMHSIYTSALEKLKETVEMEAYQKRKMGFKSSRVGKRSG")
        self.assertEqual(alignment.sequences[142].seq, "LPKNLESYKLICERKVKPLYLVALLKSLGEEKCIVFTRSVDSTHRLCKLLNYFGDLQIDIKEYSGHQHQRVRSKTLNEFRKGQFQVLVSSDAMTRGMDVEGVRNVINYDMPKYIKTYVHRAGRTARAGQTGCCFTLMSNDEVGRFKKLMKKAEASASLEYTVPSRLIEELHSTYQSALSKLKDCRREPKDKSCPKIKKR")
        self.assertEqual(alignment.sequences[143].seq, "ETLQEHMLVVSTEDKPLALFHLLHRSEAPLRQALCFAKSVEAANRLAKLLEFFEEKRGAEGVIKAANYSSELSAGERARVLQAFRNGEIDVMICSDLISRGIDISDVQHVISYDVPVDMRKYVHRVGRTARAGKQGNAWSLVEEQEARHFKDMLKRGGRSKNVRKVKLQGTDLQELRPAYEHALEQLAHRFGR")
        self.assertEqual(alignment.sequences[144].seq, "PENLESYKLICEKKVKPLYLIALLKSLGEEKCLVFTKSVDSTHRLCQLLNCFEDLRIDIKEYSSLQHQRVRSKTLNEFRKGVFQVLLSSDALTRGMDVEGVRNVINYDVPKFIKTHVHRAGRTARAGQTGRCFTLMSEDEVRRFKKLIGKAEGGSCLDHIVPSSQIEALNTTYESALTKYKEIISKTRKKPKN")
        self.assertEqual(alignment.sequences[145].seq, "THHYVPCSLNSKPLVVLHLVLEMGFSRVLCFTNSRENSHRLFLLVQAFGGVDVAEFSSRYGPGQRRMILKQFEQGKIQLLISTDATARGIDVQGVELVVNYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQERRFLRMLTEAGAPELQRHELSSKLLQPLVPRYEEALSQLEESVKEERKQRAA")
        self.assertEqual(alignment.sequences[146].seq, "THHYVPCSLSSKPLVVLHLVLEMGFSRVLCFTNSRENSHRLFLLVQAFGGVDVAEFSSRYGPGQRRMILKQFEQGKIQLLISTDATARGIDVQGVELVVNYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQERRFLRMLTEAGAPELQRHELSSKLLQPLVPRYEEALSQLEESVKEERKQRAA")
        self.assertEqual(alignment.sequences[147].seq, "TEHYFKCPPMLKPLAVYCLLKKFKYRTTLCFTNSRAATHRLCELLKQFGDLRVAECSSEISKAPRDKLLKDFSSGKIDLLVCTDAVSRGMDLGVVDCVISYDSPRYVKNYIHRAGRAARAGRPGTAITILVDSEMHGFHKLLGMAEKKNVTPLDMQTEEFEVYEEQFRKALDGLKNTVKEEIQSKIVRNHQVRQKKGFKPKFKKGKVVSTKLAKRRGNIVNK")
        self.assertEqual(alignment.sequences[148].seq, "AGLTEHMIVCETSEKPLMVLHLLHHLQVRSALCFTKSVESAHRLYKLIQLYEKIRVAEFSSDLPKSKRQSILRAFNNGEIHLLICSDLISRGMDLSPVSYVINYDSPVYMKKYIHRVGRTARAGKTGTAYSLVEMQEARHFKEMISKAGHWDKIGRVNVKSQEVKDLVPGYTKALAGLKD")
        self.assertEqual(alignment.sequences[149].seq, "IPTKLQSYKLVCKSNLKPLSLIVLLQELRGEKCLVFTLSVESSHRLSTLLEFFEDLPFKFSEYSRLQRESTRRKTLDAFKEGKIDVLIGTDRMARGIHIDGLKYVINYDMPPYVKTYIHRAGRTARAGEAGSCFTFLRKHEVKAFDKMLKKADNSSCSLHSLPEES")
        self.assertEqual(alignment.sequences[150].seq, "EFFVELAERQKPLFLAYLIRRMGHERILCFTNSREITKRLAVLMSNFKGVKAAALNAGMPLQKRARLLSSFASGEFQLLVCTDAVARGIDIEDVSCVVSYEAPQSVRTYVHRVGRTARAGKTGQAFTLLLRNQVIRYFKSSLKSVGKRAKNFPIHSSQLRTYKATYESALCHLEKEFKPKYVLSQHLL")
        self.assertEqual(alignment.sequences[151].seq, "THHYVPCSLSSKPLVVLHLVLEMGFSRVLCFTNSRENSHRLFLLVQAFGGVDVAEFSSRYGPQRRMILKQLNRGRSSRLISTDATARGIDVQGVELVVNYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQERRFLRMLTEAGAPELQRHELSSKLLQPLVPRYEEALSQLEESVK")
        self.assertEqual(alignment.sequences[152].seq, "TEHMLVCDTAVKPLMLFYLVHTRGVTNALVFTKSAESTTRLVRLFEFFEVALHDADNAGSRIVARAYSSDLAPAERKSILEQFKNQEINILICSDLISRGIDISHVSHVVSYDVPVDFRKYVHRVGRTARAGRAGDAWTLVEEQEARYFKSMLKEADHLDKVKRLRVSDTDVAPLKPAYEAALARLKEVY")
        self.assertEqual(alignment.sequences[153].seq, "KLESYKLICKSNLKPLSLIVLLQELQGNKCLVFTSSVESSHRLSTLLRFFENLPFKFSEYSRLQRESTRRKTLEAFKEGKIDVLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEVKTFDKMLKKADNAGCNLHSLPEESIETLRPAFSGALRKLEGALESEAVKKYDLGDKTPGASKRKRPN")
        self.assertEqual(alignment.sequences[154].seq, "ENLESYKLICEKKVKPLYLIALLKSLGEEKCLVFTKSVDSTHRLCQLLNCFEDLRIDIKEYSSLQHQRVRSKTLNEFRKGVFQVLLSSDALTREMDVEGVRNVINYDVPKFIKTYVHRAGRTARAVQTGRCFTLMSEDEVRRFKKLIGKAEGGSCLDHIVPSSQIEALNTTYESALTKYKEIISKTRKKPKN")
        self.assertEqual(alignment.sequences[155].seq, "ERLESYKLICESKLKPLYLVALLQSLGEEKCIVFTSSVESTHRLCTLLNHFGELRIKIKEYSGLQRQSVRSKTLKAFREGKIQVLVSSDAMTRGMDVEGVNNVVNYDKPAYIKTYIHRAGRTARAGQLGRCFTLLHKDEVKRFKKLLQKADNDSCPIHSIPSSLIESLRPVYK")
        self.assertEqual(alignment.sequences[156].seq, "ERLESYKLICESKLKPLYLVALLQSLGEEKCIVFTSSVESTHRLCTLLNHFGELRIKIKEYSGLQRQSVRSKTLKAFREGKIQVLVSSDAMTRGMDVEGVNNVVNYDKPAYIKTYIHRAGRTARAGQLGRCFTLLHKDEVKRFKKLLQKADNDSCPIHSIPSSLIESLRPVYK")
        self.assertEqual(alignment.sequences[157].seq, "FVELVERQRPMFLVHLVRKLGHERILCFTNSREESKRLAAVLNHFDGIKARALNAGMPLRKRTRLLSAFADGEYQLLICTDAVARGIDVKNISCVVSYEAPPSVKTYVHRIGRTARAGKSGEAYTLLNHNQIRYFKSSLKSVGKRAKNFHIQPSKLRPYGKEYKAALAELEKEYKVKPKDAFGVAKAVEEINSRRKRELDEKDAIMLERSKLETEEHISMNAFVN")
        self.assertEqual(alignment.sequences[158].seq, "ESLKEEYLICNPSEKVIALLHLVLDRGFHSVVCFTNSVESTHRLCLLLKHIDKFPVAEFSSRIKVNQKENILAAFSKGSIRLLVCTDTMARGMDLLNIDLVVSYEYPKFVETYIHRVGRTARAGQQGTSVSLLEFQQVVHLKTMRKQCQSKSSLSQIKLTNQVRKKYVPLLRSAVEALPISLKAENKKNQPNKKTLQSSKA")
        self.assertEqual(alignment.sequences[159].seq, "EKLEFFKVICESNDKALYLVALLQKLEGEKCIVFTSSKEMTHRLCNLLKSFGDLQMRIKGYSSCQHQAVRSKTLDAFRKGEVEVLVSSDNLSRGTDVEAVANVIIYDVPRYIKAYLHRAGRTARAFQIGRCFTLLLRDEARKFNALQRKAEISSTIYPLSSESIQALQSAYVSAFDKLKESVESKASRKRKVNFKSSKPRKAKAMKVSK")
        self.assertEqual(alignment.sequences[160].seq, "KLESYKLICKSNLKPLSLIVLLQELQGNKCLVFTSSVESSHRLSTLLGFFEDLPFKFSEYSRLQRESTRRKTLEAFKEGEIDVLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCYTFLRKHEVKTFDKMLKKADNASCNLHSLPEESIETLRPVFSSALKKLEESLESEAGKKSNSGDKIPSGSKRKRTN")
        self.assertEqual(alignment.sequences[161].seq, "KLQSYKLVCKSNLKPLSLIVLLQELRGEKCLVFTLSVESSHRLSTLLEFFEDLPFKFSEYSRLQRESTRRKTLDAFKEGKIDVLIGTDRMARGIHIDGLKYVINYDMPPYVKTYIHRAGRTARAGEAGSCFTFLRKHEVKAFDKMLKKADNSSCSLHSLPEESVETLRPVFSSALKKLEESLESEATKKSKPGYKAPNASKRKRT")
        self.assertEqual(alignment.sequences[162].seq, "LTEYMTVTSAERKPLMLLYIMHTFNIQSCLCFTRSAESTQQLKTLVEAYESRQSTHDTKIVVADYSSDLPPSERKSLLKRFKNGDIHLLVCSDLIGRGIDLNNVDVVINYDVPWFMDKYIHRVGRTARAGREGQAYSLVEKQEARPFKDLLRNAGHYQQIKQLRVENTKLEPMQADYDAALSSV")
        self.assertEqual(alignment.sequences[163].seq, "LKHMLVCESSQKPLMFFHLVFHLNVTDALVFTKSSESTARLVRLFDFFQKWRAVESGKSLVVQAYSSDLSVGERKVILERFKAQEINILICSDLISRGIDISHVSHVVSYDVPVDMRKYVHRVGRTARAGRSGDAWALVEEQEARYFKNMLRDADHLNKVGRLRVNEGDIEKLAPGYEVAIKQLRD")
        self.assertEqual(alignment.sequences[164].seq, "TTLREHMVVCESSLKPLVFFHLVHAHSMSSALVFAKSTESTTRLVQLFEYFEESRAPDVRLSVCAYSSDLPASDRKSILEKFKTQEIQILVCSDLISRGIDIQHVSHVVSYDAPIDMRKYVHRVGRTARAGRAGDAWTLVEEQEAHHFKRMLREVNHLDKVKRLKVSTKETESLMPHYEVCRFA")
        self.assertEqual(alignment.sequences[165].seq, "LTHHYVPCSLRSKPLVVLHLVLEMNFSRVLCFTNSRENSHRLFLLAQAFGGVSVAEFSSRYGPGQRKMILKQFEQGKIQLLISTDAMARGIDVQGVQLVVNYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQERRFLRMLAEGGVPELERHDTPSKLLQPLVPRYEAALSQLERAVKEERKQKAA")
        self.assertEqual(alignment.sequences[166].seq, "FKVICEPNFKPLYLVALLQSLHGEKSIVFTSSVESTQRLCALLKFFGDLNIKIKEYSGVQRQALRSKTLKAFRAGEVQVVVSTDAMTRGMDVEGVRNVINYDAPPYIKTFIHRAGRTARAGLVGRCFTLLHKDEERRFKKLLKKADNNSCSGHSITPDSLDPLRSVYASALAKLKESVESETYKKRKAGIRLSHMGK")
        self.assertEqual(alignment.sequences[167].seq, "EALKEHMIICEASQKPMMLFHLVHNYSVRNALVFTKSSESASRLVRLIEFFEAATSSDRNPIVVRSYSSDLPVNERRNILEKFKAQEVHLLICSDLISRGIDISHVSHVVSYDTPVDMRKYVHRVGRTARAGRTGDAWTLVEEQEAHYFKSMLRSAGHLEKVKRMRVSEKDTAPLSPAYEIALQNLRDAY")
        self.assertEqual(alignment.sequences[168].seq, "THHYVPCSLNSKPLVVLHLVLEMGFSRVLCFTNSRENSHRLFLLVQAFGGVDVAEFSSRYGPGQRRMILKQFEQGKIQLLISTDATARGIDVQGVELVVNYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQERRFLRMLTEAGAPELQRHELSSKLLQPLVPRYEEALSQLEESVKEERKQRAA")
        self.assertEqual(alignment.sequences[169].seq, "MPETLKESYIISSTSEQRPLVLLNILKNTISTDDSTSKKKIICFTKSLETTHRLNLLLKFIQNVDGLKFVSEEYSSVQSQSERSALLSRFRNGEIDILICSDIMSRGMDIQDIDVVINYNAPPNITLYVHRVGRTARAGKDGSSYTIVEKQELKHYLFTMKKAERSHSIHKLKWKFEDYKPYEVQYKNALYQMRLIFNKRKTIDEPSNDTSTTIQSSMESDSRLYENLLEVSKKKAKANF")
        self.assertEqual(alignment.sequences[170].seq, "EGLSQCYVPCDLNSKPLILLHFMLKMKFSRVLCFTNSKEASHRLFLLIRAFGGVTVAEFSSRLPPNERHRTMKEFEQGKIQLLISTDATARGIDIKGVNCVINYDTPQFIRTYIHRVGRTARAGKTGLAFSMVLRIQERRFLRMLKDAGITDIKQHLVKGKLLKPLVQQYEEALSKLEKTVKV")
        self.assertEqual(alignment.sequences[171].seq, "KLQSYKLVCKSNLKPLSLIVLLQELRGEKCLVFTSSVESSHRLSTLLEFFEDLPFKFSEYSRLQRESTRRKTLDAFKEGKIDVLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEVKAFDKMLKKADNSSCSLHSLPEESVETLRPVFSSALKKLEESLESEATKKSKSGDKAPNASKRKRTIN")
        self.assertEqual(alignment.sequences[172].seq, "CVTELRIKPLTLFALVEKYQWKRFLCFTNSTETANRLAFVMGKLFSTGPTKVAELSGKLSALVRTKTLSDFARGRINGLICSDALARGIDVADVDVVLSYETPRHIKTYIHRVGRTARAGRKGTAVTLLTEQEQAQFKKMLNEVGKALGEEISVSADTEVRHADIYKLAMEDLRKRQEKEKTIKIVQKRRVAQQTVLHKKQEEAAVNPSRPLTLMQKLQLKAGG")
        self.assertEqual(alignment.sequences[173].seq, "NLDEYWIECDTGSKPLVLLELLSEFAGSLSIIFTASVNSTHRLARLLQLYSTDPERIREFSSSLSQKQRSALVADCKAGRVETVVCSDAMARGMDIEDVANVVNYDVPSFIKTYIHRVGRTARAGRHGRCVTLVKMGQMKGMMRMLKKADNNKLKPYPLQQEHMKTLVPRYTDALQQLKDTLEAEKAGKLQATSILRKNKITTSERNNDDVAEEGNLDEEVVTADKKRAFSVLNAQLERN")
        self.assertEqual(alignment.sequences[174].seq, "NLDEYWIECDTGSKPLVLLELLSEFAGSLSIIFTASVNSTHRLARLLQLYSTDPERIREFSSSLSQKQRSALVADCKAGRVETVVCSDAMARGMDIEDVANVVNYDVPSFIKTYIHRVGRTARAGRHGRCVTLVKMGQMKGMMRMLKKADNNKLKPYPLQQEHMKTLVPRYTDALQQLKDTLEAEKAGKLQATSILRKNKITTSERNNDDVAEEGNLDEEVVTADKKRAFSVLNAQLERN")
        self.assertEqual(alignment.sequences[175].seq, "NLDEYWIECDTGSKPLVLLELLSEFAGSLSIIFTASVNSTHRLARLLQLYSTDPERIREFSSSLSQKQRSALVADCKAGRVETVVCSDAMARGMDIEDVANVVNYDVPSFIKTYIHRVGRTARAGRHGRCVTLVKMGQMKGMMRMLKKADNNKLKPYPLQQEHMKTLVPRYTDALQQLKDTLEAEKAGKLQATSILRKNKITTSERNNDDVAEEGNLDEEVVTADKKRAFSVLNAQLERN")
        self.assertEqual(alignment.sequences[176].seq, "LNEYFVPCTLNSKPLIILDFILRLKFSPVLCFTNSREASHRLYLLVRLFGGVQVAEFSSRLSPNERKKTLKEFEQEKIQLLISTDATARGIDVSGVKCVINYDAPQFIRTYVHRVGRTARAGKAGLAFTFLLGVQEKRFLQMLKDAGSPGIQKQIIKPEALKALVPRYEQTLLELETAIQEERATKH")
        self.assertEqual(alignment.sequences[177].seq, "CITEGRLKPLTLFSLIKQYQWTKFLCFTNSVESSGRLAFVLKQLCNKDLVIEELSASINVKERSNILGSFARGRINGVVCSDALARGIDIPDVDIVISYDPPRHIKTYIHRIGRTARAGRPGTAITLLTQKEQKEFDKTLAEVGKVITDELIASTSMEETYANEYSSALNALRNKVTHDKRFKLLKKERAKEKALLHKDTSKMSLMEKLQLQASTQVHEKTEEQPVLSSKKNPSKKFKPKKEKKQ")
        self.assertEqual(alignment.sequences[178].seq, "DELIENYVVCNAEEKPLILFHLLVEKKWDKVLCFTNSAQSVHRLAVLLNEWGKEQCLKVAELSSALDRSSREKVLEKFKQSEVNVIISTDALARGIDIPDCNYVVSYDPPRNIKTYVHRVGRTGRAGRIGQAVTILNHNQLNMFKEQIQSSGKSEINQLEVSEESYSHLFQSYESAIQETKQIIHTEINNKVKKSIELKRGMKKKTRKRKHNE")
        self.assertEqual(alignment.sequences[179].seq, "PEELSQSYVPCDLNSKPLLLLHFMLTKKFTRVLCFTNSREASHRLFLLVQAFGGITVAEFSSRLPPNERKRTLKEFEQGKIQLLISTDATARGIDIKGVNCVINYDTPQFIRTYIHRVGRTARAGKAGLAFSMVLRIQERRFLRMLKDAGIPDIKQHLVKGKLLKPLVQQYEEALSKLERTVKVERAQKR")
        self.assertEqual(alignment.sequences[180].seq, "ICTTNLKPLCLIVLLQELHGEKCLVFTSSVESSHRLSTLLGFFEDLPFKFSEFSRLQRESTRRKTLADFKEGKIDVLIGTDIMARGIHIDGLKYVINYDMPPYVKTYIHRAGRTARAGESGSCFTLLRKHEVKTFDKMLKKADDSSCSLRSLPDESIETFRPVFSSALKKLEESLEPEASKKSKSGDKIPKSSKRKRTIQ")
        self.assertEqual(alignment.sequences[181].seq, "HYVPCSLSTKPLAVLHLVLTMRFSRVLCFTNSRENSHRLFLLVQAFGGVSVAEFSSRHGPGQRKRTLKKFEQGKIQLLVSTDATARGIDVQGVELVLNYDAPQYARTYVHRVGRTARAGRAGQAFTLLLRVQERRFLRMLAGAGVLELRRHEIPGELLQPLVPCYEMALAQLEKTVREERKEKAA")
        self.assertEqual(alignment.sequences[182].seq, "DTLSEHMIVCESAQKPLMLFHLVHTLGVKNALVFTKSAESTVRLVKLFEFFKEFRPTEAKIVLRAYSSDLAPSARKDILDKFKNQEIHILVCSDLISRGIDISHVSHVVSYDAPVDMRKYVHRVGRTARAGRDGDAWTLVEEQEARYFKSMLKEANHLNAVKRLRVSELDLAPLISSYESALTKLKEAYS")
        self.assertEqual(alignment.sequences[183].seq, "EALKEHMIICEAPQKPLMLFHLVHNHSVRNALVFTKSSESASRLVRLFEFFEAAISSGGNPIIVRSYSSDLPTNERRTILEKFKAQEVHLKVQRILLICSDLISRGIDISHVSHVVSYDAPVDIRKYVHRVGRTARAGRTGDAWTLVEEQEARYFKSMLRSAGHLERVQRMRISEKDTASLSSAYEISLRSLRDAYT")
        self.assertEqual(alignment.sequences[184].seq, "KLEFFKVICESNDKALYLVALLQKLTGEKCIVFTSSKKMTHRLCSLLKSFGNLQMRIKSYSSSQHQAVRSKTLDAFRKGEVQVLVSSDNLSRGTDVEAVANVIIYDVPRYIKAYLHRAGRTARAFQIGRCFTLLLKDEMKKFKALQQKAEISSKAFSLSPESIESLKPAYISAFEKLKENVESEAFRKRKVNFKSTKPRKAKAVKVSK")
        self.assertEqual(alignment.sequences[185].seq, "EKLESYRVICESNLKPLYLAALLQNLEGEKCIVFTSSVKSTDLLFNLLKFFGDLKVKIKMYTGHQPQSVRSKTLKAFREGEIQVLVSSDAMTRGMDVEGVKNVINYDSPKHIKRYIHRAGRTARAGQTGRCFTLLHREEVKRFKKLLQKADNNSFPVYSVPSSLVESLHPIYMSALEKLKETVESKKSRKRKIHFKSSTIVGEEVKKKIAG")
        self.assertEqual(alignment.sequences[186].seq, "TLKEHMAVCSTVQKPVILFQLLQAHNVRNALVFTKSAESTTRLVRLFEFFKASFCAADGNAGGMSVTMQAYSSDLSASERRAILEKFKTKEIDILVCSDLISRGIDITHVSHVVSYDAPIDMRKYVHRVGRTARAGREGDAWTLIEDQEARHFKMMMREADHLNKLAKLKITEADLQPLLPHYENALRKLKELY")
        self.assertEqual(alignment.sequences[187].seq, "ATLKEQMIVCDSAQKPLMLFYLVYTHNVTNALVFTKSAESTTRLVRLFEFFQSVRQPSEDQGEPRRVVIQSYSSDSPPSERKSLLERFKGKEIHILVASDLISRGIDISHVSHVVSYDVPVDMRKYVHRVGRTARAGRMGEAWTLVEEQEARYFKSMLKVADHLEKVKRLRVSEKDLAPLLPSYELALRQLKEAYS")
        self.assertEqual(alignment.sequences[188].seq, "TLEERMIVSETAYKPLMLLHLLHQRGVRRALCFTKSVESATRLMHLLRLFKEEVGNGPTVASFSSDLSPQERQKMLTKFRDGEVDMLISTDVIARGIDIQGIENVINYDIPLDMPKYVHRVGRTARAGLVGKAWTLVEVQEAKYFKTYTKNAKHEVKKARPMTKEVEPLMEAYDISLIKLGKI")
        self.assertEqual(alignment.sequences[189].seq, "LTEYYVPCTLSKKPLLILHFILRMKLHPILCFTNSRETAHRLYLLVQLFGGVQAAEFSSRLSPNERKRTLKEFDQGKIQLLISTDAAARGIDIPGVKCVVNYDAPQFIRMYIHRVGRTARAGKSGLAFTFLLRVQEKRFLQMVQEAGSPGLQKQIVKPESLKSMEERYEGTLQELAGVVKSEGEHR")
        self.assertEqual(alignment.sequences[190].seq, "KTLKQYIVVTRTDLKPLVFFKIVESHRIEKALCFCKSIEGARRLTSLCRLMVSKLFKVECFSSDLTPSQRKKILSKFQAGEINMLICSDIIARGIDIIGVENVINYDSPIDIKKYVHRVGRTARANEEGRAFSLVESQEAVFVKNFLKTGFGNLSAHQSLQKIRIDWLDLQSLLPSYNIALKK")
        self.assertEqual(alignment.sequences[191].seq, "EGLSQYYIPCNLNSKPLFLLYFMLRMKFTRVLCFTNSKQASHRLFLLIQAFGGVKVAEFSSWLTPSERQRTLKEFEQGKIQLLISTDATARGIDIKGVKCVINYDAPQFIRTYIHRVGRTAGAGKAGLAFTMLLRVQEWKFLKMLRDAGSPELEKQLVKSEYLKPLLQQYEEALSKLQKTVKDERAQKRA")
        self.assertEqual(alignment.sequences[192].seq, "KEFFVELAERQKPLFLAHLIKSLGHERILCFTNSREATKRLAVLMSHVEGVKAGALNAGMPLQKRVRLLSSFASGEFQLLVCTDAVARGIDIENVSCVVSYEAPQSVKTYVHRVGRTARAGKTGQAFTLLLRNQIRYFKSSLKSVGKRARNFPIHSSKLRAYEASYKGALSQLEKEFRTKPKDAFGIATEVDDESHTKQQESQTE")
        self.assertEqual(alignment.sequences[193].seq, "VCYTQFRIKPLTLFALIRQAGYRKFLVFTNGIDGSHRLSFVLQRLFGTEMVIEEWSSSLTPATRRSVLHRFSLGKVNGIICTDALARGFDIDDIEIVVSYDMPRHISTYIHRIGRTARAGNRGTSITLLIDEEKKKFNSMLKEAGKEELEAVEIQSSVEEEYAGKYSAALNDLRDALELEKQIITKIRNGMTMASLTRVNLLSKLKDRIDVDGSTNSTELIKSLKHLPKSWTNEAIAIRAEQKKNLKRTAESIAGSTDVA")
        self.assertEqual(alignment.sequences[194].seq, "MKPVYLVALLKSWEGEKCIIFTSSVETTRRLCKLLNFFGDPKIKAKEYSGGLNQSVRSKELKAFRKGDIQVLVASDALTRGMDVKGVTNVINYDMPPFAKTFIHRAGRTARAGQAGRCFTLLSNHEVRRFSKLLKKVGSDSCPIYPIPPTSLDSIRATYTPALEKLKELVESEAPKKGRQAFRHNSRTGSSQTKLNKRRSE")
        self.assertEqual(alignment.sequences[195].seq, "SLKEFKVVCAGADKPVLAVALLRQLANEPTLIFTASVEATRRLFVLLHAVPSLRESVLEFSSLNSGPERAATLAAFRGGDARILVASDGMTRGMDVPSVANVVNYDAPIYAKTYVHRAGRTARGGREGRVFTLLRTEEVRHFKGLLRKVDNAFVKDYALPKADVDAARPEAQHALSVLQAYLAA")
        self.assertEqual(alignment.sequences[196].seq, "IECDTGSKPLVLLELLSEFGGALSIVFTASVNSTHRLARLLQLYSSHPERIREFSSGLSQKQRSALVADCKAGRVETVVCSDAMARGMDIDDVANVVNYDVPSFIKTYIHRVGRTARAGRHGRSVTLVKMGQTKGMMRMLKKADSNKLKPYPLQQEHMKTLIPRYTAALQQLKDTLEAEKAGRIQATSVLRPNKGDASEGSTKVDAAAADDLDEQVASA")
        self.assertEqual(alignment.sequences[197].seq, "KLICTSNIKPLCLIVLLQELRGEKCLVFTKSVDDSHRLSTLLGFFEDLPFKFSEFSSLQRESTRRKTLAAFKEGKIDVLIGSDIMARGIHIDGLRYVINYEMPQYVKTYIHRAGRTARAGESGSCFTFLRKNEVKRFDKMLKKADGSSCILRSLPEESIDSLRPVFETALEKLKDKLKGSAEPEASKKSNKSGDKAPGALKR")
        self.assertEqual(alignment.sequences[198].seq, "EKLESYRVICEPKLKPLYLVALLQNLVGEKCIVFASSVESTHRLCTLLKFFGDLKVKIKEYSGLQHQSVRSKTLKAFREGKIQVLVSSDAMTRGMDVEGVRNVINYDKPAYIKTYIHRAGRTARAGQVGRCFTLLHKEEVRHFRKLLQKADNDSFPVY")
        self.assertEqual(alignment.sequences[199].seq, "ERLESYKLICESKLKPLYLVALLQSLGEEKCIVFTSSVESTHRLCTLLNHFGELRIKIKEYSGLQRQSVRSKTLKAFREGKIQVLVSSDAMTRGMDVEGVNNVVNYDKPAYIKTYIHRAGRTARAGQLGRCFTLLHKDEVKRFKKLLQKADNDSCPIHSIPSSLIESLRPVYKSALDKLKETVESEAHRKHTIGFKLSRMGKGR")
        self.assertEqual(alignment.sequences[200].seq, "LKEYMAIVPTEKKPLLVIYLLHCLGIKSGLCFTKSIESTERLKTLIDAYEALQPEEKRVRVKEYSSELRPAERRTVLRQFKEGEIDMLICSDLIGRGIDIDSVQYVISYDVPVYMDKYIHRVGRTARAGRHGVAYTLVEKQQARYFKDMLRQAGHLNQVELLNIEKEKLEELTPDYENAISSVTD")
        self.assertEqual(alignment.sequences[201].seq, "THHYVPCSLSSKPLVVLHLVLEMGFSKVLCFTNSRENSHRLFLLVQAFGGVDVAEFSSRYGPGQRRRILKQFEQGKIQLLISTDATARGIDVQGVELVVNYDAPQYLRTYVHRAGRTARAGKMGQAFTLLLKVQERRFLQMLTEAGAPELRRHELSSKLLQPLVPQYEEALSQLEESIKEEHKQRAA")
        self.assertEqual(alignment.sequences[202].seq, "THHYVPCSLSSKPLVILHLVLEMGFSRVLCFTNSRENSHRLFLLVQAFGGVDVAEFSSRYGPGQRRAILKQFEQGKIQLLISTDATARGIDVQGVELVVNYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQERRFLRMLAEAGAPALQRHELPGKLLRPLVSRYEEALSQLEESVK")
        self.assertEqual(alignment.sequences[203].seq, "YKLICERKVKPLYLVALLKSLGEEKCIVFTRSVESTHHLCKLLNCFGDLKIGIKEFSGLKHQRVRSKTVGEFRRGEFQVLVSSDAMTRGMDVEGVRNVINYDMPKYTKTYVHRAGRTARAGQTGRCFTLMSKDEV")
        self.assertEqual(alignment.sequences[204].seq, "TLLEHMIVCESSQKPLVLFHLVHTHGVKNALVFTKSAESTARLVKLFEFFELSRISSTEQQGSAIVLSAYSSDLAPSARKEILDKFKNQETHILVCSDLISRGIDISHVSHVVSYDAPVDMRKYVHRVGRTARAGRTGDAWTLIEEQEARHFKNMLKEANHLNAVKRMRVSDADLAPLKRSYEDALTKLKEAYSR")
        self.assertEqual(alignment.sequences[205].seq, "GLSQCYVPCDLNSKPLLLLHFMLTMKFTRVLCFTNSREASHRLFLLVRAFGGVTVAEFSSRLPPNERQRTMKEFEQGKIQLLISTDATARGIDVKGVNYVINYDAPQFIRTYIHRVGRTARAGEVGVAFSLVLRIQERRFLRMLRDAGIQDIKKQPVKGNSLKPLVQQYEEALCKLEKTVKVIETGKK")
        self.assertEqual(alignment.sequences[206].seq, "LESYGLICTTEKKLLNLAALLEDLGCEKSIVFTSSINLTHRLCTSLNLLGCLPCKINEYSRLQNQSVRSKTLKDFREGRIDVLVSSDGMTRGMDVEGIKNVINYDLPMYVKKYIHRAGRTARAEQAGRCFTLLRKNETKSFKNMLEKVGIDCFSSYTFPAASLQRLEPLCITAMEKLIELEEIKSSKEIEVRPKFNKVKQS")
        self.assertEqual(alignment.sequences[207].seq, "PHTLTEHMTVCDSAQKPLVFIYLVRVHNIRNALVFTKSAESTARLVHLFGFFEQERSKGTANGADAQLTVRAYSSDLAASERKSILEKFKSQEIHILVCSDLISRGIDISHVSHVVSYDAPVDMRKYVHRVGRTARAGRTGDAWTLVEEQEARSFKNMMKSADHLDRLQKVKVREKELSGLMGYYRVRGIVMNDDQIFLTK")
        self.assertEqual(alignment.sequences[208].seq, "TEFYVPCTMNKKPLLILHFVLYLKLRPILCFTNSRETAHRLYCLVKLFGGVQAAEFSSRLSPGERKKTLKDFEKGKIQLLISTDAAARGIDIKDVKCVVNYDAPQFIRTYIHRIGRTARAGKPGLAFTFLLRIQENNFLRMVMDAGSPGIQRQLVKPECLKGMEKQYEVVLQELADVIKDEKSRH")
        self.assertEqual(alignment.sequences[209].seq, "PVYLVGLLKSLEGEKCIVFTSSVETTRRLCKLLNFFGDSMIKAKEYSGGLNQAVRSKELKAFRKGDIQVLISSDALARGMDVELVTNVINYDMPQYPKTFIHRAGRTARAGRAGRCFTLLGDHEVRRFSNLLKKVGNASCPIYPIPPDLFGPVRAIYEPALAKLKESVEPIAPKRGRQVGFKHNSKTTNSQTKRNKATS")
        self.assertEqual(alignment.sequences[210].seq, "PVYLVGLLKSLEGEKCIVFTSSVETTRRLCKLLNFFGDSMIKAKEYSGGLNQAVRSKELKAFRKGDIQVLISSDALARGMDVELVTNVINYDMPQYPKTFIHRAGRTARAGRAGRCFTLLGDHEVRRFSNLLKKVGNASCPIYPIPPDLFGPVRAIYEPALAKLKESVEPIAPKRGRQVGFKHNSKTTNSQTKRNKATS")
        self.assertEqual(alignment.sequences[211].seq, "ERLESYKLICESKLKPLYLVALLQSLGEEKCIVFTSSVESTHRLCTLLNHFGELRIKIKEYSGLQRQSVRSKTLKAFREGKIQVLVSSDAMTRGMDVEGVNNVVNYDKPAYIKTYIHRAGRTARAGQLGRCFTLLHKDEVCFHLDSFRFL")
        self.assertEqual(alignment.sequences[212].seq, "CVLGKKPLILLHFILRMKFTRVLCFTNTRETSHRLFLLVRAFGGVEVAEFSSRLRSSERQKTLKEFEQGKLQILITTDATARGIDIKGVKCVINYDAPQFIRTYIHRVGRTARAGKAGLAFSMLLRVQEKNFLQMLKDAGSSELRKQFVKEEYLRPLIPRYEETLKEVQRLVKDEREQKR")
        self.assertEqual(alignment.sequences[213].seq, "LTEQAVECATEYKPLALYQLLTRNIKIFKTLVFTNSGETVHRLAILLRSLLSEKNVIIGELSAQLTSKEREDVLTKFSAGEIQILISSDALARGIDILDIQVVISYDLPKYIKAYIHRAGRTGRAGKSGTAISILTSKQVGTFKHMLNNAHKAIPDIEKLELIDIVNEINYLSHVEKLKHDLEEEKQYNLSRVKATKRIQPV")
        self.assertEqual(alignment.sequences[214].seq, "TPANLEEGMVECEAAEKPLVLLELLHSFGDQLTIIFTSSINATHRLCRLLQLYATNPESVREYSSTLNQKQRSQLVQACHRGTIKIVVCSDAMARGMDIAHVENVVNYDVPPYIKTYIHRVGRTARAGRAGRAVTLVKKGQTKGLARMLAKAEKAPLPVYPVDMEHMQTLVPRYTDCLASLKETLAKEKAGHLGLTTSVSLKRKLQGDANNDDDVDQAMADEDDDADDEAKSDVDAGTQDDDEHDVA")
        self.assertEqual(alignment.sequences[215].seq, "LKEYMTICSTDKKPLTVIYLLHQLKIKSGLCFTKSVESTRRLKMLLDTYGKQTGAGLNIVEYSSDLKASQRKSLLAQFKEGHIDLMICSDLIGRGIDLDCVEVVISYDVPVFMDKYIHRVGRTARAGREGRAFTLVERQEARHFKEMLRSAGHYQQLETFAVDKEQIKTFEDGYQAALAALSQD")
        self.assertEqual(alignment.sequences[216].seq, "GLSQCYVPCDLNSKPLLLLHFMLTMKFTRVLCFTNSREVSHRLFLLVQAFGGVAVAEFSSRLPPNERQRTIKEFEQGKIQLLISTDATARGIDVKGVNYVINYDAPQFIRTYIHRVGRTARAGKVGIAFSLVLRIQERRFLRMLKDADIQDIKKHPVKGNSLKPLVQQYEEALCKLEKTVKVTETGK")
        self.assertEqual(alignment.sequences[217].seq, "LTEYYVPCTLSKKPLLILHFILRMKHSPVLCFTNSKETAHRLHLLVQFYGGIRVAEFSSRLSPTERKKTLKEFEQGKIQLLISTDAAARGIDINGVKCVVNYDAPQYIRTYIHRIGRTARAGKPGLAFTFLLGVQEKNFLQMVKEAGTPGIQKQIVKPENLKGMEAQFQLTLQELANAIKVPADN")
        self.assertEqual(alignment.sequences[218].seq, "TPATLEETYTVCDSQAKPLVLLSLLREMVGRQADLSVVFTSSVDSTHRLFRLLQLFGGFEVAEFSSSLGQRQRSSIIRRARAGAVRVIVCSDGMARGMDLDGVGLVVNYDVPSQAKTYVHRVGRTARAGSRGTAVTITKKGQVKQFLNMRSGIDKKRVRLDSSPADQSRLLPLAGRYQLCLKDLKEVMEAE")
        self.assertEqual(alignment.sequences[219].seq, "KNLDEYWIECDTGSKPLILLELLSEFAGSLSIIFTASVSSTHRLARLLQLYSTHPERIREFSSSLSQKQRSTLVADCKAGRVDTVVCSDAMARGMDIEDIANVINYDVPSFVKTYIHRVGRTARAGRHGRCVTLVKMGQMKGMMRMLKKADTNKLKPYPLQQDHVKSLVPRYTEALQRLKETLDAEKAGELQVTSMLRKRKSSVCRDNKDKDIIAQDASLKQKITAADKKRAFSVLNDQLERNLGRV")
        self.assertEqual(alignment.sequences[220].seq, "KLESYKLICDSNVRPLYLVALLQELGEEKCIVFTSSTESTHRLCTLLNLFGDLSIKIKEYSGLQHQSVRSKTLKAFREGKVQVLVSSDAMTRGMDVEGVRNVINYDMPPYIKTYIHRAGRTARAGQAGRCFTLLHKHEVKRFKKMLGKADNASVPHYSVPSSSIESLHAAYSSALGKLKETVESEASRKRKIGSKFSRLSKSKKTDHQK")
        self.assertEqual(alignment.sequences[221].seq, "THHYVPCSLSSKPLVILHLVLEMGFSRVLCFTNSRENSHRLFLLVQAFGGVDVAEFSSRYGPGQRRAILKQFEQGKIQLLISTDATARGIDVQGVELVVNYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQERRFLRMLAEAGAPALQRHELPGKLLRPLVSRYEEALSQLEESVKARGM")
        self.assertEqual(alignment.sequences[222].seq, "HYVPCSLNAKPLAIIHLVLGMSISRTLCFTNSRENSHRLFLLVQAFGGVSVAEFSACYGPGHRRKILKQFEQGKIQLLISTDATARGIDVPGVELVINYDAPQYLRTYVHRVGRTARAGRMGRAFTLLLKVQERRFLRMLAEAGAPELVRHEVPSKLLQPLVPRYEEALSQLERVVKEELKQKAA")
        self.assertEqual(alignment.sequences[223].seq, "KLICTSNIKPLCLIVLLQELRGEKCLVFTKSVDDSHRLSTLLGFFEDLPFKFSEFSSLQRESTRRKTLAAFKEGKIDVLIGSDIMARGIHIDGLRYVINYEMPQYVKTYIHRAGRTARAGESGSCFTFLRKNEVKRFDKMLKKADGSSCILRSLPEESIDSLRPVFETALEKLKDKLKGSTEPEASKKSNKSGDKVPGALKRREA")
        self.assertEqual(alignment.sequences[224].seq, "FYVPCTLSRKPLLILHFVLRLKLSPILCFTNSREAAHRLYLLVQLFGGVQAAEFSSRLSPAERKQTLKDFQQGKIQLLISTDATARGIDVSGVKCVVNYDAPQYVRTYIHRVGRTARAGKSGLAFTFLLGVQEKKFLKMVMDAGSPGIQKQIVKSESLKGMEGRYERALQELAQAIKDTVLLK")
        self.assertEqual(alignment.sequences[225].seq, "PVYLVGLLKALEGEKCIVFTSSVETTRRLCKLLNFFGDSMIKAKEYSGGLNQAVRSKEIKAFRKGDIKVLISSDALARGMDVELVTNVINYDMPQYPKTFIHRAGRTARAGRDGRCFTLLGDHEVRRFSSLLKKVGNASCPIYPIPPDLFAPVRAIYEPALAKLKESVEPIAPKRGRQVGFKHNSRTTNSQTKRNKATSEQ")
        self.assertEqual(alignment.sequences[226].seq, "KLQSYKLVCKSNLKPLSLIVLLQELRGEKCLVFTSSVESSHRLSTLLEFFEDLPFKFSEYSRLQRESTRRKTLDAFKEGKIDVLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEVKAFDKMLKKADNSSCSLHSLPEESVETLRPVFSSALKKLEESLESEATKKSKSGDKAPNASKRKRTIN")
        self.assertEqual(alignment.sequences[227].seq, "QICITEMRLKPLTLYALVEKYKWKRFLCFTNSTDQASRLAFVMATLFENSETKVAELSGNLSALVRKQNLKSFANGKINGLICSDALARGIDVADIDVVLSYEAPRHIKTHIHRVGRTARAGRKGTAVTLLTEQDQAAFKKMLNDVGKGLGEEITVSPDIEVDHAEAYKRALDNLRARQEKQKTTKAAQKRRVANKALVHKKHEEAKDSNRPLTLMEKLQLKAGAVDTSVVDKVKN")
        self.assertEqual(alignment.sequences[228].seq, "EQYCVTEMRLKPLTLYAMVLLNNWKRFLCFTNSADTANRLACVLVHLFKDSTIRVKELSAKMSATKRGHRLSEFARGNIHGLVCSDALARGIDVPNVDVVVSYEAPRHIKTYIHRVGRTARAGQKGTAITLLTDKDQANFKKMLYEVGKSMGEELIISPDIEVEHAAIYKSALELLRLRQEKKKSAIKVQKMRISRKADLHKKPEAEMTLMEKLQFKVGVQESKVKKTTKHAVVKTQKPTKRQ")
        self.assertEqual(alignment.sequences[229].seq, "GLSQCYVPCDLNSKPLLLLHFMLTMEFTRVLCFTNSREASHRLFLLVQAFGGVTVAEFSSRLPPNERQRTMKEFEQGKIQLLISTDATARGIDIKGVNYVINYDAPQFIRTYIHRVGRTARAGEVGVAFSLVLRIQERRFLRMLKDAGIQDIKKQPVKGKSLKPLVQRYEEALHKLERTVKVMEMGKK")
        self.assertEqual(alignment.sequences[230].seq, "YVPCDLNSKPLLLLHFMLTKKFTRVLCFTNSREASHRLFLLVQAFGGITVAEFSSRLPPNERQRTMKEFEQGKIQLLISTDATARGIDIKGVNCVINYDTPQFIRTYIHRVGRTARAGKAGLAFSMVLRIQERRFLRMLKDAGIPDIKQHLVKGKLLKPLVQQYEEALSKLERTVKVERAQKR")
        self.assertEqual(alignment.sequences[231].seq, "LTHHYVPCSLSSKPLAAMHLVLGTKLSRALCFTNSRENSHRLFLLVQAFGGVSVAEFSSRYGPGHRRKVLKQFEQGKIQLLISTDATARGIDVLGVELVINYDAPQYLRTYVHRVGRTARAGKTGRAFTLLLKVQERRFLRMLAEGGAPELARHEIPSKFLQPLVPQYEEALSQLERAVKVRCWPVQ")
        self.assertEqual(alignment.sequences[232].seq, "TTIRRSHRLSTLLEFFEDLPFKFSEYSRLQRESTRRKTLDAFKEGKIDVLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEVKAFDKMLKKADNSSCSLHSLPEESVETLRPVFSSALKKLEESLESEATKKSKSGDKAPNASKRKRTINTCAASS")
        self.assertEqual(alignment.sequences[233].seq, "DELIENYVVCNAEEKPLILFHLLVEKKWDKVLCFTNSAQSVHRLAVLLNEWGKDQCLKVAELSSALDRASREKVLEKFKQSEVNVIISTDALARGIDIPDCNYVVSYDPPRNIKTYVHRVGRTGRAGRIGRAVTILNHNQLNMFKEQIQSSGKSEINQLEVSEESYSHLLQSYESAIQETKQIIHTEINNKVKKSIELKRGMKKKTRKRKHNE")
        self.assertEqual(alignment.sequences[234].seq, "GLSQCYVPCDLNSKPLLLLHFMLTMKFTRVLCFTNSREASHRLFLLVQAFGGVTVAEFSSRLSPNERQRTMKEFEQGKIQLLISTDATARGIDIKGVNYVINYDAPQFIRTYIHRVGRTARAGEAGVAFSLVLRIQERRFLRMLKDAGIQDVKKQPVKGNSLKPLVQQYEEALCKLEKTVKVIETGKE")
        self.assertEqual(alignment.sequences[235].seq, "TELRLKPLTLYTMVQTYGWKRFLCFTNSADTADRLAFVLKHLFQGSPITVEELSANMKVGVRARRLADFAKGSIHGLVCSDALARGIDVPNVDIVLSYEAPRHIKTYIHRVGRTARAGQKGTAITLLTEKDQAPFKKMLYEVGKSMGEELTVSADVEVEHADIYKTALEELRRRQEKRKSEMKVEKMRITRKAALHKQLETGDKPLTLMEKLQVKTAIQLLPEEN")
        self.assertEqual(alignment.sequences[236].seq, "EELSQCYVPCDLNSKPLLLLHFMLTMKFTRVLCFTNSREASHRLFLLVQAFGGVTVAEFSSRLPPKERQRTMKEFEQGKIQLLISTDATARGIDIQGVNYVINYDAPQFIRTYIHRVGRTARAGKVGVAFSFVLRIQERSFLRMLKDAGIQDIKKQPVKGNSLKPLVQQYEEALCKLEKTVKVTGMEKK")
        self.assertEqual(alignment.sequences[237].seq, "RLKPLTLYAMVLLNGWKRFLCFTNSADTANRLAFVLQQLFGGSPTRVEELSAKMSAAMRAQRLTEFARGSIHGLICSDALARGIDVPNVDIVVSYEAPRHIKTYIHRVGRTARAGHKGTAITLLTDKDQAQFKKMLYEVGKSMGEEITVSPDIEAEHANIYKSALDKLRLRQENQKSEKKLQKLRLTRKSMVHKNPDKPLTLMEKLQLKAGAQALPDAKPQREHKEAKPKPEKRAKHK")
        self.assertEqual(alignment.sequences[238].seq, "GLSQCYVPCNLNSKPLLLLHFMLTMKFTRVLCFTNSREASHRLFLLIQAFGGITVAEFSSRLPPSERQRTIKEFEQGKIQLLISTDATARGIDIKGVNCVINYDAPQFIRTYIHRVGRTARAGNVGLAFSMVLRIQERRFLRMLKDAGIPDIQKHLVKGKLLTPLVQQYEEALSKLEKTVK")
        self.assertEqual(alignment.sequences[239].seq, "AELTEHMIISPSSHKPLYLFHLLHTLSISSALCFTKSVEAATRLAKLVEFFEEARRAETGEGSEDKRVVVKAYSSELAPNERKKVLKEFKQGEIQMLICSDLISRGIDIANVSHVISYDIPTDMRKYVHRVGRTARAGHTGEAWSLVEDQEVAPFKAIMSSAQHWQKIDRVRVKD")
        self.assertEqual(alignment.sequences[240].seq, "ELTEKFCLTQNNLKPLTLFALIKELKWQKFLCFTNSVEASERLNFVLQQLFSDEKIRIAELSGSRGKNRCSELLSKFSRGQINGLVCSDALARGIDIPGVDIVISYDPPRHIKTYIHRVGRTARAGRPGTAITLLSQHELDKFHKLLNEVGKVVTAEQETFPDIEEANAKKYQGILQRLREKLVHDKRKKILEMNRAREVKELESQDVTKL")
        self.assertEqual(alignment.sequences[241].seq, "GLSQCYVPCDLNSKPLLLLHFMLTMKFTRVLCFTNSREASHRLFLLVQAFGGVTVAEFSSRLPPNERQRTMKEFEQEKIQLLISTDATARGIDIKGVNYVINYDAPQFIRTYIHRVGRTARAGKVGVAFSLVLRIQERRFLRMLKDAGIQDIKKHPVKGNSLKPLVQQYEEALCKLEKTVKVIETGKK")
        self.assertEqual(alignment.sequences[242].seq, "YKLPEELKSFKVLCQSKLKPLYLVSLLQSLQGEKSIVFTSSVESTHRLCTLLKFFDNLEIEFKEYSRLQRQSVRSKTLRAFRSGQVQVLISSDAMTRGMDVEGVRNVINYDMPAYIKTFIHRAGRTARAGLSGCCFTLMHKDERYNAIPFN")
        self.assertEqual(alignment.sequences[243].seq, "KLESYKLICKSNVKPLSLIVLLQELQGNKCLVFTSSVESSHRLSTLLGFFEDLPFKFSEYSRLQRESTRRKTLEAFKEGKIDVLIGTDRMARGMHIDGLKYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEVKTFDKMLKKADNSSCTLRSLPEESVETLQPVFSSALKKLEECLQSEATKKSNSGDKMPSSSKRKRINQK")
        self.assertEqual(alignment.sequences[244].seq, "VCFTQFRIKPLTLFALIRENGYKKFLVFTNGIDGSHRLSFVLQRMLGTSLIVEEWSSSLSPVTRRSVLNRFSMGKVNGIICTDALARGIDIDDIEVVISYDMPRHINTYIHRIGRTGRAGNRGTSITMLIDEEKNKFNTLLKEAGKSELESIEIKLSTEEEFAGQYSAALNDLRDALELEKQTINKIRSGMTIASMTKVNLLSQLKDRVKANSQNSTEIIKTLKYIPLSWTNEAIEKNAKNQKVPKQKKRKIIADTQETNGKEADPSVAKL")
        self.assertEqual(alignment.sequences[245].seq, "ATLTEHMLVCESAAKPLMLFHMVHARGVTNALVFTKSAESATRLVRLFEFFEGALRVADASKKPVVARAYSSDLAPAERKAILEQFRNQEINILICSDLVSRGIDISHVSHVVSYDVPVDFRKYVHRVGRTARAGREGDAWTLVEEQEARYFKGMLKENDHLEKVKRLRVSDADVASLKPAYETALTQLKEVNWRSPLTPKEVPPAKE")
        self.assertEqual(alignment.sequences[246].seq, "LKEFVCMTQQHNKPLTLYSIIREKGYRRFLVFTNGINNSHRLSFVLQRLFGTEMVIEEWSSSLSPATRKSVLSRFSMGTVNGIICTDALARGIDIESIEVVISYDMPNHVEKYIHRIGRTARAGCRGTAITLLAENERKKFNTLLKEANKTEPDTMEMDPSVEEEHAAKYAIALKDLREALALETDVINKIRNGMSISYMTRVNLLTKLKDQVDITYSTEIIKSLKYLPKSWTNEAIEMKAMERKKRKQENPIDDIDVDSKRAKTNEETMVNGMAKTTGKTHKLLNGT")
        self.assertEqual(alignment.sequences[247].seq, "RLYLLVKLFGGVEVAEFSSKLSPGERQKTLKDFEKGKIPLLISTDAAARGIDINGVKCVINYDAPQYIRTYIHRQGRTARAGKAGLAFTFLLKVQEKRFLKMVSDAGSPGIQKQHVHPEALKSMESRYEQVLAELGTIVKEENEKKRF")
        self.assertEqual(alignment.sequences[248].seq, "KLESYKLICTSNIKPLCLIVLLQELRGEKCLVFTKSVDDSHRLSTLLGFFEDLPFKFSEFSSLQRESTRRKTLAAFKEGEIDVLIGSDIMARGIHINGLRYVINYEMPQYVKTYIHRAGRTARAGESGSCFTFLRKNEVKRFDKLLKKADGSSCILRSLPEESIESLRPVFETALEKLKDKLKGSAEPEASKKSNNSGDKAPGALK")
        self.assertEqual(alignment.sequences[249].seq, "SYKPLYLFHLLHTLAISSALCFTKSVEAATRLAKLVEFFEEARAAAADGSETKRVVVKAYSSELAAGERHKVLREFKKGEVQMLICSDLIARGIDIPNVSHVISYDIPVDMRKYVHRVGRTARAGNKGDAWSLVEEQEVAPFRSIMSKAQHYQKIERVKVKDKLVEPFVPAYQVALERLKQYFATGRTREQS")
        self.assertEqual(alignment.sequences[250].seq, "SYKPLYLFHLLHTLAISSALCFTKSVEAATRLAKLVEFFEEARAAAADGSETKRVVVKAYSSELAAGERHKVLREFKKGEVQMLICSDLIARGIDIPNVSHVISYDIPVDMRKYVHRVGRTARAGNKGDAWSLVEEQEVAPFRSIMSKAQHYQKIERVKVKDKLVEPFVPAYQVALERLKQYFATGRTREQS")
        self.assertEqual(alignment.sequences[251].seq, "FYVPCTLSRKPLLILHFVLRLKLSPILCFTNSREAAHRLYLLVQLFGGVQAAEFSSRLSPAERKQTLKDFQQGKIQLLISTDATARGIDVSGVKCVVNYDAPQYVRTYIHRVGRTARAGKSGLAFTFLLGVQEKKFLKMVMDAGSPGIQKQIVKSESLKGMEGRYERALQELAQAIKVKMKKRNR")
        self.assertEqual(alignment.sequences[252].seq, "LTEFYVPCTMNKKPLLILHFILYLKLRPILCFTNSRETAHRLYRLVQLFGGVQAAEFSSRLSPGERKNTLKDFEQGKIQLLISTDAAARGIDINAVKCVVNYDAPQYIRTYIHRIGRTARAGKPGLAFTFLLGVQENNFLRMVMEAGSPGVQKQLVKPESLKGMEERYEVVLQELADVIKDEKSRR")
        self.assertEqual(alignment.sequences[253].seq, "LLKEKFIDVKKAEKPLILLHFLLHKKLQRVLCFTNSVESTHRLYLLAKQWKDVKVAEISSNIHSLKRERIIRKFARGDLQLIISSDVMTRGMDIENVQYVISYDAPQYIETYIHRVGRTARANKPGTAITLLEGKENLRR")
        self.assertEqual(alignment.sequences[254].seq, "ECYCITENRIKPLSLFALINENEWTKFLCFTNSAESSSRLSFVLKSLFKDELVIRELSASITPKERANVLSQFARGRVHGLVCSDALARGIDIPDVDVVISYDLPRHVKTYIHRIGRTARAGSPGTAITMLTQKELQQFNHILGEVGKTLTKEISVKTNYEAEYAKQYTLALQDLRKKIEQDKRLQLMRKERVKDNAKLAAKDPSKMSVMEKLQLQASTQVGDMEQGRKENQIQENNVKNKLVKRKKFNASAGKTKE")
        self.assertEqual(alignment.sequences[255].seq, "LTEYYVPCTMNKKPLLILHFILYLKLCPILCFTNSRETAHRLYHLVQLFGGVQAAEFSSRLSPGERKNTLKDFEQGKIHLLISTDATARGIDVNGVKCVVNYDAPQYIRTYIHRVGRTARAGKPGLAFTFLLRVQEKNFLRMVMEAGSPGIQKQMIKPESLKGMEVRYEEILQKLADVIKDEKARH")
        self.assertEqual(alignment.sequences[256].seq, "PRLKPLVILHLLNVMKWRKVLIFTNSLENTKRLTLLIKMFSEGTNSLIVHEVSSNVHQRKRQASLDSFEKGTVDVIVASDSVARGIDLPNVEYVVLYDAPLHTKTYIHRVGRTARAGKSGTALTLLKADEKKGYTKIMKELNKQPPPKFVVAPEELVALEGPYKVALQKLEKEMNH")
        self.assertEqual(alignment.sequences[257].seq, "TEHYFKCPPMLKPLAVYCLLKKFKYRTTLCFTNSRAATHRLCELLKQFGDLRVAECSSEISKAPRDKLLKDFSSGKIDLLVCTDAVSRGMDLGVVDCVISYDSPRYVKNYIHRAGRAARAGRPGTAITILVDSEIHGFHKLLGMAEKKNVTPLDMQTEEFEVYEEQFRKALDGLKNTVKEEIQSKIVRNHQVRQKKGFKPKFKKGKVVSTKLAKRRGN")
        self.assertEqual(alignment.sequences[258].seq, "VPEQLVEKMVIVKEELKPLVIVHLMLKLKYKRILCFTKSIEATHRLHLLLQSIGGFTVAEFSSNLTETQRKGIIRDFKNGSIDALISSDAMARGMDIDNVNMVVNYDSPANSKTYVHRVGRTARAGNRGEALTILTKKKVYPFKKMSNDLSGGVLKMKIKDEELLIYEHQYEKALSSLQEKISSEKRVNL")
        self.assertEqual(alignment.sequences[259].seq, "LTEYMTVTSAERKPLMLLYIMHTFNIQSCLCFTRSTESTLQLKTLVEAYESRQSRHDTKLVVADYSSDLPPSERKSLLKRFKNGDIHLLVCSDLIGRGIDLNNVDVVINYDVPWFMDKYIHRVGRTARAGREGQAYSLVEKQEARPFKDLLRNAGHYQQIKQLRVDNTKLEPMQADYDAALSSV")
        self.assertEqual(alignment.sequences[260].seq, "LKEYVCLTELRSKPLMLYALIREKGYRKFLVFTNGINTSHRLSFVLQRLFGTDMVIEEWSSSLSPATRKSVLHSFSIGKVNGVICTDALARGMDIEGIEVVISYDMPNHIDKYIHRIGRTARAGVRGTAITMLVEEERKKFNTLLKEAQKKELEMIELNSSVEEEMAVKYASVLNDLREALELESEVMKKIRNGVTIGNMTRVNLLTKLKDQLNITYSTEIIRTLKI")
        self.assertEqual(alignment.sequences[261].seq, "ATLTEHMFVCSSAEKPLILFHLVHTHDVVNALVFTKSAESTARLVKLFEFFEAALRMERGGAPVVARAYSSDLSPNERKLILEQFKNQDIHILVCSDLISRGIDINHVTHVVSYDAPVDMRKYVHRVGRTARAGRSGDAWTLVEEQEARYFKTMLKSVDRLDKVKRMRVADRDVQGLKTPYEKALALLKDAY")
        self.assertEqual(alignment.sequences[262].seq, "RELVCLTEQRTKPLTLYALIRENEYRRFLVFTNSINASHRLSFVLQRLFGTELIIEEWSSSLSPAARRGVLSRFSMGKVNGIICTDALARGIDIESIDVVISYDLPANVDTYIHRIGRTARAGSHGTAITLLLDDEKRKFNTILREANKGELESIGIKSTTEEEYAAKYTNALNDLREALQLETEVIKKIRNGNTIGNITRVNLLTKLKDQVDITYSTEIIKTLKHLPKSWTNEAIESKAMEQQQAAKKRKAQQDDNAPEGEEVQAKALSLAEAKKPSDEKLTNGTSDS")
        self.assertEqual(alignment.sequences[263].seq, "EYRLLCSAARKPLALLALLSEAAGQSIIVFTSSLDMTHKLYLMLRAVPELPEVVVEYSSLVPARERAANLEKFRSGEAKVLVASDAMTRGMDVDNVQTVINYDAPVYAKTYVHRAGRTARAGKSGRVITLLRDEDMRHFKAMIRKADNNFVHELKLPGEQVEAFRPALAGALAQLEELLAAERAADAAAAAV")
        self.assertEqual(alignment.sequences[264].seq, "YYLTHDNTKPLAVWDLVANHGFQDTLCFTASKEDAHRLSLVLKQMGNVRAEEFSAKLSITERARVLRKFASGKLDILVCSNVLARGLDVANVRHVICYDPPKFIKTYVHRVGRTARAGVPGTAVTFLRQGQLQAFKEMLSLAGKTNIQPLDIGNTDGLEELQSKYRDALKAVEAIVKSEQVGPDRKKKYNFAAKSALADETKCQDIS")
        self.assertEqual(alignment.sequences[265].seq, "THHYVPCRLSSKPLIVLHLVLGMNFSRALCFTNSRENSHRLFLLAQAFGGMSVAEFSSRYGPGQRKKILKQFEQGKIQLLISTDATARGIDVQGVELVINYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQERKFLQMVSEAGVPELARHEIPRELLQPLVARYEIALSQLEKTVKEEQKLKTA")
        self.assertEqual(alignment.sequences[266].seq, "THHYVPCRLSSKPLIVLHLVLGMNFSRALCFTNSREHSHRLFLLAQAFGGVSVAEFSSRYGPGQRKKILKQFEQGKIQLLISTDATARGIDVQGVELVINYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQERKFLQMVSEAGVPELACHEIPRELLQPLVSRYEIALSQLEKTVKEEQKLKTA")
        self.assertEqual(alignment.sequences[267].seq, "EFYCITEYKLKPLTLYGLIKKNNWRRFLCFTNTIETSHRLSFVLQTLLGTDLVIEELSSLLPIKIRQKVLQNFNDGKVNAIICSDALARGIDVPNIEAVISYDLPKHLKTYIHRIGRTARAGNKGTAATIIAPDQIKSFEKLLETANKTSVAEMKPDHELEEANALKYANTLKQLQKALELEERQLKKSKSKPTSVSLFEKLQRQVKEDDLPYE")
        self.assertEqual(alignment.sequences[268].seq, "EMICLTQYKIKPLTLFALLKENNYKRFLCFTNSIDASHRLSFVLQKMFGTELIVEEWSSSLDPATRKGVLNRFALGKVNGIICTDALARGIDIDDIDVVISYDMPRHINTYIHRIGRTGRAGNRGTSITMLIDEERKKFNATLAEAGKSELETIEVLPNAEEKYALLYSSALTDLRDALDLEKQTINKIRNGMSIASMTKVNLLSKLKDRVDIENTNSTETIKSLVHLPKAWTNEAIEKRATDSKEKKRKQKLLGDKPEGNADESAKKQKLTHQNVR")
        self.assertEqual(alignment.sequences[269].seq, "ELKSFKVLCQSKLKPLYLVSLLQSLQGEKSIVFTSSVESTHRLCTLLKFFDNLQIEFKEYSRLQRQSVRSKTLRAFRSGQVQVLISSDAMTRGMDVEGVRNVINYDMPAYIKTFIHRAGRTARAGLSGCCFTLMHKDEVKRFKKMLQKADCNSCPTYSASSEVIESLRSVYTSALEKLRENVESEKFKKSKIRLKSSNVRKEKXKAVHGDNFH")
        self.assertEqual(alignment.sequences[270].seq, "NLDEYWIECDTGSKPLVLLELLSEFAGSLSIIFTASVNSTHRLARLLQLYSTDPERIREFSSSLSQKQRSALVADCKAGRVETVVCSDAMARGMDIEDVANVVNYDVPSFIKTYIHRVGRTARAGRHGRCVTLVKMGQMKGMMRMLKKADNNKLKPYPLQQEHMKTLVPRYTDALQQLKDTLEAEKAGKLQATSILRKNKITTSERNNDDVAEEGNLDEEVVTADKKRAFSVLNAQLERN")
        self.assertEqual(alignment.sequences[271].seq, "RELVCITEQRTKPLTLYALIRENEYRRFLVFTNSINSSHRLSFVLQRLFGTDLIIEEWSSSLSPAARRGVLSRFSMGKVNGIICTDALARGIDIESIDVVISYDVPANVDTYIHRIGRTARAGSHGTAITLLLDEEKRKFNTLLREADKEELETIGINPSTEEEFAAKYTNALNDLREALGLETEVIKKIRNGNTIGNMTRVNLLTKLKDQLDIAYSTEIIKTLKHLPKSWTNEAIESKAKEHQHAGKKRKQQDDNVGERDEVA")
        self.assertEqual(alignment.sequences[272].seq, "FVELVERQRPMFLVHLVRKLGHERILCFTNSREESKRLAAVLNHFDGIKARALNAGMPLRKRTRLLSAFADGEYQLLICTDAVARGIDVKNISCVVSYKAPQSVKTYVHRIGRTARAGKSGEAYTLLNHNQIRYFKSSLKSVGKRAKNFHIQPSKLRPYEKEYKAALAELEKEYKVKPKDAFGVAKAAEEINGRRKRELDEKDDIMSKKSKLETEEHISMKQKGFHL")
        self.assertEqual(alignment.sequences[273].seq, "ITICNSKLKPLYLVALLQELKGEKCIVFTSSVESTHRLSTLLKFLGELPFQFSEYSRLQRQSVRSKTLKAFREGKLEVLIATDAMTRGMDVEGIRNVINYDMPPYVKTYIHRAGRTARAGQSGRCFTLLRKHEVKRFDSMLKKADDNSCTLHSLPADSIESLLPIYSSALEKLKEFVESEARRKSSIGFKSAKANKRKRTTHKVDNRDIYSCN")
        self.assertEqual(alignment.sequences[274].seq, "KFCVTQPRLKPLTLYALIKENNWKKFLCFTNSVEAAGRLAFVLKTLFDKDEDAIRIDELTSSRMQGGKKTLLENFRKGQINGLICSDALARGIDIPDVDIVISYDPPRHIKTYIHRIGRTARAGRLGTAITLVSPPEQDNFNKLLSEVGKVITEEQQSSTSIEELNARKYQEALEQLRVKIAKDKRIRILEMNRTRELKELETKDTSSMTVMEKLQMQATLDMHAKVDKKQERLLASKRQLSKKFKPKKLTKKEEQPDLKVPKKNSEKNKKNKVKKMK")
        self.assertEqual(alignment.sequences[275].seq, "ATLTEHMLVCSSAEKPLMLFHLVHAHEVVNALVFTKSAESTTRLVKLFEFFEAALSAERGRPGTTANVARAYSSDLSPSERKAILEQFRNQEIHILVCSDLISRGIDISHVSHVVSYDAPVDMRKYVHRVGRTARAGRSGDAWTLVEEQEARYFKTMLKSAGHLEKVKRMRVGDKDVEELRSAYEQALAQLKDAYARSN")
        self.assertEqual(alignment.sequences[276].seq, "STLKEHMIVLDSSQKPLIFLHLVHTYDIKNAIVFTKSAESTMRLVQLFDFIEAERTRDHGYMPLVVRAYSSDLPVQERKAILEQFKSQKINILVCSDLISRGIDISHVSHVISYDVPVDMRKYVHRVGRTARAGRDGEAWTLVEQQEARYFKQMLKDADHLERVKRIRIVEKDITALLPHYETALNNLKELYTR")
        self.assertEqual(alignment.sequences[277].seq, "LQEYRVSVSAEKPILLHQLIHSNNLSNVLCFVKSNEGAARLHRLLEIINGIEGKNYPCGLVSGNLSRDERKKMLNGFASGELKLLVCSDLMARGIDVANTEHVINYDPPSSLRRYVHRIGRTARAGRNGCAWTLVQDHEGHHFSKLVKHLGRTLPLQRLRLHLKDLPEENVELYDNALETLRREVYESRKSSK")
        self.assertEqual(alignment.sequences[278].seq, "ELKEYFVRCERPLKPLVLFRLISKENWKQVLVFASSTKNVHNLATLLNILGKSTNHKIRVGEINSTMTRLLRQKLIERFTAGNIDVLVSTDSLARGIDIPGAAYVINYDVPKFIKSYIHRVGRTGRAGQDGTAVSLVAEEQMEQFTRLLKKGNKEKEVMEITIAEDELEVFEENYKAALQSLKEISEQQQKEIQEEKIMHRKLCSWKIKKSNLRTKKNNRIQEKKKKTRIKS")
        self.assertEqual(alignment.sequences[279].seq, "ATLTEHMLVCESSEKPLMLFHLVHMRGVTNALVFTKSAESTARLVKLFEFFETTLGQDRTRQKEGQIIARAYSSDLSPGERKTILEKFKAQEIHILVCSDLISRGIDISHVSHVVSYDAPVDMRKYVHRVGRTARAGRAGDAWTLVEEQEARYFKLMLKESDHLEKVKRLRVNEKDVAPLQPAYESALGQLKDAYARN")
        self.assertEqual(alignment.sequences[280].seq, "KLQSYKLVCKSNLKPLSLIVLLQELRGEKCLVFTSSVESSHRLSTLLEFFEDLPFKFSEYSRLQRESTRRKTLDAFKEGKIDVLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEVKAFDKMLKKADNSSCSLHSLPEESVETLRPVFSSALKKLEESLESEATKKSKSGDKAPNASKRKRTINTCAASS")
        self.assertEqual(alignment.sequences[281].seq, "LKEYICLTEQRSKPLTLYALICELGYRKFLVFTNGINTSHRLSFVLQRLFGTDMVIEEWSSALSPATRKNVLSRFSLGKVNGVVCTDALARGIDIESIDVVISYDMPNHIDKYIHRIGRTARAGMRGTAITLLAEDEKKKFNTLLKEANKTELETIEVRSSVEEEFAVKYAGVLNDLREALELETEVINKIRNGTSIGNMTRVNLLTKLKDQVDITYSTEIIKSLKILPKSWTNEGIEQRAMQGMPKKNKQK")
        self.assertEqual(alignment.sequences[282].seq, "ATLTEHMIVCEASDKPLMLIHLIHNHSIRNALVFTKSSESTSRLVRLLEFFEELRMSDGGPIVIRAYSSDLPAGERKNILEKFKAQEVHVLVCSDLISRGIDISHVCHVVSYDAPVDIRKYVHRVGRTARAGRDGDAWTLANFLQARYFKSMLKECDHLVRVKRLNVSQKETQPLTGNYQAALQMLKESYA")
        self.assertEqual(alignment.sequences[283].seq, "KECICLTEQRSKPLTLYGLIRENGYRKFLVFTNGINTSHRLSFVLQRLFGTDMVIEEWSSSLSPATRKSVLNRFSLGKVNGIICTDALARGIDIENIEVVISYDMPNHIDKYIHRIGRTARAGLRGTAITLLAEDEKKKFNALLKEANKTELETMEVSPSLEEEFAAKYANVLNDLREALELETEVINKIRKGISIGNIL")
        self.assertEqual(alignment.sequences[284].seq, "LTERYCITENRIKPLTLFALINENEWTKFLCFTNSAESSNRLAFVLKSLFQNKLVIGELSASISPKERANVLSQFARGSVHGLICSDALARGIDIPDVDVVISYDLPRHIKTYIHRIGRTARAGSQGTAVTMLTQKELQQFNHLLTEVGKVLTNEITVKTNHEAEYAKPYTLALQELRRKLEQDKRLQLMRKERAKDNAKFKAKDPSKLSVMEKLQMQAFTQVGDIALNKEESQNQRNNQKSKFVKRTKFNASAGKT")
        self.assertEqual(alignment.sequences[285].seq, "EKYCLTESRLKPLTLFALIMEHNWCRFLCFTNSAQSSGRLSFVLNKLFGGVKKIGELSASLNAKERSQTLSSFVRGKINGLVCTDALARGVDIPQVDIVISYDQPRHIKTYIHRIGRTARAGRPGTAITLLNQKEYVDFTQILKEAGKAIPDELLAPVNMETEHANEYSAALTALRGKITTNKRLRLLHKEKMKEKSLLVTKDTSGMTLMEKLQVQATVQVHNQADNKISLLSEKKNPSKTFKRKKQK")
        self.assertEqual(alignment.sequences[286].seq, "KLESYKLICKSNLKPLSLIVLLQELQGNKCLVFTSSVESSHRLSTLLCFFENLPFKFSEYSRLQRESTRRKTLEAFKEGKIDVLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEVKTFDKMLKKADNASCSLHSLPEESIETLRPTFSSALRKLEESLESEAAKKSNLGDKMPGASKRKRSN")
        self.assertEqual(alignment.sequences[287].seq, "ASLTEHMIVCESSQKPLMLFHLVHTHKITNALVFTKSAESTTRLVRLFEFFETARASADADETRKRIVIRAYSSDAGAAERKAILESFKAEEIQILVCSDVISRGMDISHVSHVVSYDSPVDMRKYVHRVGRTARAGRAGDAWTLIEEQEARYFKAMLKAADHLEKVKRLRVSEKDLAPLQPNYEAALGMLKD")
        self.assertEqual(alignment.sequences[288].seq, "LKEFMTICPTDKKPLMVIYLLHQMGIKSGLCFTKSVESTQQLYTLIEAYESTQPEDKRIRVKEYSSDLSPVQRKQMLKQFKQGHIDLLICSDLIGRGIDLDSVEFVISYDVPYYMDKYIHRVGRTARAGRQGEAYTLVEMQEARHFKEILRHAGHLNQIKTLKIEKDKLKELVPDYEKAMSKITE")
        self.assertEqual(alignment.sequences[289].seq, "PLELKEFVCMTDQRNKPLTLYGLIRENGYRKFLVFTNGISSSHRLSFVLQRLFGTEMVIEEWSSSLSPATRRNVLSRFSMGKVNGIICTDALARGIDIESIEVVISYDMPNHVDKYIHRIGRTARAGYSGTAITLVTEDERRKFKSMLKEADKKELETIEISAAVEEQYAAKYASALNDLRE")
        self.assertEqual(alignment.sequences[290].seq, "NLDEYWIECDTGSKPLVLLELLSEFAGSLSIIFTASVNSTHRLARLLQLYSTDPERIREFSSSLSQKQRSALVADCKAGRVETVVCSDAMARGMDIEDVANVVNYDVPSFIKTYIHRVGRTARAGRHGRCVTLVKMGQMKGMMRMLKKADNNKLKPYPLQQEHMKTLVPRYTDALQQLKDTLEAEKAGKLQATSILRKNKITTSERNNDDVAEEGNLDEEVVTADKKRAFSVLNAQLERN")
        self.assertEqual(alignment.sequences[291].seq, "PETLREHMVVCSTEEKPLILFHLIRQNKIVNALIFTKSAESTARLVQLFDFFESSLSRSGDGNAKPISVHAYSSDLSASERKSILEKFRTQEIHILICSDLISRGIDISHVSNIVSYDAPVDMRKYVHRAGRTARAGREGSAWTLVEEQEARYFKTMMKNASHFDKIKKVRLREDEVAAFMSHYQ")
        self.assertEqual(alignment.sequences[292].seq, "TLSEHMLVCDAARKPLMLFWLVLQHDVRGALVFTKSAESTARLVRLFEFFEAARAVGGKPLVARAYSSDLGAAERKATLEAFKNREIDLLVASDLISRGIDIAHVAHVVSYDVPVDMRKYVHRVGRTARAGRKGDAWTLVEEQEARYFKEMLRGAGRTEAVARVRVSDKQLEPFTGFYTDALQKLREAYAREKA")
        self.assertEqual(alignment.sequences[293].seq, "STLSENMIVCETSEKPLMLFHLVHAHSVTNALVFTKSAESTARLVRLFEFFEAAQSSTAQGSARIVVKAYSSDLSPSERKSILEQFKNQKIHILVCSDLISRGIDISHVSHVVSYDAPVDMRKYVHRVGRTARAGRFGSAWTLVEEQEARYFKSMLKEADHLDKVKRLRVSEKETTPLRPAYENALTQLKEVYARSA")
        self.assertEqual(alignment.sequences[294].seq, "QSKLKPLYLVSLLQSLQGEKSIVFTSSVESTHRLCTLLKFFDNLQIEFKEYSRLQRQSLRSKTLSAFRAGQVQVLISSDAMTRGMDVEGVRNVVNYDMPAYIKTFIHRVGRTARAGQSGCCFTLLRKDEVKRFKKLLQKADCDSCPTYSVSSEVIESLNSVYTSALEKLRENVESEKFKKSKIRLKSSNVRKEK")
        self.assertEqual(alignment.sequences[295].seq, "CRLKPLTLFALIMEHKWSRFLCFTNSAQSSGRLSFVLNKLFGNRVKVGELSASLNAKERSKMLSSFIRGKINGLVCTDALARGIDIPQVDIVISYDPPRHIKTYIHRIGRTARAGRPGTAITLLNQKEWSDFNQILKESGKGITDELLAPINIETTHANEYSAALTA")
        self.assertEqual(alignment.sequences[296].seq, "LTEYYVPCTLSKKPLLILHFILRLKFSPILCFTNSREATHRLFLLVQLFGGVQAAEFSSRLSPNERMRTLKEFEQGKIQLLISTDAAARGIDINGVKCVVNYDAPQFIRTYIHRVGRTARAGKSGLAFTFLLGVQEKKFLQMVKDAGSPGIHKQIVMPGNLKSMEPRYEQTLLELGNTIKGEKAKKR")
        self.assertEqual(alignment.sequences[297].seq, "KLQSYKLVCKSNLKPLSLIVLLQELRGEKCLVFTSSVESSHRLSTLLEFFEDLPFKFSEYSRLQRESTRRKTLDAFKEGKIDVLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEVKAFDKMLKKADNSSCTLHSLPEESVETLRPVFSSALKKLEESLESEARKKSKSGDKAPNASKRKRTIHTQPIATCELKATK")
        self.assertEqual(alignment.sequences[298].seq, "PVYLVGLLKALEGEKCIVFTSSVETTRRLCKLLNFFGDSMIKAKEYSGGLNQAVRSKEIKAFRKGDIKVLISSDALARGMDVELVTNVINYDMPQYPKTFIHRAGRTARAGRDGRCFTLLGDHEVRRFSSLLKKVGNASCPIYPIPPDLFAPVRAIYEPALAKLKESVEPIAPKRGRQVGFKHNSRTTNSQTKRNKATSEQ")
        self.assertEqual(alignment.sequences[299].seq, "KLQSYKLVCKSNLKPLSLIVLLQELRGEKCLVFTSSVESSHRLSTLLEFFEDLPFKFSEYSRLQRESTRRKTLDAFKEGKIDVLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEVKAFDKMLKKADNSSCSLHSLPEESVETLRPVFSSALKKLEESLESEATKKSKSGDKAPNASKRKRTIN")
        self.assertEqual(alignment.sequences[300].seq, "KLESYTLICELKLKPLYLVALLRDLRGEKCIVFTSSMKRTHRLTSLLNSFGELPFKICEFSGQQHQSVRSKTLEAFRKGEIDILVSSDAMARGMDVEGVSNVINYDMAPYVKTYIHRAGRTARAGQLGRCYTLLSKGEVKRFKALLQKAGDNSSKVHSLPADSVEELRPVYDSALKKMKELGDRSSKQHHVNLKPSRGIKRKKADKTSKESHCIA")
        self.assertEqual(alignment.sequences[301].seq, "LTHYYIPCNLNSKPLILLHFLLSLRFSRVLCFTNSRDASHRLYLLVRSFGGISVAEFSSRLSPGERKKTLKEFEQGKVQLLISTDATARGIDIKGVKCVINYDAPQFIRTYVHRVGRTARAGKAGLAFTMLLKVQENPYFSMLRDAGAPEMQKQLVKSENLKQYEQRYEEALIELQRAVKNERAQKRS")
        self.assertEqual(alignment.sequences[302].seq, "NLDEYWIECDTGSKPLVLLELLSEFAGSLSIIFTASVNSTHRLARLLQLYSTDPERIREFSSSLSQKQRSALVADCKAGRVETVVCSDAMARGMDIEDVANVVNYDVPSFIKTYIHRVGRTARAGRHGRCVTLVKMGQMKGMMRMLKKADNNKLKPYPLQQEHMKTLVPRYTDALQQLKDTLEAEKAGKLQATSILRKNKITTSERNNDDVAEEGNLDEEVVTADKKRAFSVLNAQLERNL")
        self.assertEqual(alignment.sequences[303].seq, "ATLTEYMIICDPSQKPMILLHLIYNLSVRSALVFTKSSESTSRLVRLIEFFEDVSTDRERVVICAYSSDLPPGERKRILERFKAQQIHILVCSDLISRGADISHVSHVVSYDAPIDMRKYVHRVGRTARAGRAGNAWTLVEEQEARYFKGMLREHSHLEKVKRIKISQRETEGLSPAYQIALQKLKEVYA")
        self.assertEqual(alignment.sequences[304].seq, "ELTEKFCLTQNNLKPLTLFALIKELKWQKFLCFTNSVEASERLNFVLQQLFSDEKIRIAELSGSRGRNRCSELLSKFSRGQINGLVCSDALARGIDIPGVDIVISYDPPRHIKTYIHRVGRTARAGRPGTAITLLSQHELDKFHKLLNEVGKVVTAEQETFPDIEEANAKKYQGILQRLREKLVHDKRKKILEMNRAREVKELESQDVTKLTPMEK")
        self.assertEqual(alignment.sequences[305].seq, "EHYFKCPPMLKPLAVYCLLKKFKYRTTLCFTNSRAATHRLCELLKQFGDLRVAECSSEISKAPRDKLLKDFSSGKIDLLVCTDAVSRGMDLGVVDCVISYDSPRYVKNYIHRAGRAARAGRPGTAITILVDSEIHGFHKLLGMAEKKNVTPLDMQTEEFEVYEEQFRKALDGLKNTVKEEIQSKIVRNHQVRQKKGFKPKFKKGKVVSTKLAKRRGNIVNK")
        self.assertEqual(alignment.sequences[306].seq, "LKEYMAIVPTEKKPLLVIYLLHCLGIKSGLCFTKSIESTERLKTLIDAYEALQPEEKRVRVKEYSSELRPAERRTVLRQFKEGEIDMLICSDLIGRGIDIDSVQYVISYDVPVYMDKYIHRVGRTARAGRHGVAYTLVEKQQARYFKDMLRQAGHLNQVELLNIEKEKLEELTPDYENAISSVTD")
        self.assertEqual(alignment.sequences[307].seq, "QYCVTELRLKPLTVFALVEKYKWKRFLCFTNSSDQASRLTFVLKVLFKKYSTIVSELSGNLSARVRKEKLKDFSAGKINGLICSDALARGIDVADVDVVLSYETPRHITTYIHRVGRTARAGRKGTAVTLLTEQDMALFKKILSDADKELGEEIHVSPDIEIQHAVDYKEALDHLRRENEKNKNKKAAEKNRVATKAMLHKKQEETATVRPLTLMEKLQVKANQILLSSSKSSERQNPKTKANKATKLPKETKKQIIAKQRK")
        self.assertEqual(alignment.sequences[308].seq, "SSLVQHYTIIKTEDKPLLLFHLILSQSMTNVLVFTKSASSTQRLLKLLQFLNDGWSQQRSQESAFHIMATAFSSDLSVHERKSILASFKEGKINVLVASDLVSRGIDLPHVSHVISYDVPIDMRKYVHRVGRTARAGRAGVAWTLVEKQEAHHFLEMMRESGHLQDVSKNRIEGNDLAPY")
        self.assertEqual(alignment.sequences[309].seq, "DQLKSFKVICESKLKPLYLVALLQSLQGEKCIVFTSSVESTHRLCTLLNFFDDLNFEIKEYSRLQRQSVRSKTLKAFRAGEIRVLVSSDAMTRGMDVEEVRNVINYDMPPYIKTYIHRAGRTARAGKSGCCFTLLHKDEVKRFKKLLQKADNNSCPLYHIPPQSVESRRSIYTSALEKLKESVESEVHRKRKAQV")
        self.assertEqual(alignment.sequences[310].seq, "TPDELQEQYVVCSAEEKPLIFYYFFAELKWDKTLCFTNSSQSAHRLTVLLNIWSKGNLKVAELSAALDRTSRELVLRKFKQSEINVIICTDALARGIDIPDCNYVISYDPPRNIKTYVHRVGRTGRAGRIGNAVTIIVHNQVQMFKDILQSGGKSDIPQLEMQNDILQDLMPGYQNAIRETKQSIDNEIHDKVKKSKELKRMSKSKPRKRKHNENKSLNVPME")
        self.assertEqual(alignment.sequences[311].seq, "SHHYVPCSLRTKPLAVLHLILEKNFSRVLCFTNSRENSHRLFLLVQAFGGVTAAEFSSRCGPSQRKVVLKQFEQGKIQLLISTDAMARGIDVQGVQRVINYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQERKFLRMLAEAGVPEMARHDIPNELLQPLLPRYEEALSQLERAVKEERRQKA")
        self.assertEqual(alignment.sequences[312].seq, "GLTEFYVPCQLNKKPLIILYFMLRMRFRRVLCFTNSREASHRLYVLIRAFGGIEVAEFSSRLSPQERRKTLKMFEQGKLQLLISTDATARGIDIKEVMCVINYDAPQFIRTYIHRVGRTARAGKAGLAFTFLLHVQEERFLQMMKDAGSKELKKQLVKHENLTPLIPRYEESLLDLKRALKDEQRKLG")
        self.assertEqual(alignment.sequences[313].seq, "NLDEYWIECDTGSKPLVLLELLSEFAGSLSIIFTASVNSTHRLARLLQLYSTDPERIREFSSSLSQKQRSALVADCKAGRVETVVCSDAMARGMDIEDVANVVNYDVPSFIKTYIHRVGRTARAGRHGRCVTLVKMGQMKGMMRMLKKADNNKLKPYPLQQEHMKTLVPRYTDALQQLKDTLEAEKAGKLQATSILRKNKITTSERNNDDVAEEGNLDEKVVTADKKRAFSVLNAQLERNL")
        self.assertEqual(alignment.sequences[314].seq, "TLMEHMIICEPSVKPLMLLHLVYTRSIRNALVFTKSSESTSRLVRLIEFFQEAGTEDNRVILRAYSSDLPASERKSILDKFKAQEIHILVCSDLISRGLDISHVSHVVSYDAPVDIRKYVHRVGRTARAGRTGEAWTLVEEQEARHFKGMLREYSHLERVKRTKVTEKDTAGLLASYQVALQQLKETYT")
        self.assertEqual(alignment.sequences[315].seq, "HHYVPCSLSSKPLAIMHLVVGKNFSRALCFTNSRENSHRLFLLLQAFGGVSVAEFSSRYGPGHRRKVLKQFEQGKIQLLISTDATARGIDVLGVELVINYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQERTFLRMLAEGGAPELARHEIPSKLLQPLVPRYEEALSQLERTVKV")
        self.assertEqual(alignment.sequences[316].seq, "PETLREHMVVCPTEEKPLILFHLIRQNKIVNALIFTKSAESTARLVQLFDFFESSLSRSGDGNAKPISVHAYSSDLSASERKSILEKFRTQEIHILICSDLISRGIDISHVSNIVSYDAPVDMRKYVHRAGRTARAGREGSAWTLVEEQEARYFKTMMKNASHFDKIKKVRLREDEVAAFMPHY")
        self.assertEqual(alignment.sequences[317].seq, "LTHYYIPCNLNSKPLILLHFLLSLRFSRVLCFTNSRDASHRLYLLIRSFGGIDVAEFSSRLSPGERKRTLKEFEQGKVQLLVSTDATARGIDIKGVKCIINYDAPQFIRTYVHRVGRTARAGKAGLAFTMLLKVQEKPYFGMLRDAGAPELQRQLVKSECLKQYEQRYEEALSELQKAVKNERAQKRS")
        self.assertEqual(alignment.sequences[318].seq, "EGLSQCYVPCDLNSKPLLLLYFMLTMKFTRVLCFTNSREASHRLFLLVQAFGGVTVAEFSSRLSPSERQRTIREFEQGKIQLLISTDATARGIDVKGVNYVINYDAPQFIRTYVHRVGRTARAGKVGVAFSLVLRIQERRFLRMLRDAGIRDIQKHPMKGKALKPLVQQYEAALCKLEKTVK")
        self.assertEqual(alignment.sequences[319].seq, "QYCVTELRLKPLTVFALVEKYKWKRFLCFTNSSDQASRLTFVLEVLFQKYNTKVSELSGNLSAKVRKERLRDFAAGKINGLICSDALARGIDVADVDVVLSYEIPRHITTYIHRVGRTARAGRKGTAVTLLTEYDMTLFKKILSDANKGLGEEIHVSPDIEIQHAVEYKEALAGLRTEKEKKKNQKMAEKNRVATKALIHKKQEETATVRPLTLMEKLQIKANEIVQSSKKSSETKNPKTKADKTKYQPKETKRQIIAKQR")
        self.assertEqual(alignment.sequences[320].seq, "LTEYYVCCTLSKKPLLILHFLLRLKFYPVLCFTNSREAAHRLFLLVKLYGGVEVAEFSSRLNPSERQKTLKNFEKGKIQLLISTDAAARGIDIKGVKCVINYDAPQYIRTYIHRVGRTARAGKAGVAFTFVLGVQVERFVKMVQDGGSPGLQKQTIKPESLRGMESRYEDVLVELGRVIKEETAHKR")
        self.assertEqual(alignment.sequences[321].seq, "LKEFICMTEQRSKPLTLYALISENRYRKFLVFTNGINSSHRLSFVLQRLFGAEMVIEEWSSSLSPATRKNVLSRFSMGKVNGIICTDALARGIDIESIEVVISYDMPNHVDKYIHRIGRTARAGCRGTAITLLAEDEKKKFNALLKEANKKELETMEVNPSVEEEFAAKYANALTDLREALALETEVINKIRSGISIGYMTRVNLLTKLKDQVDITYSTEIIKSLKY")
        self.assertEqual(alignment.sequences[322].seq, "KPLFILHFILYLKLRPILCFTNSRETAHRLYRLVQLFGGVQAAEFSSRLSPGERKNTLKDFEQGKIQLLISTDAAARGIDIKDVKCVVNYDAPQYIRTYIHRIGRTARAGKPGLAFTFLLRVQENNFLRMVMEAGSPGIQKQMVKPESLKGMEERYGAVLQELADVIKDERSR")
        self.assertEqual(alignment.sequences[323].seq, "DSTKPLAVWNLVANRGFRDTLCFTASKEDAHRLSLVLKEMGGVHVEEFSAKLSSAERARVLRKFASGKLDILVCSNVLARGLDVPNVRHVICYDPPRFIKTYVHRVGRTARAGVPGTAVTFMRQGQLQAFKEMLESAGKQDIQPLDIGEGDGLEEFQSKYRDALKAVEEIVKSEQNGPERGKKYSFAQKPWAAKEASDVQH")
        self.assertEqual(alignment.sequences[324].seq, "EGLTEYYIPCQMSKKPLLILHFVLRMKLYPILCFTNSRETAHRLYLLVKLFGGVQAAEFSSRLSPWERKKTLKDFEQGKIQLLISTDAAARGIDITGVKCVINYDAPQYVRTYVHRVGRTARAGKAGLAFTFLLKVQEMNFLQMVKEAGSPGIQKQLVKPENLKSMEDRYEQVLQELADVIKDEKSRC")
        self.assertEqual(alignment.sequences[325].seq, "FVELVERQRPIFLVHLVRKLGHERILCFTNSREESKRLATLLNYFEGIKAGALNAGMPLQKRTRLLCAFANGEYQLLICTDAVARGIDVKNISCVVSYKAPQSVKTYVHRIGRTARAGKSGEAYTLLNHNQIRHFKSSLKLVGKHARNFPIHSSKLRPYEKDYKAALAELEKEYKAKPKDAFGVTKRVEEENGKRKRPLNEKDSREAKKPNLKAGEEITMSQDDEKLMGVQ")
        self.assertEqual(alignment.sequences[326].seq, "YKLICERKVKPLYLVALLKSLGEEKCIVFTRSVESTHHLCKLLNCFGDLKIGIKEFSGLKHQRVRSKTVGEFRRGEFQVLVSSDAMTRGMDVEGVRNVINYDMPKYTKTYVHRAGRTARAGQTGRCFTLMSKDEVGGFKKLMKKAEASDCLEYTVPSSLIEALHSTYQSALTKLKEKILESRRKPRISLVN")
        self.assertEqual(alignment.sequences[327].seq, "SHHYVPCSLQAKPLVILHLILHLSFSRVLCFTNSRENAHRLFLLVQAFGGVAVAEFSSRYGPGWRKMILKQFEQGKIQLLISTDATARGIDVRGVQLVVNYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQERKFLRMLTEAGAPELQRHDAPTELLQPLVPRYEAALAQLEEAVREEQRQKVA")
        self.assertEqual(alignment.sequences[328].seq, "EGLSQCYVPCDLNSKPLLLLYFMLKMKFTRVLCFTNSREASHRLFLLVQAFGGITVAEFSSRLTPNERKRTMKEFEQGKIQLLISTDATARGIDVKRVNYVINYDAPQFIRTYVHRVGRTARAGEAGVAFSLVLRIQERRFLRMLRDAGIRDIKKHPVKGNSLKPLVQQYEGALCKLEKTVK")
        self.assertEqual(alignment.sequences[329].seq, "YLTHDNTKPLAVWDLVANHGFRDTLCFTASKEDAHRLSLVLKEMGSIRAEEFSAKLSIADRARVLRKFASGKLDILVCSNVLARGLDVANVRHVICYDPPKFIKTYVHRVGRTARAGVPGTAVTFLRQGQLQAFKEMLSSAGKTDIQPLDLSNTDELEALQSKYRDALRAVEAVVKSEQVGPERKKKYNFAAKSASANET")
        self.assertEqual(alignment.sequences[330].seq, "DELIENYVVCNAEEKPLILFHLLVEKKWDKVLCFTNSAQSVHRLAVLLNEWGKDQCLKVAELSSALDRASREKVLEKFKQSEVNVIISTDALARGIDIPDCNYVVSYDPPRNIKTYVHRVGRTGRAGRIGRAVTILNHNQLNMFKEQIQSSGKSEINQLEVSEESYSHLLQSYESAIQETKQIIHTEINNKVKKSIELKRGMKKKSRKRKHNE")
        self.assertEqual(alignment.sequences[331].seq, "ETPEKLEEWMIECDSDSKPLRLIQLLLTFKDQMTLIFTSSVNATHRLTRLLQLVFKEHSDDDVGVQEYSSSLTLQQRRTLVAKCKKGLYRILVCSDAMARGMDLDDVVNVINYDVPSFIKTYIHRAGRAARAGRFGRCVTLVKRGQTKGLQRMLQKAKKKKLLAFPLPPEEIQQLVPVYMKALQNLKETLEMEASGTLKATGRLIP")
        self.assertEqual(alignment.sequences[332].seq, "ATLREHMIVCASSEKPLVLFDLVQRHKVRNGLVFTKSAESTARLVRLFELFEKAVAGEGRLGVVAKAYSSDLSVGERRGILEKFKAEEIQILVCSDLISRGMDMSHVSHVVSYDVPVDMRKYVHRVGRTARAGREGDAWTLVEEQEARYFKRMLSEADHISRVRKMRLTERDLFPL")
        self.assertEqual(alignment.sequences[333].seq, "ERLESYKLICESKLKPLYLVALLQSLGEEKCIVFTSSVESTHRLCTLLNHFGELRIKIKEYSGLQRQSVRSKTLKAFREGKIQVLVSSDAMTRGMDVEGVNNVVNYDKPAYIKTYIHRAGRTARAGQLGRCFTLLHKDEVKRFKKLLQKADNDSCPIHSIPSSLIESLRPVYKS")
        self.assertEqual(alignment.sequences[334].seq, "KEFVCMTDQRMKPLTLYGLIRENGYRKFLVFTNGINNAHRLSFVLQRLFGTEMVIEEWSSSLAPATRRNVLSRFSMGKVNGIICTDALARGIDIESIEVVISYDVPKHVDNYIHRIGRTARAGYSGTAITLVTEDDRKKFKSILKEAYKQDLETIEVSMSLEEKYAAKYASALNDLRDALALETEMIKKIRKGETLGNMARVNLLSKLKDQVHITYSTEIIKSLKLLPKSWTNEA")
        self.assertEqual(alignment.sequences[335].seq, "LESYGLICTTEKKLLNLAALLEDLDSEKSIVFTSSINLTHRLCTSLNLLGCLPCKINEYSRLQNQSARSKILKDFREGRIDVLVSSDGMTRGMDVEGIKNVINYDLPMYVKKYIHRAGRTARAGQAGRCFTLLRKNETKSFKNMLEKVGIDSFSPYAFPAASLQRLEPLCITAMEKLIELEESKSSKQVEASSKFNKAK")
        self.assertEqual(alignment.sequences[336].seq, "VTELRLKPLTVYALVEKYQWKRFLCFTNSSDQASRLTFVLSLLFQNGTKVAELSGNLSAKIRKTTLRNFSAGKINGLVCSDALARGIDVADVDVVLSYEIPRHITTYIHRVGRTARAGRKGTAVTLLTDKDMTLFKKILSDADKRLGEEIHVSPDIEIQHAVQYKEALFRLRKRTETTKNEKAIEKNRVATKAMVHKKQEETATVRPLTLMEKLQIKANQILDSKTQIPKKRAKKAKQQPKETKKQIIAKQRKAIE")
        self.assertEqual(alignment.sequences[337].seq, "GLTEYYIPCQMSKKPLLILHFVLRMKLYPILCFTNSRETAHRLYLLVKLFGGVQAAEFSSRLSPWERKKTLKDFEQGKIQLLISTDAAARGIDVTGVKCVINYDAPQYVRTYVHRVGRTARAGKAGLAFTFLLKVQETNFLQMVKEAGSPGIQKQLVKPENLKSMEDRYEQVLQELADVIKDEKSRC")
        self.assertEqual(alignment.sequences[338].seq, "KLQSYKLVCKSNLKPLSLIVLLQELRGEKCLVFTSSVESSHRLSTLLEFFEDLSFKFSEYSRLQRESTRRKTLDAFKEGKIDVLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEVKAFDKMLKKADNSSCSLHSLPEESVETLRPVFSTALKKLEESLESEATKKSRSGDKVPNASKRKRTI")
        self.assertEqual(alignment.sequences[339].seq, "LPHNIKQYMIHCTAGEKPLITLNLVLNKTRVLCFAGSIETTRKLSMLIQMYADKEGKKEFICTEFASHLPSSKRGKVLKDFISGKINVLVCSDSMARGLDVPCVEHVILYDVPPLIKTYIHRIGRTARAGATGTAYTLLRKQEIFHFKKMIADAGKCKVKTMKIPKESTQKMVSIYEQVLPMVAEKMKTLKR")
        self.assertEqual(alignment.sequences[340].seq, "TEHYFKCPPMLKPLAVYCLLKKFKYRTTLCFTNSRAATHRLCELLKQFGDLRVAECSSEISKAPRDKLLKDFSSGKIDLLVCTDAVSRGMDLGVVDCVISYDSPRYVKNYIHRAGRAARAGRPGTAITILVDSEMHGFHKLLGMAEKKNVTPLDMQTEEFEVYEEQFRKALDGLKNTVKEEIQSKIVRNHQVRQKKGFKPKFKKGKVVSTKLAKRRGNIVNK")
        self.assertEqual(alignment.sequences[341].seq, "GLSQCYVPCDLNSKPLLLLHFMLTMKFTRVLCFTNSREASHRLFLLVQAFGGVTVAEFSSRLAPKERQRTMKEFEQGKIQLLISTDATARGIDVQGVNYVINYDAPQFIRTYVHRVGRTARAGKAGVAFSLVLRIQERRFLRMLKDAGIQDMKKHPVKGNSLKPLVQQYEAALCKLEKTVKVIEMGKK")
        self.assertEqual(alignment.sequences[342].seq, "GLSQCYVPCDLNSKPLLLLHFMLTMKFTRVLCFTNSREASHRLFLLVQAFGGVTAAEFSSRLPPSERQRTMKEFEQGKIQLLISTDATARGIDVKGVNYVINYDAPQFIRTYIHRVGRTARAGKVGVAFSLVLRIQERRFLRMLKDAGIQDIKKHPVKGNSLKPLVQQYEEALSKLEKTVKVIETGKK")
        self.assertEqual(alignment.sequences[343].seq, "EGLTEYYIPCQMSKKPLLILHFVLRMKLYPILCFTNSRETAHRLYLLVKLFGGVQAAEFSSRLSPWERKKTLKDFEQGKIQLLISTDAAARGIDVTGVKCVINYDAPQYVRTYVHRVGRTARAGKAGLAFTFLLKVQETNFLQMVKEAGSPGIQKQLVKPENLKSMEDRYEQVLQELADVIKDEKSRC")
        self.assertEqual(alignment.sequences[344].seq, "RELVCMTQFKIKPLTLFALIKENGYKRFLCFTNSIDGSHRLSFVLQKMFGTELVIEEWSSSLSPQARKSVLSRFALGKVNGIICTDALARGIDIDDIDVVISYDMPRHINTYIHRIGRTGRAGNRGTSITMLIDEERKKFQSTLAEAGKQPLESIEIRSNAEEEYAVLYSTALNDLREALDLEKQTIQKIRSGMSIANMTKVNLLSKLKDRVDIDGGHSSEMIKT")
        self.assertEqual(alignment.sequences[345].seq, "TPDELHEHYVVCSAEEKPLIFYNFFANLKWDKTLCFTNSSQSAHRLTALLNIWGSGKLRVAELSAALDRASRELVLRKFKQSEIDVIISTDALARGIDIPECDHVISYDPPRNIKTYIHRVGRTGRAGRKGTAVTIVINNQVHMFKEIIQSSGNNNIQQMVIQREVIDSLLENYESAIFETKRLINEETHIKVKKSIELKRGPKSKPRKRKHNENKSINRQQT")
        self.assertEqual(alignment.sequences[346].seq, "GLSQCYVPCDLNSKPLLLLHFMLTMKFTRVLCFTNSREASHRLFLLVQAFGRVAVAEFSSRLPPNERQRTMKEFEQGKIQLLISTDATARGIDVKGVNYVINYDAPQFIRTYIHRVGRTARAGKMGVAFSLVLRIQERRFLRMLKDAGIQDIKKHPVKGNSLKPLLQQYEEALCKLEKTVKVIETGKK")
        self.assertEqual(alignment.sequences[347].seq, "YYYVTLDNTKPLAVWDLVANHGFRDTLCFTASKEDAHRLSLVLKEMGGVRVEEFSAKLSSAERARVLRKFASGKLDILVCSNVLARGLDVANVRHVICYDPPRFIKTYVHRVGRTARAGVPGTAVTFMRQGQLQAFKAMLESAGKQDIQPLDIGESDGLEEFQSKYRDALKAVEAIVKSEQSGPERGKKYSFAQKSWAAKEAPDVQ")
        self.assertEqual(alignment.sequences[348].seq, "ATLREHMIVCEASKKPLMLLYLIHQRGVTNALVFTKSAESAARLVKLVEFFEDAWAQRDGRKMVVRAYSSDLAPGERKTILEKFKRGEVDMLVASDLISRGIDISSVAHVVSYDVPVDMRKYVHRVGRTARAGRGGDAWTLVEEQEARYFKLVLNGADHLGRVKRVKVTERDTQDLT")
        self.assertEqual(alignment.sequences[349].seq, "SDKELEVSAAPGRLSEFFVQLKPSQKPLFVIHLVLGLGRSRVLCFTNSRESAHRLASLITHFADPRVTCEAVSARLPVPKRARILRRFSTGQLSVLVCSDSMARGMDLPSVDAVVCYDRPASLRTYVHRAGRTARAGRAGAAYTLLERREVLHFRRMLSAGGRQVREVRLH")
        self.assertEqual(alignment.sequences[350].seq, "PDKLSEQYVVCSGSQKPLVLFYLIVTHNVRNALIFTKSAESTTRLVRLFTFFEQARAQEDPNAQPIVARSYSSDLSTSERRSILDKFRSQDIQILVCSDLISRGIDISHVSHVVSYDAPVDMRKYVHRVGRTARAGRSGDAWTLVEEQEVSNALYT")
        self.assertEqual(alignment.sequences[351].seq, "PTKLESYKLICTSNIKPLCLIVLLQELCGEKCLVFTKSVDDSHRLSTFLGFFEELPFKFSKFSSLQRESTRRKTLAAFKEGKIDVLIGSDIMARGIHIDGLKYVINYEMPQYVKTYIHRAGRTARAGESGSCFTFLRKNEVKKFDNMLKKAGGSSCILR")
        self.assertEqual(alignment.sequences[352].seq, "TPAELKEHYVVCEAENKPLVLYNFLVEQKWDKVLCFTNAAETTHRLTVLLNTWACKGLKVAELSAALDRSMRENVLKKFMLSEIDVLISTDALARGIDIPDCNYVISYDPPRNIKTYIHRVGRTGRAGKIGKAVTVLLPSQISLFKDLIKAGGKEEIPEIKINTDVIDRLFESYASAMNTTREKINSELNLKIKNSIEIKRSAKSKIQKRKK")
        self.assertEqual(alignment.sequences[353].seq, "KEYMAIIPTEKKPLLVVYLLHCLGIKSGLCFTKSVESTERLKTLIDAYEALQPEEKRVRVKEYSSELRPAERRTVLRQFKEGEIDMLICSDLIGRGIDIDSVQYVISYDVPVYMDKYIHRVGRTARAGRHGVAYTLVEKQQARYFKEMLRQAGHLNQVELLDIEKEKLEELTPDYENAISSVTD")
        self.assertEqual(alignment.sequences[354].seq, "MKPVYLVALLKSWEGEKSIIFTSSVETTRRLCKLLNFFGDSKIKAKEYSGGLNQSVRSKELKAFRKGDIQVLVASDALTRGMDVKGVTNVINYDMPPFAKTFIHRAGRTARAGQAGKCYTLLSDHEVRRFSKLLKKVGSGSCPIYSIPPTSFDSVRATYEPALEKLQELVESEEPRKRRQAFKHNSRTGNSRTKRSKTTSEQA")
        self.assertEqual(alignment.sequences[355].seq, "YRIPTKLESYKLICTTNLKPLCLIVLLQELHGEKCLVFTSSVESSHRLSTLLGFFEDLPFKFSEFSRLQRESTRRKTLADFKEGKIDVLIGTDIMARGIHIDGLKYVINYDMPPYVKTYIHRAGRTARAGESGSCFTLLRKHEVMIV")
        self.assertEqual(alignment.sequences[356].seq, "LTEHMAVCDPADKPLAFFHLITSHGIRNALVFTKSAESTTRLVRLFEFFEKARAERSPAGDSRPVTISAYSSDLGGAERRAILERFRKQEIQILVASDLISRGLDVSHVSHVVSYDAPVDVRKYVHRVGRTARAGRAGSAWTLVEEQEARYFKNMMKEADHLPSLKKVKVDRKEMEELRPLY")
        self.assertEqual(alignment.sequences[357].seq, "LLKEKFMDCKKAEKPLILFHFVLNLKFQQVLCFTNSVESTHRLYLLAKQMEGLKVAELSSGVHTEKRERIIRKFSRGDLQLLICSDVMTRGMDIENVQYVISYDAPTYIETYIHRVGRTARANRPGTAITLLEGKEMFHFKKMLRESGRWSKLKRITVNNSKLEPLVPHFSKALKILPMILKEQRKQLKN")
        self.assertEqual(alignment.sequences[358].seq, "KEYMAIIPTEKKPLLVVYLLHCLGIKSGLCFTKSVESTERLKTLIDAYEALQPEEKRVRVKEYSSELRPAERRTVLRQFKEGEIDMLICSDLIGRGIDIDSVQYVISYDVPVYMDKYIHRVGRTARAGRHGVAYTLVEKQQARYFKEMLRQAGHLNQVELLDIEKEKLEELTPDYENAISSVTD")
        self.assertEqual(alignment.sequences[359].seq, "ECYCIIENRIKPLTLFALINENEWTKFLCFTNSAESSNRLSFVLNSLFKEDLVIRELSASITPKERANVLSQFARGRINGLVCSDALARGIDIPDVDVVISYDLPRHIKTYIHRIGRTARAGSPGTAITMLTQKELQQFNHILGEVGKILTNEMTVKTNYEAEYAKQYTMALQELRRKVEQDKRLQILRKERVKDNAKLAAKDPSKMSVMEKLQLQVSTQVGDIEQDKEESRMQKNNMKNNMVKRKKFNASAGKTK")
        self.assertEqual(alignment.sequences[360].seq, "THHYVPCSLNSKPLVVLHLVLEMGFSRVLCFTNSRENSHRLFLLVQAFGGVDVAEFSSRYGPGQRRMILKQFEQGKIQLLISTDATARGIDVQGVELVVNYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQERRFLRMLTEAGAPELQRHELSSKLLQPLVPRYEEALSQLEESVKEEHKQRAA")
        self.assertEqual(alignment.sequences[361].seq, "TEHYFKCPPMLKPLAVYCLLKKFKYRTTLCFTNSRAATHRLCELLKQFGDLRVAECSSEISKAPRDKLLKDFSSGKIDLLVCTDAVSRGMDLGVVDCVISYDSPRYVKNYIHRAGRAARAGRPGTAITILVDSEMHGFHKLLGMAEKKNVTPLDMQTEEFEVYEEQFRKALDGLKNTVKEEIQSKIVRNHQVRQKKGFKPKFKKGKVVSTKLAKRRGNIVNK")
        self.assertEqual(alignment.sequences[362].seq, "EFFVELIERQKPMFLAHLIKKLGHTRVLCFTNSRESTKRLAVLMSFFDNIKAGALNAGMPLQKRTRLLHSFANGEIQLLICTDAVARGIDIEDVSCVVSYEAPQSTKTYVHRVGRTARAGRPGQAYTLLLHNQIRYFKSSLKSVGKHARNFPVHSSNLRPYTSTYQKALGYLEKKFQVKPLN")
        self.assertEqual(alignment.sequences[363].seq, "VCYTQFRIKPLTLFALIRQAGYRKFLVFTNGIDGSHRLSFVLQRLFGTDMVIEEWSSSLTPATRRSVLHRFSLGKVNGIICTDALARGFDIDDIEIVVSYDMPRHISTYIHRIGRTARAGNRGTSITLLIDEEKKKFNSMLKEAGKEELEAVEIQSSVEEEYAGKYSTALNDLRDALELEKQIITKIRNGMTMASLTRVNLLSKLKDRIDVDGSTNSTELIKSLKHLPKSWTNE")
        self.assertEqual(alignment.sequences[364].seq, "ELKESFVLCHKDMKPLILSYLISHFNWKRVLCFTNTKESTHRLCLLLKYMGNLNVKEISAKWTAKARDVMLKKFASGAIDILVTSDQMARGIDIPTVDYVISYDLPGYTKTYIHRIGRCARAGRDGHAVSLVMKEQIGMYKKTMKSAGKNNFERLMVKNSDLKELEPKFKEALTQLKTTVTEEEDTLKSHKGRKQLEVKKRKDKQDKRTAKKVNEKATLKKK")
        self.assertEqual(alignment.sequences[365].seq, "SEYYVPCTFSKKPLIILHFLLRLKFSPALCFTNSREGAHRLYLLVKLFGGVEVAEFSSKLSPGERQKTLKDFEKGKIPLLISTDAAARGIDINGVKCVINYDAPQYIRTYIHRVGRTARAGKAGLAFTFLLKVQEKRFLKMVSDAGSPGIQKQHVHPEALKSMESRYEQVLAELGTIVKEENEKKRF")
        self.assertEqual(alignment.sequences[366].seq, "LSEHMCVCSPAEKPLILFYLVHTHGVRNTLIFTKSAESTTRLVQLFEFFEAARKQENPGGAKRVTIQAYSSDLSSQERKSVIERFKEGKIELLVCSDLVARGVDISHVAHVVSYDVPVDMRKYVHRVGRTARAGREGDAWSLVEDQEARYFKQMLRKSGHLSALKRLRIKEGEIAPLQASYETALQKLKEVYARTPTQV")
        self.assertEqual(alignment.sequences[367].seq, "THHYVPCSLSSKPLVVLHLVLEMGFSRVLCFTNSRENSHRLFLLVQAFGGVDVAEFSSRYGPGQRRRILKQFEQGKIQLLISTDATARGIDVQGVELVVNYDAPQYLRTYVHRAGRTARAGKTGQAFTLLLRVQERRFLQMLTEAGVPELRRHELSSKLLQALVPRYEEALSQLEESIKEEHKQRAA")
        self.assertEqual(alignment.sequences[368].seq, "LSEYMCVCSPAEKPLVLFHLVHTHGVRNALIFTKSAESTTRLVQLFEFFEVARNKDLGETGSVTMQAYSSDLSNQERKSVIERFKEGRIDLLVCSDLVARGVDISHVAHVVSYDVPVDMRKYVHRVGRTARAGRKGDAWSLVEDQEARYFKQMLRKAGHLNVIKKFRTKESDMAPLQPHYEVR")
        self.assertEqual(alignment.sequences[369].seq, "ASLNEMFIKCEENTKPLVLFHLIHTRKYRQVLCFTNSVKSTHRLCTLLRLMGKVSVEELSSHISINKRQKTLKKFAAGKIEIVVCSDQMARGMDIENAKCVISYDVPNFIQNYVHRVGRTARGGHAGSAITLLDHSQVKFFKEMLHKAGKSDFKTETVKPSELKVYIDAYEDALKEMPKILEMEKKA")
        self.assertEqual(alignment.sequences[370].seq, "LKEFVCVTEQRSKPLTLYALICENRYRKFLVFTNGINSSHRLSFVLQRLFGTEMVIEEWSSSLSPATRKNVLSRFSMGKVNGIICTDALARGIDIESIEVVISYDMPNHVDKYIHRIGRTARAGCRGTAITLVAEDEKKKFNALLKEANKKELETMEVNPSVEEEFAAKYANALTDLREALALETEVINKIRSGMSIGYMTRVNLLTKLKDQVDITYSTEIIKTLKYLPKSWTNEA")
        self.assertEqual(alignment.sequences[371].seq, "LSEYMCVCSPAEKPLVLFHLVHTHGVRNALIFTKSAESTTRLVQLFEFFEVARNKDLGETGSVTMQAYSSDLSNQERKSVIERFKEGRIDLLVCSDLVARGVDISHVAHVVSYDVPVDMRKYVHRVGRTARAGRKGDAWSLVEDQEARYFKQMLRKAGHLNVIKKFRTKESDMAPLQPHYETALQNLRDVYART")
        self.assertEqual(alignment.sequences[372].seq, "DTLREHMIVVNPSKKPLIMFHLVYSHQVTNALVFTKSAESTTRLLRLFEFFEEARMAAGGEDTSSRIVARAYSSDSPPSERKSILEDFKAQKIHILICSDLISRGIDISHVNHVVSYDAPVDIRKYVHRVGRTARAGREGDAWTLVEEQEAHYFKKMMKEADHLDSVKRLRVAETATAPLEPFYEAALGKLKEVY")
        self.assertEqual(alignment.sequences[373].seq, "LTERMVVCEPSLKPLVFFHIVLEHGVTNALVFTKSAESTERLVRLFEFFNTAQHGAVVARAYSSDLTAGERKTILEKFKAQEIQILICSDLISRGIDIHHVAHVVSYDVPVDMRKYVHRVGRTARAGRPGEAWTLVEEQEARYFKSMMKEVDHLPRLKRLRVGDKDLAGLKERYEDALQRLKESYIRT")
        self.assertEqual(alignment.sequences[374].seq, "EGLSQYYVPCNLNSKPLFLLHFMLTMKFTHVLCFTNSKETSHRLFLLVRSFGGVNVAEFSSRLTPSERQKTLKVFEQGKIQLLISTDATARGIDIKGVKYVINYDAPQFIRTYIHRVGRTARAGKAGLAFTMLLKVQEQKFLQMLRDAGFPELGKQLVKSEYLKPLSERYEEALSKLQKTVKDERAQKHA")
        self.assertEqual(alignment.sequences[375].seq, "DTLQQQMIVVNASEKPLVFFWLIHNKGVRNALVFTKSAESTSRLVQLLRFFGDCRGNIEDQVVVHAYSSDLSPSDRKMVLEKFKKQEINILVASDLISRGIDISHVSHVVSYDVPVDMTKYVHRVGRTARAGRDGSAWSLVEDQEARYFKNMLKEAGHLENVKRVRLGEKELEGLRPDYKRALAQLKESYTR")
        self.assertEqual(alignment.sequences[376].seq, "PEGLSQYYVPCNLNSKPLFLLYFMLRMKFTRVLCFTNSKQTSHRLFLLIQAFGGVNVAEFSSWLTPSERQRTLKEFEQGKIQLLISTDATARGIDVKGVKCVINYDAPQFIRTYIHRVGRTARAGKVGLAFTMLLKVQERKFLQMLRDAGTPDLEKQLVKSEYLNPLLQQYEE")
        self.assertEqual(alignment.sequences[377].seq, "ATLREHMLVCDSSQKPLMLFHLVRAHQVKNALVFTKSAESTMRLVRLFEFFETARHASGAESESKTIVVRAYSSDLSPSERKSILEKFKAQEIDMLVCSDLVSRGIDISHVAHVVSYDVPVDMRKYVHRVGRTARAGREGDAWTLVEEQEARYFKEMLRAAEHVDAVKRVRVSEKQLEGLVPHYEVALQQLKEVYARDRR")
        self.assertEqual(alignment.sequences[378].seq, "KLQSYKLVCKSNLKPLSLIVLLQELRGEKCLVFTSSVESSHRLSTLLEFFEDLPFKFSEYSRLQRESTRRKTLDAFKEGKIDVLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEVKAFDKMLKKADNSSCTLHSLPEESVETLRPVFSSALKKLEESLESEARKKSKSGDKAPNASKRKRTIHTFIHQ")
        self.assertEqual(alignment.sequences[379].seq, "DTLSEHMCVCSSAEKPLVLFHLVHTHGIRNALIFTKSAESTTRLVQLFEFFEAARSKNLGEAKCVTMQAYSSDLGNQERKNVIERFKEGNIDLLVCSDLVARGVDISHVAHVVSYDIPVDMRKYVHRVGRTARAGRKGDAWSLVEDQEARYFKQMLKKAGHLEGIKKLKTKESDIALLQPYYETALQNLREVYAR")
        self.assertEqual(alignment.sequences[380].seq, "YKLICERKVKPLYLVALLKSLGEEKCIVFTRFVESTHHLCKLLNFFGDLKIGIKEFSGLKHQQVRSKTVGEFQRREFQVLVSSDAMTRVMDVEGLRNVINYDVPKYTKTYVHRPGRTARAGQTGCCFTLMSKDEVGGFEKLMKKAEASDCLQHTVPSSLIEALHSTYSSDVSLSLCHVPLLATLTKLKEKILEA")
        self.assertEqual(alignment.sequences[381].seq, "ATLREHMIVCESALKPLMLLYLIHHHGVKNALVFTKSAESTARLVRLVEFFEDAWAKGQGDRRARKIVARAYSSDLPPGERRGILEQFRKGEVDMLVASDLISRGIDISSVSHVVSYDVPVDMRKYVHRVGRTARAGREGDAWTLVEEQEARYFKSILKAANHLERVKRMRVSEKDTQDLSPFYDTALARLREVFSR")
        self.assertEqual(alignment.sequences[382].seq, "TLKESYIITNPDQKPLVLLNIIYETLKNDSNKKIICFTKSVDITHRLNSLLKLIGSVDNIKFTCEEYSSALSTTERSSLLNRFKSNEINVLICSDIMSRGMDISDIDVVINYNSPPNITLYVHRVGRTARAGKHGFSYTIIDKQEIRYYISMMKKAERSQTLHCLKWKPATYEKFESNYKLALNQMRLIYSKRKLNEEEIEENLLTEEAQNQNQNQDQDPQENEQDEEEDDDNSVNNSNKKLKFDNSSINSFGNDQESLIKLKQSLLEISKKK")
        self.assertEqual(alignment.sequences[383].seq, "KLICTSNIKPLCLIVLLQELRGEKCLVFTKSVDDSHRLSTLLGFFEDLPFKFSEFSSLQRESTRRKTLAAFKEGKIDVLIGSDIMARGIHIDGLRYVINYEMPQYVKTYIHRAGRTARAGESGSCFTFLRKNEVKRFDKMLKKADGSSCILRSLPEESIDSLRPVFETALEKLKDKLKGSAEPEASKKSNKSGDKAPGALKR")
        self.assertEqual(alignment.sequences[384].seq, "VECAAEYKPVALYQLLTRHDITKTLVFTNSGDTTHRLALLMQSLLSEQNVVVGELSAQLVPKQRKSVLGKFASGEIHVLISSDALARGLDIPDVRLVISYDVPKYIKGYIHRVGRTARAGKPGTAVSILTSSQVGIFKRMLSGAHKTVPDIEQTELNATADAVSYQAHVEKLKEILEKEKSESLERTKAIKRKRVASTTRQHKDKK")
        self.assertEqual(alignment.sequences[385].seq, "DTLKESYIACHSDQKPLALISVIGNIFKSKQQQQTDQNDNIARIICFTNSIDITQRLNTLLGFIGEVDGVKLKPAQYSSSINSIERSNLLKLFANGDINVLICSDILARGMDLPNVDAVINYNAPPSAVLYVHRVGRTARAGRKGSAYTIVAREEKSYFTNMIKKAGRTQKMDKLTWKKEQYQKYTKSYKNALSQTRTIYAKRKANQKLFKSINNLSQSSALTTEDNQSIIVQDLTEINKKRLL")
        self.assertEqual(alignment.sequences[386].seq, "ELKSFKVLCQSKLKPLYLVSLLQSLQGEKSIVFTSSVESTHRLCTLLKFFDNLQIEFKEYSRLQRQSVRSKTLRAFRSGQVQVLISSDAMTRGMDVEGVRNVINYDMPAYIKTFIHRAGRTARAGLSGCCFTLMHKDEVKRFKKMLQKADCNSCPTYSASSEVIESLRSVYSSALEKLRENVESEKFKKSKIRLKSSNVRKEK")
        self.assertEqual(alignment.sequences[387].seq, "YRLMCSAARKPLVLLALLQEWSGQSTIVFTSSLEMTHKLFLMLSAVQDLPDEVVEYSSLVPVRARAAALERFRTGSVELLVASDAMTRGMDVDCVQNVINYDAPVYAKTYVHRAGRTARAGKPGRVITLLRDEDMRHFKAMIHKADNNFVREYKLPSERVEALRPALTGALQQLEELLAAERASDMQQQQQQQQQQAKQQKQKAVTQLQGFENGKPEALGKGKQKGVEKGQQAETAA")
        self.assertEqual(alignment.sequences[388].seq, "ERLESYKLICESKLKPLYLVALLQSLGEEKCIVFTSSVESTHRLCTLLNHFGELRIKIKEYSGLQRQSVRSKTLKAFREGKIQVLVSSDAMTRGMDVEGVNNVVNYDKPAYIKTYIHRAGRTARAGQLGRCFTLLHKDEVKRFKKLLQKADNDSCPIHSIPSSLIESLRPVYKSALDKLKETVESEAHRKHTIGFKLSRMGKGR")
        self.assertEqual(alignment.sequences[389].seq, "LVCKSNLKPLSLIVLLQELRGEKCLVFTSSVESSHRLSTLLEFFEDLPFKFSEYSRLQRESTRRKTLDAFKEGKIDVLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEVKAFDKMLKKADNSSCSLHSLPEESVETLRPVFSSALKKLEESLESEATKKSKSGDKAPNASKRKRTIN")
        self.assertEqual(alignment.sequences[390].seq, "KTLKQHIVVTRTDLKPLVFFKLVQSQRIEKALCFCKSIDGARRLTGLCRLMAEQLQASPASTELGPEADPQQTEDQAPNGGLDLAKLCRVECFSSDLSPADRKKILQKFQSGEINMLICSDIIARGIDIAGVQNVVNYDSPIDIKKYVHRVGRTARANEQGRAFTLVESQEAKFVKGFLKTGFAALSPDQQVVRIRIDWLD")
        self.assertEqual(alignment.sequences[391].seq, "LKEYVVAVQPEHRALFLIHLIRHENVKRVLCFTNSRTTAARLHMLLSNFKGIRSYRISGHMPPDKRQRVLSAFTRNELDVLVCTDSMARGMDVKEVNCVVSYEMPPNVKIYVHRVGRTARAGQPGLAYTLLNKNQFFHFKKDLRAVGKQKLKEVTFHASHFAHLQEEYKQALGRLEEEVKTSSKPATGRSTDILQTVKSARNKRQKKRKISKDSS")
        self.assertEqual(alignment.sequences[392].seq, "TNLEEYWIECDTGSKPLVLLELLSEFAGALSIVFTASVNSTHRLARLLQLYSTHPERIREFSSSLSQKQRSALVADFKAGRVETVVCSDAMARGMDIEDVANVVNYDVPSFIKTYIHRVGRTARAGRHGRCVTLVKMGQMKGMMRMLKKADNNKLKPYPLQQEHMKTLVPRYTEALQRLKDTLEAEKAGKLQATSILHKTKEENEEVTSADKKRAFSVLNGQLERNLGS")

        self.assertEqual(alignment.column_annotations['consensus_score'], "00000000000000032332335000000000333388836437530000030000000000000300032343758848464558833754364400000000000000000000000000000000001143536586344433844474384375640000004775685569868634733876984834566879969988888438354766343630437303664464303000000000333333430332330343326320000000000000662363323000022200002112100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")

        self.assertEqual(alignment.column_annotations['consensus_score_70'], "____________________________________***_*__*______________________________*_**_*_*___**__*______________________________________________*_*_______*___*__*__*_*________**_**__******__*__**_**_*_____****_*******__*___***___*____*____*____________________________________*________________*_______________________________________________________________________________________________________________________________________________________________________________________________________")
        self.assertEqual(alignment.column_annotations['consensus_score_80'], "____________________________________***_____________________________________**_*_____**__*________________________________________________*_______*___*__*__*__________**__*___**_*___*__*__**_*_____*_**_*******__*___*__________*__________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________")
        self.assertEqual(alignment.column_annotations['consensus_score_90'], "____________________________________**______________________________________**_*_____**___________________________________________________*_______*______*_________________*___**________*__**_*_____*_**_*******__*_________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________")
        self.assertEqual(alignment[0], "---------------LQEYHVSV----------SSEKPILLYHLIH-----S-------------K---NLTNILCFVKSNEAAARLHRLLELIHE-------------------------------SLNQSFSCGLFTSSLSRDERKKIISRFATGDLN------LLVCSDLMARGIDVANTQNVINYDPPLSVRSYVHRIGRTARAGREGFAWTLVQSHEG-HHFS-KLVKQLRR-TL--------PIKRIKIE-FSHISEEFVVAYDK-------------ALEALRVEV----FNS----RYPQQ--------------KS----------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[1], "----------------KEHMLVT---------SSGSKPLMLFYLLH-----A-------------K---SLSNVLCFTKSVESAQRLAKLVELFETEYASR-----------------------SEGADNQGFKVKEFSGSLPVPQRKKILAAFVAGEID------MLICSDIIARGIDLPSVAHVISYDVPVDMRKYVHRVGRTARAGRPGDAWSLVESQEA-NFFK-ALLTDAQHLS---------RDRGARSV-AT----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[2], "----------------THHYVPC---------SLSSKPLVVLHLVL-----E-------------M---GFSRVLCFTNSRENSHRLFLLVQAFGG------------------------------------VDVAEFSSRYGPGQRRMILKQFEQGKIQ------LLISTDATARGIDVQGVELVVNYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQE-RRFL-RMLTEAGA-P---------ELQRHELS-SKLLQ-PLVPRYEE-------------ALSQLEESV----KEE----RKQRAA-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[3], "----------------THHYVPC---------RLSSKPLIVLHLVL-----R-------------M---SCSRALCFTNSRENSHRLYLLAQAFGG------------------------------------VSVAEFSSRYGPGQRKKILKQFEQGKIQ------LLISTDATARGIDVQGVELVINYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQE-RKFL-QMVSEAGV-P---------ELTHHEIP-RKLLQ-PLVARYET-------------ALSQLEKTV----KEE----QKLKAA-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[4], "-----------------------------------MKPVYLVALLK-----S-------------W---EGEKCIIFTSSVETTRRLCKLLNFFGD----------------------------------PKIKAKEYSGGLNQSLRSKELKAFRKGDIQ------VLVASDALTRGMDVKGVTNVINYDMPPFAKTFIHRAGRTARAGQAGRCFTLLSNHEV-RRFS-KLLEKVGS-D---------SCPIYPIP-PTSLD-SIRATYTP-------------ALEKLKELV----ESE----APKKG--------------RQ-AFRHNSRTGNSQTKLNKPRS-------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[5], "------------------QYCVT---------ELRLKPLTVFALVE-----K-------------Y---KWKRFLCFTNSSDQATRLTFVLKVLFQK---------------------------------YSTKVSELSGNLSAKVRNERLRDFAAGKIN------GLICSDALARGIDVADVDVVLSYETPRHITTYIHRVGRTARAGRKGTAVTVLTEQDM-TLFK-KILSDANK-G---------LGEEIHVS-PDIEI-QHAVEYKE-------------ALAGLRSEK----VKN----KNQKM--------------AE-KNRVATKALIHKKQEETAT-------------------------------VRPLTLMEKLQIKANEIVQSSKKSSETKNSKTKADKTKYQPKETKKQI------------IAKQL--------------------------------------------")
        self.assertEqual(alignment[6], "---------------LTHHYVPC---------RLSSKPLIVLHLVL-----R-------------M---SCSRALCFTNSRENSHRLYLLAQAFGG------------------------------------VSVAEFSSRYGPGQRKKILKQFEQGKIQ------LLISTDATARGIDVQGVELVINYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQE-RKFL-QMVSEAGV-P---------ELTHHEIP-RKLLQ-PLVARYET-------------ALSQLEKTV----KEE----QKLKAA-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[7], "---------------LKECYIIS---------NGDQKPLVLLNIIY-----ESL----LKNNANGE---NKKKIICFTKSVDITHRLNTLLKLIGQ-------------------------------VDKLKFTCEEYSSSLSTVERADLLSRFKLNQID------ILICSDIMSRGMDIQDIDVVINYNTPPNITLYVHRVGRTARAGNFGVSYTIVDKSEI-KYYI-SMMKKAERSQ---------TLHCLKWK-PNVYE-KFQSSYKL-------------GLNQMRLIY----SKR----KINDI--GDNG--------DDNNDNNNEDGNEIDGSVENIENNNNNNNNNNK-----NNNNNNFEKDYE--VKLKHSLLEISKKKAKINF-------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[8], "--------------ELKSFKVLC---------QSKLKPLYLVSLLQ-----S-------------L---QGEKSIVFTSSVESTHRLCTLLKFFDN----------------------------------LQIEFKEYSRLQRQSVRSKTLRAFRSGQVQ------VLISSDAMTRGMDVEGVRNVINYDMPAYIKTFIHRAGRTARAGLSGCCFTLMHKDEV-KRFK-KMLQKADC-N---------SCPTYSAS-SEVIE-SLRSVYTL-------------ALEKLRENV----ESE----KFKKS--------------KI-RLKSSNVRKEK----------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[9], "-------------------------------------PLALLALLA-----D-------------A-SAAGESVIVFTSSLEMTHKLYLMLSAVGD----------------------------------LAGKVVEYSSHVPAKERASGLERFRKGDAK------VLVASDAMTRGMDVDCVQAVINYDAPVYAKTYVHRAGRTARAGKSGRVVTLLRDEDM-RHFK-AMIRKADN-N---------FVRELKLP-AERVE-SFRP--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[10], "----------STPSTLKQLHVEC---------KAMDKPLIVLHCLH-----N-------------L---QYRQILCFTNSVESTHRLYLLIKLYGD------------------------------------VEVREFSSALTVAAREKILQEFAQGKVD------MVICSDAMARGIDIDNVQYVILYDRPLHIQNYIHRVGRTARAGKTGTAITILEKREV-CTYK-AMLRESGK-D---------KFKKLKIK-PNKLF-SLKPRYND-------------SLRKLPMIL----KEE----KRGKR--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[11], "---------------------FC---------ESKLKPLYLVALLQ-----G-------------L---KEEKSIIFTSSIESTQRLSILLKCFTE----------------------------------LPLKISQYSRLQRQSVRSNTLDAFRAGELQ------VLVASDAMTRGMDVDGIANVINYDMPNNVKTYIHRAGRTARAGRPGRCFTLLRREEI-KRYR-KLLKKAGS-D---------GSRTYSIP-VETVE-NLRPVYSS-------------ALEKLKEKV----QSE----KSRRR--------------FS-GSLSARTGNQKPKREK-----------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[12], "-----------------AFKLIT---------RASKKPLVLVALLE-----Q-------------F---KNQSTIIFNASVEATHQLFLLLRHFYA---------------------------------GQEFSVVEYSSRQPQHIRRKALADFTDGKVH------VIVASDAMTRGMDVEGVANVINYDVPVYAKTYVHRVGRTARAGQAGRAFTLLVKKEV-NCNR----------H------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[13], "---------------LKENFVEV---------DKSRKPLVLLHILK-----T-------------M---PFKSILCFSNSVQSTNRLCSLMKLME-------------------------------------VKACEFSSNLHISKRDRVVKQFNTGKLN------LMVCSDAMSRGLDLEAVDCVVSYDVATSLKTYIHRIGRTARAGKEGSAIALLEKKEI-QYFK-RLLKDGGK-E---------KIKEIKVN-QSKLK-PYTSQYQK-------------ALAALAKTL----QTE----NNKIK--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[14], "----------------SEYFVQC---------TAGEKPLVLQHFLL-----N-------------L---YFKQVLCFTNSVQTTHRLYLLLKLMGD------------------------------------VEVSEFSSNLSQSERQNILKQFKAGKIQ------ILVCSDAMARGMDIENVRCVISYDLPPHLKTYIHRVGRTARAGRGGTAFSFIRKKEA-S------------------------------------G-ICLTDDDD----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[15], "--------------KLKSFKLIC---------ESKLKPLYLVALLR-----D-------------L---GGEKCIVFTSSVESAHRLCTLLNFFGD----------------------------------LQIKIGEYSGLQHQRVRSKTLEEFRGGKIQ------VLISSDGMTRGMDVEGVRNVINYDVPKFIKTYIHRAGRTARAGQTGRCFTLLRKDED-KRFK-QLLQKADS-D---------SCPVHSVA-SNSIE-ALHSVYVS-------------ALEKLKETV----VSE----TTRKR--------------KI-NFKSSGADKRKQEKHLKE---------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[16], "-----------TPKELTEKYIVC---------SKDVKPLVLYAFLK-----R-------------E---NLTKTLVFTHSVESAHRLKILLKSLFK----------------------------------KRLKIEEISSNLKGKSRDEFISSFTKGEVD------LLICTDFLARGIDLPGVNCVISYSAPKYLKTYIHRAGRTARAGESGLAVTLLHEEQV-PAFK-TLLKK--------------EIEEVEVG-VEELE-GLSEKYKK-------------ALGKLKEAV----NEE----QKVGM--------------ES-VLSKKKAFKKLKKKVINSVK-------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[17], "-------------EQLRSYTIIC---------KAQQKPLKLVTLLH-----S-------------L---GDQRTVIFTSSVSNTHRLSTFLACFED----------------------------------LPFRAVEYSSFQHQLARSKALAAFRAGEAQ------VLVASDAMARGMDVEGVTHIINYDMPPFARTYVHRVGRTARAGRSGSCFTLLRKEEV-RYFK-SILAKVQN-S---------SCKTYKVS-SESTK-ELRPRYWT-------------ALQKLKEIL----DAG----AGKKG--------------HE-MYAEEVTAAD-----------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[18], "--------------------------------PPMLKPLAVYCLLK-----K-------------F---KYHSALCFTNSRSATHRLCELLKQFGD------------------------------------LKVAECSSEISKAPRDKLLKDFSTGKID------LLVCTDAVSRGMDLGVVDCVISYDSPKYVKNYIHRAGRAARAGRPGTAITILMDSEM-HGFN-KLLAMAEK-K---------NVTPLDMQ-VEEFE-TYEEQFRK-------------ALDGLKNTV----KEE----IHTKI--------------VQ-NDRARQKRGFNPRSRTGKV------------------------------------VSKKFVKRKGKKVIKQ----------------------------------------------------------------------------------------")
        self.assertEqual(alignment[19], "---------------LKEYSISC---------SSDYKPLVLLHLIL-----T-------------F---DHHRILCFTHSRESTHRLTLLLKEYDA-------------------------------------PVAEISGDLSQEKKNELIKKLTGKEIK------ALVCSDGMARGMDIPGIDCVINYDVPSHFRSYLHRVGRTARAGAEGAAYTLNTFEEV-HKWQ-RMIREAGR-K---------QIENVSIT-EDDLK-QYVIKYSD-------------ALESVANSI----TCK----HGEEDYD-----------VTIQQIEMSKSVQLPTGE-------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[20], "-----------TPAELKEYYTVC---------SKVNKPLLLHHLLI-----S-------------K---SWKNILCFVNSSAATFKLAFILKKLCK----------------------------------KKYTVQQLSANIVQSKRNRILQNFENGKVD------ILISSDALARGIDIPNVKYVVSYDCPKFVKTYVHRIGRTGRAGKEGHSLAFLTSKEV-TSFN-KMVSAAGK-N---------SVDVFNFE-VEELE-QYEVTYKK-------------ALLLLGNYL----EKQ----KSKII--------------KK-TKANKKVLPVSKKKVLTKK------------------------------------------------------------------------------------VNIP----------------------------------------------------")
        self.assertEqual(alignment[21], "-------------EQLRSYTIIC---------KAQQKPLKLVTLLH-----S-------------L---GDQRTVIFTSSVSNTHRLSTFLACFED----------------------------------LPFRAVEYSSFQHQLARSKALAAFRAGEAQ------VLVASDAMARGMDVEGVTHIINYDMPPFARTYVHRVGRTARAGRSGSCFTLLRKEEV-RYFK-SILAKVQN-S---------SCKTYKVS-SESTK-ELRPRYWT-------------ALQKLKEIL----DAG----AGKKG--------------HE-MYAEEVTAAD-----------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[22], "----------------KECICLT---------EQRSKPLTLYGLIR-----E-------------N---GYRKFLVFTNGINTSHRLSFVLQRLFG----------------------------------TDMVIEEWSSSLSPATRKSVLNRFSLGKVN------GIICTDALARGIDIENIEVVISYDMPNHIDKYIHRIGRTARAGLRGTAITLLAEDEK-KKFN-ALLKEANK-R---------ELETMEVS-PSLEE-EFAAKYAN-------------VLNDLREAL----ELE----TEVIN--------------KI-RKGISIGN-------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[23], "------------------YICIV---------TPESKPLILHYIIT-----S-------------N---SWQHVLVFVGSRKDAHRLSLLLSHLGR----------------------------------NSFKVAEISSRLSRPAREKVLAKFAAGGID------VLISSDALARGMDIEGVEYVVLYSEPKSVKNYIHRVGRTGRAGRSGTAVTFLLDSQV-AQFN-EMLGVAGK-G---------SLQKIDVQ-ESQLE-ELEDKYKA-------------ALEQLKENL----EKE----EKQRL--------------KV-EKRSKKRDPSIQKCRDRKS---------------------------------RFKVRKQKKVDKGTA--------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[24], "--------------KLQSYKLVC---------KSNLKPLSLIVLLQ-----E-------------L---RGEKCLVFTSSVESSHRLSTLLEFFED----------------------------------LPFKFSEYSRLQRESTRRKTLDAFKEGKID------VLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEV-KAFD-KMLKKADN-S---------SCSLHSLP-EESVE-TLRPVFSS-------------ALKKLEESL----ESE----ATKKS--------------KS-GDKAPNASKRKRTIN------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[25], "----------------THHYVPC---------RLSSKPLIVLHLVL-----G-------------M---NFSRALCFTNSREHSHRLFLLAQAFGG------------------------------------VSVAEFSSRYGPGQRKKILKQFEQGKIQ------LLISTDATARGIDVQGVELVINYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQE-RKFL-QMVSEAGV-P---------ELACHEIP-RELLQ-PLVSRYEI-------------ALSQLEKTV----K-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[26], "--------------------LIC---------ERKVKPLYLVALLK-----S-------------L---GEEKCIVFTRSVESTHHLCKLLNCFGD----------------------------------LKIGIKEFSGLKHQRVRSKTVGEFRRGEFQ------VLVSSDAMTRGMDVEGVRNVINYDMPKYTKTYVHRAGRTARAGQTGRCFTLMSKDEV-GGFE-KLMKKAEA-S---------DCYEHTVP-SSLIE-ALHSTYQS-------------ALTKLKEKI----LEA----RRKPR-------------ISL-VN-------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[27], "----------------SEYYVPC---------TFSKKPLIILHFLL-----R-------------L---KFSPALCFTNSREGAHRLYLLVKLFGG------------------------------------VEVAEFSSKLSPGERQKTLKDFEKGKIP------LLISTDAAARGIDINGVKCVINYDAPQYIRTYIHRVGRTARAGKAGLAFTFLLKVQE-KRFL-KMVSDAGS-P---------GIQKQHVH-PEALK-SMESRYEQ-------------VLAELGTIV----KEE----NEKKRF-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[28], "--------------SLKEFMVVV---------PAAQKPVALLALLE-----Q-------------L---KGQTTVVFTSSVETTHKLYLLLEAAHA----------------------------------NPEQVVEFSSHVAEKVRRADLERFRSGSAS------ILVASDAMTRGMDVENVENVVNYDAPTYTKTYVHRAGRTARAGRSGSVYSLLKISDV-HHFK-LMLRKADN-T---------FVKELKLQ-REVME-THSERVKS-------------ALQQMQQLL----EAE----AAEEG--------------DA-GARSAAASRASKKRKEREH--------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[29], "--------------NLDEYWIEC---------DTGSKPLVLLELLS-----E-------------F---AGSLSIVFTASVNSTHRLARLLQLYST----------------------------------HPERIREFSSSLSQKQRSSLVADCKAGRVE------TVVCSDAMARGMDIEDVANVVNYDVPSFIKTYIHRVGRTARAGRHGRCVTLVKLGQM-KSMM-RMLKKADN-N---------KLKPYALQ-QEHMK-TLVPRYTE-------------ALQQLKDTL----EAE----KAGKL--------------QA-TSILRKNKMSVSGGD---DIAEED--LTEEVVSA-------------DKKRAFSV--------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[30], "--------------KLQSYKLVC---------KSNLKPLSLIVLLQ-----E-------------L---RGEKCLVFTSSVESSHRLSTLLEFFED----------------------------------LPFKFSEYSRLQRESTRRKTLDAFKEGKID------VLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEV-KAFD-KMLKKADN-S---------SCSLHSLP-EESVE-TLRPVFSS-------------ALKKLEESL----ESE----ATKKS--------------KS-GDKAPNASKRKRTIN------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[31], "-------------KTLKQYLIVT---------RTDLKPLVFFKLLQ-----S-------------Q---RIEKALCFCKSIDGARRLTGLCRLMAEQFQALKSPNSDDPESNPKQKDQDQKDQKDDVDLVKLCKVECFSSDLSPVERKKLLNKFQSGEIN------MLICSDIIARGIDITGVQNVINYDSPIDIKKYVHRVGRTARANEHGRAFSLVESQEA-KFVK-AFLKTGFG-SLA----PEQQLARIRID-WLDLQ-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[32], "-----------------------------------MKPVYLVALLK-----S-------------F--GGGEKCIVFTSSVETTRRLCKLLNFFDD----------------------------------LNIKVKEYSGGLDQKIRREELKAFIKGDSQ------VLVASDALTRGIDVKGVTNVINYDMPQFPKTFIHRAGRTARAGQAGRCFTLLSDHEV-RRFSNKILKKVGV-D---------SCQTHSIP-PTTLD-PIRTTYAD-------------ALEKLKKLV----ELE----GAKKE--------------RR-GSKRKSRTGNSQSKVNKTTSE------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[33], "----------------SHHYVPC---------SLRTKPLAILHLIL-----E-------------R---NFSRVLCFTNSRENSHRLFLLVQAFGG------------------------------------VAAAEFSSRCRPGQRKVVLKQFEQGKIQ------LLISTDAMARGIDVQGVQLVINYDAPQYLRTYVHRVGRTARAGRTGQAFTLLLKVQE-RRFL-QMLAEAGV-P---------KMARHDIH-SELLQ-PLVPRYEE-------------ALSQLEQAV----KEE----RRQKVA-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[34], "-------------EELLQCYVPC---------DLNSKPLILLHFML-----T-------------K---QFTRVLCFTNSREASHRLFLLVQAFGG------------------------------------IPVAEFSSRLSPSERHRTMKEFEQGKIQ------LLISTDATARGIDVKQVNYVINYDAPQYIRTYIHRVGRTARAGRVGVAFSLVLRIQE-QRFL-RMLRDAGI-Q---------DIKKQPVK-GNSLK-PLVQQYEE-------------ALCKLEKTV----KVI----EMGNK--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[35], "-----------------HHYVPC---------SLRFKPLVILHLIL-----E-------------M---NFSRVLCFTNSRENSHRLFLLVQAFGG------------------------------------VTVAEFSSRYGPGQRKSILKQFEQGKIQ------LLISTDATARGIDVQGVQLVVNYDAPQYLRTYVHRVGRTARAGKSGQAFTLLLKVQE-RRFL-HMLEEGGV-P---------GMERHDTP-SELLQ-PLVPRYEE-------------ALSVLEKAV----KEE----RKQKAA-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[36], "-------------EGLSQCYVPC---------DLNSKPLLLLHFML-----K-------------M---KFTRVLCFTNSREASHSVPLPTDSFGG------------------------------------VTVAEFSSRLPPNERRRTMKEFEQGKIQ------LLISTDATARGIDVEGVNYVINYDAPQFIRTYIHRVGRTARAGKVGVAFSLVLRIQE-RRFL-RMLRDAGI-Q---------DIKKHPVK-GNSLK-PLVQQYEE-------------ALCKLEKTV----KVI----ETGK---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[37], "EDGSEAKQEFTTPEGLKEFMTIC---------PTDKKPLMVIYLLH-----Q-------------M---GIKSGLCFTKSVESTQRLFTLIEAYESTQ-----------------------------PEEKRIRVKEYSSDLNPVQRKQMLKQFKQGNID------LLICSDLIGRGIDLDSVEFVISYDVPYYMDKYIHRVGRTARAGRQGEAYTLVEMQE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[38], "-------------EQLKSFKVVC---------KSKLKPLYLLALLE-----S-------------L---KWEKCIVFTSSVESTHRLCTLLNFFDG----------------------------------LQIKFEQYSRSQPQAIRSKTLRAFRAGRIQ------VLICSDLISRGMDVKGVKIVINYDMPAFTKTYVHRAGRTARAGQVGSCFTLLRNDEV-KKFK-KLLQKAGN-E---------SCPDYCVP-SESVE-SFRLTYNT-------------ALERLKESI----ESG----KIQRR--------------QG-GKKEKKALEETA---------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[39], "-----------------HHYVPC---------RLRAKPLVVLHLIL-----H-------------L---GFSRILCFTNSRENSHRLFLLVQAFGG------------------------------------VTVAEFSSRYGPGQRKGILKQFEQGKIQ------LLISTDATARGIDVQGVQLVVNYDAPQYLRTYVHRVGRTARAG-TGQAFTLLLKCRSGEEVP-PMLTEAGV-P---------ELE-HDTP-SELLQ-PLVPQYEE-------------ALSQLERAV----KEE----WRQKA--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[40], "--------------KLESYKLIC---------VSKLKPLYLVAVLQ-----H-------------L---GGEKCIVFTSSVESTHRLCTLLNFFGD----------------------------------LKVKIKEYSGLQRQSVRSKTLKAFREGEIQ------VLVSSDAMTRGMDIEGVRNIINYDMPAYVKTYVHRAGRTARAGQTGRCITLLRTHEV-KRFK-KLLQKADN-D---------SCPIYSIP-SSSVK-SLHPFYLS-------------ALEKLKETV----QSE----TSRKG--------------KV-GIKFSRVSKGEKKSLE-----------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[41], "--------------------CVC---------SPAEKPLILFYLVH-----T-------------H---GVRNTLIFTKSAESTTRLVQLFEFFEAARKQE------------------------NPGGAKRVTIQAYSSDLSSQERKSVIERFKEGKIE------LLVCSDLVARGVDISHVAHVVSYDVPVDMRKYVHRVGRTARAGREGDAWSLVEDQEA-RYFK-QMLRKSGHLS---------ALKRLRIK-EGEIA-PLQASYET-------------ALQKLKEVY----ART----PTQV---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[42], "--------------GLSQCYVPC---------DLNSKPLLLLHFML-----T-------------M---KFTRVLCFTNSREASHRLFLLVQAFGG------------------------------------VTVAEFSSRLPPNERRRTMKEFEQGKIQ------LLISTDATARGIDVKGVNYVINYDAPQFIRTYVHRVGRTARAGKAGVAFSLVLRIQE-RRFL-RMLKDAGI-Q---------DIKKHPVK-GNSLK-PLVQQYEG-------------ALCKLEKTV----KVI----ETGKK--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[43], "--------------GLTEYYVPC---------TMSSKPLLLLHFIL-----R-------------M---KLHPILCFTNSRETAHRLHLLLQLFGG------------------------------------VQAAEFSSQLSPGDRKKTLKEFEQGKIQ------LLISTDAVARGIDISGVKCVVNYDAPQYIRTYIHRVGRTARAGKTGLAFTFLLRVQE-KNFL-QMVVKAGS-P---------GIQKQVVK-PENLR-SMEGQYEK-------------ALQKLADVI----K-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[44], "--------------------VPC---------SLSSKPLVVLHLVL-----E-------------M---GFSRVLCFTNSRENSHRLFLLVQAFGG------------------------------------VDVAEFSSRYGPGQRRRILKQFEQGKIQ------LLISTDATARGIDVQGVELVVNYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQE-RRFL-QMLTEAGA-P---------ELRRHELS-SKLLQ-PLVPRYEE-------------ALSQLEESI----KEE----QKQRAA-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[45], "----------------SEHMCVC---------SPADKPLILFHLVH-----T-------------H---GVRNALIFTKSAESTTRLVQLFEFFEAARNK-------------------------DSGETKSVTMQAYSSDLSTQERKSVIERFKEGRID------LLVCSDLVARGVDISHVAHVVSYDVPVDMRKYVHRVGRTARAGRKGDAWSLVEDQEA-RYFK-QMLKKAGHLD---------VIKKLRTK-ESDTA-PLQPYYET-------------ALQNLREVY----ART----SAQ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[46], "------------------------------------------------------------------------------TTIRRSHRLSTLLEFFED----------------------------------LPFKFSEYSRLQRESTRRKTLDAFKEGKID------VLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEV-KAFD-KMLKKADN-S---------SCSLHSLP-EESVE-TLRPVFSS-------------ALKKLEESL----ESE----ATKKS--------------KS-GDKAPNASKRKRTIN------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[47], "-----------------HHYVPC---------RLRAKPLVVLHLIL-----H-------------L---GFSRILCFTNSRENSHRLFLLVQAFGG------------------------------------VTVAEFSSRYGPGQRKGILKQFEQGKIQ------LLISTDATARGIDVQGVQLVVNYDAPQYLRTYVHRVGRTARAGNTGQAFTLLLKVQE-RRFL-RMLTEAGV-P---------ELERHDTP-SELLQ-PLVPQYEE-------------ALSQLERAV----KRN----EREALV-------------TVTENRL-----------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[48], "--------------GLKEHMVVC---------NADQKPLMMIYLLH-----Q-------------V---GITSGLCFTKSVESTQRLQLLIEAYEELN------------------------------EGKKTRVAEYSSDLSVSQRKSLMKKFRAGEID------LMICSDLIGRGIDLDCVDTVISYDVPLFMDKYIHRVGRTARAGREGQAYTIVEKQEA-RHFK-EILRDASHLS---------QVKTLRVE-KEDLA-RYEENYK-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[49], "-----------------HYYVPC---------SLSSKPMLVLHLLH-----Q-------------E---DFPRVLCFTNSRENSHRLFLLIQAFGG------------------------------------VKVAEFSSRFGPGQRKLILKQFEQGKIQ------LLISTDATARGIDVEGVKLVINYDAPHYIRSYVHRVGRTARAGRTGLAYTFLLKVQE-QKFL-RMLREAGA-P---------ALQPYPIR-RELLE-PLVPQYQA-------------ALATLQETI----KVR-AP--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[50], "------------PENLESYKLIC---------ERKVKPLYLVALLK-----S-------------L---GEEKCIVFTKSVDSTRRLCKLLNCFED----------------------------------LQIDIKEYSGLQHQRVRSKTLNEFRKGEFQ------VLVSSDAMTRGMDVEGVRNVINYDMPKYIKTYVHRAGRTARAGHSGRCFTLMSKDEI-GRFK-KMMRKAEA-S---------AFQEHSVP-SSLVE-ALTSTYQS-------------ALTKMKEII----LET----RKKPK--------------KL-ES-------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[51], "--------------GLSQCYVPC---------DLNSKPLILLHFML-----V-------------M---KFTRVLCFTNSREASHRLFLLVQAFGG------------------------------------VTVAEFSSRLSPSERQRTMKEFEQGKIQ------LLISTDATARGIDIKGVNYVINYDAPQFIRTYIHRVGRTARAGKVGVAFSLVLRIQE-RRFL-RMLKDAGI-Q---------DIKKQPVK-GNSLK-PLVQQYEE-------------ALCKLEKTV----KVI----EMGK---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[52], "--------------TLEERMIVS---------ETAYKPLMLLHLLY-----Q-------------R---GVKRALCFTKSVESATRLMHLLRLFND-------------------------------QVGNGPTVASFSSDLSPQERQKMLTKFKDGEVD------MLVSTDVIARGIDVQGIENVINYDIPLDMPKYVHRVGRTARAGLVGTAWTLVEVQEA-KYFK-GYTKNAKH-----------QVKKVRPT-TKEVE-PLMEAYDV-------------ALSRLGRVY------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[53], "-----------------HYYVPC---------SLNSKPLAILHLMH-----N-------------M---KFSRVLCFTNSREHSHRLFLLVKAFGG------------------------------------IPVAEFSSRFGPGQRKMILKQFEQGKIQ------LLISTDATARGIDVKGVKLVINYDAPQYIRTYVHRVGRTARAGNTGLAFTLLLKVQE-QKFI-QMLREQKL-Q---------SWGN----------------------------------------I----S-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[54], "------------------FYVPC---------TLSRKPLLILHFIL-----R-------------M---KLSPILCFTNSRQAAHRLSLLVKLFGD------------------------------------VQAAE----LSPAVRKNTLKDFQQGSIQ------LLISTDAAARGIDISGVKCVVNYDAPQYVRTYVHRVGRTARAGKSGLAFTFLLGVQE-KNFL-KMVMDAGS-P---------GIQKQIVK-SESLK-GMEGRYER-------------VLQELAERI----RVH----INAL---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[55], "---------------LTEYYVPC---------TLSKKPLLILHFIL-----R-------------M---KLSPILCFTNSRETAHRLYLLVQLFGG------------------------------------IQAAEFSSRLSPGERKKTLKEFEQGKIQ------LLISTDAAARGIDVSGVRCVVNYDAPQYIRTYIHRIGRTARAGKAGLAFTFLLGVQE-KNFL-QMVAEAGS-P---------GIQKQIVK-PENLK-GMEARYEQ-------------TLQELANAI----KDE----KAK----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[56], "--------------NLDEYWIEC---------DTGSKPLVLLELLS-----E-------------F---AGSLSIIFTASVNSTHRLARLLQLYST----------------------------------DPERIREFSSSLSQKQRSALVADCKAGRVE------TVVCSDAMARGMDIEDVANVVNYDVPSFIKTYIHRVGRTARAGRHGRCVTLVKMGQM-KGMM-RMLKKADN-N---------KLKPYPLQ-QEHMK-TLVPRYTD-------------ALQQLKDTL----EAE----KAGKL--------------QA-TSILRKNKITTSERNND-DVAEEG-NLDEEVVTA-------------DKKRAFSVLNAQLERN------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[57], "----------------THHYVPC---------SLSSKPLVVLHLVL-----E-------------M---GFSRVLCFTNSRENSHRLFLLVQAFGG------------------------------------VDVAEFSSRYGPGQRRRILKQFEQGKIQ------LLISTDATARGIDVQGVELVVNYDAPQYLRTYVHRAGRTARAGKTGQAFTLLLRVQE-RRFL-QMLTEAGV-P---------ELRRHELS-SKLLQ-ALVPRYEE-------------ALSQLEESI----KEE----HKQRAA-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[58], "-----------TPANLDESMIEC---------DSTEKPLVLLELLH-----T-------------F---ESQLTIVFTSSINATHRLCRLLQLFSS----------------------------------EPQSVREYSSGLTQKQRSQLVQQCKNGAIK------VVVCSDAMARGMDIAHVSNVINYDVPPYLKTYIHRVGRTARAGRAGRAITLVKRGQT-KGLS-RMLAKAKK-S---------ELQSYAYD-INHMK-TLVPRYTA-------------CLASLKETL----AKE----KAGHL--------------AI-TTKVSLKRSVDSIDDNDEA--------DANLESVV----------QWTRDQVKQKLLEQLQRR------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[59], "-------------EGLSQCYVPC---------DLNSKPLLLLYFML-----K-------------M---KFTRVLCFTNSREASHRLFLLVQAFGG------------------------------------VTVAEFSSRLPPNERQRTMKEFEQGKIQ------LLISTDATARGIDVKGVNYVINYDAPQFIRTYIHRVGRTARAGEAGVAFSLVLRIQE-RRFL-RMLRDAGI-Q---------DIKKHPVK-GNSLK-PLVQQYEG-------------ALCKLEKTV----KVM----EMRKKI-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[60], "---------------------------------FRIKPLTLFALLR-----E-------------N---GYKKFLVFTNSIDAAHRLSFVLQRLSG----------------------------------TDLIIEEWSSLLSPAARRSVLSRFNLGKVN------GIISTDALARGIDIDDIEVVISYDMPRHIHTYIHRIGRTGRAGNRGTSITMLIDEQK-SKFN-TMLKEAGK-N---------ELDAIDIK-SSTEE-ELAGKYSS-------------ALNDLRDAL----ELE----KQTII--------------KI-RNGMTIANMTN------------------------------------------LNLLSKLKAQVKVG-----KENTTELIKSLQHVPQT----------------------------------------------------------------------")
        self.assertEqual(alignment[61], "-------------------KLIC---------TSNIKPLCLIVLLQ-----E-------------L---RGEKCLVFTKSVDDSHRLSTLLGFFED----------------------------------LPFKFSEFSSLQRESTRRKTLAAFKEGKID------VLIGSDIMARGIHIDGLRYVINYEMPQYVKTYIHRAGRTARAGESGSCFTFLRKNEV-KRFD-KMLKKADG-S---------SCILRSLP-EESID-SLRPVFET-------------ALEKLKDKLKGSTEPE----ASKKSN-------------KS-GDKVPGALKR-----------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[62], "-------------EGLSQCYVPC---------DLNSKPLLLLHFML-----K-------------M---KFTRVLCFTNSREASHRLFLLVRAFGG------------------------------------VTVAEFSSRLPPNERQRTMKEFEQGKIQ------LLISTDATARGIDVKGVNYVINYDAPQFIRTYIHRVGRTARAGKVGVAFSLVLRIQE-RRFL-RMLKDAGI-Q---------DIKKHPVK-GNSLK-PLVQQYEE-------------ALSKLEKTV----KVI----EMGKK--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[63], "--------------NLDEYWIEC---------DTGSKPLVLLELLS-----E-------------F---AGSLSIIFTASVNSTHRLARLLQLYST----------------------------------DPERIREFSSSLSQKQRSALVADCKAGRVE------TVVCSDAMARGMDIEDVANVVNYDVPSFIKTYIHRVGRTARAGRHGRCVTLVKMGQM-KGMM-RMLKKADN-N---------KLKPYPLQ-QEHMK-TLVPRYTD-------------ALQQLKDTL----EAE----KAGKL--------------QA-TSILRKNKITTSERNND-DVAEEG-NLDEKVVTA-------------DKKRAFSVLNAQLERNL-----------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[64], "EDGTQVKQEYTTPEGLKEYMTVC---------PTEKKPLMVIYLLH-----E-------------L---GLKSGLCFTKSVESTQRLFMLIEAYEAMQ-----------------------------PEEKRIRVKEYSSELRPVQRKQLLRQFKEGQID------LLICSDLIGRGIDLDAVEFVISYDVPYYMDKYIHRVGRTARAGREGVAYTLVEKQEA-RHFK-EMVRQAGHLN---------QIKPLVLE-KD----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[65], "--------------KLQSYKLVC---------KSNLKPLSLIVLLQ-----E-------------L---RGEKCLVFTSSVESSHRLSTLLEFFED----------------------------------LPFKFSEYSRLQRESTRRKTLDAFKEGKID------VLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEV-KAFD-KMLKKADN-S---------SCTLHSLP-EESVE-TLRPVFSS-------------ALKKLEESL----ESE----ARKKS--------------KS-GDKAPNASKRKRTIHTFIHQ-------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[66], "--------------SLVQHYSII---------KTEDKPLLLFHLIL-----S-------------Q---SMTNVLVFTKSASSTQRLLKLLQFLNDGWSQQ-----------------------QSQESAFHIMATAFSSDLSVHDRKSILASFKEGKIN------VLVASDLVSRGIDLPHVSHVISYDVPIDMRKYVHRVGRTARAGRAGVAWTLVEKQEA-HHFL-EMMRESGHLQ---------DVSKNRIE-GNDLA-PYSSLYEN-------------ALSRLQSEY----TRG-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[67], "-----------------------------------MKPVYLVALLK-----S-------------W---EGEKCIIFTSSVETTRRLCKLLNFFGD----------------------------------AKIKAKEYSGGLNQSVRSKELKAFRKGDIQ------VLVASDALTRGMDVKGVTNVINYDMPPFAKTFIHRAGRTARAGQAGRCFTLLSNHEV-RRFS-KLLKKVGS-D---------SCPIYPIP-PTSLG-SIRATYTP-------------ALEKLKELV----ESE----APKKG--------------RQ-AFRHNSRTGNSQTKVNKTTTE------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[68], "--------------GLLQCYVPC---------DLNSKPLLLLYFML-----T-------------M---KFTRVLCFTNSREASHRLFLLVQAFGG------------------------------------ITVAEFSSRLPPNERRRTMKEFEQGKIQ------LLISTDATARGIDVKGVNYVINYDAPQFIRTYIHRVGRTARAGEAGVAFSLVLRIQE-RRFL-RMLRDAGI-Q---------DIKKHPVK-GNSLK-PLVQQYEG-------------ALCKLEKTV----KNE----RAQRR--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[69], "-------------ATLTEHMVVC---------ESSLKPLILFHLVH-----S-------------H---AVTNALVFTKSAESTTRLVRLFDFFDSAFALD-----------------------ASHIDRPRVVAQAYSSDLSASERKSILDKFKSQEIH------ILVCSDLISRGIDISHVSHVVSYDAPVDMRKYVHRVGRTARAGRAGDAWTLVEEQEA-RYFK-AMLKDADHLH---------KVKRLRIS-DKDLA-LLRPLYEI-------------ALRQLK---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[70], "---------------------PC---------SLRTKPLVILHLIL-----E-------------M---NFSRVLCFTNSRENSHRLFLLVQAFGG------------------------------------VTAAEFSSRCGPGQRKAVLKQFEQGKIR------LLISTDATARGIDMQGVQLVVNYDAPQYLRTYVHRVGRTARAGRTGRAFTLLLKVQE-RRFL-RMLAEAGA-P---------ELARHDIP-GELLR-PLVPRYEE-------------ALSQLEQAV----KEE----RRQKAA-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[71], "--------------KLESYKLIC---------QSELKPIYLVALLQ-----N-------------L---GGEKCIVFTSSVESTHRLCTLLNFFTD----------------------------------LPLKIKEYSGLQRQSVRSKTLKAFREGDVQ------VLVSSDAMTRGMDVEGVRNVINYEIPLYIKTYIHRAGRTARAGQTGRCFTLLRKDEV-KRFK-KMLQKADN-N---------SCPVYSLP-ASSVE-SLRSSYTS-------------ALEKLKEAV----ESE----TSRKR--------------KL-GSKA-----------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[72], "----------------TEYYVPS---------TMNKKPLLILHFLL-----R-------------L---KYKPVLCFTNSREAAHRLFLLLKFYGG------------------------------------VEVAEFSSRLSPTERQKTLKSFEQGKIA------MLISTDAAARGIDIKGVKCVINYDAPQYIRTYIHRVGRTARAGQAGVAFTFLLAIQM-KRFQ-KMLLNAGS-P---------GLQKHVVK-PQHLS-GLESRYEE-------------ILVELGEAI----KEE----KAQNRF-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[73], "----------TTPEGLKEYMTIC---------PTDKKPLMVIYLLH-----Q-------------M---GIKSGLCFTKSVESTQQLCTLIEAYELTQ-----------------------------PQDKRIRVKEYSSDLNPVQRKQMLKQFKQGHID------LLVCSDLIGRGIDLDSVEFVISYDVPYYMDKYIHRVGRTARAGREGEAYTLVEMQEA-RHFK-EILRNAGHL-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[74], "----------------KEFFVEL---------VERQKPLFLAHLIK-----R-------------M---GHERILCFTNSREATKRLAVLMSHFEG------------------------------------IKAEALNAGMPLQKRARLLSSFAGGEFQ------LLVCTDAVARGIDIANISCVVSYEAPQSVKTYVHRVGRTARAGKTGQAFTLLLRNQI-RYFK-SSLKSVGK-----------RARNFPIH-CSKLR-AYKAIYKS-------------ALLQLEKEF----RPK----PKDAF--------------G-----------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[75], "-------------SNLAEYVIEC---------DAGSKPLVLLEILS-----E-------------Y---KGTLSIVFTASVNSTHRLARLLQLYSD----------------------------------HPERIREYSSSLTQKQRTALVAECKANKIE------TVVCSDAMARGMDIDNVSNVINYDVPTFIKTYIHRVGRTARAGRAGRSVTLVKTGQM-KGLT-RMLKKAEN-N---------KLTPFPLQ-KEHMK-TLIPRYMQ-------------ALEQLKTTL----DAE----KTGKL--------------SA-TTTLRTHGGGNSSSAKKSHQQTTD-NAEASGLSADLK--------DADKKRALSVLYEQLEKN------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[76], "-------------------KLIC---------TSNIKPLCLIVLLQ-----E-------------L---RGEKCLVFTKSVDDSHRLSTLLGFFDD----------------------------------LPFKFSEFSSLQRESTRRKTLAAFKEGKID------VLIGSDIMARGIHIDGLRYVINYEMPQYVKTYIHRAGRTARAGESGSCFTFLRKNEV-KRFA-KMLKKADG-S---------SCILRSLP-EESID-SLRPVFET-------------ALEKLKDKLKGSAEPE----ASKKSN-------------KS-GDKAPGALKR-----------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[77], "-------------STLTEHMIVC---------ESSQKPLMFFHLVH-----A-------------H---KVTNALVFTKSAESTTRLVRLFDFFEKARARH-----------------------AMAGSVQQIVVHAYSSDLPAGERKTILEKFRAQEIQ------ILVCSDLISRGIDISHVSHVVSYDVPVDMRKYVHRVGRTARAGRAGDAWTLVEEQEA-RYFK-GILRDADHLE---------KVKRIRVG-EKELS-PLVPFYET-------------ALGQLKEA-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[78], "---------------LTHHYVPC---------SLSTKPLLVLHLIL-----E-------------K---SFSRVLCFTNSRENSHRLFLLVQAFGG------------------------------------VSVAEFSSRYGPGQRKMILKQFEQGKIQ------LLISTDATARGIDVQGVELVINYDAPQYLRTYVHRVGRTARAGNAGQAFTLLLKVQE-RRFL-RMLTEGGV-P---------ALQRHELL-SELLQ-PLVPRYEE-------------ALSQLERTV----KEE----RKQKAA-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[79], "-----------------------------------MKPVYLVALLK-----S-------------W---EGEKCIIFTSSVETTRRLCKLLNFFGD----------------------------------PKIKAKEYSGGLNQSLRSKELKAFRKGDIQ------VLVASDALTRGMDVKGVTNVINYDMPPFAKTFIHRAGRTARAGQSGRCFTLLSNHEV-RRFS-KLLKKVGN-A---------SCPIYPIP-PTSFD-SVRATYAP-------------ALEKLKELV----ESE----APRKR--------------RQ-AFKHNSRTGNSQTKRNKTASEQA----------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[80], "--------------GLSQCYVPC---------DLNSKPLLLLHFML-----T-------------M---KFTRVLCFTNSREASHRLFLLVQAFGG------------------------------------VTAAEFSSRLPPNERQRTMKEFEQGKIQ------LLISTDATARGIDVKGVNYVINYDAPQFIRTYIHRVGRTARAGKAGVAFSLVLRIQE-RRFL-RMLKDAGI-Q---------DIKKHPVK-GNSLK-PLVQQYEE-------------ALSKLEKTV----KVI----ETGKK--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[81], "------------------------------------------------------------------------------TTIRRSHRLSTLLEFFED----------------------------------LPFKFSEYSRLQRESTRRKTLDAFKEGKID------VLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEV-KAFD-KMLKKADN-S---------SCSLHSLP-EESVE-TLRPVFSS-------------ALKKLEESL----ESE----ATKKS--------------KS-GDKAPNASKRKRTINTNRYSL------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[82], "-----------------EHMIIS---------PASHKPLYLFHLLH-----T-------------L---AISSALCFTRSVEAATRLAKLVEFFEEARVAS-------------------------GIEGKKVVVRAFSSELAPNERNKVLRDFKKGEIQ------MLICSDLIARGIDIPNVSHVISYDIPADMRKYVHRVGRTARAGKEGDAWSLVEEQEV-APFR-NIMAKAQHYQ---------KIERVRVK-DQLVE-PFVPAYQT-------------ALERLKAHF------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[83], "---------YRIPTKLESYKLIC---------TSNIKPLCLIVLLQ-----E-------------L---RGEKCLVFTKSVDDSHRLSTLLGFFED----------------------------------LPFKFSEFSSLQRESTRRKTLAAFKEGKID------VLIGSDIMARGIHIDGLRYVINYEMPQYVKTYIHRAGRTARAG------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[84], "-------------------MVKC---------SPQEKPMVLLHMLL-----K-------------L---NFKKVLVFTSSVDSTHRLYLLLKLYGG------------------------------------IRVAEFSSGLSPTDRKRILQSFAQDKID------VLICSDAMSRGMDVSNVQYVVSYDAPSYIKTYIHRVGRTARAGRSGTAFTIVKRDEV-KQFK-QMMSKAAG-H---------RLNEVKIT-PTELG-MYQEDLNN-------------TLQHLRVHL----ENE----EGKLS--------------DV-VGQLKGQILMALSK-------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[85], "--------------KLQSYKLVC---------KSNLKPLSLIVLLQ-----E-------------L---RGEKCLVFTSSVESSHRLSTLLEFFED----------------------------------LPFKFSEYSRLQRESTRRKTLDAFKEGKID------VLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEV-KAFD-KMLKKADN-S---------SCSLHSLP-EESVE-TLRPVFSS-------------ALKKLEESL----ESE----ATKKS--------------KL-GDKAPNASKRKRTIN------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[86], "----------------TEYYVPS---------TMNKKPLLILHFLL-----R-------------L---KYKPVLCFTNSREAAHRLFLLLKFYGG------------------------------------VEVAEFSSRLSPTERQKTLKSFEQGKIA------MLISTDAAARGIDIKGVKCVINYDAPQYIRTYIHRVGRTARAGQAGVAFTFLLAIQM-KRFQ-KMLLNAGS-P---------GLQKHVVK-PQHLS-GLESRYEE-------------ILVELGEAI----KEE----KAQNRF-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[87], "------------------CEIIC---------EDAAKPMVLCHIIK-----Q-------------K---AFKKVLCFTETAERAQSLHLILAEMGL------------------------------------LQVREISSYNRPIQRKIVLEHFVSGKVN------ILVCSDLVARGIDIEDIDCVVSYDVPTFVKTYIHRIGRTARAGKKGTAITLLSEVEI-ACFR-KMLKTAEI-P---------APEREHVD-TQDLT-TYIPLYKK-------------ALKIADAKI----KKF----KIFKHQN-----------FKG-KKKVKRKNKLQQSTKWQHS--------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[88], "--------------NLDEYWIEC---------DTGSKPLVLLELLS-----E-------------F---ANSLTIVFTASVSSTHRLARLLQLYSA----------------------------------HSERVREFSSNLSQKQRSSLVADCKAGRIQ------TVVCSDAMARGMDIEDVANVVNYDVPTFIKTYIHRVGRTARAGRHGRCVTLVKMGQM-KA-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[89], "---------------LSDFYIVV---------PEEEKPLALLHAIRREKEAE-------------N---SARSILVFTSSREHAHNLTRLLQLIDG-----------------------------------EMRVAEFSAALSRSERLQAIQTFKDRKVD------VLVCSDALTRGIDIETIDLVINYDAPAHLKTYVHRAGRTARAGHTGRVVTILLKKQA-RFFK-HMMLTAAPPR-------KPTEDDFMSF-RKTIK-SNRSQYKV-------------ALDKLSNVL----ARE----ESGEI--------------TT-TTP--------------------------------------------------VDVLEFD---------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[90], "------------------QYCVT---------ELRLKPLTVFALVE-----K-------------Y---KWKRFLCFTNSSDQASRLTFVLKVLFQK---------------------------------YSTNVSELSGNLSAKVRKERLRDFAAGKIN------GLICSDALARGIDVADVDVVLSYEIPRHITTYIHRVGRTARAGRKGTAVTLLTEYDM-TLFK-KILSDANK-V---------LGEEIHVS-PDIEI-QHAVEYKE-------------ALAGLRTEK----EKK----KNQKM--------------AE-KNRVATKALIHKKQEETAT-------------------------------VRPLTLMEKLQIKANEIVQSSKKSSETKNPKTKADKPKYQPKETKRQI------------IAKQ---------------------------------------------")
        self.assertEqual(alignment[91], "---------------LTHHYVPC---------RLRSKPLVVLHLIL-----E-------------L---KFSRVLCFTNSRENSHRLFLLVQAFGG------------------------------------VSVAEFSSRCGPGQRRGILKRFQQGKIQ------LLVSTDAAARGIDVQGVELVVNYDAPQYLRTYVHRVGRTARAGRTGQAFTLLLKVQE-RRFL-QMLEEAGA-P---------RLQRHETP-SELLQ-PLVPRYEA-------------ALSQLEKTV----REE----QKQKAT-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[92], "--------------KLESYKLIC---------QSELKPIYLVALLQ-----N-------------L---GGEKCIVFTSSVESTHRLCTLLNFFTD----------------------------------LPLKIKEYSGLQRQSVRSKTLKAFREGDVQ------VLVSSDAMTRGMDVEGVRNVINYEIPLYIKTYIHRAGRTARAGQTGRCFTLLRKDE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[93], "---------------LTEQYCVT---------EMRLKPLTLFALIQ-----Q-------------Y---KWKRFLCFSNSADTANRLAFVLKILFQS---------------------------------YDITVEELSGNMSALERSTTLNNFARGKIN------GLICSDALARGIDVADVDIVISYEAARHIKTYIHRVGRTARAGKLGTAVTLLSDQDL-DQFK-KMLLDAGK-A---------MGDEISVS-TDFEV-EHANLYST-------------AMSALKDQQ----SLE----KSKKA--------------IT-KRRLAHHAKLHKEMEHKDQ--------------------------------RTLTLMEKLQLKTISDIK-KPGEKVHKIDKSLQGVTK--PKETKRKR------------QAKIFKA------------------------------------------")
        self.assertEqual(alignment[94], "---------------LREHMLVT---------SAADKPLELLQLLHR---PK-------------S---PLRRVLCFTKSVESAARLVKLVEFFEQAQTA---------------------------RGLPAITAENFSSELKAGRRQKIMDEFAKGQID------LLVCSDLISRGIDLPDVQHVISYDVPVDASKYVHRVGRTARANREGDAWTLVEEHEA-RYFK-GLLKAVIRQG---------KVEKIKPT-ADSVDPRMRDDYAA-------------ALQKLADFY----KRS----GSEA---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[95], "--------------GLSQCYVPC---------DLNSKPLLLLHFML-----T-------------M---KFTRVLCFTNSREASHRLFLLVQAFGG------------------------------------VTVAEFSSRLPPNERQRTMKEFEQGKIQ------LLISTDATARGIDVKGVNYVINYDAPQFIRTYVHRVGRTARAGKVGVAFSLVLRIQE-RRFL-RMLKDAGI-Q---------DIKKHPVK-GNSLK-PLVQQYEE-------------ALRRLEKTV----KVI----ETGKK--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[96], "-----------TPANLEEGMVEC---------EAAEKPLVLLELLH-----S-------------F---GDQLTIIFTSSINATHRLCRLLQLYAT----------------------------------NPESVREYSSTLNQKQRSQLVQACHRGTIK------IVVCSDAMARGMDIAHVENVVNYDVPPYIKTYIHRVGRTARAGRAGRAVTLVKKGQT-KGLS-RMLAKAEK-A---------PLPVYPVD-AEHMQ-TLVPRYTV-------------CLASLKETL----AKE----KAG----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[97], "--------------KLESYKLIC---------ESNLRPLYLVALLQ-----E-------------L---GEEKCIVFTSSTESTHRLCTLLNLFGD----------------------------------LGIKIKEYSGLQRQSRRSKTLKSFREGKVQ------VLVSSDAMTRGMDVQGVRNVINYDIPAYIKTYIHRAGRTARAGQAGRCFTLLHKYEV-KRFK-KMLQKADN-E---------SVPHYSVP-SSSIE-TLRAAYNS-------------ALGKLKETV----ESE----ASRKR--------------KF-GSKFSKLSRTKPTD-------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[98], "--------------------------------RLSSKPLIVFHLVL-----G-------------M---NFSRALCFTNSRENSHRLFLLAQAFGG------------------------------------VSVAEFSSRYGPGQRKKILKQFEQGKIQ------LLISTDATARGIDVQGVELVINYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQE-RKFL-QMVSEAGV-P---------ELACHEVP-RKLLQ-PLVARYET-------------ALSQLEKTV----KEE----QKLKAA-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[99], "------------PEKLESYMMIC---------ESKLKPLYLVALLQ-----S-------------L---GEEKCIVFTSSVESTHRLCSLLNFFED----------------------------------LELKIKEYSGLQRQSLRSKTLNAFRGGEIQ------VLVSSDAMTRGMDVEGVKNVINYDMPAFIKTYIHRAGRTARAGQSGRCFTLLRKDEV-KRFK-KLLQKADN-D---------SCPVHNLP-SSSIE-FLQPTYVS-------------ALEKLKEKV----ESE----TSRKS--------------TI-TS-SSRAGKQKDRNSSKAKT-------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[100], "-------------EKLQSYKLFC---------ESKYKPLYLVALLQ-----S-------------L---GEEKCIVFTSSVESTHRLCTLLNSFDN----------------------------------LPFKIKEYSGLQRQSVRSKTLKAFRKGDIQ------VLVSSDAMTRGMDVEGVRNVVNYDMPAYIKTYIHRAGRTARAGQTGCCFTLLREDEV-KRFN-KLLRKAEN-N---------SCSKYSLP-SSYIE-PLHSVYES-------------ALEKLKETV----EME----TSRKR--------------KT-GFKSSLSG-------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[101], "-------------ENLESFKLIC---------ERKVKPLYLVALLK-----S-------------L---GEEKCIVFTRSVDSTHRLCNLLNCFGD----------------------------------LQIDIKEYSGRQHQRVRSKTLNEFRKGQFQ------VLVSSDAMTRGMDVEGVRNVINYDMPKYIKTYVHRAGRTARAGQTGRCFTLMSNDEV-GRFK-RLMKKAEA-S---------ACLEHTVP-SHLIE-ELHSTYQSGKYLKFDFW-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[102], "----------------------------------AYKPLVLLYLLE-----M-------------F---DFKRTLCFTSSVESTHRLYLLLTLMGQ------------------------------------TGVAEYSSTLPQRKRTQIIEKFAKGDIK------IVIASDAMSRGLDIEDVENVINYDVPPFIKTYVHRVGRTARAGRQGKTYTLLLKSEA-HHFR-SMLKKAEHST---------KINQVNIDYETELN-KYMEQYQE-------------ALEKLKEIL----KPH----MGKNDPTQRE-------RPKTAEAEAKPAAQPQQQKKQKKQ--------------------------HEDKMEEVEAMVDDLDDEDKLL--------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[103], "--------------GLSQCYVPC---------DLNSKPLLLLHFML-----T-------------M---KFTRVLCFTNSREASHRLFLLVQAFGG------------------------------------VPVAEFSSRLPPNERQRTIKEFEQGKIQ------LLISTDATARGIDVKEVNYVINYDAPQFIRTYIHRVGRTARAGKVGVAFSLVLRIQE-RRFL-RMLKDAGI-H---------DIKKHPVK-GNSLK-PLVQQYEE-------------ALCKLEKTV----KVI----ETEKK--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[104], "--------------KLESYKLIC---------QSELKPIYLVALLQ-----N-------------L---GGEKCIVFTSSVESTHRLCTLLNFFTD----------------------------------LPLKIKEYSGLQRQSVRSKTLKAFREGDVQ------VLVSSDAMTRGMDVEGVRNVINYEIPLYIKTYIHRAGRTARAGQTGRCFTLLRKDEV-KRFK-KMLQKADN-N---------SCPVYSLP-ASSVE-SLRSSYTS-------------ALEKLKEAV----ESE----TSRKR--------------KL-GSKA-----------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[105], "-------------ATLTEHMIVC---------ESSLKPLMLFHLVH-----T-------------H---GVVNALVFTKSAESTTRLVKLFELFETARVAE------------------------HCGEDRQIVIRAYSSDAGASERKTILEKFKAQEVQ------ILVCSDLISRGIDISHISHVVSYDAPVDMRKYVHRVGRTARARRAGDAWTLIEEQEA-RYFK-SMLKAADHLE---------KVKRLRVS-EKDLA-HLRPQYEV--------------------C-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[106], "----------------IEHMVVS---------APEDKPLVLLYALR-----R-------------L---GMQKVVCFVSSVESTHRLFRLVQLLGG------------------------------------IEVAEFSGALDMKSRTRILNRFRNGHIN------LLICSDSMARGLDLDIIEHVINYDAPMRLPTYVHRAGRTARAGRTGHAHTICLPTEV-RPFR-DMHRRTIK-SFGGQAPEANRLERWRVNFDRELE-PMRPRFRR-------------ALAALKDLL----AEE----KLATT--------------EK-TRQSVAAAVQASEALLAKYALD-----------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[107], "-------------------LLIC---------KSNLKPLSLIVLLQ-----K-------------L---QGNKCLVFTSSVESSHRLSTLLGFFED----------------------------------LPFKFSEYSRLQRESTRRKTLEAFKEGEID------VLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRQHEV-KTFE-KMLKKADN-A---------SCSLHSLP-EESIE-TLRPVF------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[108], "-------------ENLKEYLVIY---------DEDKKPLILWNIIE-----N-------------E---KYSRILCFTNSVYNSHRLCQLMKKIST------------------------------------IKVREFSSRQNIQKRTKILKRFASGSIQ------MIISTDMTARGIDIEGIDCVVCYDLPRNETAYIHRIGRTARAGKFGTAITIISPNQL-KHFN-IIMRKLHR-NNG-----AEKIERMAIK-TSKLK-PMKLIYKR-------------ALLELKSDA----NEE----IIKLKF----------------RKKLKKSNQS-----------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[109], "----------------SHHYVPC---------SLRTKPLAILHLIL-----E-------------K---NFSRVLCFTNSRENSHRLFLLVQAFGG------------------------------------VTAAEFSSRCGPGQRKAVLKQFEQGKIQ------LLISTDATARGIDVQGVQLVVNYDAPQYLRTYVHRVGRTARAGRTGQAFTLLLKVQE-RRFL-RMLAEAGV-P---------DMTRQDIP-SELLQ-PLVPRYEE-------------ALSQLERAV----KEE----RRQKA--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[110], "--------------ELKSFKVLC---------QSKLKPLYLVSLLQ-----S-------------L---QGEKSIVFTSSVESTHRLCTLLKFFDN----------------------------------LEIEFKEYSRLQRQSVRSKTLRAFRSGQVQ------VLISSDAMTRGMDVEGVRNVINYDMPAYIKTFIHRAGRTARAGLSGCCFTLMHKDEV-KRFK-KMLQKADC-N---------SCPTYSAS-SEVIE-SLRSVYTS-------------ALEKLRENV----ESE----KFKKS--------------KI-RLKSSNVRKEK----------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[111], "--------ALALVLRKDFSRIICFTNSRENSHSLSSKPLVALHLVL-----R-------------K---DFSRILCFTNSRENSHRLFLLVRAFGG------------------------------------VNAAEFSSRLGPGCRKRLLKQFEQGKIQ------LLISTDATARGIDVPGVELVLNYDAPQYPRAYVHRVGRTARAGQTGQAFTLLLRVQE-RRFL-QMLAEAGV-P---------TLERHEIP-GDVLQ-PLVPRYEE-------------ALTELEGTV----REE----QKQKVA-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[112], "--------------GLSQCYVPC---------DLNSKPLLLLHFML-----T-------------M---KFTRVLCFTNSREASHRLFLLVQAFGG------------------------------------VTVAEFSSRLPPNERQRTMKEFEQGKIQ------LLISTDATARGIDVKGVNYVINYDAPQFIRTYVHRVGRTARAGKAGVAFSLVLRIQE-RRFL-RMLKDAGI-Q---------DIKKHPVK-GNSLK-PLVQQYEE-------------ALRKLEKTV----KV------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[113], "--------------KLQSYKLVC---------KSNLKPLSLIVLLQ-----E-------------L---RGEKCLVFTSSVESSHRLSTLLEFFED----------------------------------LPFKFSEYSRLQRESTRRKTLDAFKEGKID------VLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEI-KAFD-KMLKKADD-S---------SCSLHSLP-DESVE-TLRPVFSS-------------ALKKLEESL----ESE----ATKKS--------------KS-GDKAPNVSKRKRTV-------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[114], "--------------TLREWMIVC---------ESINKPLLLFYLAH-----K-------------Q---QISDMLVFTKSAESTTRLLRLLGYFEDAMAE-------------------------REVGSKKIIAEAFSSDLAPSQRKTVLEKFKAKQID------MLICSDLVSRGIDIPHVSHVVNYDIPVDVRKYIHRVGRTARAGREGDAWSLVEEQEM-HHFK-LMMKEAHHLH---------ALKKKKVK-SEDLS-GLVDVYQV-------------ALGRMKVHY------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[115], "-----------------EFFVEL---------VERQKPIFLVHLVK-----K-------------L---GHQRILCFTNSREESKRLAAVLNHFDG------------------------------------IRAGALNAGMPLQKRTRLLSAFANGEYQ------LLICTDAVARGIDVKNISCVVSYKAPQSVKTYVHRIGRTARAGKSGEAYTLLNHNQI-RYFK-SSLKSVGK-----------HAKNFPIH-SSKLR-PYEKDYKA-------------ALAELEKEY----KAK----PKDAF--------------GV-AKPPEEINGRRKRELNEKVDIMS--------------------------KKSKLETGEQININ------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[116], "-----------LPHNIKQYMIHC---------TAGEKPLITLNLVL-----------------------NKTRVLCFAGSIETTRKLSMLIQMYADK------------------------------EGKKEFICTEFASHLPSSKRGKVLKDFISGKIN------VLVCSDSMARGLDVPCVEHVILYDVPPLIKTYIHRIGRTARAGATGTAYTLLRKQEI-FHFK-KMIADAGK-C---------KVKTMKIP-KESTQ-KMVSIYEQ-------------VLPMVAEKM----KTL----KR-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[117], "-----------------HHYVPC---------SLRFKPLVILHLIL-----E-------------M---NFSRVLCFTNSRENSHRLFLLVQAFGG------------------------------------VTVAEFSSRYGPGQRKSILKQFEQGKIQ------LLISTDAMARGIDVQGVQLVVNYDAPQYLRTYVHRVGRTARAGKSGQAFTLLLKVQE-RRFL-RMLEEGGV-P---------GLERHDTP-SELLQ-PLVPQYEE-------------ALSLLEKAV----KEE----RKQKAA-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[118], "---------------------LT---------EVRLKPLTLFALVQ-----Q-------------N---GWKRFLCFTNSTDTADRLCFVLKQLFED---------------------------------SPIKVEQLSAKCSAAQRAQRLNEFARGSIQ------GLICSDALARGIDVANVDIVISYEAARHIKTYIHRVGRTARAGQAGTAITLLTEKDQ-AQFK-QMLNAAGK-R---------MGEELSVS-PDIEV-QHAVLYKR-------------ALEALRQRQ----ENQ----KNVQK--------------VQ-KMRNSRKAAAHKPAPAAAA------------------------------PAGQLTLMEQLQHNAASQLWSKQHSKAAKPTKAAQPKQQTQ---------------------------------------------------------------------")
        self.assertEqual(alignment[119], "-----------TPANLDESMIEC---------DSMDKPLVLLELLH-----A-------------F---ESQLTIVFTSSINATHRLCRLLQLFSP----------------------------------TPQSVREYSSGLTQKQRSQLVQQCKKGAIK------VVVCSDAMARGMDIAHVGNVINYDVPPYLKTYIHRVGRTARAGRAGRAVTLVKRGQV-KGLT-RMLSKAKK-A---------ELPTYVYD-AEHMK-SLVPRYTA-------------CLASLKDTL----AKE----KAGHL--------------AT-TTKVSLKRPV-----------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[120], "-------------ATLTEHMIVC---------QTIQKPLMLFYLVH-----T-------------H---SVTNALVFTKSAESTTRLVRLFEFFEHAWAS-------------------------KEGGRKPVVARAYSSDLSNAERKSILEKFRDEEIG------ILVCSDLISRGIDISHVNHVVSYDAPVDMRKYVHRVGRTARAGRTGDAWSLVEEQEA-RYFK-KMLSTANHLN---------QVAKMKVA-DKVLA-PFMEHYED-------------ALKQLREVY----SR------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[121], "----------------REWMYAC---------ESSQKPLLLFHLIH-----K-------------S---NIANALVFTKSAESTSRLMRLLHYFEAARVANV---------------------SSQGSQRKPLKAEAFSSDLTPSQRRAVLDSFKSQQVD------LLICSDLVSRGMDISHVSHVINYDVPVDIRKYVHRVGRTARAGREGDAWSLVEEQEM-HHFK-AMMKEANH-K---------KIKKLKVK-SEDLK-EFEQYYQV----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[122], "------------------FYVPC---------SLNSKPLVILHLMR-----N-------------L---KFSRVLCFTNSREHSHRLFLLVKAFGG------------------------------------IPVAEFSSRFGPGQRKMILKQFEQGKIQ------LLISTDATARGIDVKGVKLVINYDAPQYIRTYVHRVGRTARAGHTGLAFTLLLKVQE-QKFL-QMLREARA-P---------ELGKHLVR-NEHLK-SLVPQYEE-------------ALAELQKTI----RNE----WKQKNA-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[123], "------------------LKLVV---------PAERKPAALAALLQ-----E-------------L---RGEQTIVFTSSVEATHRLHLLLAALPC----------------------------------LPDRAVEFSSLVAPAERAARLEAFRSGKAK------VLVCSDAMTRGMDVAGVANVVNYDAPVYVKTYVHRAGRTARAGRAGRVFTLLRHEDV-RHFK-GMLRKADN-T---------FVRAHRLA-KGALE-AVRDDVDA-------------ALEAMGAAL----AAE----AEAER--------------AR-G--------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[124], "-------------ATLTEHVVIC---------DPSVKPLILLHLIY-----N-------------L---SIRSALVFTKSSESTSRLVRLVGFFEDAST-----------------------------DRERVVICAYSSDLPTGERKRILEKFKAQEIH------ILVCSDLISRGADISHISHVISYDAPVDMRKYVHRVGRTARAGRTGDAWTLVEEQEA-RYFK-GMLREHSHLE---------RVKRVKIP-QKETE-GLSTAYQI-------------ALQKLKEVY----AR------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[125], "---------------LQEYRVSV----------SAEKPILLHHLIH-----S-------------N---NLNSVLCFVKSNEGAARLHRLLEIFNG-------------------------------IEGKNYPCGLVSGNISRDERKKMLNGFVSGELK------LLVCSDLMARGIDVANTEHVINYDPPSSLRRYVHRIGRTARAGRYGYAWTLVQDHEG-HHFS-KLLKHLGR-TL--------PLQRLRLH-LKDLPKEYVELYDN-------------ALETLRTEV----YES----RKSSK--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[126], "-------------ERLESYKLIC---------ESKLKPLYLVALLQ-----S-------------L---GEEKCIVFTSSVESTHRLCTLLNHFGE----------------------------------LRIKIKEYSGLQRQSVRSKTLKAFREGKIQ------VLVSSDAMTRGMDVEGVNNVVNYDKPAYIKTYIHRAGRTARAGQLGRCFTLLHKDEV-KRFK-KLLQKADN-D---------SCPIHSIP-SSLIE-SLRPVYK-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[127], "--------------GLTEYYVSC---------TLSKKPLLILHLIL-----R-------------L---KFSPILCFTNSREAAHRLHLLVKLFGG------------------------------------VQVAEFSSQLSASERKRALKDFEQGKIQ------LLISTDAAARGIDIEDVKCVVNYDAPQFIRTYIHRVGRTARAGKAGLAFTFLLGVQE-KLFL-QMLKDAGS-P---------GIQKQIIK-AENLK-MLEAHYEK-------------VLLELKKVT----KVN----PVRGTA-------------EKESVQSSH---------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[128], "---------------LQEYRLVC---------TAGEKPLYLIALLH-----Q-------------L---KGQRTIVFTASVEATHRLFTLLQAFEG----------------------------------LPVLAGEYSSLQPQRARSATLEAFRRGEVD------MLVSSDAMTRGMDVENVENVISYDAPVYAKTYVHRAGRTARAGRPGRCFTLLRREEV-RHFK-GLLRKVDN-N---------FCPDYPLP-SAATD-ALVPFYTA-------------ALEKLKETV----AG------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[129], "----------ETPEKLEEWLVEC---------DSESKPLRLVQLLL-----Q-------------F---HDQMTLVFTSSVNATHRLTRLLQLMFKE------------------------------LNGDDIGVQEYSSSLTLQQRRKLVAKCKKGLNR------VLVCSDAMARGMDLDDVVNVINYDVPTHIKTYVHRAGRAARAGRYGRCVTLVKRGQT-KGLQ-RMLQKTNK-K---------QLLSFSLS-PEEMQ-NLVPIYKK-------------ALQNLKETL----EME----ANGKL--------------KA-TAKITQKRE------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[130], "---------------LTHHYVPC---------SLSSKPLAVLHLVL-----R-------------T---SVSRALCFTNSREHSHRLFLLAQAFGG------------------------------------VNVAEFSSRYGPGQRRKILKHFEQGKIQ------LLISTDATARGIDVQGVELVINYDAPQYLRTYVHRVGRTARAGRTGQAFTLLLKVQE-RRFL-RMLAEAGA-P---------ELSRHEIP-SELLQ-PMVPQYEE-------------ALSQLEKTI----KEE----QKQKVA-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[131], "----------------EEYLIKC---------TPGEKPLAVLHLAL-----------------------DKSRVLCFAGSIETARRLTVLIQLYAEA------------------------------AGKSDFTCTEFASHLPTTKRSKVLKDFSAGKIN------ILVCSDAMARGLDVPSVDHVILYDVPPLIKTYIHRIGRTARAGASGTAYTLIRKQEI-FHFK-KMINDAGK-S---------KVKMLNIP-EDSVK-ELTPIYEQ-------------VLPSVAEKL----KCL----K------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[132], "----------------KEHMIIS---------DPTQKPLIFFHLVH-----T-------------L---NVTNALVFTKSAESTTRLVQLFDFFEKERTH--------------------------GNGLSPLSVRAYSSDLPVNERKAILENFKSQKIH------ILVCSDLISRGIDISHVSHVVSYDVPVDMRKYVHRVGRTARAGREGDAWTLVEQQEA-RFFK-QMLKEADHLE---------KVKRLRLG-EKDLA-PLLPHYEA-------------ALNKLKDLY----TRQ-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[133], "---------------LKEFMTIC---------PTDKKPLMVIYLLH-----Q-------------M---GIKSGLCFTKSVESTQRLFTLIEAYESTQ-----------------------------PEEKRIRVKEYSSDLNPVQRKQMLKQFKQGNID------LLICSDLIGRGIDLDSVEFVISYDVPYYMDKYIHRVGRTARAGRQGEAYTLVEMQEA-RHFK-EILRHAGHLS---------QIKTLKIE-KDKLK-ELVPDYEK-------------AMSKITE--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[134], "--------------GLSQCYVPC---------DLNSKPLLLLHFML-----T-------------M---KFSRVLCFTNSREASHRLFLLVQAFGG------------------------------------ITVAEFSSRLSPNERQRTMKEFEQGKIQ------LLISTDATARGIDIREVNYIINYDAPQFIRTYVHRVGRTARAGKAGVAFSLVLRIQE-RRFL-RMLKDAGI-Q---------DIKKHPVK-GNSLK-PLVQQYEE-------------ALCKLEKTV----K-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[135], "---------------LTERYIET---------SIDLKPLVLFKFIK-----Q-------------E---ELRKTLVFTHSVESAHRLTILLKTMFG----------------------------------KERVVQEISSQLQPKSRVALINEFSEGTLD------ILISTDSLARGIDLPGVQCVINYSAPKYLKSYIHRAGRTARAGVQGLAVTFLHTSQL-PKFK-SLLKQADK-H---------NVEEIKIS-EEDLE-PLGEQYRK-------------SLNELKAVV----DKE----EKLDL--------------QK-IKSAKRSKPKFKRKKADRVGKKA----------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[136], "------------------FYVPC---------TLSRKPLLILHFVL-----R-------------L---KLSPILCFTNSREAAHRLYLLVQLFGG------------------------------------VQAAEFSSRLSPAERKQTLKDFQQGKIQ------LLISTDATARGIDVSGVKCVVNYDAPQYVRTYIHRVGRTARAGKSGLAFTFLLGVQE-KKFL-KMVMDAGS-P---------GIQKQIVK-SESLK-GMEGRYER-------------ALQELAQAI----KVK----YEYFH--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[137], "--------------KLQSYKLVC---------KSNLKPLSLIVLLQ-----E-------------L---RGEKCLVFTSSVESSHRLSTLLEFFED----------------------------------LPFKFSEYSRLQRESTRRKTLDAFKEGKID------VLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEV-KAFD-KMLKKADN-S---------SCTLHSLP-EESVE-TLRPVFSS-------------ALKKLEESL----ESE----ARKKS--------------KS-GDKAPNASKRKRTIHTQPIATCELKATK-----------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[138], "----------------ESFKLVC---------RSKLKPLYLVALLQ-----T-------------L---GAEKSIVFTSSVESTHRLSTLLKFFGE----------------------------------LPFKISEYSRRQCQPVRSKKLKAFREGKTQ------VLIATDAMTRGMDVEGIRNVINYDMPAFVKTYIHRAGRTARAGQSGRCFTLMRKDEV-KRFN-KLLEKADN-N---------SCIIHSLP-TDSVE-SLRPLYSS-------------ALEKLKEHE----QSW----TARKS--------------RI-SFKSVRASKRKIVQKK-----------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[139], "------------------HMIIS---------PSSHKPLYLFHLLH-----T-------------L---SISSALCFTKSVEAATRLAKLVEFFEEARIAA------------------------EGEGAKRVVVKAYSSELAPGERNKVLRDFKKGDVQ------MLICSDLIARGIDIPNVSHVISYDIPADMRKYVHRVGRTARAGNKGDAWSLVEEQEV-APFK-SIMSSAQHYA---------KIGRVRVK-DSAIE-AFVSPYQA-------------ALERLRLHF----ATG----RERER--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[140], "-------------ATLTEHMIVC---------EASNKPLMLIHLIH-----N-------------H---SIRNALVFTKSSESTTRLVRLLEFFEELSMS----------------------------DRGRIVIRAYSSDLAAGERKNILEKFKAQEVH------VLVCSDLISRGIDISHVSHVVSYDAPVDIRKYVHRVGRTARAGRDGDAWTLVEEQEA-RYFK-TMLKEYDHLD---------RVKRMKVS-QKETE-PLTGNYQA-------------ALQMLKESY----AR------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[141], "-------------EKLESYKLMC---------ETKLKPLYLVALLQ-----K-------------L---GGEKCIVFTSSVESTHRLCTLLNFFDD----------------------------------LPFIIKEYSGLQRQSVRSKTLKGFREGQIQ------VLVSSDAMTRGMDVEGVKYVINYDMPVYIKTYIHRAGRTARAGQAGRCFTLLSKDEA-KHFK-KLLQKADN-N---------SCPGYAVP-SSSIE-SMHSIYTS-------------ALEKLKETV----EME----AYQKR--------------KM-GFKSSRVGKRSG---------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[142], "-----------LPKNLESYKLIC---------ERKVKPLYLVALLK-----S-------------L---GEEKCIVFTRSVDSTHRLCKLLNYFGD----------------------------------LQIDIKEYSGHQHQRVRSKTLNEFRKGQFQ------VLVSSDAMTRGMDVEGVRNVINYDMPKYIKTYVHRAGRTARAGQTGCCFTLMSNDEV-GRFK-KLMKKAEA-S---------ASLEYTVP-SRLIE-ELHSTYQS-------------ALSKLKDCR----REP----KDKSCP-------------KI-KKR------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[143], "-------------ETLQEHMLVV---------STEDKPLALFHLLHR---SE-------------A---PLRQALCFAKSVEAANRLAKLLEFFEEKRGA-----------------------------EGVIKAANYSSELSAGERARVLQAFRNGEID------VMICSDLISRGIDISDVQHVISYDVPVDMRKYVHRVGRTARAGKQGNAWSLVEEQEA-RHFK-DMLKRGGRSK---------NVRKVKLQ-GTDLQ-ELRPAYEH-------------ALEQLAHRF----GR------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[144], "------------PENLESYKLIC---------EKKVKPLYLIALLK-----S-------------L---GEEKCLVFTKSVDSTHRLCQLLNCFED----------------------------------LRIDIKEYSSLQHQRVRSKTLNEFRKGVFQ------VLLSSDALTRGMDVEGVRNVINYDVPKFIKTHVHRAGRTARAGQTGRCFTLMSEDEV-RRFK-KLIGKAEG-G---------SCLDHIVP-SSQIE-ALNTTYES-------------ALTKYKEII----SKT----RKKPK--------------N-----------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[145], "----------------THHYVPC---------SLNSKPLVVLHLVL-----E-------------M---GFSRVLCFTNSRENSHRLFLLVQAFGG------------------------------------VDVAEFSSRYGPGQRRMILKQFEQGKIQ------LLISTDATARGIDVQGVELVVNYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQE-RRFL-RMLTEAGA-P---------ELQRHELS-SKLLQ-PLVPRYEE-------------ALSQLEESV----KEE----RKQRAA-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[146], "----------------THHYVPC---------SLSSKPLVVLHLVL-----E-------------M---GFSRVLCFTNSRENSHRLFLLVQAFGG------------------------------------VDVAEFSSRYGPGQRRMILKQFEQGKIQ------LLISTDATARGIDVQGVELVVNYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQE-RRFL-RMLTEAGA-P---------ELQRHELS-SKLLQ-PLVPRYEE-------------ALSQLEESV----KEE----RKQRAA-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[147], "----------------TEHYFKC---------PPMLKPLAVYCLLK-----K-------------F---KYRTTLCFTNSRAATHRLCELLKQFGD------------------------------------LRVAECSSEISKAPRDKLLKDFSSGKID------LLVCTDAVSRGMDLGVVDCVISYDSPRYVKNYIHRAGRAARAGRPGTAITILVDSEM-HGFH-KLLGMAEK-K---------NVTPLDMQ-TEEFE-VYEEQFRK-------------ALDGLKNTV----KEE----IQSKI--------------VR-NHQVRQKKGFKPKFKKGKV------------------------------------VSTKLAKRRGNIVNK-----------------------------------------------------------------------------------------")
        self.assertEqual(alignment[148], "-------------AGLTEHMIVC---------ETSEKPLMVLHLLH-----H-------------L---QVRSALCFTKSVESAHRLYKLIQLYEK------------------------------------IRVAEFSSDLPKSKRQSILRAFNNGEIH------LLICSDLISRGMDLSPVSYVINYDSPVYMKKYIHRVGRTARAGKTGTAYSLVEMQEA-RHFK-EMISKAGHWD---------KIGRVNVK-SQEVK-DLVPGYTK-------------ALAGLKD--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[149], "-----------IPTKLQSYKLVC---------KSNLKPLSLIVLLQ-----E-------------L---RGEKCLVFTLSVESSHRLSTLLEFFED----------------------------------LPFKFSEYSRLQRESTRRKTLDAFKEGKID------VLIGTDRMARGIHIDGLKYVINYDMPPYVKTYIHRAGRTARAGEAGSCFTFLRKHEV-KAFD-KMLKKADN-S---------SCSLHSLP-EES---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[150], "-----------------EFFVEL---------AERQKPLFLAYLIR-----R-------------M---GHERILCFTNSREITKRLAVLMSNFKG------------------------------------VKAAALNAGMPLQKRARLLSSFASGEFQ------LLVCTDAVARGIDIEDVSCVVSYEAPQSVRTYVHRVGRTARAGKTGQAFTLLLRNQVIRYFK-SSLKSVGK-----------RAKNFPIH-SSQLR-TYKATYES-------------ALCHLEKEF----KPKYVL-SQHLL--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[151], "----------------THHYVPC---------SLSSKPLVVLHLVL-----E-------------M---GFSRVLCFTNSRENSHRLFLLVQAFGG------------------------------------VDVAEFSSRYGP-QRRMILKQLNRGRSS------RLISTDATARGIDVQGVELVVNYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQE-RRFL-RMLTEAGA-P---------ELQRHELS-SKLLQ-PLVPRYEE-------------ALSQLEESV----K-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[152], "----------------TEHMLVC---------DTAVKPLMLFYLVH-----T-------------R---GVTNALVFTKSAESTTRLVRLFEFFEVALHD-------------------------ADNAGSRIVARAYSSDLAPAERKSILEQFKNQEIN------ILICSDLISRGIDISHVSHVVSYDVPVDFRKYVHRVGRTARAGRAGDAWTLVEEQEA-RYFK-SMLKEADHLD---------KVKRLRVS-DTDVA-PLKPAYEA-------------ALARLKEVY------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[153], "--------------KLESYKLIC---------KSNLKPLSLIVLLQ-----E-------------L---QGNKCLVFTSSVESSHRLSTLLRFFEN----------------------------------LPFKFSEYSRLQRESTRRKTLEAFKEGKID------VLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEV-KTFD-KMLKKADN-A---------GCNLHSLP-EESIE-TLRPAFSG-------------ALRKLEGAL----ESE----AVKKY--------------DL-GDKTPGASKRKRPN-------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[154], "-------------ENLESYKLIC---------EKKVKPLYLIALLK-----S-------------L---GEEKCLVFTKSVDSTHRLCQLLNCFED----------------------------------LRIDIKEYSSLQHQRVRSKTLNEFRKGVFQ------VLLSSDALTREMDVEGVRNVINYDVPKFIKTYVHRAGRTARAVQTGRCFTLMSEDEV-RRFK-KLIGKAEG-G---------SCLDHIVP-SSQIE-ALNTTYES-------------ALTKYKEII----SKT----RKKPK--------------N-----------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[155], "-------------ERLESYKLIC---------ESKLKPLYLVALLQ-----S-------------L---GEEKCIVFTSSVESTHRLCTLLNHFGE----------------------------------LRIKIKEYSGLQRQSVRSKTLKAFREGKIQ------VLVSSDAMTRGMDVEGVNNVVNYDKPAYIKTYIHRAGRTARAGQLGRCFTLLHKDEV-KRFK-KLLQKADN-D---------SCPIHSIP-SSLIE-SLRPVYK-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[156], "-------------ERLESYKLIC---------ESKLKPLYLVALLQ-----S-------------L---GEEKCIVFTSSVESTHRLCTLLNHFGE----------------------------------LRIKIKEYSGLQRQSVRSKTLKAFREGKIQ------VLVSSDAMTRGMDVEGVNNVVNYDKPAYIKTYIHRAGRTARAGQLGRCFTLLHKDEV-KRFK-KLLQKADN-D---------SCPIHSIP-SSLIE-SLRPVYK-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[157], "-------------------FVEL---------VERQRPMFLVHLVR-----K-------------L---GHERILCFTNSREESKRLAAVLNHFDG------------------------------------IKARALNAGMPLRKRTRLLSAFADGEYQ------LLICTDAVARGIDVKNISCVVSYEAPPSVKTYVHRIGRTARAGKSGEAYTLLNHNQI-RYFK-SSLKSVGK-----------RAKNFHIQ-PSKLR-PYGKEYKA-------------ALAELEKEY----KVK----PKDAF--------------GV-AKAVEEINSRRKRELDEKDAIML--------------------------ERSKLETEEHISMNAFVN--------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[158], "-------------ESLKEEYLIC---------NPSEKVIALLHLVL-----D-------------R---GFHSVVCFTNSVESTHRLCLLLKHIDK------------------------------------FPVAEFSSRIKVNQKENILAAFSKGSIR------LLVCTDTMARGMDLLNIDLVVSYEYPKFVETYIHRVGRTARAGQQGTSVSLLEFQQV-VHLK-TMRKQCQSKS---------SLSQIKLT-NQVRK-KYVPLLRS-------------AVEALPISL----KAE----NKKNQPN------------KK-TLQSSKA--------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[159], "-------------EKLEFFKVIC---------ESNDKALYLVALLQ-----K-------------L---EGEKCIVFTSSKEMTHRLCNLLKSFGD----------------------------------LQMRIKGYSSCQHQAVRSKTLDAFRKGEVE------VLVSSDNLSRGTDVEAVANVIIYDVPRYIKAYLHRAGRTARAFQIGRCFTLLLRDEA-RKFN-ALQRKAEI-S---------S-TIYPLS-SESIQ-ALQSAYVS-------------AFDKLKESV----ESK----ASRKR--------------KV-NFKSSKPRKAKAMKVSK----------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[160], "--------------KLESYKLIC---------KSNLKPLSLIVLLQ-----E-------------L---QGNKCLVFTSSVESSHRLSTLLGFFED----------------------------------LPFKFSEYSRLQRESTRRKTLEAFKEGEID------VLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCYTFLRKHEV-KTFD-KMLKKADN-A---------SCNLHSLP-EESIE-TLRPVFSS-------------ALKKLEESL----ESE----AGKKS--------------NS-GDKIPSGSKRKRTN-------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[161], "--------------KLQSYKLVC---------KSNLKPLSLIVLLQ-----E-------------L---RGEKCLVFTLSVESSHRLSTLLEFFED----------------------------------LPFKFSEYSRLQRESTRRKTLDAFKEGKID------VLIGTDRMARGIHIDGLKYVINYDMPPYVKTYIHRAGRTARAGEAGSCFTFLRKHEV-KAFD-KMLKKADN-S---------SCSLHSLP-EESVE-TLRPVFSS-------------ALKKLEESL----ESE----ATKKS--------------KP-GYKAPNASKRKRT--------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[162], "---------------LTEYMTVT---------SAERKPLMLLYIMH-----T-------------F---NIQSCLCFTRSAESTQQLKTLVEAYESRQST----------------------------HDTKIVVADYSSDLPPSERKSLLKRFKNGDIH------LLVCSDLIGRGIDLNNVDVVINYDVPWFMDKYIHRVGRTARAGREGQAYSLVEKQEA-RPFK-DLLRNAGHYQ---------QIKQLRVE-NTKLE-PMQADYDA-------------ALSSV----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[163], "----------------LKHMLVC---------ESSQKPLMFFHLVF-----H-------------L---NVTDALVFTKSSESTARLVRLFDFFQKWRAV---------------------------ESGKSLVVQAYSSDLSVGERKVILERFKAQEIN------ILICSDLISRGIDISHVSHVVSYDVPVDMRKYVHRVGRTARAGRSGDAWALVEEQEA-RYFK-NMLRDADHLN---------KVGRLRVN-EGDIE-KLAPGYEV-------------AIKQLRD--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[164], "-------------TTLREHMVVC---------ESSLKPLVFFHLVH-----A-------------H---SMSSALVFAKSTESTTRLVQLFEYFEESRAP-----------------------------DVRLSVCAYSSDLPASDRKSILEKFKTQEIQ------ILVCSDLISRGIDIQHVSHVVSYDAPIDMRKYVHRVGRTARAGRAGDAWTLVEEQEA-HHFK-RMLREVNHLD---------KVKRLKVS-TKETE-SLMPHYEV-------------CRFA-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[165], "---------------LTHHYVPC---------SLRSKPLVVLHLVL-----E-------------M---NFSRVLCFTNSRENSHRLFLLAQAFGG------------------------------------VSVAEFSSRYGPGQRKMILKQFEQGKIQ------LLISTDAMARGIDVQGVQLVVNYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQE-RRFL-RMLAEGGV-P---------ELERHDTP-SKLLQ-PLVPRYEA-------------ALSQLERAV----KEE----RKQKAA-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[166], "------------------FKVIC---------EPNFKPLYLVALLQ-----S-------------L---HGEKSIVFTSSVESTQRLCALLKFFGD----------------------------------LNIKIKEYSGVQRQALRSKTLKAFRAGEVQ------VVVSTDAMTRGMDVEGVRNVINYDAPPYIKTFIHRAGRTARAGLVGRCFTLLHKDEE-RRFK-KLLKKADN-N---------SCSGHSIT-PDSLD-PLRSVYAS-------------ALAKLKESV----ESE----TYKKR--------------KA-GIRLSHMGK------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[167], "-------------EALKEHMIIC---------EASQKPMMLFHLVH-----N-------------Y---SVRNALVFTKSSESASRLVRLIEFFEAATSS----------------------------DRNPIVVRSYSSDLPVNERRNILEKFKAQEVH------LLICSDLISRGIDISHVSHVVSYDTPVDMRKYVHRVGRTARAGRTGDAWTLVEEQEA-HYFK-SMLRSAGHLE---------KVKRMRVS-EKDTA-PLSPAYEI-------------ALQNLRDAY------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[168], "----------------THHYVPC---------SLNSKPLVVLHLVL-----E-------------M---GFSRVLCFTNSRENSHRLFLLVQAFGG------------------------------------VDVAEFSSRYGPGQRRMILKQFEQGKIQ------LLISTDATARGIDVQGVELVVNYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQE-RRFL-RMLTEAGA-P---------ELQRHELS-SKLLQ-PLVPRYEE-------------ALSQLEESV----KEE----RKQRAA-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[169], "-----------MPETLKESYIIS--------STSEQRPLVLLNILK-----NTI------STDDST---SKKKIICFTKSLETTHRLNLLLKFIQN-------------------------------VDGLKFVSEEYSSVQSQSERSALLSRFRNGEID------ILICSDIMSRGMDIQDIDVVINYNAPPNITLYVHRVGRTARAGKDGSSYTIVEKQEL-KHYL-FTMKKAERSH---------SIHKLKWK-FEDYK-PYEVQYKN-------------ALYQMRLIF----NKR----KTIDEP-------------------SNDTSTTIQSSMESDS-------------------------------RLYENLLEVSKKKAKANF-------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[170], "-------------EGLSQCYVPC---------DLNSKPLILLHFML-----K-------------M---KFSRVLCFTNSKEASHRLFLLIRAFGG------------------------------------VTVAEFSSRLPPNERHRTMKEFEQGKIQ------LLISTDATARGIDIKGVNCVINYDTPQFIRTYIHRVGRTARAGKTGLAFSMVLRIQE-RRFL-RMLKDAGI-T---------DIKQHLVK-GKLLK-PLVQQYEE-------------ALSKLEKTV----KV------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[171], "--------------KLQSYKLVC---------KSNLKPLSLIVLLQ-----E-------------L---RGEKCLVFTSSVESSHRLSTLLEFFED----------------------------------LPFKFSEYSRLQRESTRRKTLDAFKEGKID------VLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEV-KAFD-KMLKKADN-S---------SCSLHSLP-EESVE-TLRPVFSS-------------ALKKLEESL----ESE----ATKKS--------------KS-GDKAPNASKRKRTIN------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[172], "--------------------CVT---------ELRIKPLTLFALVE-----K-------------Y---QWKRFLCFTNSTETANRLAFVMGKLFST---------------------------------GPTKVAELSGKLSALVRTKTLSDFARGRIN------GLICSDALARGIDVADVDVVLSYETPRHIKTYIHRVGRTARAGRKGTAVTLLTEQEQ-AQFK-KMLNEVGK-A---------LGEEISVS-ADTEV-RHADIYKL-------------AMEDLRKRQ----EKE----KTIKI--------------VQ-KRRVAQQTVLHKKQEEAAVN-----------------------------PSRPLTLMQKLQLKAGG---------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[173], "--------------NLDEYWIEC---------DTGSKPLVLLELLS-----E-------------F---AGSLSIIFTASVNSTHRLARLLQLYST----------------------------------DPERIREFSSSLSQKQRSALVADCKAGRVE------TVVCSDAMARGMDIEDVANVVNYDVPSFIKTYIHRVGRTARAGRHGRCVTLVKMGQM-KGMM-RMLKKADN-N---------KLKPYPLQ-QEHMK-TLVPRYTD-------------ALQQLKDTL----EAE----KAGKL--------------QA-TSILRKNKITTSERNND-DVAEEG-NLDEEVVTA-------------DKKRAFSVLNAQLERN------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[174], "--------------NLDEYWIEC---------DTGSKPLVLLELLS-----E-------------F---AGSLSIIFTASVNSTHRLARLLQLYST----------------------------------DPERIREFSSSLSQKQRSALVADCKAGRVE------TVVCSDAMARGMDIEDVANVVNYDVPSFIKTYIHRVGRTARAGRHGRCVTLVKMGQM-KGMM-RMLKKADN-N---------KLKPYPLQ-QEHMK-TLVPRYTD-------------ALQQLKDTL----EAE----KAGKL--------------QA-TSILRKNKITTSERNND-DVAEEG-NLDEEVVTA-------------DKKRAFSVLNAQLERN------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[175], "--------------NLDEYWIEC---------DTGSKPLVLLELLS-----E-------------F---AGSLSIIFTASVNSTHRLARLLQLYST----------------------------------DPERIREFSSSLSQKQRSALVADCKAGRVE------TVVCSDAMARGMDIEDVANVVNYDVPSFIKTYIHRVGRTARAGRHGRCVTLVKMGQM-KGMM-RMLKKADN-N---------KLKPYPLQ-QEHMK-TLVPRYTD-------------ALQQLKDTL----EAE----KAGKL--------------QA-TSILRKNKITTSERNND-DVAEEG-NLDEEVVTA-------------DKKRAFSVLNAQLERN------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[176], "---------------LNEYFVPC---------TLNSKPLIILDFIL-----R-------------L---KFSPVLCFTNSREASHRLYLLVRLFGG------------------------------------VQVAEFSSRLSPNERKKTLKEFEQEKIQ------LLISTDATARGIDVSGVKCVINYDAPQFIRTYVHRVGRTARAGKAGLAFTFLLGVQE-KRFL-QMLKDAGS-P---------GIQKQIIK-PEALK-ALVPRYEQ-------------TLLELETAI----QEE----RATKH--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[177], "--------------------CIT---------EGRLKPLTLFSLIK-----Q-------------Y---QWTKFLCFTNSVESSGRLAFVLKQLCN----------------------------------KDLVIEELSASINVKERSNILGSFARGRIN------GVVCSDALARGIDIPDVDIVISYDPPRHIKTYIHRIGRTARAGRPGTAITLLTQKEQ-KEFD-KTLAEVGK-V---------ITDELIAS-TSMEE-TYANEYSS-------------ALNALRNKV----THD----KRFKL--------------LK-KERAKEKALLHKDTSK-------------------------------------MSLMEKLQLQASTQVHEKTEEQPVLSSKKNPSKKFKPKKEKKQ---------------------------------------------------------------")
        self.assertEqual(alignment[178], "-------------DELIENYVVC---------NAEEKPLILFHLLV-----E-------------K---KWDKVLCFTNSAQSVHRLAVLLNEWGK---------------------------------EQCLKVAELSSALDRSSREKVLEKFKQSEVN------VIISTDALARGIDIPDCNYVVSYDPPRNIKTYVHRVGRTGRAGRIGQAVTILNHNQL-NMFK-EQIQSSGK-S---------EINQLEVS-EESYS-HLFQSYES-------------AIQETKQII----HTE----INNKV--------------KK-SIELKRGMKKKTRKRKHNE--------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[179], "------------PEELSQSYVPC---------DLNSKPLLLLHFML-----T-------------K---KFTRVLCFTNSREASHRLFLLVQAFGG------------------------------------ITVAEFSSRLPPNERKRTLKEFEQGKIQ------LLISTDATARGIDIKGVNCVINYDTPQFIRTYIHRVGRTARAGKAGLAFSMVLRIQE-RRFL-RMLKDAGI-P---------DIKQHLVK-GKLLK-PLVQQYEE-------------ALSKLERTV----KVE----RAQKR--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[180], "---------------------IC---------TTNLKPLCLIVLLQ-----E-------------L---HGEKCLVFTSSVESSHRLSTLLGFFED----------------------------------LPFKFSEFSRLQRESTRRKTLADFKEGKID------VLIGTDIMARGIHIDGLKYVINYDMPPYVKTYIHRAGRTARAGESGSCFTLLRKHEV-KTFD-KMLKKADD-S---------SCSLRSLP-DESIE-TFRPVFSS-------------ALKKLEESL----EPE----ASKKS--------------KS-GDKIPKSSKRKRTIQ------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[181], "------------------HYVPC---------SLSTKPLAVLHLVL-----T-------------M---RFSRVLCFTNSRENSHRLFLLVQAFGG------------------------------------VSVAEFSSRHGPGQRKRTLKKFEQGKIQ------LLVSTDATARGIDVQGVELVLNYDAPQYARTYVHRVGRTARAGRAGQAFTLLLRVQE-RRFL-RMLAGAGV-L---------ELRRHEIP-GELLQ-PLVPCYEM-------------ALAQLEKTV----REE----RKEKAA-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[182], "-------------DTLSEHMIVC---------ESAQKPLMLFHLVH-----T-------------L---GVKNALVFTKSAESTVRLVKLFEFFKEFRPTE-----------------------------AKIVLRAYSSDLAPSARKDILDKFKNQEIH------ILVCSDLISRGIDISHVSHVVSYDAPVDMRKYVHRVGRTARAGRDGDAWTLVEEQEA-RYFK-SMLKEANHLN---------AVKRLRVS-ELDLA-PLISSYES-------------ALTKLKEAY----S-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[183], "-------------EALKEHMIIC---------EAPQKPLMLFHLVH-----N-------------H---SVRNALVFTKSSESASRLVRLFEFFEAAISS----------------------------GGNPIIVRSYSSDLPTNERRTILEKFKAQEVHLKVQRILLICSDLISRGIDISHVSHVVSYDAPVDIRKYVHRVGRTARAGRTGDAWTLVEEQEA-RYFK-SMLRSAGHLE---------RVQRMRIS-EKDTA-SLSSAYEI-------------SLRSLRDAY----T-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[184], "--------------KLEFFKVIC---------ESNDKALYLVALLQ-----K-------------L---TGEKCIVFTSSKKMTHRLCSLLKSFGN----------------------------------LQMRIKSYSSSQHQAVRSKTLDAFRKGEVQ------VLVSSDNLSRGTDVEAVANVIIYDVPRYIKAYLHRAGRTARAFQIGRCFTLLLKDEM-KKFK-ALQQKAEI-S---------S-KAFSLS-PESIE-SLKPAYIS-------------AFEKLKENV----ESE----AFRKR--------------KV-NFKSTKPRKAKAVKVSK----------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[185], "-------------EKLESYRVIC---------ESNLKPLYLAALLQ-----N-------------L---EGEKCIVFTSSVKSTDLLFNLLKFFGD----------------------------------LKVKIKMYTGHQPQSVRSKTLKAFREGEIQ------VLVSSDAMTRGMDVEGVKNVINYDSPKHIKRYIHRAGRTARAGQTGRCFTLLHREEV-KRFK-KLLQKADN-N---------SFPVYSVP-SSLVE-SLHPIYMS-------------ALEKLKETV----ESK----KSRKR--------------KI-HFKSSTIVGEEVKKKIAG---------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[186], "--------------TLKEHMAVC---------STVQKPVILFQLLQ-----A-------------H---NVRNALVFTKSAESTTRLVRLFEFFKASFCAA-----------------------DGNAGGMSVTMQAYSSDLSASERRAILEKFKTKEID------ILVCSDLISRGIDITHVSHVVSYDAPIDMRKYVHRVGRTARAGREGDAWTLIEDQEA-RHFK-MMMREADHLN---------KLAKLKIT-EADLQ-PLLPHYEN-------------ALRKLKELY------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[187], "-------------ATLKEQMIVC---------DSAQKPLMLFYLVY-----T-------------H---NVTNALVFTKSAESTTRLVRLFEFFQSVRQPS-----------------------EDQGEPRRVVIQSYSSDSPPSERKSLLERFKGKEIH------ILVASDLISRGIDISHVSHVVSYDVPVDMRKYVHRVGRTARAGRMGEAWTLVEEQEA-RYFK-SMLKVADHLE---------KVKRLRVS-EKDLA-PLLPSYEL-------------ALRQLKEAY----S-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[188], "--------------TLEERMIVS---------ETAYKPLMLLHLLH-----Q-------------R---GVRRALCFTKSVESATRLMHLLRLFKE-------------------------------EVGNGPTVASFSSDLSPQERQKMLTKFRDGEVD------MLISTDVIARGIDIQGIENVINYDIPLDMPKYVHRVGRTARAGLVGKAWTLVEVQEA-KYFK-TYTKNAKH-----------EVKKARPM-TKEVE-PLMEAYDI-------------SLIKLGKI-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[189], "---------------LTEYYVPC---------TLSKKPLLILHFIL-----R-------------M---KLHPILCFTNSRETAHRLYLLVQLFGG------------------------------------VQAAEFSSRLSPNERKRTLKEFDQGKIQ------LLISTDAAARGIDIPGVKCVVNYDAPQFIRMYIHRVGRTARAGKSGLAFTFLLRVQE-KRFL-QMVQEAGS-P---------GLQKQIVK-PESLK-SMEERYEG-------------TLQELAGVV----KSE----GEHR---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[190], "-------------KTLKQYIVVT---------RTDLKPLVFFKIVE-----S-------------H---RIEKALCFCKSIEGARRLTSLCRLMVS----------------------------------KLFKVECFSSDLTPSQRKKILSKFQAGEIN------MLICSDIIARGIDIIGVENVINYDSPIDIKKYVHRVGRTARANEEGRAFSLVESQEA-VFVK-NFLKTGFG-NLS----AHQSLQKIRID-WLDLQ-SLLPSYNI-------------ALKK-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[191], "-------------EGLSQYYIPC---------NLNSKPLFLLYFML-----R-------------M---KFTRVLCFTNSKQASHRLFLLIQAFGG------------------------------------VKVAEFSSWLTPSERQRTLKEFEQGKIQ------LLISTDATARGIDIKGVKCVINYDAPQFIRTYIHRVGRTAGAGKAGLAFTMLLRVQE-WKFL-KMLRDAGS-P---------ELEKQLVK-SEYLK-PLLQQYEE-------------ALSKLQKTV----KDE----RAQKRA-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[192], "----------------KEFFVEL---------AERQKPLFLAHLIK-----S-------------L---GHERILCFTNSREATKRLAVLMSHVEG------------------------------------VKAGALNAGMPLQKRVRLLSSFASGEFQ------LLVCTDAVARGIDIENVSCVVSYEAPQSVKTYVHRVGRTARAGKTGQAFTLLLRNQI-RYFK-SSLKSVGK-----------RARNFPIH-SSKLR-AYEASYKG-------------ALSQLEKEF----RTK----PKDAF--------------GI-ATEVDDESHTKQQESQTE---------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[193], "-------------------VCYT---------QFRIKPLTLFALIR-----Q-------------A---GYRKFLVFTNGIDGSHRLSFVLQRLFG----------------------------------TEMVIEEWSSSLTPATRRSVLHRFSLGKVN------GIICTDALARGFDIDDIEIVVSYDMPRHISTYIHRIGRTARAGNRGTSITLLIDEEK-KKFN-SMLKEAGK-E---------ELEAVEIQ-SSVEE-EYAGKYSA-------------ALNDLRDAL----ELE----KQIIT--------------KI-RNGMTMASLTR------------------------------------------VNLLSKLKDRIDVD----GSTNSTELIKSLKHLPKSWTNEAIAIRAEQ-------KKNLKRTAESIAGSTD------------------VA---------------")
        self.assertEqual(alignment[194], "-----------------------------------MKPVYLVALLK-----S-------------W---EGEKCIIFTSSVETTRRLCKLLNFFGD----------------------------------PKIKAKEYSGGLNQSVRSKELKAFRKGDIQ------VLVASDALTRGMDVKGVTNVINYDMPPFAKTFIHRAGRTARAGQAGRCFTLLSNHEV-RRFS-KLLKKVGS-D---------SCPIYPIP-PTSLD-SIRATYTP-------------ALEKLKELV----ESE----APKKG--------------RQ-AFRHNSRTGSSQTKLNKRRSE------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[195], "--------------SLKEFKVVC---------AGADKPVLAVALLR-----Q-------------L---ANEPTLIFTASVEATRRLFVLLHAVPS----------------------------------LRESVLEFSSLNSGPERAATLAAFRGGDAR------ILVASDGMTRGMDVPSVANVVNYDAPIYAKTYVHRAGRTARGGREGRVFTLLRTEEV-RHFK-GLLRKVDN-A---------FVKDYALP-KADVD-AARPEAQH-------------ALSVLQAYL----AA------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[196], "--------------------IEC---------DTGSKPLVLLELLS-----E-------------F---GGALSIVFTASVNSTHRLARLLQLYSS----------------------------------HPERIREFSSGLSQKQRSALVADCKAGRVE------TVVCSDAMARGMDIDDVANVVNYDVPSFIKTYIHRVGRTARAGRHGRSVTLVKMGQT-KGMM-RMLKKADS-N---------KLKPYPLQ-QEHMK-TLIPRYTA-------------ALQQLKDTL----EAE----KAGRI--------------QA-TSVLRPNKGDASEGSTKVDAAAAD-DLDEQVASA-----------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[197], "-------------------KLIC---------TSNIKPLCLIVLLQ-----E-------------L---RGEKCLVFTKSVDDSHRLSTLLGFFED----------------------------------LPFKFSEFSSLQRESTRRKTLAAFKEGKID------VLIGSDIMARGIHIDGLRYVINYEMPQYVKTYIHRAGRTARAGESGSCFTFLRKNEV-KRFD-KMLKKADG-S---------SCILRSLP-EESID-SLRPVFET-------------ALEKLKDKLKGSAEPE----ASKKSN-------------KS-GDKAPGALKR-----------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[198], "-------------EKLESYRVIC---------EPKLKPLYLVALLQ-----N-------------L---VGEKCIVFASSVESTHRLCTLLKFFGD----------------------------------LKVKIKEYSGLQHQSVRSKTLKAFREGKIQ------VLVSSDAMTRGMDVEGVRNVINYDKPAYIKTYIHRAGRTARAGQVGRCFTLLHKEEV-RHFR-KLLQKADN-D---------SFPVY----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[199], "-------------ERLESYKLIC---------ESKLKPLYLVALLQ-----S-------------L---GEEKCIVFTSSVESTHRLCTLLNHFGE----------------------------------LRIKIKEYSGLQRQSVRSKTLKAFREGKIQ------VLVSSDAMTRGMDVEGVNNVVNYDKPAYIKTYIHRAGRTARAGQLGRCFTLLHKDEV-KRFK-KLLQKADN-D---------SCPIHSIP-SSLIE-SLRPVYKS-------------ALDKLKETV----ESE----AHRKH--------------TI-GFKLSRMGKGR----------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[200], "---------------LKEYMAIV---------PTEKKPLLVIYLLH-----C-------------L---GIKSGLCFTKSIESTERLKTLIDAYEALQ-----------------------------PEEKRVRVKEYSSELRPAERRTVLRQFKEGEID------MLICSDLIGRGIDIDSVQYVISYDVPVYMDKYIHRVGRTARAGRHGVAYTLVEKQQA-RYFK-DMLRQAGHLN---------QVELLNIE-KEKLE-ELTPDYEN-------------AISSVTD--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[201], "----------------THHYVPC---------SLSSKPLVVLHLVL-----E-------------M---GFSKVLCFTNSRENSHRLFLLVQAFGG------------------------------------VDVAEFSSRYGPGQRRRILKQFEQGKIQ------LLISTDATARGIDVQGVELVVNYDAPQYLRTYVHRAGRTARAGKMGQAFTLLLKVQE-RRFL-QMLTEAGA-P---------ELRRHELS-SKLLQ-PLVPQYEE-------------ALSQLEESI----KEE----HKQRAA-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[202], "----------------THHYVPC---------SLSSKPLVILHLVL-----E-------------M---GFSRVLCFTNSRENSHRLFLLVQAFGG------------------------------------VDVAEFSSRYGPGQRRAILKQFEQGKIQ------LLISTDATARGIDVQGVELVVNYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQE-RRFL-RMLAEAGA-P---------ALQRHELP-GKLLR-PLVSRYEE-------------ALSQLEESV----K-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[203], "------------------YKLIC---------ERKVKPLYLVALLK-----S-------------L---GEEKCIVFTRSVESTHHLCKLLNCFGD----------------------------------LKIGIKEFSGLKHQRVRSKTVGEFRRGEFQ------VLVSSDAMTRGMDVEGVRNVINYDMPKYTKTYVHRAGRTARAGQTGRCFTLMSKDEV----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[204], "--------------TLLEHMIVC---------ESSQKPLVLFHLVH-----T-------------H---GVKNALVFTKSAESTARLVKLFEFFELSRISS------------------------TEQQGSAIVLSAYSSDLAPSARKEILDKFKNQETH------ILVCSDLISRGIDISHVSHVVSYDAPVDMRKYVHRVGRTARAGRTGDAWTLIEEQEA-RHFK-NMLKEANHLN---------AVKRMRVS-DADLA-PLKRSYED-------------ALTKLKEAY----SR------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[205], "--------------GLSQCYVPC---------DLNSKPLLLLHFML-----T-------------M---KFTRVLCFTNSREASHRLFLLVRAFGG------------------------------------VTVAEFSSRLPPNERQRTMKEFEQGKIQ------LLISTDATARGIDVKGVNYVINYDAPQFIRTYIHRVGRTARAGEVGVAFSLVLRIQE-RRFL-RMLRDAGI-Q---------DIKKQPVK-GNSLK-PLVQQYEE-------------ALCKLEKTV----KVI----ETGKK--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[206], "---------------LESYGLIC---------TTEKKLLNLAALLE-----D-------------L---GCEKSIVFTSSINLTHRLCTSLNLLGC----------------------------------LPCKINEYSRLQNQSVRSKTLKDFREGRID------VLVSSDGMTRGMDVEGIKNVINYDLPMYVKKYIHRAGRTARAEQAGRCFTLLRKNET-KSFK-NMLEKVGI-D---------CFSSYTFP-AASLQ-RLEPLCIT-------------AMEKLIELE----EIK----SSKEI--------------EV-RPKFNKVKQS-----------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[207], "------------PHTLTEHMTVC---------DSAQKPLVFIYLVR-----V-------------H---NIRNALVFTKSAESTARLVHLFGFFEQERSKG-----------------------TANGADAQLTVRAYSSDLAASERKSILEKFKSQEIH------ILVCSDLISRGIDISHVSHVVSYDAPVDMRKYVHRVGRTARAGRTGDAWTLVEEQEA-RSFK-NMMKSADHLD---------RLQKVKVR-EKELS-GLMGYYRV-------------RGIVMNDDQ----IFL----TK-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[208], "----------------TEFYVPC---------TMNKKPLLILHFVL-----Y-------------L---KLRPILCFTNSRETAHRLYCLVKLFGG------------------------------------VQAAEFSSRLSPGERKKTLKDFEKGKIQ------LLISTDAAARGIDIKDVKCVVNYDAPQFIRTYIHRIGRTARAGKPGLAFTFLLRIQE-NNFL-RMVMDAGS-P---------GIQRQLVK-PECLK-GMEKQYEV-------------VLQELADVI----KDE----KSRH---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[209], "-------------------------------------PVYLVGLLK-----S-------------L---EGEKCIVFTSSVETTRRLCKLLNFFGD----------------------------------SMIKAKEYSGGLNQAVRSKELKAFRKGDIQ------VLISSDALARGMDVELVTNVINYDMPQYPKTFIHRAGRTARAGRAGRCFTLLGDHEV-RRFS-NLLKKVGN-A---------SCPIYPIP-PDLFG-PVRAIYEP-------------ALAKLKESV----EPI----APKRG--------------RQVGFKHNSKTTNSQTKRNKATS-------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[210], "-------------------------------------PVYLVGLLK-----S-------------L---EGEKCIVFTSSVETTRRLCKLLNFFGD----------------------------------SMIKAKEYSGGLNQAVRSKELKAFRKGDIQ------VLISSDALARGMDVELVTNVINYDMPQYPKTFIHRAGRTARAGRAGRCFTLLGDHEV-RRFS-NLLKKVGN-A---------SCPIYPIP-PDLFG-PVRAIYEP-------------ALAKLKESV----EPI----APKRG--------------RQVGFKHNSKTTNSQTKRNKATS-------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[211], "-------------ERLESYKLIC---------ESKLKPLYLVALLQ-----S-------------L---GEEKCIVFTSSVESTHRLCTLLNHFGE----------------------------------LRIKIKEYSGLQRQSVRSKTLKAFREGKIQ------VLVSSDAMTRGMDVEGVNNVVNYDKPAYIKTYIHRAGRTARAGQLGRCFTLLHKDEV--------------------------C-FH-------LD-SFRFL-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[212], "----------------------C---------VLGKKPLILLHFIL-----R-------------M---KFTRVLCFTNTRETSHRLFLLVRAFGG------------------------------------VEVAEFSSRLRSSERQKTLKEFEQGKLQ------ILITTDATARGIDIKGVKCVINYDAPQFIRTYIHRVGRTARAGKAGLAFSMLLRVQE-KNFL-QMLKDAGS-S---------ELRKQFVK-EEYLR-PLIPRYEE-------------TLKEVQRLV----KDE----REQKR--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[213], "---------------LTEQAVEC---------ATEYKPLALYQLLT-----R-------------NI--KIFKTLVFTNSGETVHRLAILLRSLLS---------------------------------EKNVIIGELSAQLTSKEREDVLTKFSAGEIQ------ILISSDALARGIDILDIQVVISYDLPKYIKAYIHRAGRTGRAGKSGTAISILTSKQV-GTFK-HMLNNAHK-AIP-------DIEKLELI-----DIVNEINYLS-------------HVEKLKHDL----EEE----KQYNL--------------SR-VKATKRIQPV-----------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[214], "-----------TPANLEEGMVEC---------EAAEKPLVLLELLH-----S-------------F---GDQLTIIFTSSINATHRLCRLLQLYAT----------------------------------NPESVREYSSTLNQKQRSQLVQACHRGTIK------IVVCSDAMARGMDIAHVENVVNYDVPPYIKTYIHRVGRTARAGRAGRAVTLVKKGQT-KGLA-RMLAKAEK-A---------PLPVYPVD-MEHMQ-TLVPRYTD-------------CLASLKETL----AKE----KAGHL--------------GL-TTSVSLKRKLQGDANNDDDV-------DQAMADED----------DDADDEAKSDVDAGTQDDDEHDVA------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[215], "---------------LKEYMTIC---------STDKKPLTVIYLLH-----Q-------------L---KIKSGLCFTKSVESTRRLKMLLDTYGK-------------------------------QTGAGLNIVEYSSDLKASQRKSLLAQFKEGHID------LMICSDLIGRGIDLDCVEVVISYDVPVFMDKYIHRVGRTARAGREGRAFTLVERQEA-RHFK-EMLRSAGHYQ---------QLETFAVD-KEQIK-TFEDGYQA-------------ALAALSQ------D-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[216], "--------------GLSQCYVPC---------DLNSKPLLLLHFML-----T-------------M---KFTRVLCFTNSREVSHRLFLLVQAFGG------------------------------------VAVAEFSSRLPPNERQRTIKEFEQGKIQ------LLISTDATARGIDVKGVNYVINYDAPQFIRTYIHRVGRTARAGKVGIAFSLVLRIQE-RRFL-RMLKDADI-Q---------DIKKHPVK-GNSLK-PLVQQYEE-------------ALCKLEKTV----KVT----ETGK---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[217], "---------------LTEYYVPC---------TLSKKPLLILHFIL-----R-------------M---KHSPVLCFTNSKETAHRLHLLVQFYGG------------------------------------IRVAEFSSRLSPTERKKTLKEFEQGKIQ------LLISTDAAARGIDINGVKCVVNYDAPQYIRTYIHRIGRTARAGKPGLAFTFLLGVQE-KNFL-QMVKEAGT-P---------GIQKQIVK-PENLK-GMEAQFQL-------------TLQELANAI----KVP----ADN----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[218], "-----------TPATLEETYTVC---------DSQAKPLVLLSLLR-----E-------------MVGRQADLSVVFTSSVDSTHRLFRLLQLFGG------------------------------------FEVAEFSSSLGQRQRSSIIRRARAGAVR------VIVCSDGMARGMDLDGVGLVVNYDVPSQAKTYVHRVGRTARAGSRGTAVTITKKGQV-KQFL-NMRSGIDK-K-------RVRLDSSPAD-QSRLL-PLAGRYQL-------------CLKDLKEVM----EAE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[219], "-------------KNLDEYWIEC---------DTGSKPLILLELLS-----E-------------F---AGSLSIIFTASVSSTHRLARLLQLYST----------------------------------HPERIREFSSSLSQKQRSTLVADCKAGRVD------TVVCSDAMARGMDIEDIANVINYDVPSFVKTYIHRVGRTARAGRHGRCVTLVKMGQM-KGMM-RMLKKADT-N---------KLKPYPLQ-QDHVK-SLVPRYTE-------------ALQRLKETL----DAE----KAGEL--------------QV-TSMLRKRKSSVCRDNKDKDIIAQDASLKQKITAA-------------DKKRAFSVLNDQLERNLGRV--------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[220], "--------------KLESYKLIC---------DSNVRPLYLVALLQ-----E-------------L---GEEKCIVFTSSTESTHRLCTLLNLFGD----------------------------------LSIKIKEYSGLQHQSVRSKTLKAFREGKVQ------VLVSSDAMTRGMDVEGVRNVINYDMPPYIKTYIHRAGRTARAGQAGRCFTLLHKHEV-KRFK-KMLGKADN-A---------SVPHYSVP-SSSIE-SLHAAYSS-------------ALGKLKETV----ESE----ASRKR--------------KI-GSKFSRLSKSKKTDHQK----------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[221], "----------------THHYVPC---------SLSSKPLVILHLVL-----E-------------M---GFSRVLCFTNSRENSHRLFLLVQAFGG------------------------------------VDVAEFSSRYGPGQRRAILKQFEQGKIQ------LLISTDATARGIDVQGVELVVNYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQE-RRFL-RMLAEAGA-P---------ALQRHELP-GKLLR-PLVSRYEE-------------ALSQLEESV----KAR----GM-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[222], "------------------HYVPC---------SLNAKPLAIIHLVL-----G-------------M---SISRTLCFTNSRENSHRLFLLVQAFGG------------------------------------VSVAEFSACYGPGHRRKILKQFEQGKIQ------LLISTDATARGIDVPGVELVINYDAPQYLRTYVHRVGRTARAGRMGRAFTLLLKVQE-RRFL-RMLAEAGA-P---------ELVRHEVP-SKLLQ-PLVPRYEE-------------ALSQLERVV----KEE----LKQKAA-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[223], "-------------------KLIC---------TSNIKPLCLIVLLQ-----E-------------L---RGEKCLVFTKSVDDSHRLSTLLGFFED----------------------------------LPFKFSEFSSLQRESTRRKTLAAFKEGKID------VLIGSDIMARGIHIDGLRYVINYEMPQYVKTYIHRAGRTARAGESGSCFTFLRKNEV-KRFD-KMLKKADG-S---------SCILRSLP-EESID-SLRPVFET-------------ALEKLKDKLKGSTEPE----ASKKSN-------------KS-GDKVPGALKRREA--------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[224], "------------------FYVPC---------TLSRKPLLILHFVL-----R-------------L---KLSPILCFTNSREAAHRLYLLVQLFGG------------------------------------VQAAEFSSRLSPAERKQTLKDFQQGKIQ------LLISTDATARGIDVSGVKCVVNYDAPQYVRTYIHRVGRTARAGKSGLAFTFLLGVQE-KKFL-KMVMDAGS-P---------GIQKQIVK-SESLK-GMEGRYER-------------ALQELAQAI----KDT--------------------------------------------------------------------------------------------------------------------------------------------------------------------------VLLK-----------")
        self.assertEqual(alignment[225], "-------------------------------------PVYLVGLLK-----A-------------L---EGEKCIVFTSSVETTRRLCKLLNFFGD----------------------------------SMIKAKEYSGGLNQAVRSKEIKAFRKGDIK------VLISSDALARGMDVELVTNVINYDMPQYPKTFIHRAGRTARAGRDGRCFTLLGDHEV-RRFS-SLLKKVGN-A---------SCPIYPIP-PDLFA-PVRAIYEP-------------ALAKLKESV----EPI----APKRG--------------RQVGFKHNSRTTNSQTKRNKATSEQ-----------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[226], "--------------KLQSYKLVC---------KSNLKPLSLIVLLQ-----E-------------L---RGEKCLVFTSSVESSHRLSTLLEFFED----------------------------------LPFKFSEYSRLQRESTRRKTLDAFKEGKID------VLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEV-KAFD-KMLKKADN-S---------SCSLHSLP-EESVE-TLRPVFSS-------------ALKKLEESL----ESE----ATKKS--------------KS-GDKAPNASKRKRTIN------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[227], "------------------QICIT---------EMRLKPLTLYALVE-----K-------------Y---KWKRFLCFTNSTDQASRLAFVMATLFEN---------------------------------SETKVAELSGNLSALVRKQNLKSFANGKIN------GLICSDALARGIDVADIDVVLSYEAPRHIKTHIHRVGRTARAGRKGTAVTLLTEQDQ-AAFK-KMLNDVGK-G---------LGEEITVS-PDIEV-DHAEAYKR-------------ALDNLRARQ----EKQ----KTTKA--------------AQ-KRRVANKALVHKKHEEAKD------------------------------SNRPLTLMEKLQLKAGAV-----DTSVVDKVKN-----------------------------------------------------------------------------")
        self.assertEqual(alignment[228], "-----------------EQYCVT---------EMRLKPLTLYAMVL-----L-------------N---NWKRFLCFTNSADTANRLACVLVHLFKD---------------------------------STIRVKELSAKMSATKRGHRLSEFARGNIH------GLVCSDALARGIDVPNVDVVVSYEAPRHIKTYIHRVGRTARAGQKGTAITLLTDKDQ-ANFK-KMLYEVGK-S---------MGEELIIS-PDIEV-EHAAIYKS-------------ALELLRLRQ----EKK----KSAIK--------------VQ-KMRISRKADLHKKPEAE------------------------------------MTLMEKLQFKVGVQ-----ESKVKKTTKHAVVKTQKPTKRQ-----------------------------------------------------------------")
        self.assertEqual(alignment[229], "--------------GLSQCYVPC---------DLNSKPLLLLHFML-----T-------------M---EFTRVLCFTNSREASHRLFLLVQAFGG------------------------------------VTVAEFSSRLPPNERQRTMKEFEQGKIQ------LLISTDATARGIDIKGVNYVINYDAPQFIRTYIHRVGRTARAGEVGVAFSLVLRIQE-RRFL-RMLKDAGI-Q---------DIKKQPVK-GKSLK-PLVQRYEE-------------ALHKLERTV----KVM----EMGKK--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[230], "-------------------YVPC---------DLNSKPLLLLHFML-----T-------------K---KFTRVLCFTNSREASHRLFLLVQAFGG------------------------------------ITVAEFSSRLPPNERQRTMKEFEQGKIQ------LLISTDATARGIDIKGVNCVINYDTPQFIRTYIHRVGRTARAGKAGLAFSMVLRIQE-RRFL-RMLKDAGI-P---------DIKQHLVK-GKLLK-PLVQQYEE-------------ALSKLERTV----KVE----RAQKR--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[231], "---------------LTHHYVPC---------SLSSKPLAAMHLVL-----G-------------T---KLSRALCFTNSRENSHRLFLLVQAFGG------------------------------------VSVAEFSSRYGPGHRRKVLKQFEQGKIQ------LLISTDATARGIDVLGVELVINYDAPQYLRTYVHRVGRTARAGKTGRAFTLLLKVQE-RRFL-RMLAEGGA-P---------ELARHEIP-SKFLQ-PLVPQYEE-------------ALSQLERAV----KVRCWPVQ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[232], "------------------------------------------------------------------------------TTIRRSHRLSTLLEFFED----------------------------------LPFKFSEYSRLQRESTRRKTLDAFKEGKID------VLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEV-KAFD-KMLKKADN-S---------SCSLHSLP-EESVE-TLRPVFSS-------------ALKKLEESL----ESE----ATKKS--------------KS-GDKAPNASKRKRTINTCAASS------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[233], "-------------DELIENYVVC---------NAEEKPLILFHLLV-----E-------------K---KWDKVLCFTNSAQSVHRLAVLLNEWGK---------------------------------DQCLKVAELSSALDRASREKVLEKFKQSEVN------VIISTDALARGIDIPDCNYVVSYDPPRNIKTYVHRVGRTGRAGRIGRAVTILNHNQL-NMFK-EQIQSSGK-S---------EINQLEVS-EESYS-HLLQSYES-------------AIQETKQII----HTE----INNKV--------------KK-SIELKRGMKKKTRKRKHNE--------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[234], "--------------GLSQCYVPC---------DLNSKPLLLLHFML-----T-------------M---KFTRVLCFTNSREASHRLFLLVQAFGG------------------------------------VTVAEFSSRLSPNERQRTMKEFEQGKIQ------LLISTDATARGIDIKGVNYVINYDAPQFIRTYIHRVGRTARAGEAGVAFSLVLRIQE-RRFL-RMLKDAGI-Q---------DVKKQPVK-GNSLK-PLVQQYEE-------------ALCKLEKTV----KVI----ETGKE--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[235], "----------------------T---------ELRLKPLTLYTMVQ-----T-------------Y---GWKRFLCFTNSADTADRLAFVLKHLFQG---------------------------------SPITVEELSANMKVGVRARRLADFAKGSIH------GLVCSDALARGIDVPNVDIVLSYEAPRHIKTYIHRVGRTARAGQKGTAITLLTEKDQ-APFK-KMLYEVGK-S---------MGEELTVS-ADVEV-EHADIYKT-------------ALEELRRRQ----EKR----KSEMK--------------VE-KMRITRKAALHKQLETGDK---------------------------------PLTLMEKLQVKTAIQLL--PEEN------------------------------------------------------------------------------------")
        self.assertEqual(alignment[236], "-------------EELSQCYVPC---------DLNSKPLLLLHFML-----T-------------M---KFTRVLCFTNSREASHRLFLLVQAFGG------------------------------------VTVAEFSSRLPPKERQRTMKEFEQGKIQ------LLISTDATARGIDIQGVNYVINYDAPQFIRTYIHRVGRTARAGKVGVAFSFVLRIQE-RSFL-RMLKDAGI-Q---------DIKKQPVK-GNSLK-PLVQQYEE-------------ALCKLEKTV----KVT----GMEKK--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[237], "----------------------------------RLKPLTLYAMVL-----L-------------N---GWKRFLCFTNSADTANRLAFVLQQLFGG---------------------------------SPTRVEELSAKMSAAMRAQRLTEFARGSIH------GLICSDALARGIDVPNVDIVVSYEAPRHIKTYIHRVGRTARAGHKGTAITLLTDKDQ-AQFK-KMLYEVGK-S---------MGEEITVS-PDIEA-EHANIYKS-------------ALDKLRLRQ----ENQ----KSEKK--------------LQ-KLRLTRKSMVHKNPDK------------------------------------PLTLMEKLQLKAGAQAL--PDAKPQREHKEAKPKPEKRAKHK-----------------------------------------------------------------")
        self.assertEqual(alignment[238], "--------------GLSQCYVPC---------NLNSKPLLLLHFML-----T-------------M---KFTRVLCFTNSREASHRLFLLIQAFGG------------------------------------ITVAEFSSRLPPSERQRTIKEFEQGKIQ------LLISTDATARGIDIKGVNCVINYDAPQFIRTYIHRVGRTARAGNVGLAFSMVLRIQE-RRFL-RMLKDAGI-P---------DIQKHLVK-GKLLT-PLVQQYEE-------------ALSKLEKTV----K-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[239], "-------------AELTEHMIIS---------PSSHKPLYLFHLLH-----T-------------L---SISSALCFTKSVEAATRLAKLVEFFEEARRAE----------------------TGEGSEDKRVVVKAYSSELAPNERKKVLKEFKQGEIQ------MLICSDLISRGIDIANVSHVISYDIPTDMRKYVHRVGRTARAGHTGEAWSLVEDQEV-APFK-AIMSSAQHWQ---------KIDRVRVK-D-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[240], "--------------ELTEKFCLT---------QNNLKPLTLFALIK-----E-------------L---KWQKFLCFTNSVEASERLNFVLQQLFSD---------------------------------EKIRIAELSGSRGKNRCSELLSKFSRGQIN------GLVCSDALARGIDIPGVDIVISYDPPRHIKTYIHRVGRTARAGRPGTAITLLSQHEL-DKFH-KLLNEVGK-V---------VTAEQETF-PDIEE-ANAKKYQG-------------ILQRLREKL----VHD----KRKKI--------------LE-MNRAREVKELESQDVTK------------------------------------L---------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[241], "--------------GLSQCYVPC---------DLNSKPLLLLHFML-----T-------------M---KFTRVLCFTNSREASHRLFLLVQAFGG------------------------------------VTVAEFSSRLPPNERQRTMKEFEQEKIQ------LLISTDATARGIDIKGVNYVINYDAPQFIRTYIHRVGRTARAGKVGVAFSLVLRIQE-RRFL-RMLKDAGI-Q---------DIKKHPVK-GNSLK-PLVQQYEE-------------ALCKLEKTV----KVI----ETGKK--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[242], "---------YKLPEELKSFKVLC---------QSKLKPLYLVSLLQ-----S-------------L---QGEKSIVFTSSVESTHRLCTLLKFFDN----------------------------------LEIEFKEYSRLQRQSVRSKTLRAFRSGQVQ------VLISSDAMTRGMDVEGVRNVINYDMPAYIKTFIHRAGRTARAGLSGCCFTLMHKDE---RY-----------N---------AIP------------------------------------------------------FN----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[243], "--------------KLESYKLIC---------KSNVKPLSLIVLLQ-----E-------------L---QGNKCLVFTSSVESSHRLSTLLGFFED----------------------------------LPFKFSEYSRLQRESTRRKTLEAFKEGKID------VLIGTDRMARGMHIDGLKYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEV-KTFD-KMLKKADN-S---------SCTLRSLP-EESVE-TLQPVFSS-------------ALKKLEECL----QSE----ATKKS--------------NS-GDKMPSSSKRKRINQK-----------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[244], "-------------------VCFT---------QFRIKPLTLFALIR-----E-------------N---GYKKFLVFTNGIDGSHRLSFVLQRMLG----------------------------------TSLIVEEWSSSLSPVTRRSVLNRFSMGKVN------GIICTDALARGIDIDDIEVVISYDMPRHINTYIHRIGRTGRAGNRGTSITMLIDEEK-NKFN-TLLKEAGK-S---------ELESIEIK-LSTEE-EFAGQYSA-------------ALNDLRDAL----ELE----KQTIN--------------KI-RSGMTIASMTK------------------------------------------VNLLSQLKDRVKAN-----SQNSTEIIKTLKYIPLSWTNEAIEKNAKN-------QKVPKQKKRKIIADTQETNGKEADP--------SVAKL-------------")
        self.assertEqual(alignment[245], "-------------ATLTEHMLVC---------ESAAKPLMLFHMVH-----A-------------R---GVTNALVFTKSAESATRLVRLFEFFEGALRV-------------------------ADASKKPVVARAYSSDLAPAERKAILEQFRNQEIN------ILICSDLVSRGIDISHVSHVVSYDVPVDFRKYVHRVGRTARAGREGDAWTLVEEQEA-RYFK-GMLKENDHLE---------KVKRLRVS-DADVA-SLKPAYET-------------ALTQLKEVN----WRS----PLTPKE-------------VPPAKE------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[246], "---------------LKEFVCMT---------QQHNKPLTLYSIIR-----E-------------K---GYRRFLVFTNGINNSHRLSFVLQRLFG----------------------------------TEMVIEEWSSSLSPATRKSVLSRFSMGTVN------GIICTDALARGIDIESIEVVISYDMPNHVEKYIHRIGRTARAGCRGTAITLLAENER-KKFN-TLLKEANK-T---------EPDTMEMD-PSVEE-EHAAKYAI-------------ALKDLREAL----ALE----TDVIN--------------KI-RNGMSISYMTR------------------------------------------VNLLTKLKDQVDIT-------YSTEIIKSLKYLPKSWTNEAIEMKAME-------RKKRKQENPIDDIDVDSKRAKTNEETMVNGMAKTTGKT---HKLLNGT---")
        self.assertEqual(alignment[247], "-------------------------------------------------------------------------------------RLYLLVKLFGG------------------------------------VEVAEFSSKLSPGERQKTLKDFEKGKIP------LLISTDAAARGIDINGVKCVINYDAPQYIRTYIHRQGRTARAGKAGLAFTFLLKVQE-KRFL-KMVSDAGS-P---------GIQKQHVH-PEALK-SMESRYEQ-------------VLAELGTIV----KEE----NEKKRF-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[248], "--------------KLESYKLIC---------TSNIKPLCLIVLLQ-----E-------------L---RGEKCLVFTKSVDDSHRLSTLLGFFED----------------------------------LPFKFSEFSSLQRESTRRKTLAAFKEGEID------VLIGSDIMARGIHINGLRYVINYEMPQYVKTYIHRAGRTARAGESGSCFTFLRKNEV-KRFD-KLLKKADG-S---------SCILRSLP-EESIE-SLRPVFET-------------ALEKLKDKLKGSAEPE----ASKKSN-------------NS-GDKAPGALK------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[249], "----------------------------------SYKPLYLFHLLH-----T-------------L---AISSALCFTKSVEAATRLAKLVEFFEEARAAA-----------------------ADGSETKRVVVKAYSSELAAGERHKVLREFKKGEVQ------MLICSDLIARGIDIPNVSHVISYDIPVDMRKYVHRVGRTARAGNKGDAWSLVEEQEV-APFR-SIMSKAQHYQ---------KIERVKVK-DKLVE-PFVPAYQV-------------ALERLKQYF----ATG----RTREQS-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[250], "----------------------------------SYKPLYLFHLLH-----T-------------L---AISSALCFTKSVEAATRLAKLVEFFEEARAAA-----------------------ADGSETKRVVVKAYSSELAAGERHKVLREFKKGEVQ------MLICSDLIARGIDIPNVSHVISYDIPVDMRKYVHRVGRTARAGNKGDAWSLVEEQEV-APFR-SIMSKAQHYQ---------KIERVKVK-DKLVE-PFVPAYQV-------------ALERLKQYF----ATG----RTREQS-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[251], "------------------FYVPC---------TLSRKPLLILHFVL-----R-------------L---KLSPILCFTNSREAAHRLYLLVQLFGG------------------------------------VQAAEFSSRLSPAERKQTLKDFQQGKIQ------LLISTDATARGIDVSGVKCVVNYDAPQYVRTYIHRVGRTARAGKSGLAFTFLLGVQE-KKFL-KMVMDAGS-P---------GIQKQIVK-SESLK-GMEGRYER-------------ALQELAQAI----KVK----MKKRNR-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[252], "---------------LTEFYVPC---------TMNKKPLLILHFIL-----Y-------------L---KLRPILCFTNSRETAHRLYRLVQLFGG------------------------------------VQAAEFSSRLSPGERKNTLKDFEQGKIQ------LLISTDAAARGIDINAVKCVVNYDAPQYIRTYIHRIGRTARAGKPGLAFTFLLGVQE-NNFL-RMVMEAGS-P---------GVQKQLVK-PESLK-GMEERYEV-------------VLQELADVI----KDE----KSRR---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[253], "--------------LLKEKFIDV---------KKAEKPLILLHFLL-----H-------------K---KLQRVLCFTNSVESTHRLYLLAKQWKD------------------------------------VKVAEISSNIHSLKRERIIRKFARGDLQ------LIISSDVMTRGMDIENVQYVISYDAPQYIETYIHRVGRTARANKPGTAITLLEGKE--------------------------NLRR-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[254], "-----------------ECYCIT---------ENRIKPLSLFALIN-----E-------------N---EWTKFLCFTNSAESSSRLSFVLKSLFK----------------------------------DELVIRELSASITPKERANVLSQFARGRVH------GLVCSDALARGIDIPDVDVVISYDLPRHVKTYIHRIGRTARAGSPGTAITMLTQKEL-QQFN-HILGEVGK-T---------LTKEISVK-TNYEA-EYAKQYTL-------------ALQDLRKKI----EQD----KRLQL--------------MR-KERVKDNAKLAAKDPSK------------------------------------MSVMEKLQLQASTQVGDMEQGRKENQIQENNVKNKLVKRKKFNAS------------AGKTKE-------------------------------------------")
        self.assertEqual(alignment[255], "---------------LTEYYVPC---------TMNKKPLLILHFIL-----Y-------------L---KLCPILCFTNSRETAHRLYHLVQLFGG------------------------------------VQAAEFSSRLSPGERKNTLKDFEQGKIH------LLISTDATARGIDVNGVKCVVNYDAPQYIRTYIHRVGRTARAGKPGLAFTFLLRVQE-KNFL-RMVMEAGS-P---------GIQKQMIK-PESLK-GMEVRYEE-------------ILQKLADVI----KDE----KARH---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[256], "---------------------------------PRLKPLVILHLLN-----V-------------M---KWRKVLIFTNSLENTKRLTLLIKMFSE--------------------------------GTNSLIVHEVSSNVHQRKRQASLDSFEKGTVD------VIVASDSVARGIDLPNVEYVVLYDAPLHTKTYIHRVGRTARAGKSGTALTLLKADEK-KGYT-KIMKELNK-Q---------PPPKFVVA-PEELV-ALEGPYKV-------------ALQKLEKEM----NH------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[257], "----------------TEHYFKC---------PPMLKPLAVYCLLK-----K-------------F---KYRTTLCFTNSRAATHRLCELLKQFGD------------------------------------LRVAECSSEISKAPRDKLLKDFSSGKID------LLVCTDAVSRGMDLGVVDCVISYDSPRYVKNYIHRAGRAARAGRPGTAITILVDSEI-HGFH-KLLGMAEK-K---------NVTPLDMQ-TEEFE-VYEEQFRK-------------ALDGLKNTV----KEE----IQSKI--------------VR-NHQVRQKKGFKPKFKKGKV------------------------------------VSTKLAKRRGN---------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[258], "-----------VPEQLVEKMVIV---------KEELKPLVIVHLML-----K-------------L---KYKRILCFTKSIEATHRLHLLLQSIGG------------------------------------FTVAEFSSNLTETQRKGIIRDFKNGSID------ALISSDAMARGMDIDNVNMVVNYDSPANSKTYVHRVGRTARAGNRGEALTILTKKKV-YPFK-KMSNDLSG-----------GVLKMKIK-DEELL-IYEHQYEK-------------ALSSLQEKI----SSE----KRVNL--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[259], "---------------LTEYMTVT---------SAERKPLMLLYIMH-----T-------------F---NIQSCLCFTRSTESTLQLKTLVEAYESRQSR----------------------------HDTKLVVADYSSDLPPSERKSLLKRFKNGDIH------LLVCSDLIGRGIDLNNVDVVINYDVPWFMDKYIHRVGRTARAGREGQAYSLVEKQEA-RPFK-DLLRNAGHYQ---------QIKQLRVD-NTKLE-PMQADYDA-------------ALSSV----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[260], "---------------LKEYVCLT---------ELRSKPLMLYALIR-----E-------------K---GYRKFLVFTNGINTSHRLSFVLQRLFG----------------------------------TDMVIEEWSSSLSPATRKSVLHSFSIGKVN------GVICTDALARGMDIEGIEVVISYDMPNHIDKYIHRIGRTARAGVRGTAITMLVEEER-KKFN-TLLKEAQK-K---------ELEMIELN-SSVEE-EMAVKYAS-------------VLNDLREAL----ELE----SEVMK--------------KI-RNGVTIGNMTR------------------------------------------VNLLTKLKDQLNIT-------YSTEIIRTLKI--------------------------------------------------------------------------")
        self.assertEqual(alignment[261], "-------------ATLTEHMFVC---------SSAEKPLILFHLVH-----T-------------H---DVVNALVFTKSAESTARLVKLFEFFEAALRM--------------------------ERGGAPVVARAYSSDLSPNERKLILEQFKNQDIH------ILVCSDLISRGIDINHVTHVVSYDAPVDMRKYVHRVGRTARAGRSGDAWTLVEEQEA-RYFK-TMLKSVDRLD---------KVKRMRVA-DRDVQ-GLKTPYEK-------------ALALLKDAY------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[262], "----------------RELVCLT---------EQRTKPLTLYALIR-----E-------------N---EYRRFLVFTNSINASHRLSFVLQRLFG----------------------------------TELIIEEWSSSLSPAARRGVLSRFSMGKVN------GIICTDALARGIDIESIDVVISYDLPANVDTYIHRIGRTARAGSHGTAITLLLDDEK-RKFN-TILREANK-G---------ELESIGIK-STTEE-EYAAKYTN-------------ALNDLREAL----QLE----TEVIK--------------KI-RNGNTIGNITR------------------------------------------VNLLTKLKDQVDIT-------YSTEIIKTLKHLPKSWTNEAIESKAME-------QQQAAKKRKAQQDD----NAPEGEEVQAKALSLAEAKKPSDEKLTNGTSDS")
        self.assertEqual(alignment[263], "-----------------EYRLLC---------SAARKPLALLALLS-----E-------------A---AGQSIIVFTSSLDMTHKLYLMLRAVPE----------------------------------LPEVVVEYSSLVPARERAANLEKFRSGEAK------VLVASDAMTRGMDVDNVQTVINYDAPVYAKTYVHRAGRTARAGKSGRVITLLRDEDM-RHFK-AMIRKADN-N---------FVHELKLP-GEQVE-AFRPALAG-------------ALAQLEELL----AAE----RAADA--------------AA-AAV------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[264], "-------------------YYLT---------HDNTKPLAVWDLVA-----N-------------H---GFQDTLCFTASKEDAHRLSLVLKQMGN------------------------------------VRAEEFSAKLSITERARVLRKFASGKLD------ILVCSNVLARGLDVANVRHVICYDPPKFIKTYVHRVGRTARAGVPGTAVTFLRQGQL-QAFK-EMLSLAGK-T---------NIQPLDIGNTDGLE-ELQSKYRD-------------ALKAVEAIV----KSE----QVGPDRK------------KKYNFAAKSALADETKCQDIS---------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[265], "----------------THHYVPC---------RLSSKPLIVLHLVL-----G-------------M---NFSRALCFTNSRENSHRLFLLAQAFGG------------------------------------MSVAEFSSRYGPGQRKKILKQFEQGKIQ------LLISTDATARGIDVQGVELVINYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQE-RKFL-QMVSEAGV-P---------ELARHEIP-RELLQ-PLVARYEI-------------ALSQLEKTV----KEE----QKLKTA-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[266], "----------------THHYVPC---------RLSSKPLIVLHLVL-----G-------------M---NFSRALCFTNSREHSHRLFLLAQAFGG------------------------------------VSVAEFSSRYGPGQRKKILKQFEQGKIQ------LLISTDATARGIDVQGVELVINYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQE-RKFL-QMVSEAGV-P---------ELACHEIP-RELLQ-PLVSRYEI-------------ALSQLEKTV----KEE----QKLKTA-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[267], "-----------------EFYCIT---------EYKLKPLTLYGLIK-----K-------------N---NWRRFLCFTNTIETSHRLSFVLQTLLG----------------------------------TDLVIEELSSLLPIKIRQKVLQNFNDGKVN------AIICSDALARGIDVPNIEAVISYDLPKHLKTYIHRIGRTARAGNKGTAATIIAPDQI-KSFE-KLLETANK-T---------SVAEMKPD-HELEE-ANALKYAN-------------TLKQLQKAL----ELE----ERQLK--------------KS-KSKPTS-----------------------------------------------VSLFEKLQRQVKED-----------------------------------D--LPY---------------------------------------E-----------")
        self.assertEqual(alignment[268], "-----------------EMICLT---------QYKIKPLTLFALLK-----E-------------N---NYKRFLCFTNSIDASHRLSFVLQKMFG----------------------------------TELIVEEWSSSLDPATRKGVLNRFALGKVN------GIICTDALARGIDIDDIDVVISYDMPRHINTYIHRIGRTGRAGNRGTSITMLIDEER-KKFN-ATLAEAGK-S---------ELETIEVL-PNAEE-KYALLYSS-------------ALTDLRDAL----DLE----KQTIN--------------KI-RNGMSIASMTK------------------------------------------VNLLSKLKDRVDIE-----NTNSTETIKSLVHLPKAWTNEAIEKRATD-------SKEKKRKQK-LLGDKPEGNADE------------SAKK---QKLTHQNVR-")
        self.assertEqual(alignment[269], "--------------ELKSFKVLC---------QSKLKPLYLVSLLQ-----S-------------L---QGEKSIVFTSSVESTHRLCTLLKFFDN----------------------------------LQIEFKEYSRLQRQSVRSKTLRAFRSGQVQ------VLISSDAMTRGMDVEGVRNVINYDMPAYIKTFIHRAGRTARAGLSGCCFTLMHKDEV-KRFK-KMLQKADC-N---------SCPTYSAS-SEVIE-SLRSVYTS-------------ALEKLRENV----ESE----KFKKS--------------KI-RLKSSNVRKEKXKAVHGDNFH------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[270], "--------------NLDEYWIEC---------DTGSKPLVLLELLS-----E-------------F---AGSLSIIFTASVNSTHRLARLLQLYST----------------------------------DPERIREFSSSLSQKQRSALVADCKAGRVE------TVVCSDAMARGMDIEDVANVVNYDVPSFIKTYIHRVGRTARAGRHGRCVTLVKMGQM-KGMM-RMLKKADN-N---------KLKPYPLQ-QEHMK-TLVPRYTD-------------ALQQLKDTL----EAE----KAGKL--------------QA-TSILRKNKITTSERNND-DVAEEG-NLDEEVVTA-------------DKKRAFSVLNAQLERN------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[271], "----------------RELVCIT---------EQRTKPLTLYALIR-----E-------------N---EYRRFLVFTNSINSSHRLSFVLQRLFG----------------------------------TDLIIEEWSSSLSPAARRGVLSRFSMGKVN------GIICTDALARGIDIESIDVVISYDVPANVDTYIHRIGRTARAGSHGTAITLLLDEEK-RKFN-TLLREADK-E---------ELETIGIN-PSTEE-EFAAKYTN-------------ALNDLREAL----GLE----TEVIK--------------KI-RNGNTIGNMTR------------------------------------------VNLLTKLKDQLDIA-------YSTEIIKTLKHLPKSWTNEAIESKAKE-------HQHAGKKRK-QQDD----NVGERDEVA------------------------")
        self.assertEqual(alignment[272], "-------------------FVEL---------VERQRPMFLVHLVR-----K-------------L---GHERILCFTNSREESKRLAAVLNHFDG------------------------------------IKARALNAGMPLRKRTRLLSAFADGEYQ------LLICTDAVARGIDVKNISCVVSYKAPQSVKTYVHRIGRTARAGKSGEAYTLLNHNQI-RYFK-SSLKSVGK-----------RAKNFHIQ-PSKLR-PYEKEYKA-------------ALAELEKEY----KVK----PKDAF--------------GV-AKAAEEINGRRKRELDEKDDIMS--------------------------KKSKLETEEHISMKQKGFHL------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[273], "-------------------ITIC---------NSKLKPLYLVALLQ-----E-------------L---KGEKCIVFTSSVESTHRLSTLLKFLGE----------------------------------LPFQFSEYSRLQRQSVRSKTLKAFREGKLE------VLIATDAMTRGMDVEGIRNVINYDMPPYVKTYIHRAGRTARAGQSGRCFTLLRKHEV-KRFD-SMLKKADD-N---------SCTLHSLP-ADSIE-SLLPIYSS-------------ALEKLKEFV----ESE----ARRKS--------------SI-GFKSAKANKRKRTTHKVDNRDIYSCN-------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[274], "------------------KFCVT---------QPRLKPLTLYALIK-----E-------------N---NWKKFLCFTNSVEAAGRLAFVLKTLFDK-------------------------------DEDAIRIDELTSSRMQGGKKTLLENFRKGQIN------GLICSDALARGIDIPDVDIVISYDPPRHIKTYIHRIGRTARAGRLGTAITLVSPPEQ-DNFN-KLLSEVGK-V---------ITEEQQSS-TSIEE-LNARKYQE-------------ALEQLRVKI----AKD----KRIRI--------------LE-MNRTRELKELETKDTSS------------------------------------MTVMEKLQMQATLDMHAKVDKKQERLLASKRQLSKKFKPKKLTKKEEQPDLKVPKKNSEKNKKN-------------------------KVKKMK-----------")
        self.assertEqual(alignment[275], "-------------ATLTEHMLVC---------SSAEKPLMLFHLVH-----A-------------H---EVVNALVFTKSAESTTRLVKLFEFFEAALSAE-----------------------RGRPGTTANVARAYSSDLSPSERKAILEQFRNQEIH------ILVCSDLISRGIDISHVSHVVSYDAPVDMRKYVHRVGRTARAGRSGDAWTLVEEQEA-RYFK-TMLKSAGHLE---------KVKRMRVG-DKDVE-ELRSAYEQ-------------ALAQLKDAY----ARS------------------------------------------------------------------------------------------------------------------------------------------------------------N----------------------------")
        self.assertEqual(alignment[276], "-------------STLKEHMIVL---------DSSQKPLIFLHLVH-----T-------------Y---DIKNAIVFTKSAESTMRLVQLFDFIEAERTR--------------------------DHGYMPLVVRAYSSDLPVQERKAILEQFKSQKIN------ILVCSDLISRGIDISHVSHVISYDVPVDMRKYVHRVGRTARAGRDGEAWTLVEQQEA-RYFK-QMLKDADHLE---------RVKRIRIV-EKDIT-ALLPHYET-------------ALNNLKELY----TR------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[277], "---------------LQEYRVSV----------SAEKPILLHQLIH-----S-------------N---NLSNVLCFVKSNEGAARLHRLLEIING-------------------------------IEGKNYPCGLVSGNLSRDERKKMLNGFASGELK------LLVCSDLMARGIDVANTEHVINYDPPSSLRRYVHRIGRTARAGRNGCAWTLVQDHEG-HHFS-KLVKHLGR-TL--------PLQRLRLH-LKDLPEENVELYDN-------------ALETLRREV----YES----RKSSK--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[278], "--------------ELKEYFVRC---------ERPLKPLVLFRLIS-----K-------------E---NWKQVLVFASSTKNVHNLATLLNILGK-------------------------------STNHKIRVGEINSTMTRLLRQKLIERFTAGNID------VLVSTDSLARGIDIPGAAYVINYDVPKFIKSYIHRVGRTGRAGQDGTAVSLVAEEQM-EQFT-RLLKKGNKEK---------EVMEITIA-EDELE-VFEENYKA-------------ALQSLKEIS----EQQ----QKEIQEEKIMHRKLCSWKIKKSNLRTKKNNRIQEKKKKTRIKS------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[279], "-------------ATLTEHMLVC---------ESSEKPLMLFHLVH-----M-------------R---GVTNALVFTKSAESTARLVKLFEFFETTLGQD-----------------------RTRQKEGQIIARAYSSDLSPGERKTILEKFKAQEIH------ILVCSDLISRGIDISHVSHVVSYDAPVDMRKYVHRVGRTARAGRAGDAWTLVEEQEA-RYFK-LMLKESDHLE---------KVKRLRVN-EKDVA-PLQPAYES-------------ALGQLKDAY----ARN-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[280], "--------------KLQSYKLVC---------KSNLKPLSLIVLLQ-----E-------------L---RGEKCLVFTSSVESSHRLSTLLEFFED----------------------------------LPFKFSEYSRLQRESTRRKTLDAFKEGKID------VLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEV-KAFD-KMLKKADN-S---------SCSLHSLP-EESVE-TLRPVFSS-------------ALKKLEESL----ESE----ATKKS--------------KS-GDKAPNASKRKRTINTCAASS------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[281], "---------------LKEYICLT---------EQRSKPLTLYALIC-----E-------------L---GYRKFLVFTNGINTSHRLSFVLQRLFG----------------------------------TDMVIEEWSSALSPATRKNVLSRFSLGKVN------GVVCTDALARGIDIESIDVVISYDMPNHIDKYIHRIGRTARAGMRGTAITLLAEDEK-KKFN-TLLKEANK-T---------ELETIEVR-SSVEE-EFAVKYAG-------------VLNDLREAL----ELE----TEVIN--------------KI-RNGTSIGNMTR------------------------------------------VNLLTKLKDQVDIT-------YSTEIIKSLKILPKSWTNEGIEQRAMQ-------GMPKKNKQK------------------------------------------")
        self.assertEqual(alignment[282], "-------------ATLTEHMIVC---------EASDKPLMLIHLIH-----N-------------H---SIRNALVFTKSSESTSRLVRLLEFFEELRMS----------------------------DGGPIVIRAYSSDLPAGERKNILEKFKAQEVH------VLVCSDLISRGIDISHVCHVVSYDAPVDIRKYVHRVGRTARAGRDGDAWTLANFLQA-RYFK-SMLKECDHLV---------RVKRLNVS-QKETQ-PLTGNYQA-------------ALQMLKESY----A-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[283], "----------------KECICLT---------EQRSKPLTLYGLIR-----E-------------N---GYRKFLVFTNGINTSHRLSFVLQRLFG----------------------------------TDMVIEEWSSSLSPATRKSVLNRFSLGKVN------GIICTDALARGIDIENIEVVISYDMPNHIDKYIHRIGRTARAGLRGTAITLLAEDEK-KKFN-ALLKEANK-T---------ELETMEVS-PSLEE-EFAAKYAN-------------VLNDLREAL----ELE----TEVIN--------------KI-RKGISIGNIL-----------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[284], "---------------LTERYCIT---------ENRIKPLTLFALIN-----E-------------N---EWTKFLCFTNSAESSNRLAFVLKSLFQ----------------------------------NKLVIGELSASISPKERANVLSQFARGSVH------GLICSDALARGIDIPDVDVVISYDLPRHIKTYIHRIGRTARAGSQGTAVTMLTQKEL-QQFN-HLLTEVGK-V---------LTNEITVK-TNHEA-EYAKPYTL-------------ALQELRRKL----EQD----KRLQL--------------MR-KERAKDNAKFKAKDPSK------------------------------------LSVMEKLQMQAFTQVGDIALNKEESQNQRNNQKSKFVKRTKFNAS------------AGKT---------------------------------------------")
        self.assertEqual(alignment[285], "-----------------EKYCLT---------ESRLKPLTLFALIM-----E-------------H---NWCRFLCFTNSAQSSGRLSFVLNKLFG----------------------------------GVKKIGELSASLNAKERSQTLSSFVRGKIN------GLVCTDALARGVDIPQVDIVISYDQPRHIKTYIHRIGRTARAGRPGTAITLLNQKEY-VDFT-QILKEAGK-A---------IPDELLAP-VNMET-EHANEYSA-------------ALTALRGKI----TTN----KRLRL--------------LH-KEKMKEKSLLVTKDTSG------------------------------------MTLMEKLQVQATVQVHNQADNKISLLSEKKNPSKTFKRKKQK----------------------------------------------------------------")
        self.assertEqual(alignment[286], "--------------KLESYKLIC---------KSNLKPLSLIVLLQ-----E-------------L---QGNKCLVFTSSVESSHRLSTLLCFFEN----------------------------------LPFKFSEYSRLQRESTRRKTLEAFKEGKID------VLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEV-KTFD-KMLKKADN-A---------SCSLHSLP-EESIE-TLRPTFSS-------------ALRKLEESL----ESE----AAKKS--------------NL-GDKMPGASKRKRSN-------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[287], "-------------ASLTEHMIVC---------ESSQKPLMLFHLVH-----T-------------H---KITNALVFTKSAESTTRLVRLFEFFETARASA-----------------------DADETRKRIVIRAYSSDAGAAERKAILESFKAEEIQ------ILVCSDVISRGMDISHVSHVVSYDSPVDMRKYVHRVGRTARAGRAGDAWTLIEEQEA-RYFK-AMLKAADHLE---------KVKRLRVS-EKDLA-PLQPNYEA-------------ALGMLKD--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[288], "---------------LKEFMTIC---------PTDKKPLMVIYLLH-----Q-------------M---GIKSGLCFTKSVESTQQLYTLIEAYESTQ-----------------------------PEDKRIRVKEYSSDLSPVQRKQMLKQFKQGHID------LLICSDLIGRGIDLDSVEFVISYDVPYYMDKYIHRVGRTARAGRQGEAYTLVEMQEA-RHFK-EILRHAGHLN---------QIKTLKIE-KDKLK-ELVPDYEK-------------AMSKITE--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[289], "------------PLELKEFVCMT---------DQRNKPLTLYGLIR-----E-------------N---GYRKFLVFTNGISSSHRLSFVLQRLFG----------------------------------TEMVIEEWSSSLSPATRRNVLSRFSMGKVN------GIICTDALARGIDIESIEVVISYDMPNHVDKYIHRIGRTARAGYSGTAITLVTEDER-RKFK-SMLKEADK-K---------ELETIEIS-AAVEE-QYAAKYAS-------------ALNDLRE--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[290], "--------------NLDEYWIEC---------DTGSKPLVLLELLS-----E-------------F---AGSLSIIFTASVNSTHRLARLLQLYST----------------------------------DPERIREFSSSLSQKQRSALVADCKAGRVE------TVVCSDAMARGMDIEDVANVVNYDVPSFIKTYIHRVGRTARAGRHGRCVTLVKMGQM-KGMM-RMLKKADN-N---------KLKPYPLQ-QEHMK-TLVPRYTD-------------ALQQLKDTL----EAE----KAGKL--------------QA-TSILRKNKITTSERNND-DVAEEG-NLDEEVVTA-------------DKKRAFSVLNAQLERN------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[291], "------------PETLREHMVVC---------STEEKPLILFHLIR-----Q-------------N---KIVNALIFTKSAESTARLVQLFDFFESSLSR------------------------SGDGNAKPISVHAYSSDLSASERKSILEKFRTQEIH------ILICSDLISRGIDISHVSNIVSYDAPVDMRKYVHRAGRTARAGREGSAWTLVEEQEA-RYFK-TMMKNASHFD---------KIKKVRLR-EDEVA-AFMSHYQ-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[292], "--------------TLSEHMLVC---------DAARKPLMLFWLVL-----Q-------------H---DVRGALVFTKSAESTARLVRLFEFFEAARAV----------------------------GGKPLVARAYSSDLGAAERKATLEAFKNREID------LLVASDLISRGIDIAHVAHVVSYDVPVDMRKYVHRVGRTARAGRKGDAWTLVEEQEA-RYFK-EMLRGAGRTE---------AVARVRVS-DKQLE-PFTGFYTD-------------ALQKLREAY----ARE----KA-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[293], "-------------STLSENMIVC---------ETSEKPLMLFHLVH-----A-------------H---SVTNALVFTKSAESTARLVRLFEFFEAAQSS-------------------------TAQGSARIVVKAYSSDLSPSERKSILEQFKNQKIH------ILVCSDLISRGIDISHVSHVVSYDAPVDMRKYVHRVGRTARAGRFGSAWTLVEEQEA-RYFK-SMLKEADHLD---------KVKRLRVS-EKETT-PLRPAYEN-------------ALTQLKEVY----ARS----A------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[294], "--------------------------------QSKLKPLYLVSLLQ-----S-------------L---QGEKSIVFTSSVESTHRLCTLLKFFDN----------------------------------LQIEFKEYSRLQRQSLRSKTLSAFRAGQVQ------VLISSDAMTRGMDVEGVRNVVNYDMPAYIKTFIHRVGRTARAGQSGCCFTLLRKDEV-KRFK-KLLQKADC-D---------SCPTYSVS-SEVIE-SLNSVYTS-------------ALEKLRENV----ESE----KFKKS--------------KI-RLKSSNVRKEK----------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[295], "---------------------------------CRLKPLTLFALIM-----E-------------H---KWSRFLCFTNSAQSSGRLSFVLNKLFG----------------------------------NRVKVGELSASLNAKERSKMLSSFIRGKIN------GLVCTDALARGIDIPQVDIVISYDPPRHIKTYIHRIGRTARAGRPGTAITLLNQKEW-SDFN-QILKESGK-G---------ITDELLAP-INIET-THANEYSA-------------ALTA-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[296], "---------------LTEYYVPC---------TLSKKPLLILHFIL-----R-------------L---KFSPILCFTNSREATHRLFLLVQLFGG------------------------------------VQAAEFSSRLSPNERMRTLKEFEQGKIQ------LLISTDAAARGIDINGVKCVVNYDAPQFIRTYIHRVGRTARAGKSGLAFTFLLGVQE-KKFL-QMVKDAGS-P---------GIHKQIVM-PGNLK-SMEPRYEQ-------------TLLELGNTI----KGE----KAKKR--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[297], "--------------KLQSYKLVC---------KSNLKPLSLIVLLQ-----E-------------L---RGEKCLVFTSSVESSHRLSTLLEFFED----------------------------------LPFKFSEYSRLQRESTRRKTLDAFKEGKID------VLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEV-KAFD-KMLKKADN-S---------SCTLHSLP-EESVE-TLRPVFSS-------------ALKKLEESL----ESE----ARKKS--------------KS-GDKAPNASKRKRTIHTQPIATCELKATK-----------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[298], "-------------------------------------PVYLVGLLK-----A-------------L---EGEKCIVFTSSVETTRRLCKLLNFFGD----------------------------------SMIKAKEYSGGLNQAVRSKEIKAFRKGDIK------VLISSDALARGMDVELVTNVINYDMPQYPKTFIHRAGRTARAGRDGRCFTLLGDHEV-RRFS-SLLKKVGN-A---------SCPIYPIP-PDLFA-PVRAIYEP-------------ALAKLKESV----EPI----APKRG--------------RQVGFKHNSRTTNSQTKRNKATSEQ-----------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[299], "--------------KLQSYKLVC---------KSNLKPLSLIVLLQ-----E-------------L---RGEKCLVFTSSVESSHRLSTLLEFFED----------------------------------LPFKFSEYSRLQRESTRRKTLDAFKEGKID------VLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEV-KAFD-KMLKKADN-S---------SCSLHSLP-EESVE-TLRPVFSS-------------ALKKLEESL----ESE----ATKKS--------------KS-GDKAPNASKRKRTIN------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[300], "--------------KLESYTLIC---------ELKLKPLYLVALLR-----D-------------L---RGEKCIVFTSSMKRTHRLTSLLNSFGE----------------------------------LPFKICEFSGQQHQSVRSKTLEAFRKGEID------ILVSSDAMARGMDVEGVSNVINYDMAPYVKTYIHRAGRTARAGQLGRCYTLLSKGEV-KRFK-ALLQKAGD-N---------SSKVHSLP-ADSVE-ELRPVYDS-------------ALKKMKELG----DRS----SKQH---------------HV-NLKPSRGIKRKKADKTSKESHCIA---------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[301], "---------------LTHYYIPC---------NLNSKPLILLHFLL-----S-------------L---RFSRVLCFTNSRDASHRLYLLVRSFGG------------------------------------ISVAEFSSRLSPGERKKTLKEFEQGKVQ------LLISTDATARGIDIKGVKCVINYDAPQFIRTYVHRVGRTARAGKAGLAFTMLLKVQE-NPYF-SMLRDAGA-P---------EMQKQLVK-SENLK-QYEQRYEE-------------ALIELQRAV----KNE----RAQKRS-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[302], "--------------NLDEYWIEC---------DTGSKPLVLLELLS-----E-------------F---AGSLSIIFTASVNSTHRLARLLQLYST----------------------------------DPERIREFSSSLSQKQRSALVADCKAGRVE------TVVCSDAMARGMDIEDVANVVNYDVPSFIKTYIHRVGRTARAGRHGRCVTLVKMGQM-KGMM-RMLKKADN-N---------KLKPYPLQ-QEHMK-TLVPRYTD-------------ALQQLKDTL----EAE----KAGKL--------------QA-TSILRKNKITTSERNND-DVAEEG-NLDEEVVTA-------------DKKRAFSVLNAQLERNL-----------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[303], "-------------ATLTEYMIIC---------DPSQKPMILLHLIY-----N-------------L---SVRSALVFTKSSESTSRLVRLIEFFEDVST-----------------------------DRERVVICAYSSDLPPGERKRILERFKAQQIH------ILVCSDLISRGADISHVSHVVSYDAPIDMRKYVHRVGRTARAGRAGNAWTLVEEQEA-RYFK-GMLREHSHLE---------KVKRIKIS-QRETE-GLSPAYQI-------------ALQKLKEVY----A-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[304], "--------------ELTEKFCLT---------QNNLKPLTLFALIK-----E-------------L---KWQKFLCFTNSVEASERLNFVLQQLFSD---------------------------------EKIRIAELSGSRGRNRCSELLSKFSRGQIN------GLVCSDALARGIDIPGVDIVISYDPPRHIKTYIHRVGRTARAGRPGTAITLLSQHEL-DKFH-KLLNEVGK-V---------VTAEQETF-PDIEE-ANAKKYQG-------------ILQRLREKL----VHD----KRKKI--------------LE-MNRAREVKELESQDVTK------------------------------------LTPMEK----------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[305], "-----------------EHYFKC---------PPMLKPLAVYCLLK-----K-------------F---KYRTTLCFTNSRAATHRLCELLKQFGD------------------------------------LRVAECSSEISKAPRDKLLKDFSSGKID------LLVCTDAVSRGMDLGVVDCVISYDSPRYVKNYIHRAGRAARAGRPGTAITILVDSEI-HGFH-KLLGMAEK-K---------NVTPLDMQ-TEEFE-VYEEQFRK-------------ALDGLKNTV----KEE----IQSKI--------------VR-NHQVRQKKGFKPKFKKGKV------------------------------------VSTKLAKRRGNIVNK-----------------------------------------------------------------------------------------")
        self.assertEqual(alignment[306], "---------------LKEYMAIV---------PTEKKPLLVIYLLH-----C-------------L---GIKSGLCFTKSIESTERLKTLIDAYEALQ-----------------------------PEEKRVRVKEYSSELRPAERRTVLRQFKEGEID------MLICSDLIGRGIDIDSVQYVISYDVPVYMDKYIHRVGRTARAGRHGVAYTLVEKQQA-RYFK-DMLRQAGHLN---------QVELLNIE-KEKLE-ELTPDYEN-------------AISSVTD--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[307], "------------------QYCVT---------ELRLKPLTVFALVE-----K-------------Y---KWKRFLCFTNSSDQASRLTFVLKVLFKK---------------------------------YSTIVSELSGNLSARVRKEKLKDFSAGKIN------GLICSDALARGIDVADVDVVLSYETPRHITTYIHRVGRTARAGRKGTAVTLLTEQDM-ALFK-KILSDADK-E---------LGEEIHVS-PDIEI-QHAVDYKE-------------ALDHLRREN----EKN----KNKKA--------------AE-KNRVATKAMLHKKQEETAT-------------------------------VRPLTLMEKLQVKANQILLSSSKSSERQNPKTKANKATKLPKETKKQI------------IAKQRK-------------------------------------------")
        self.assertEqual(alignment[308], "-------------SSLVQHYTII---------KTEDKPLLLFHLIL-----S-------------Q---SMTNVLVFTKSASSTQRLLKLLQFLNDGWSQQ-----------------------RSQESAFHIMATAFSSDLSVHERKSILASFKEGKIN------VLVASDLVSRGIDLPHVSHVISYDVPIDMRKYVHRVGRTARAGRAGVAWTLVEKQEA-HHFL-EMMRESGHLQ---------DVSKNRIE-GNDLA-PY----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[309], "-------------DQLKSFKVIC---------ESKLKPLYLVALLQ-----S-------------L---QGEKCIVFTSSVESTHRLCTLLNFFDD----------------------------------LNFEIKEYSRLQRQSVRSKTLKAFRAGEIR------VLVSSDAMTRGMDVEEVRNVINYDMPPYIKTYIHRAGRTARAGKSGCCFTLLHKDEV-KRFK-KLLQKADN-N---------SCPLYHIP-PQSVE-SRRSIYTS-------------ALEKLKESV----ESE----VHRKR--------------KA-QV-------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[310], "-----------TPDELQEQYVVC---------SAEEKPLIFYYFFA-----E-------------L---KWDKTLCFTNSSQSAHRLTVLLNIWSK----------------------------------GNLKVAELSAALDRTSRELVLRKFKQSEIN------VIICTDALARGIDIPDCNYVISYDPPRNIKTYVHRVGRTGRAGRIGNAVTIIVHNQV-QMFK-DILQSGGK-S---------DIPQLEMQ-NDILQ-DLMPGYQN-------------AIRETKQSI----DNE----IHDKV--------------KK-SKELKRMSKSKPRKRKHNEN-------------------------------------KSLNVPME----------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[311], "----------------SHHYVPC---------SLRTKPLAVLHLIL-----E-------------K---NFSRVLCFTNSRENSHRLFLLVQAFGG------------------------------------VTAAEFSSRCGPSQRKVVLKQFEQGKIQ------LLISTDAMARGIDVQGVQRVINYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQE-RKFL-RMLAEAGV-P---------EMARHDIP-NELLQ-PLLPRYEE-------------ALSQLERAV----KEE----RRQKA--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[312], "--------------GLTEFYVPC---------QLNKKPLIILYFML-----R-------------M---RFRRVLCFTNSREASHRLYVLIRAFGG------------------------------------IEVAEFSSRLSPQERRKTLKMFEQGKLQ------LLISTDATARGIDIKEVMCVINYDAPQFIRTYIHRVGRTARAGKAGLAFTFLLHVQE-ERFL-QMMKDAGS-K---------ELKKQLVK-HENLT-PLIPRYEE-------------SLLDLKRAL----KDE----QRKLG--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[313], "--------------NLDEYWIEC---------DTGSKPLVLLELLS-----E-------------F---AGSLSIIFTASVNSTHRLARLLQLYST----------------------------------DPERIREFSSSLSQKQRSALVADCKAGRVE------TVVCSDAMARGMDIEDVANVVNYDVPSFIKTYIHRVGRTARAGRHGRCVTLVKMGQM-KGMM-RMLKKADN-N---------KLKPYPLQ-QEHMK-TLVPRYTD-------------ALQQLKDTL----EAE----KAGKL--------------QA-TSILRKNKITTSERNND-DVAEEG-NLDEKVVTA-------------DKKRAFSVLNAQLERNL-----------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[314], "--------------TLMEHMIIC---------EPSVKPLMLLHLVY-----T-------------R---SIRNALVFTKSSESTSRLVRLIEFFQEAGT-----------------------------EDNRVILRAYSSDLPASERKSILDKFKAQEIH------ILVCSDLISRGLDISHVSHVVSYDAPVDIRKYVHRVGRTARAGRTGEAWTLVEEQEA-RHFK-GMLREYSHLE---------RVKRTKVT-EKDTA-GLLASYQV-------------ALQQLKETY----T-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[315], "-----------------HHYVPC---------SLSSKPLAIMHLVV-----G-------------K---NFSRALCFTNSRENSHRLFLLLQAFGG------------------------------------VSVAEFSSRYGPGHRRKVLKQFEQGKIQ------LLISTDATARGIDVLGVELVINYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQE-RTFL-RMLAEGGA-P---------ELARHEIP-SKLLQ-PLVPRYEE-------------ALSQLERTV----KV------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[316], "------------PETLREHMVVC---------PTEEKPLILFHLIR-----Q-------------N---KIVNALIFTKSAESTARLVQLFDFFESSLSR------------------------SGDGNAKPISVHAYSSDLSASERKSILEKFRTQEIH------ILICSDLISRGIDISHVSNIVSYDAPVDMRKYVHRAGRTARAGREGSAWTLVEEQEA-RYFK-TMMKNASHFD---------KIKKVRLR-EDEVA-AFMPHY------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[317], "---------------LTHYYIPC---------NLNSKPLILLHFLL-----S-------------L---RFSRVLCFTNSRDASHRLYLLIRSFGG------------------------------------IDVAEFSSRLSPGERKRTLKEFEQGKVQ------LLVSTDATARGIDIKGVKCIINYDAPQFIRTYVHRVGRTARAGKAGLAFTMLLKVQE-KPYF-GMLRDAGA-P---------ELQRQLVK-SECLK-QYEQRYEE-------------ALSELQKAV----KNE----RAQKRS-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[318], "-------------EGLSQCYVPC---------DLNSKPLLLLYFML-----T-------------M---KFTRVLCFTNSREASHRLFLLVQAFGG------------------------------------VTVAEFSSRLSPSERQRTIREFEQGKIQ------LLISTDATARGIDVKGVNYVINYDAPQFIRTYVHRVGRTARAGKVGVAFSLVLRIQE-RRFL-RMLRDAGI-R---------DIQKHPMK-GKALK-PLVQQYEA-------------ALCKLEKTV----K-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[319], "------------------QYCVT---------ELRLKPLTVFALVE-----K-------------Y---KWKRFLCFTNSSDQASRLTFVLEVLFQK---------------------------------YNTKVSELSGNLSAKVRKERLRDFAAGKIN------GLICSDALARGIDVADVDVVLSYEIPRHITTYIHRVGRTARAGRKGTAVTLLTEYDM-TLFK-KILSDANK-G---------LGEEIHVS-PDIEI-QHAVEYKE-------------ALAGLRTEK----EKK----KNQKM--------------AE-KNRVATKALIHKKQEETAT-------------------------------VRPLTLMEKLQIKANEIVQSSKKSSETKNPKTKADKTKYQPKETKRQI------------IAKQR--------------------------------------------")
        self.assertEqual(alignment[320], "---------------LTEYYVCC---------TLSKKPLLILHFLL-----R-------------L---KFYPVLCFTNSREAAHRLFLLVKLYGG------------------------------------VEVAEFSSRLNPSERQKTLKNFEKGKIQ------LLISTDAAARGIDIKGVKCVINYDAPQYIRTYIHRVGRTARAGKAGVAFTFVLGVQV-ERFV-KMVQDGGS-P---------GLQKQTIK-PESLR-GMESRYED-------------VLVELGRVI----KEE----TAHKR--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[321], "---------------LKEFICMT---------EQRSKPLTLYALIS-----E-------------N---RYRKFLVFTNGINSSHRLSFVLQRLFG----------------------------------AEMVIEEWSSSLSPATRKNVLSRFSMGKVN------GIICTDALARGIDIESIEVVISYDMPNHVDKYIHRIGRTARAGCRGTAITLLAEDEK-KKFN-ALLKEANK-K---------ELETMEVN-PSVEE-EFAAKYAN-------------ALTDLREAL----ALE----TEVIN--------------KI-RSGISIGYMTR------------------------------------------VNLLTKLKDQVDIT-------YSTEIIKSLKY--------------------------------------------------------------------------")
        self.assertEqual(alignment[322], "------------------------------------KPLFILHFIL-----Y-------------L---KLRPILCFTNSRETAHRLYRLVQLFGG------------------------------------VQAAEFSSRLSPGERKNTLKDFEQGKIQ------LLISTDAAARGIDIKDVKCVVNYDAPQYIRTYIHRIGRTARAGKPGLAFTFLLRVQE-NNFL-RMVMEAGS-P---------GIQKQMVK-PESLK-GMEERYGA-------------VLQELADVI----KDE----RSR----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[323], "---------------------------------DSTKPLAVWNLVA-----N-------------R---GFRDTLCFTASKEDAHRLSLVLKEMGG------------------------------------VHVEEFSAKLSSAERARVLRKFASGKLD------ILVCSNVLARGLDVPNVRHVICYDPPRFIKTYVHRVGRTARAGVPGTAVTFMRQGQL-QAFK-EMLESAGK-Q---------DIQPLDIGEGDGLE-EFQSKYRD-------------ALKAVEEIV----KSE----QNGPERG------------KKYSFAQKPWAAKEASDVQH----------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[324], "-------------EGLTEYYIPC---------QMSKKPLLILHFVL-----R-------------M---KLYPILCFTNSRETAHRLYLLVKLFGG------------------------------------VQAAEFSSRLSPWERKKTLKDFEQGKIQ------LLISTDAAARGIDITGVKCVINYDAPQYVRTYVHRVGRTARAGKAGLAFTFLLKVQE-MNFL-QMVKEAGS-P---------GIQKQLVK-PENLK-SMEDRYEQ-------------VLQELADVI----KDE----KSRC---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[325], "-------------------FVEL---------VERQRPIFLVHLVR-----K-------------L---GHERILCFTNSREESKRLATLLNYFEG------------------------------------IKAGALNAGMPLQKRTRLLCAFANGEYQ------LLICTDAVARGIDVKNISCVVSYKAPQSVKTYVHRIGRTARAGKSGEAYTLLNHNQI-RHFK-SSLKLVGK-----------HARNFPIH-SSKLR-PYEKDYKA-------------ALAELEKEY----KAK----PKDAF--------------GV-TKRVEEENGKRKRPLNEKDSREA--------------------------KKPNLKAGEEITMSQDDEKLM-------------------------------------------------------------------GVQ-------------------")
        self.assertEqual(alignment[326], "------------------YKLIC---------ERKVKPLYLVALLK-----S-------------L---GEEKCIVFTRSVESTHHLCKLLNCFGD----------------------------------LKIGIKEFSGLKHQRVRSKTVGEFRRGEFQ------VLVSSDAMTRGMDVEGVRNVINYDMPKYTKTYVHRAGRTARAGQTGRCFTLMSKDEV-GGFK-KLMKKAEA-S---------DCLEYTVP-SSLIE-ALHSTYQS-------------ALTKLKEKI----LES----RRKPR-------------ISL-VN-------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[327], "----------------SHHYVPC---------SLQAKPLVILHLIL-----H-------------L---SFSRVLCFTNSRENAHRLFLLVQAFGG------------------------------------VAVAEFSSRYGPGWRKMILKQFEQGKIQ------LLISTDATARGIDVRGVQLVVNYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQE-RKFL-RMLTEAGA-P---------ELQRHDAP-TELLQ-PLVPRYEA-------------ALAQLEEAV----REE----QRQKVA-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[328], "-------------EGLSQCYVPC---------DLNSKPLLLLYFML-----K-------------M---KFTRVLCFTNSREASHRLFLLVQAFGG------------------------------------ITVAEFSSRLTPNERKRTMKEFEQGKIQ------LLISTDATARGIDVKRVNYVINYDAPQFIRTYVHRVGRTARAGEAGVAFSLVLRIQE-RRFL-RMLRDAGI-R---------DIKKHPVK-GNSLK-PLVQQYEG-------------ALCKLEKTV----K-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[329], "--------------------YLT---------HDNTKPLAVWDLVA-----N-------------H---GFRDTLCFTASKEDAHRLSLVLKEMGS------------------------------------IRAEEFSAKLSIADRARVLRKFASGKLD------ILVCSNVLARGLDVANVRHVICYDPPKFIKTYVHRVGRTARAGVPGTAVTFLRQGQL-QAFK-EMLSSAGK-T---------DIQPLDLSNTDELE-ALQSKYRD-------------ALRAVEAVV----KSE----QVGPERK------------KKYNFAAKSASANET---------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[330], "-------------DELIENYVVC---------NAEEKPLILFHLLV-----E-------------K---KWDKVLCFTNSAQSVHRLAVLLNEWGK---------------------------------DQCLKVAELSSALDRASREKVLEKFKQSEVN------VIISTDALARGIDIPDCNYVVSYDPPRNIKTYVHRVGRTGRAGRIGRAVTILNHNQL-NMFK-EQIQSSGK-S---------EINQLEVS-EESYS-HLLQSYES-------------AIQETKQII----HTE----INNKV--------------KK-SIELKRGMKKKSRKRKHNE--------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[331], "----------ETPEKLEEWMIEC---------DSDSKPLRLIQLLL-----T-------------F---KDQMTLIFTSSVNATHRLTRLLQLVFKE------------------------------HSDDDVGVQEYSSSLTLQQRRTLVAKCKKGLYR------ILVCSDAMARGMDLDDVVNVINYDVPSFIKTYIHRAGRAARAGRFGRCVTLVKRGQT-KGLQ-RMLQKAKK-K---------KLLAFPLP-PEEIQ-QLVPVYMK-------------ALQNLKETL----EME----ASGTL--------------KA-TGRLIP---------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[332], "-------------ATLREHMIVC---------ASSEKPLVLFDLVQ-----R-------------H---KVRNGLVFTKSAESTARLVRLFELFEKAVAG---------------------------EGRLGVVAKAYSSDLSVGERRGILEKFKAEEIQ------ILVCSDLISRGMDMSHVSHVVSYDVPVDMRKYVHRVGRTARAGREGDAWTLVEEQEA-RYFK-RMLSEADHIS---------RVRKMRLT-ERDLF-PL----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[333], "-------------ERLESYKLIC---------ESKLKPLYLVALLQ-----S-------------L---GEEKCIVFTSSVESTHRLCTLLNHFGE----------------------------------LRIKIKEYSGLQRQSVRSKTLKAFREGKIQ------VLVSSDAMTRGMDVEGVNNVVNYDKPAYIKTYIHRAGRTARAGQLGRCFTLLHKDEV-KRFK-KLLQKADN-D---------SCPIHSIP-SSLIE-SLRPVYKS----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[334], "----------------KEFVCMT---------DQRMKPLTLYGLIR-----E-------------N---GYRKFLVFTNGINNAHRLSFVLQRLFG----------------------------------TEMVIEEWSSSLAPATRRNVLSRFSMGKVN------GIICTDALARGIDIESIEVVISYDVPKHVDNYIHRIGRTARAGYSGTAITLVTEDDR-KKFK-SILKEAYK-Q---------DLETIEVS-MSLEE-KYAAKYAS-------------ALNDLRDAL----ALE----TEMIK--------------KI-RKGETLGNMAR------------------------------------------VNLLSKLKDQVHIT-------YSTEIIKSLKLLPKSWTNEA-----------------------------------------------------------------")
        self.assertEqual(alignment[335], "---------------LESYGLIC---------TTEKKLLNLAALLE-----D-------------L---DSEKSIVFTSSINLTHRLCTSLNLLGC----------------------------------LPCKINEYSRLQNQSARSKILKDFREGRID------VLVSSDGMTRGMDVEGIKNVINYDLPMYVKKYIHRAGRTARAGQAGRCFTLLRKNET-KSFK-NMLEKVGI-D---------SFSPYAFP-AASLQ-RLEPLCIT-------------AMEKLIELE----ESK----SSKQV--------------EA-SSKFNKAK-------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[336], "---------------------VT---------ELRLKPLTVYALVE-----K-------------Y---QWKRFLCFTNSSDQASRLTFVLSLLFQN----------------------------------GTKVAELSGNLSAKIRKTTLRNFSAGKIN------GLVCSDALARGIDVADVDVVLSYEIPRHITTYIHRVGRTARAGRKGTAVTLLTDKDM-TLFK-KILSDADK-R---------LGEEIHVS-PDIEI-QHAVQYKE-------------ALFRLRKRT----ETT----KNEKA--------------IE-KNRVATKAMVHKKQEETAT-------------------------------VRPLTLMEKLQIKANQIL-----DSKTQIPKKRAKKAKQQPKETKKQI------------IAKQRKA-----------------------------IE-----------")
        self.assertEqual(alignment[337], "--------------GLTEYYIPC---------QMSKKPLLILHFVL-----R-------------M---KLYPILCFTNSRETAHRLYLLVKLFGG------------------------------------VQAAEFSSRLSPWERKKTLKDFEQGKIQ------LLISTDAAARGIDVTGVKCVINYDAPQYVRTYVHRVGRTARAGKAGLAFTFLLKVQE-TNFL-QMVKEAGS-P---------GIQKQLVK-PENLK-SMEDRYEQ-------------VLQELADVI----KDE----KSRC---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[338], "--------------KLQSYKLVC---------KSNLKPLSLIVLLQ-----E-------------L---RGEKCLVFTSSVESSHRLSTLLEFFED----------------------------------LSFKFSEYSRLQRESTRRKTLDAFKEGKID------VLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEV-KAFD-KMLKKADN-S---------SCSLHSLP-EESVE-TLRPVFST-------------ALKKLEESL----ESE----ATKKS--------------RS-GDKVPNASKRKRTI-------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[339], "-----------LPHNIKQYMIHC---------TAGEKPLITLNLVL-----------------------NKTRVLCFAGSIETTRKLSMLIQMYADK------------------------------EGKKEFICTEFASHLPSSKRGKVLKDFISGKIN------VLVCSDSMARGLDVPCVEHVILYDVPPLIKTYIHRIGRTARAGATGTAYTLLRKQEI-FHFK-KMIADAGK-C---------KVKTMKIP-KESTQ-KMVSIYEQ-------------VLPMVAEKM----KTL----KR-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[340], "----------------TEHYFKC---------PPMLKPLAVYCLLK-----K-------------F---KYRTTLCFTNSRAATHRLCELLKQFGD------------------------------------LRVAECSSEISKAPRDKLLKDFSSGKID------LLVCTDAVSRGMDLGVVDCVISYDSPRYVKNYIHRAGRAARAGRPGTAITILVDSEM-HGFH-KLLGMAEK-K---------NVTPLDMQ-TEEFE-VYEEQFRK-------------ALDGLKNTV----KEE----IQSKI--------------VR-NHQVRQKKGFKPKFKKGKV------------------------------------VSTKLAKRRGNIVNK-----------------------------------------------------------------------------------------")
        self.assertEqual(alignment[341], "--------------GLSQCYVPC---------DLNSKPLLLLHFML-----T-------------M---KFTRVLCFTNSREASHRLFLLVQAFGG------------------------------------VTVAEFSSRLAPKERQRTMKEFEQGKIQ------LLISTDATARGIDVQGVNYVINYDAPQFIRTYVHRVGRTARAGKAGVAFSLVLRIQE-RRFL-RMLKDAGI-Q---------DMKKHPVK-GNSLK-PLVQQYEA-------------ALCKLEKTV----KVI----EMGKK--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[342], "--------------GLSQCYVPC---------DLNSKPLLLLHFML-----T-------------M---KFTRVLCFTNSREASHRLFLLVQAFGG------------------------------------VTAAEFSSRLPPSERQRTMKEFEQGKIQ------LLISTDATARGIDVKGVNYVINYDAPQFIRTYIHRVGRTARAGKVGVAFSLVLRIQE-RRFL-RMLKDAGI-Q---------DIKKHPVK-GNSLK-PLVQQYEE-------------ALSKLEKTV----KVI----ETGKK--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[343], "-------------EGLTEYYIPC---------QMSKKPLLILHFVL-----R-------------M---KLYPILCFTNSRETAHRLYLLVKLFGG------------------------------------VQAAEFSSRLSPWERKKTLKDFEQGKIQ------LLISTDAAARGIDVTGVKCVINYDAPQYVRTYVHRVGRTARAGKAGLAFTFLLKVQE-TNFL-QMVKEAGS-P---------GIQKQLVK-PENLK-SMEDRYEQ-------------VLQELADVI----KDE----KSRC---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[344], "----------------RELVCMT---------QFKIKPLTLFALIK-----E-------------N---GYKRFLCFTNSIDGSHRLSFVLQKMFG----------------------------------TELVIEEWSSSLSPQARKSVLSRFALGKVN------GIICTDALARGIDIDDIDVVISYDMPRHINTYIHRIGRTGRAGNRGTSITMLIDEER-KKFQ-STLAEAGK-Q---------PLESIEIR-SNAEE-EYAVLYST-------------ALNDLREAL----DLE----KQTIQ--------------KI-RSGMSIANMTK------------------------------------------VNLLSKLKDRVDID-----GGHSSEMIKT-----------------------------------------------------------------------------")
        self.assertEqual(alignment[345], "-----------TPDELHEHYVVC---------SAEEKPLIFYNFFA-----N-------------L---KWDKTLCFTNSSQSAHRLTALLNIWGS----------------------------------GKLRVAELSAALDRASRELVLRKFKQSEID------VIISTDALARGIDIPECDHVISYDPPRNIKTYIHRVGRTGRAGRKGTAVTIVINNQV-HMFK-EIIQSSGN-N---------NIQQMVIQ-REVID-SLLENYES-------------AIFETKRLI----NEE----THIKV--------------KK-SIELKRGPKSKPRKRKHNEN-------------------------------------KSINRQQT----------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[346], "--------------GLSQCYVPC---------DLNSKPLLLLHFML-----T-------------M---KFTRVLCFTNSREASHRLFLLVQAFGR------------------------------------VAVAEFSSRLPPNERQRTMKEFEQGKIQ------LLISTDATARGIDVKGVNYVINYDAPQFIRTYIHRVGRTARAGKMGVAFSLVLRIQE-RRFL-RMLKDAGI-Q---------DIKKHPVK-GNSLK-PLLQQYEE-------------ALCKLEKTV----KVI----ETGKK--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[347], "------------------YYYVT---------LDNTKPLAVWDLVA-----N-------------H---GFRDTLCFTASKEDAHRLSLVLKEMGG------------------------------------VRVEEFSAKLSSAERARVLRKFASGKLD------ILVCSNVLARGLDVANVRHVICYDPPRFIKTYVHRVGRTARAGVPGTAVTFMRQGQL-QAFK-AMLESAGK-Q---------DIQPLDIGESDGLE-EFQSKYRD-------------ALKAVEAIV----KSE----QSGPERG------------KKYSFAQKSWAAKEAPDVQ-----------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[348], "-------------ATLREHMIVC---------EASKKPLMLLYLIH-----Q-------------R---GVTNALVFTKSAESAARLVKLVEFFEDAWAQ---------------------------RDGRKMVVRAYSSDLAPGERKTILEKFKRGEVD------MLVASDLISRGIDISSVAHVVSYDVPVDMRKYVHRVGRTARAGRGGDAWTLVEEQEA-RYFK-LVLNGADHLG---------RVKRVKVT-ERDTQ-DLT---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[349], "SD--KELEVSAAPGRLSEFFVQL---------KPSQKPLFVIHLVL-----G-------------L---GRSRVLCFTNSRESAHRLASLITHFAD----------------------------------PRVTCEAVSARLPVPKRARILRRFSTGQLS------VLVCSDSMARGMDLPSVDAVVCYDRPASLRTYVHRAGRTARAGRAGAAYTLLERREV-LHFR-RMLSAGGR-----------QVREVRLH-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[350], "------------PDKLSEQYVVC---------SGSQKPLVLFYLIV-----T-------------H---NVRNALIFTKSAESTTRLVRLFTFFEQARAQ-------------------------EDPNAQPIVARSYSSDLSTSERRSILDKFRSQDIQ------ILVCSDLISRGIDISHVSHVVSYDAPVDMRKYVHRVGRTARAGRSGDAWTLVEEQEV----------------------------------------------SN-------------AL------Y----T-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[351], "------------PTKLESYKLIC---------TSNIKPLCLIVLLQ-----E-------------L---CGEKCLVFTKSVDDSHRLSTFLGFFEE----------------------------------LPFKFSKFSSLQRESTRRKTLAAFKEGKID------VLIGSDIMARGIHIDGLKYVINYEMPQYVKTYIHRAGRTARAGESGSCFTFLRKNEV-KKFD-NMLKKAGG-S---------SCILR----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[352], "-----------TPAELKEHYVVC---------EAENKPLVLYNFLV-----E-------------Q---KWDKVLCFTNAAETTHRLTVLLNTWAC----------------------------------KGLKVAELSAALDRSMRENVLKKFMLSEID------VLISTDALARGIDIPDCNYVISYDPPRNIKTYIHRVGRTGRAGKIGKAVTVLLPSQI-SLFK-DLIKAGGK-E---------EIPEIKIN-TDVID-RLFESYAS-------------AMNTTREKI----NSE----LNLKI--------------KN-SIEIKRSAKSKIQKRKK----------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[353], "----------------KEYMAII---------PTEKKPLLVVYLLH-----C-------------L---GIKSGLCFTKSVESTERLKTLIDAYEALQ-----------------------------PEEKRVRVKEYSSELRPAERRTVLRQFKEGEID------MLICSDLIGRGIDIDSVQYVISYDVPVYMDKYIHRVGRTARAGRHGVAYTLVEKQQA-RYFK-EMLRQAGHLN---------QVELLDIE-KEKLE-ELTPDYEN-------------AISSVTD--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[354], "-----------------------------------MKPVYLVALLK-----S-------------W---EGEKSIIFTSSVETTRRLCKLLNFFGD----------------------------------SKIKAKEYSGGLNQSVRSKELKAFRKGDIQ------VLVASDALTRGMDVKGVTNVINYDMPPFAKTFIHRAGRTARAGQAGKCYTLLSDHEV-RRFS-KLLKKVGS-G---------SCPIYSIP-PTSFD-SVRATYEP-------------ALEKLQELV----ESE----EPRKR--------------RQ-AFKHNSRTGNSRTKRSKTTSEQA----------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[355], "---------YRIPTKLESYKLIC---------TTNLKPLCLIVLLQ-----E-------------L---HGEKCLVFTSSVESSHRLSTLLGFFED----------------------------------LPFKFSEFSRLQRESTRRKTLADFKEGKID------VLIGTDIMARGIHIDGLKYVINYDMPPYVKTYIHRAGRTARAGESGSCFTLLRKHEV-MIV------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[356], "---------------LTEHMAVC---------DPADKPLAFFHLIT-----S-------------H---GIRNALVFTKSAESTTRLVRLFEFFEKARAER-----------------------SPAGDSRPVTISAYSSDLGGAERRAILERFRKQEIQ------ILVASDLISRGLDVSHVSHVVSYDAPVDVRKYVHRVGRTARAGRAGSAWTLVEEQEA-RYFK-NMMKEADHLP---------SLKKVKVD-RKEME-ELRPLY------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[357], "--------------LLKEKFMDC---------KKAEKPLILFHFVL-----N-------------L---KFQQVLCFTNSVESTHRLYLLAKQMEG------------------------------------LKVAELSSGVHTEKRERIIRKFSRGDLQ------LLICSDVMTRGMDIENVQYVISYDAPTYIETYIHRVGRTARANRPGTAITLLEGKEM-FHFK-KMLRESGRWS---------KLKRITVN-NSKLE-PLVPHFSK-------------ALKILPMIL----KEQ----RKQLKN-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[358], "----------------KEYMAII---------PTEKKPLLVVYLLH-----C-------------L---GIKSGLCFTKSVESTERLKTLIDAYEALQ-----------------------------PEEKRVRVKEYSSELRPAERRTVLRQFKEGEID------MLICSDLIGRGIDIDSVQYVISYDVPVYMDKYIHRVGRTARAGRHGVAYTLVEKQQA-RYFK-EMLRQAGHLN---------QVELLDIE-KEKLE-ELTPDYEN-------------AISSVTD--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[359], "-----------------ECYCII---------ENRIKPLTLFALIN-----E-------------N---EWTKFLCFTNSAESSNRLSFVLNSLFK----------------------------------EDLVIRELSASITPKERANVLSQFARGRIN------GLVCSDALARGIDIPDVDVVISYDLPRHIKTYIHRIGRTARAGSPGTAITMLTQKEL-QQFN-HILGEVGK-I---------LTNEMTVK-TNYEA-EYAKQYTM-------------ALQELRRKV----EQD----KRLQI--------------LR-KERVKDNAKLAAKDPSK------------------------------------MSVMEKLQLQVSTQVGDIEQDKEESRMQKNNMKNNMVKRKKFNAS------------AGKTK--------------------------------------------")
        self.assertEqual(alignment[360], "----------------THHYVPC---------SLNSKPLVVLHLVL-----E-------------M---GFSRVLCFTNSRENSHRLFLLVQAFGG------------------------------------VDVAEFSSRYGPGQRRMILKQFEQGKIQ------LLISTDATARGIDVQGVELVVNYDAPQYLRTYVHRVGRTARAGKTGQAFTLLLKVQE-RRFL-RMLTEAGA-P---------ELQRHELS-SKLLQ-PLVPRYEE-------------ALSQLEESV----KEE----HKQRAA-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[361], "----------------TEHYFKC---------PPMLKPLAVYCLLK-----K-------------F---KYRTTLCFTNSRAATHRLCELLKQFGD------------------------------------LRVAECSSEISKAPRDKLLKDFSSGKID------LLVCTDAVSRGMDLGVVDCVISYDSPRYVKNYIHRAGRAARAGRPGTAITILVDSEM-HGFH-KLLGMAEK-K---------NVTPLDMQ-TEEFE-VYEEQFRK-------------ALDGLKNTV----KEE----IQSKI--------------VR-NHQVRQKKGFKPKFKKGKV------------------------------------VSTKLAKRRGNIVNK-----------------------------------------------------------------------------------------")
        self.assertEqual(alignment[362], "-----------------EFFVEL---------IERQKPMFLAHLIK-----K-------------L---GHTRVLCFTNSRESTKRLAVLMSFFDN------------------------------------IKAGALNAGMPLQKRTRLLHSFANGEIQ------LLICTDAVARGIDIEDVSCVVSYEAPQSTKTYVHRVGRTARAGRPGQAYTLLLHNQI-RYFK-SSLKSVGK-----------HARNFPVH-SSNLR-PYTSTYQK-------------ALGYLEKKF----QVK----PLN----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[363], "-------------------VCYT---------QFRIKPLTLFALIR-----Q-------------A---GYRKFLVFTNGIDGSHRLSFVLQRLFG----------------------------------TDMVIEEWSSSLTPATRRSVLHRFSLGKVN------GIICTDALARGFDIDDIEIVVSYDMPRHISTYIHRIGRTARAGNRGTSITLLIDEEK-KKFN-SMLKEAGK-E---------ELEAVEIQ-SSVEE-EYAGKYST-------------ALNDLRDAL----ELE----KQIIT--------------KI-RNGMTMASLTR------------------------------------------VNLLSKLKDRIDVD----GSTNSTELIKSLKHLPKSWTNE------------------------------------------------------------------")
        self.assertEqual(alignment[364], "--------------ELKESFVLC---------HKDMKPLILSYLIS-----H-------------F---NWKRVLCFTNTKESTHRLCLLLKYMGN------------------------------------LNVKEISAKWTAKARDVMLKKFASGAID------ILVTSDQMARGIDIPTVDYVISYDLPGYTKTYIHRIGRCARAGRDGHAVSLVMKEQI-GMYK-KTMKSAGK-N---------NFERLMVK-NSDLK-ELEPKFKE-------------ALTQLKTTV----TEE----EDTLK--------------SH-KGRKQLEVKKRKDKQDKRT---------------------------------AKKVNEKATLKKK----------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[365], "----------------SEYYVPC---------TFSKKPLIILHFLL-----R-------------L---KFSPALCFTNSREGAHRLYLLVKLFGG------------------------------------VEVAEFSSKLSPGERQKTLKDFEKGKIP------LLISTDAAARGIDINGVKCVINYDAPQYIRTYIHRVGRTARAGKAGLAFTFLLKVQE-KRFL-KMVSDAGS-P---------GIQKQHVH-PEALK-SMESRYEQ-------------VLAELGTIV----KEE----NEKKRF-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[366], "---------------LSEHMCVC---------SPAEKPLILFYLVH-----T-------------H---GVRNTLIFTKSAESTTRLVQLFEFFEAARKQE------------------------NPGGAKRVTIQAYSSDLSSQERKSVIERFKEGKIE------LLVCSDLVARGVDISHVAHVVSYDVPVDMRKYVHRVGRTARAGREGDAWSLVEDQEA-RYFK-QMLRKSGHLS---------ALKRLRIK-EGEIA-PLQASYET-------------ALQKLKEVY----ART----PTQV---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[367], "----------------THHYVPC---------SLSSKPLVVLHLVL-----E-------------M---GFSRVLCFTNSRENSHRLFLLVQAFGG------------------------------------VDVAEFSSRYGPGQRRRILKQFEQGKIQ------LLISTDATARGIDVQGVELVVNYDAPQYLRTYVHRAGRTARAGKTGQAFTLLLRVQE-RRFL-QMLTEAGV-P---------ELRRHELS-SKLLQ-ALVPRYEE-------------ALSQLEESI----KEE----HKQRAA-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[368], "---------------LSEYMCVC---------SPAEKPLVLFHLVH-----T-------------H---GVRNALIFTKSAESTTRLVQLFEFFEVARNK-------------------------DLGETGSVTMQAYSSDLSNQERKSVIERFKEGRID------LLVCSDLVARGVDISHVAHVVSYDVPVDMRKYVHRVGRTARAGRKGDAWSLVEDQEA-RYFK-QMLRKAGHLN---------VIKKFRTK-ESDMA-PLQPHYEV-------------R--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[369], "-------------ASLNEMFIKC---------EENTKPLVLFHLIH-----T-------------R---KYRQVLCFTNSVKSTHRLCTLLRLMGK------------------------------------VSVEELSSHISINKRQKTLKKFAAGKIE------IVVCSDQMARGMDIENAKCVISYDVPNFIQNYVHRVGRTARGGHAGSAITLLDHSQV-KFFK-EMLHKAGK-S---------DFKTETVK-PSELK-VYIDAYED-------------ALKEMPKIL----EME----KKA----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[370], "---------------LKEFVCVT---------EQRSKPLTLYALIC-----E-------------N---RYRKFLVFTNGINSSHRLSFVLQRLFG----------------------------------TEMVIEEWSSSLSPATRKNVLSRFSMGKVN------GIICTDALARGIDIESIEVVISYDMPNHVDKYIHRIGRTARAGCRGTAITLVAEDEK-KKFN-ALLKEANK-K---------ELETMEVN-PSVEE-EFAAKYAN-------------ALTDLREAL----ALE----TEVIN--------------KI-RSGMSIGYMTR------------------------------------------VNLLTKLKDQVDIT-------YSTEIIKTLKYLPKSWTNEA-----------------------------------------------------------------")
        self.assertEqual(alignment[371], "---------------LSEYMCVC---------SPAEKPLVLFHLVH-----T-------------H---GVRNALIFTKSAESTTRLVQLFEFFEVARNK-------------------------DLGETGSVTMQAYSSDLSNQERKSVIERFKEGRID------LLVCSDLVARGVDISHVAHVVSYDVPVDMRKYVHRVGRTARAGRKGDAWSLVEDQEA-RYFK-QMLRKAGHLN---------VIKKFRTK-ESDMA-PLQPHYET-------------ALQNLRDVY----ART-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[372], "-------------DTLREHMIVV---------NPSKKPLIMFHLVY-----S-------------H---QVTNALVFTKSAESTTRLLRLFEFFEEARMAA-----------------------GGEDTSSRIVARAYSSDSPPSERKSILEDFKAQKIH------ILICSDLISRGIDISHVNHVVSYDAPVDIRKYVHRVGRTARAGREGDAWTLVEEQEA-HYFK-KMMKEADHLD---------SVKRLRVA-ETATA-PLEPFYEA-------------ALGKLKEVY------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[373], "---------------LTERMVVC---------EPSLKPLVFFHIVL-----E-------------H---GVTNALVFTKSAESTERLVRLFEFFNTAQH-------------------------------GAVVARAYSSDLTAGERKTILEKFKAQEIQ------ILICSDLISRGIDIHHVAHVVSYDVPVDMRKYVHRVGRTARAGRPGEAWTLVEEQEA-RYFK-SMMKEVDHLP---------RLKRLRVG-DKDLA-GLKERYED-------------ALQRLKESY----IRT-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[374], "-------------EGLSQYYVPC---------NLNSKPLFLLHFML-----T-------------M---KFTHVLCFTNSKETSHRLFLLVRSFGG------------------------------------VNVAEFSSRLTPSERQKTLKVFEQGKIQ------LLISTDATARGIDIKGVKYVINYDAPQFIRTYIHRVGRTARAGKAGLAFTMLLKVQE-QKFL-QMLRDAGF-P---------ELGKQLVK-SEYLK-PLSERYEE-------------ALSKLQKTV----KDE----RAQKHA-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[375], "-------------DTLQQQMIVV---------NASEKPLVFFWLIH-----N-------------K---GVRNALVFTKSAESTSRLVQLLRFFGDCRGN----------------------------IEDQVVVHAYSSDLSPSDRKMVLEKFKKQEIN------ILVASDLISRGIDISHVSHVVSYDVPVDMTKYVHRVGRTARAGRDGSAWSLVEDQEA-RYFK-NMLKEAGHLE---------NVKRVRLG-EKELE-GLRPDYKR-------------ALAQLKESY----TR------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[376], "------------PEGLSQYYVPC---------NLNSKPLFLLYFML-----R-------------M---KFTRVLCFTNSKQTSHRLFLLIQAFGG------------------------------------VNVAEFSSWLTPSERQRTLKEFEQGKIQ------LLISTDATARGIDVKGVKCVINYDAPQFIRTYIHRVGRTARAGKVGLAFTMLLKVQE-RKFL-QMLRDAGT-P---------DLEKQLVK-SEYLN-PLLQQYEE----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[377], "-------------ATLREHMLVC---------DSSQKPLMLFHLVR-----A-------------H---QVKNALVFTKSAESTMRLVRLFEFFETARHAS-----------------------GAESESKTIVVRAYSSDLSPSERKSILEKFKAQEID------MLVCSDLVSRGIDISHVAHVVSYDVPVDMRKYVHRVGRTARAGREGDAWTLVEEQEA-RYFK-EMLRAAEHVD---------AVKRVRVS-EKQLE-GLVPHYEV-------------ALQQLKEVY----ARD----RR-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[378], "--------------KLQSYKLVC---------KSNLKPLSLIVLLQ-----E-------------L---RGEKCLVFTSSVESSHRLSTLLEFFED----------------------------------LPFKFSEYSRLQRESTRRKTLDAFKEGKID------VLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEV-KAFD-KMLKKADN-S---------SCTLHSLP-EESVE-TLRPVFSS-------------ALKKLEESL----ESE----ARKKS--------------KS-GDKAPNASKRKRTIHTFIHQ-------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[379], "-------------DTLSEHMCVC---------SSAEKPLVLFHLVH-----T-------------H---GIRNALIFTKSAESTTRLVQLFEFFEAARSK-------------------------NLGEAKCVTMQAYSSDLGNQERKNVIERFKEGNID------LLVCSDLVARGVDISHVAHVVSYDIPVDMRKYVHRVGRTARAGRKGDAWSLVEDQEA-RYFK-QMLKKAGHLE---------GIKKLKTK-ESDIA-LLQPYYET-------------ALQNLREVY----AR------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[380], "------------------YKLIC---------ERKVKPLYLVALLK-----S-------------L---GEEKCIVFTRFVESTHHLCKLLNFFGD----------------------------------LKIGIKEFSGLKHQQVRSKTVGEFQRREFQ------VLVSSDAMTRVMDVEGLRNVINYDVPKYTKTYVHRPGRTARAGQTGCCFTLMSKDEV-GGFE-KLMKKAEA-S---------DCLQHTVP-SSLIE-ALHSTYSSDVSLSLCHVPLLATLTKLKEKI----LEA-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[381], "-------------ATLREHMIVC---------ESALKPLMLLYLIH-----H-------------H---GVKNALVFTKSAESTARLVRLVEFFEDAWAKG-----------------------QGDRRARKIVARAYSSDLPPGERRGILEQFRKGEVD------MLVASDLISRGIDISSVSHVVSYDVPVDMRKYVHRVGRTARAGREGDAWTLVEEQEA-RYFK-SILKAANHLE---------RVKRMRVS-EKDTQ-DLSPFYDT-------------ALARLREVF----SR------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[382], "--------------TLKESYIIT---------NPDQKPLVLLNIIY-----ETL-----KN----D---SNKKIICFTKSVDITHRLNSLLKLIGS-------------------------------VDNIKFTCEEYSSALSTTERSSLLNRFKSNEIN------VLICSDIMSRGMDISDIDVVINYNSPPNITLYVHRVGRTARAGKHGFSYTIIDKQEI-RYYI-SMMKKAERSQ---------TLHCLKWK-PATYE-KFESNYKL-------------ALNQMRLIY----SKR----KLNEEEIEENL-----LTEEAQNQNQNQDQDPQENEQDEEEDDDNSVNNSNKKLKFDNSSINSFGNDQESLIKLKQSLLEISKKK------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[383], "-------------------KLIC---------TSNIKPLCLIVLLQ-----E-------------L---RGEKCLVFTKSVDDSHRLSTLLGFFED----------------------------------LPFKFSEFSSLQRESTRRKTLAAFKEGKID------VLIGSDIMARGIHIDGLRYVINYEMPQYVKTYIHRAGRTARAGESGSCFTFLRKNEV-KRFD-KMLKKADG-S---------SCILRSLP-EESID-SLRPVFET-------------ALEKLKDKLKGSAEPE----ASKKSN-------------KS-GDKAPGALKR-----------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[384], "--------------------VEC---------AAEYKPVALYQLLT-----R-------------H---DITKTLVFTNSGDTTHRLALLMQSLLS---------------------------------EQNVVVGELSAQLVPKQRKSVLGKFASGEIH------VLISSDALARGLDIPDVRLVISYDVPKYIKGYIHRVGRTARAGKPGTAVSILTSSQV-GIFK-RMLSGAHK-TVP-------DIEQTELN----AT-ADAVSYQA-------------HVEKLKEIL----EKE----KSESL--------------ER-TKAIKRKRVASTTRQHKDKK-------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[385], "-------------DTLKESYIAC---------HSDQKPLALISVIG-----NIFKSKQQQQTDQND---NIARIICFTNSIDITQRLNTLLGFIGE-------------------------------VDGVKLKPAQYSSSINSIERSNLLKLFANGDIN------VLICSDILARGMDLPNVDAVINYNAPPSAVLYVHRVGRTARAGRKGSAYTIVAREEK-SYFT-NMIKKAGRTQ---------KMDKLTWK-KEQYQ-KYTKSYKN-------------ALSQTRTIY----AKR----KANQKLF---------------KSINNLSQSSALTTEDNQSII-------------------------------VQDLTEINKKRLL----------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[386], "--------------ELKSFKVLC---------QSKLKPLYLVSLLQ-----S-------------L---QGEKSIVFTSSVESTHRLCTLLKFFDN----------------------------------LQIEFKEYSRLQRQSVRSKTLRAFRSGQVQ------VLISSDAMTRGMDVEGVRNVINYDMPAYIKTFIHRAGRTARAGLSGCCFTLMHKDEV-KRFK-KMLQKADC-N---------SCPTYSAS-SEVIE-SLRSVYSS-------------ALEKLRENV----ESE----KFKKS--------------KI-RLKSSNVRKEK----------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[387], "------------------YRLMC---------SAARKPLVLLALLQ-----E-------------W---SGQSTIVFTSSLEMTHKLFLMLSAVQD----------------------------------LPDEVVEYSSLVPVRARAAALERFRTGSVE------LLVASDAMTRGMDVDCVQNVINYDAPVYAKTYVHRAGRTARAGKPGRVITLLRDEDM-RHFK-AMIHKADN-N---------FVREYKLP-SERVE-ALRPALTG-------------ALQQLEELL----AAE----RASDM--------------QQ-QQQQQQQQAKQQKQKAVTQLQGFE-NGK-----------------PEALGKGKQKGVEKGQQAETAA--------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[388], "-------------ERLESYKLIC---------ESKLKPLYLVALLQ-----S-------------L---GEEKCIVFTSSVESTHRLCTLLNHFGE----------------------------------LRIKIKEYSGLQRQSVRSKTLKAFREGKIQ------VLVSSDAMTRGMDVEGVNNVVNYDKPAYIKTYIHRAGRTARAGQLGRCFTLLHKDEV-KRFK-KLLQKADN-D---------SCPIHSIP-SSLIE-SLRPVYKS-------------ALDKLKETV----ESE----AHRKH--------------TI-GFKLSRMGKGR----------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[389], "--------------------LVC---------KSNLKPLSLIVLLQ-----E-------------L---RGEKCLVFTSSVESSHRLSTLLEFFED----------------------------------LPFKFSEYSRLQRESTRRKTLDAFKEGKID------VLIGTDRMARGIHIDGLRYVINYDMPPYVKTYIHRAGRTARAGESGSCFTFLRKHEV-KAFD-KMLKKADN-S---------SCSLHSLP-EESVE-TLRPVFSS-------------ALKKLEESL----ESE----ATKKS--------------KS-GDKAPNASKRKRTIN------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[390], "-------------KTLKQHIVVT---------RTDLKPLVFFKLVQ-----S-------------Q---RIEKALCFCKSIDGARRLTGLCRLMAEQLQASPASTELGPEADPQQTEDQAPN--GGLDLAKLCRVECFSSDLSPADRKKILQKFQSGEIN------MLICSDIIARGIDIAGVQNVVNYDSPIDIKKYVHRVGRTARANEQGRAFTLVESQEA-KFVK-GFLKTGFA-ALS----PDQQVVRIRID-WLD---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[391], "---------------LKEYVVAV---------QPEHRALFLIHLIR-----H-------------E---NVKRVLCFTNSRTTAARLHMLLSNFKG------------------------------------IRSYRISGHMPPDKRQRVLSAFTRNELD------VLVCTDSMARGMDVKEVNCVVSYEMPPNVKIYVHRVGRTARAGQPGLAYTLLNKNQF-FHFK-KDLRAVGK-Q---------KLKEVTFH-ASHFA-HLQEEYKQ-------------ALGRLEEEV----KTS----SKPAT--------------GR-STDILQTVKSARNKRQKKR---------------------------------------KISKDSS----------------------------------------------------------------------------------------------")
        self.assertEqual(alignment[392], "-------------TNLEEYWIEC---------DTGSKPLVLLELLS-----E-------------F---AGALSIVFTASVNSTHRLARLLQLYST----------------------------------HPERIREFSSSLSQKQRSALVADFKAGRVE------TVVCSDAMARGMDIEDVANVVNYDVPSFIKTYIHRVGRTARAGRHGRCVTLVKMGQM-KGMM-RMLKKADN-N---------KLKPYPLQ-QEHMK-TLVPRYTE-------------ALQRLKDTL----EAE----KAGKL--------------QA-TSILHKTKEE-----------------NEEVTSA-------------DKKRAFSVLNGQLERNLGS---------------------------------------------------------------------------------------------")
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates,
                numpy.array(
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 52, 53, 54, 55, 56, 60, 64, 67, 68, 83, 83, 126, 127, 139, 140, 140, 141, 142, 143, 144, 144, 149, 152, 152, 153, 154, 154, 154, 154, 154, 155, 156, 157, 158, 159, 162, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 176, 176, 177, 178, 180, 181, 182, 183, 184, 185, 185, 186, 187, 188, 188, 188, 188, 189, 190, 191, 192, 193, 193, 193, 193, 193, 193, 193, 193, 193, 194, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 51, 52, 53, 54, 55, 55, 55, 55, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 68, 72, 75, 76, 91, 91, 134, 135, 147, 148, 148, 149, 150, 151, 152, 152, 157, 160, 161, 162, 162, 162, 162, 162, 162, 163, 164, 165, 166, 167, 170, 170, 171, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 22, 29, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 42, 43, 47, 51, 54, 55, 70, 70, 113, 114, 126, 127, 127, 128, 129, 130, 131, 131, 136, 139, 139, 140, 140, 140, 140, 140, 140, 141, 142, 143, 144, 145, 148, 148, 149, 150, 151, 152, 153, 153, 155, 156, 157, 158, 159, 160, 161, 161, 161, 162, 163, 165, 166, 167, 168, 169, 170, 170, 171, 172, 173, 173, 173, 173, 174, 175, 176, 177, 178, 178, 178, 178, 178, 178, 178, 178, 178, 179, 180, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 10, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 30, 37, 47, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 51, 52, 56, 60, 63, 64, 79, 79, 122, 123, 135, 136, 136, 137, 138, 139, 140, 140, 145, 148, 148, 149, 149, 149, 149, 149, 149, 150, 151, 152, 153, 154, 157, 157, 158, 159, 160, 161, 162, 162, 164, 165, 166, 167, 168, 169, 170, 170, 170, 171, 172, 174, 175, 176, 177, 178, 179, 179, 180, 181, 182, 182, 182, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 188, 189, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 240, 243, 246, 247, 248, 251, 252, 253, 254, 256, 256, 256, 256, 256, 256, 256, 256, 260, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 56, 60, 63, 64, 79, 79, 122, 123, 135, 136, 136, 137, 138, 139, 140, 140, 145, 148, 148, 149, 149, 149, 149, 149, 149, 150, 151, 152, 153, 154, 157, 157, 158, 159, 160, 161, 162, 162, 164, 165, 166, 167, 168, 169, 170, 170, 170, 171, 172, 174, 175, 176, 177, 178, 179, 179, 180, 181, 182, 182, 182, 182, 183, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 25, 25, 26, 27, 28, 32, 33, 33, 33, 33, 42, 49, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 61, 62, 63, 64, 65, 66, 70, 74, 77, 78, 93, 93, 136, 137, 149, 150, 150, 151, 152, 153, 154, 154, 159, 162, 163, 164, 164, 164, 164, 164, 164, 165, 166, 167, 168, 169, 172, 172, 173, 174, 175, 176, 177, 177, 179, 180, 181, 182, 183, 184, 185, 185, 185, 186, 187, 189, 190, 191, 192, 193, 194, 194, 195, 196, 197, 197, 197, 197, 198, 199, 200, 201, 202, 202, 202, 205, 206, 206, 206, 206, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 239, 239, 241, 249, 251, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 265, 266, 267, 268, 269, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 11, 11, 12, 13, 22, 29, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 42, 43, 47, 51, 54, 55, 70, 70, 113, 114, 126, 127, 127, 128, 129, 130, 131, 131, 136, 139, 139, 140, 140, 140, 140, 140, 140, 141, 142, 143, 144, 145, 148, 148, 149, 150, 151, 152, 153, 153, 155, 156, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157],
[0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 13, 13, 14, 15, 16, 17, 18, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 38, 45, 55, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 61, 65, 68, 69, 84, 84, 127, 128, 140, 141, 141, 142, 143, 144, 145, 145, 150, 153, 153, 154, 154, 154, 154, 154, 154, 155, 156, 157, 158, 159, 162, 162, 163, 164, 165, 166, 167, 167, 169, 170, 171, 172, 173, 174, 175, 175, 175, 176, 177, 179, 180, 181, 182, 183, 184, 184, 185, 186, 187, 187, 187, 187, 188, 189, 190, 191, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 5, 6, 7, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 27, 34, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 47, 48, 52, 56, 59, 60, 75, 75, 118, 119, 131, 132, 132, 133, 134, 135, 136, 136, 141, 144, 144, 145, 145, 145, 145, 145, 145, 146, 147, 148, 149, 150, 153, 153, 154, 155, 156, 157, 158, 158, 160, 161, 162, 163, 164, 165, 166, 166, 166, 167, 168, 170, 171, 172, 173, 174, 175, 175, 176, 177, 178, 178, 178, 178, 179, 180, 181, 182, 183, 183, 183, 183, 183, 183, 183, 183, 183, 184, 185, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 9, 10, 11, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 31, 38, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 51, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 141, 141, 141, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 184, 185, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 137, 137, 139, 140, 141, 142, 143, 144, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210],
[0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 12, 13, 14, 15, 16, 17, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 37, 44, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 57, 58, 62, 66, 69, 70, 85, 85, 128, 129, 141, 142, 142, 143, 144, 145, 146, 146, 151, 151, 151, 151, 151, 151, 151, 151, 151, 152, 153, 154, 155, 156, 159, 159, 160, 161, 162, 163, 164, 164, 166, 167, 168, 169, 170, 171, 172, 172, 172, 173, 174, 176, 177, 178, 179, 180, 181, 181, 182, 183, 184, 184, 184, 184, 185, 186, 187, 188, 189, 189, 189, 189, 189, 189, 189, 189, 189, 190, 191, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 55, 56, 60, 64, 67, 68, 83, 83, 126, 127, 139, 140, 140, 141, 142, 143, 144, 144, 149, 152, 152, 153, 153, 153, 153, 153, 153, 154, 155, 156, 157, 158, 161, 161, 162, 163, 164, 165, 166, 166, 168, 169, 170, 171, 172, 173, 174, 174, 174, 175, 176, 178, 179, 180, 181, 182, 183, 183, 184, 185, 186, 186, 186, 186, 187, 188, 189, 190, 191, 191, 191, 191, 191, 191, 191, 191, 191, 192, 193, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 25, 32, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 44, 48, 52, 55, 56, 71, 71, 114, 115, 127, 128, 128, 129, 130, 131, 132, 132, 137, 140, 140, 141, 141, 141, 141, 141, 141, 142, 143, 144, 145, 146, 149, 149, 150, 151, 152, 153, 154, 154, 156, 157, 158, 159, 160, 161, 162, 162, 162, 163, 164, 166, 167, 168, 169, 170, 171, 171, 172, 173, 174, 174, 174, 174, 175, 176, 177, 178, 179, 179, 179, 179, 179, 179, 179, 179, 179, 180, 181, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206],
[0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 12, 13, 14, 15, 16, 17, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 37, 44, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 57, 58, 62, 66, 69, 70, 85, 85, 128, 129, 141, 142, 142, 143, 144, 145, 146, 146, 151, 154, 154, 155, 155, 155, 155, 155, 155, 156, 157, 158, 159, 160, 163, 163, 164, 165, 166, 167, 168, 168, 170, 171, 172, 173, 174, 175, 176, 176, 176, 177, 178, 180, 181, 182, 183, 184, 185, 185, 186, 187, 188, 188, 188, 188, 189, 190, 191, 192, 193, 193, 193, 193, 193, 193, 193, 193, 193, 194, 195, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 216, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 55, 56, 60, 64, 67, 68, 83, 83, 126, 127, 139, 140, 140, 141, 142, 143, 144, 144, 149, 152, 152, 153, 153, 153, 153, 153, 153, 154, 155, 156, 157, 158, 161, 161, 162, 163, 164, 165, 166, 166, 168, 169, 170, 171, 172, 173, 174, 174, 174, 175, 176, 178, 179, 180, 181, 182, 183, 183, 184, 185, 186, 186, 186, 186, 187, 188, 189, 190, 191, 191, 191, 191, 191, 191, 191, 191, 191, 192, 193, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 146, 149, 149, 150, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 158, 158, 159, 160, 161, 162, 163, 163, 165, 166, 167, 168, 169, 170, 171, 171, 171, 172, 173, 175, 176, 177, 178, 179, 180, 180, 181, 182, 183, 183, 183, 183, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 189, 190, 190, 191, 192, 193, 194, 196, 197, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 10, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 30, 37, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 184, 185, 186, 186, 186, 186, 186, 186, 186, 186, 186, 187, 188, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 208, 209, 210, 212, 213, 214, 215, 218, 219, 220, 221, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 3, 4, 5, 6, 7, 8, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 28, 35, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 48, 49, 53, 57, 60, 61, 76, 76, 119, 120, 132, 133, 133, 134, 135, 136, 137, 137, 142, 145, 145, 146, 146, 146, 146, 146, 146, 147, 148, 149, 150, 151, 154, 154, 155, 156, 157, 158, 159, 159, 161, 162, 163, 164, 165, 166, 167, 167, 167, 168, 169, 171, 172, 173, 174, 175, 176, 176, 177, 178, 179, 179, 179, 179, 180, 181, 182, 183, 184, 184, 184, 184, 184, 184, 184, 184, 185, 186, 187, 187, 188, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 207, 207, 207, 208, 209, 210, 211, 212, 213, 213, 213, 214, 215, 217, 221, 221, 221, 221, 221, 223, 224, 225, 226, 227, 228, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 57, 58, 59, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 94, 98, 101, 102, 117, 117, 160, 161, 173, 174, 174, 175, 176, 177, 178, 178, 183, 186, 186, 187, 188, 189, 189, 190, 192, 193, 194, 195, 196, 197, 200, 200, 201, 202, 203, 204, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 14, 23, 30, 40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 43, 44, 48, 52, 55, 56, 71, 71, 114, 115, 127, 128, 128, 129, 130, 131, 132, 133, 138, 141, 141, 142, 142, 142, 142, 142, 142, 143, 144, 145, 146, 147, 150, 150, 151, 152, 153, 154, 155, 155, 157, 158, 159, 160, 161, 162, 163, 163, 163, 164, 165, 167, 168, 169, 170, 171, 172, 172, 173, 174, 175, 175, 175, 175, 176, 177, 178, 179, 180, 180, 180, 180, 180, 180, 180, 180, 180, 181, 182, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 58, 62, 65, 66, 81, 81, 124, 125, 137, 138, 138, 139, 140, 141, 142, 142, 147, 150, 150, 151, 151, 151, 151, 151, 151, 152, 153, 154, 155, 156, 159, 159, 160, 161, 162, 163, 164, 164, 166, 167, 168, 169, 170, 171, 172, 172, 172, 173, 174, 176, 177, 178, 179, 180, 181, 181, 182, 183, 184, 184, 184, 184, 185, 186, 187, 188, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 9, 10, 11, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 31, 38, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 54, 58, 61, 62, 77, 77, 120, 121, 133, 134, 134, 135, 136, 137, 138, 138, 143, 146, 146, 147, 147, 147, 147, 147, 147, 148, 149, 150, 151, 152, 155, 155, 156, 157, 158, 159, 160, 160, 162, 163, 164, 165, 166, 167, 168, 168, 168, 169, 170, 172, 173, 174, 175, 176, 177, 177, 178, 179, 180, 180, 180, 180, 181, 182, 183, 184, 185, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 58, 62, 65, 66, 81, 81, 124, 125, 137, 138, 138, 139, 140, 141, 142, 142, 147, 150, 150, 151, 151, 151, 151, 151, 151, 152, 153, 154, 155, 156, 159, 159, 160, 161, 162, 163, 164, 164, 166, 167, 168, 169, 170, 171, 172, 172, 172, 173, 174, 176, 177, 178, 179, 180, 181, 181, 182, 183, 184, 184, 184, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188],
[0, 2, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 23, 23, 24, 25, 26, 27, 28, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 48, 55, 65, 66, 67, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 69, 70, 71, 72, 73, 74, 78, 82, 85, 86, 101, 101, 144, 145, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 55, 56, 60, 64, 67, 68, 83, 83, 126, 127, 139, 140, 140, 141, 142, 143, 144, 144, 149, 152, 152, 153, 153, 153, 153, 153, 153, 154, 155, 156, 157, 158, 161, 161, 162, 163, 164, 165, 166, 166, 168, 169, 170, 171, 172, 173, 174, 174, 174, 175, 176, 178, 179, 180, 181, 182, 183, 183, 184, 185, 186, 186, 186, 186, 187, 188, 189, 190, 191, 191, 191, 191, 191, 191, 191, 191, 191, 192, 193, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 9, 10, 11, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 31, 38, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 54, 58, 61, 62, 77, 77, 120, 120, 132, 133, 134, 135, 136, 137, 138, 138, 143, 146, 146, 147, 147, 147, 147, 147, 147, 148, 149, 150, 150, 151, 154, 154, 155, 156, 157, 158, 159, 159, 161, 162, 163, 164, 165, 166, 167, 167, 167, 168, 169, 171, 172, 173, 174, 175, 176, 176, 177, 178, 179, 179, 179, 179, 180, 181, 182, 183, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 3, 4, 5, 6, 7, 8, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 28, 35, 45, 46, 47, 48, 49, 50, 51, 51, 51, 51, 51, 51, 52, 53, 54, 55, 56, 57, 58, 59, 63, 67, 70, 71, 86, 86, 129, 130, 142, 143, 143, 144, 145, 146, 147, 147, 152, 155, 156, 157, 157, 157, 157, 157, 157, 158, 159, 160, 161, 162, 165, 165, 166, 167, 168, 169, 170, 170, 172, 173, 174, 175, 176, 177, 178, 178, 178, 179, 180, 182, 183, 184, 185, 186, 187, 187, 188, 189, 190, 190, 190, 190, 191, 192, 193, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 146, 149, 149, 150, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 158, 158, 159, 160, 161, 162, 163, 163, 165, 166, 167, 168, 169, 170, 171, 171, 171, 172, 173, 175, 176, 177, 178, 179, 180, 180, 181, 182, 183, 183, 183, 183, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 146, 149, 149, 150, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 158, 158, 159, 160, 161, 162, 163, 163, 165, 166, 167, 168, 169, 170, 171, 171, 171, 172, 173, 175, 176, 177, 178, 179, 180, 180, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 3, 4, 5, 6, 7, 8, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 28, 35, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 51, 55, 58, 59, 74, 74, 117, 118, 130, 131, 131, 132, 133, 134, 135, 135, 140, 143, 143, 144, 144, 144, 144, 144, 144, 145, 146, 147, 148, 149, 152, 152, 153, 154, 155, 156, 157, 157, 159, 160, 161, 162, 163, 164, 165, 165, 165, 166, 167, 169, 170, 171, 172, 173, 174, 174, 175, 176, 177, 177, 177, 177, 178, 179, 180, 181, 182, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 51, 52, 53, 54, 54, 54, 54, 54, 54, 54, 55, 56, 57, 58, 59, 60, 61, 62, 66, 70, 73, 74, 89, 89, 132, 133, 145, 146, 146, 147, 148, 149, 150, 150, 155, 158, 159, 160, 160, 160, 160, 160, 160, 161, 162, 163, 164, 165, 168, 168, 169, 170, 171, 172, 173, 173, 175, 176, 177, 178, 179, 180, 181, 181, 181, 182, 183, 185, 186, 187, 188, 189, 190, 190, 191, 192, 193, 193, 193, 193, 194, 195, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 20, 21, 25, 29, 32, 33, 48, 48, 91, 92, 104, 105, 105, 106, 107, 108, 109, 109, 114, 117, 117, 118, 118, 118, 118, 118, 118, 119, 120, 121, 122, 123, 126, 126, 127, 128, 129, 130, 131, 131, 133, 134, 135, 136, 137, 138, 139, 139, 139, 140, 141, 143, 144, 145, 146, 147, 148, 148, 149, 150, 151, 151, 151, 151, 152, 153, 154, 155, 156, 156, 156, 156, 156, 156, 156, 156, 156, 157, 158, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 9, 10, 11, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 31, 38, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 54, 58, 61, 62, 77, 77, 120, 121, 133, 134, 134, 135, 136, 137, 138, 138, 143, 146, 146, 147, 147, 147, 147, 147, 147, 148, 149, 150, 151, 152, 155, 155, 156, 157, 158, 159, 160, 160, 162, 163, 164, 165, 166, 167, 168, 168, 168, 169, 170, 172, 173, 174, 175, 176, 177, 177, 178, 179, 180, 180, 180, 180, 181, 182, 183, 184, 185, 186, 186, 186, 186, 186, 186, 186, 186, 187, 188, 189, 190, 191, 192, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 56, 57, 58, 59, 63, 67, 70, 71, 86, 86, 129, 130, 142, 143, 143, 144, 145, 146, 147, 147, 152, 155, 156, 157, 157, 157, 157, 157, 157, 158, 159, 160, 161, 162, 165, 165, 166, 167, 168, 169, 170, 170, 172, 173, 174, 175, 176, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 9, 10, 11, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 31, 38, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 54, 58, 61, 62, 77, 77, 120, 121, 133, 134, 134, 135, 136, 137, 138, 138, 143, 146, 146, 147, 147, 147, 147, 147, 147, 148, 149, 150, 151, 152, 155, 155, 156, 157, 158, 159, 160, 160, 162, 163, 164, 165, 166, 167, 168, 168, 168, 169, 170, 172, 173, 174, 175, 176, 177, 177, 178, 179, 180, 180, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182],
[0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 11, 12, 13, 14, 15, 16, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 36, 43, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 56, 57, 61, 65, 68, 69, 84, 84, 127, 128, 140, 141, 141, 142, 143, 144, 145, 145, 150, 153, 153, 154, 154, 154, 154, 154, 154, 155, 156, 157, 158, 159, 162, 162, 163, 164, 165, 166, 167, 167, 169, 170, 171, 172, 173, 174, 175, 175, 175, 176, 177, 179, 180, 181, 182, 183, 184, 184, 185, 186, 187, 187, 187, 187, 188, 189, 190, 191, 192, 192, 192, 192, 192, 192, 192, 192, 192, 193, 194, 194, 195, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 146, 149, 149, 150, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 158, 158, 159, 160, 161, 162, 163, 163, 165, 166, 167, 168, 169, 170, 171, 171, 171, 172, 173, 175, 176, 177, 178, 179, 180, 180, 181, 182, 183, 183, 183, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 56, 57, 58, 62, 66, 69, 70, 85, 85, 128, 129, 141, 142, 142, 143, 144, 145, 146, 146, 151, 154, 154, 154, 154, 154, 154, 154, 154, 155, 156, 157, 158, 159, 162, 162, 163, 164, 165, 166, 167, 167, 169, 170, 171, 172, 173, 174, 175, 175, 175, 176, 177, 179, 180, 181, 182, 183, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 9, 10, 11, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 31, 38, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 54, 58, 61, 62, 77, 77, 120, 121, 133, 134, 134, 135, 136, 137, 138, 138, 143, 146, 146, 147, 147, 147, 147, 147, 147, 148, 149, 150, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 152, 152, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 10, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 30, 37, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 53, 53, 56, 57, 72, 72, 115, 116, 128, 129, 129, 130, 131, 132, 133, 133, 138, 141, 141, 142, 142, 142, 142, 142, 142, 143, 144, 145, 146, 147, 150, 150, 151, 152, 153, 154, 155, 155, 157, 158, 159, 160, 161, 162, 163, 163, 163, 164, 165, 167, 168, 169, 170, 171, 172, 172, 173, 174, 175, 175, 175, 175, 176, 177, 178, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 56, 60, 63, 64, 79, 79, 122, 123, 135, 136, 136, 137, 138, 139, 140, 140, 145, 148, 148, 149, 149, 149, 149, 149, 149, 150, 151, 152, 153, 154, 157, 157, 158, 159, 160, 161, 162, 162, 164, 165, 166, 167, 168, 169, 170, 170, 170, 171, 172, 174, 175, 176, 177, 178, 179, 179, 180, 181, 182, 182, 182, 182, 183, 184, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 209, 210, 211, 212, 213, 214, 215, 215, 216, 217, 218, 220, 224, 224, 224, 224, 224, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187],
[0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 12, 13, 14, 15, 16, 17, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 37, 44, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 57, 58, 62, 66, 69, 70, 85, 85, 128, 129, 141, 142, 142, 143, 144, 145, 146, 146, 151, 154, 154, 155, 155, 155, 155, 155, 155, 156, 157, 158, 159, 160, 163, 163, 164, 165, 166, 167, 168, 168, 170, 171, 172, 173, 174, 175, 176, 176, 176, 177, 178, 180, 181, 182, 183, 184, 185, 185, 186, 187, 188, 188, 188, 188, 189, 190, 191, 192, 193, 193, 193, 193, 193, 193, 193, 193, 193, 194, 195, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 215, 217, 221, 222, 222, 222, 224, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 58, 62, 65, 66, 81, 81, 124, 125, 137, 138, 138, 139, 140, 141, 142, 142, 147, 150, 150, 151, 151, 151, 151, 151, 151, 152, 153, 154, 155, 156, 159, 159, 160, 161, 162, 163, 164, 164, 166, 167, 168, 169, 170, 171, 172, 172, 172, 173, 174, 176, 177, 178, 179, 180, 181, 181, 182, 183, 184, 184, 184, 184, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 24, 31, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 44, 45, 49, 53, 56, 57, 72, 72, 115, 116, 128, 129, 129, 130, 131, 132, 133, 133, 138, 141, 141, 142, 142, 142, 142, 142, 142, 143, 144, 145, 146, 147, 150, 150, 151, 152, 153, 154, 155, 155, 157, 158, 159, 160, 161, 162, 163, 163, 163, 164, 165, 167, 168, 169, 170, 171, 172, 172, 173, 174, 175, 175, 175, 175, 176, 177, 178, 179, 180, 180, 180, 180, 180, 180, 180, 180, 180, 181, 182, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 194, 195, 197, 198, 199, 200, 203, 204, 205, 206, 207, 207, 207, 207, 207, 207, 208, 209, 210, 217, 220, 223, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 4, 4, 5, 6, 7, 8, 9, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 29, 36, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 49, 50, 54, 58, 61, 62, 77, 77, 120, 121, 133, 134, 134, 135, 136, 137, 138, 138, 143, 146, 146, 147, 147, 147, 147, 147, 147, 148, 149, 150, 151, 152, 155, 155, 156, 157, 158, 159, 160, 160, 162, 163, 164, 165, 166, 167, 168, 168, 168, 169, 170, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 184, 184, 184, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 58, 62, 65, 66, 81, 81, 124, 125, 137, 138, 138, 139, 140, 141, 142, 142, 147, 150, 150, 151, 151, 151, 151, 151, 151, 152, 153, 154, 155, 156, 159, 159, 160, 161, 162, 163, 164, 164, 166, 167, 168, 169, 170, 171, 172, 172, 172, 173, 174, 176, 177, 178, 179, 180, 181, 181, 182, 183, 184, 184, 184, 184, 185, 186, 187, 188, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 209, 210, 211, 212, 213, 214, 215, 215, 216, 217, 218, 220, 224, 224, 224, 224, 224, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 240, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241],
[0, 2, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 23, 23, 24, 25, 26, 27, 28, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 48, 55, 65, 66, 67, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 69, 70, 71, 72, 73, 74, 78, 82, 85, 86, 101, 101, 144, 145, 157, 158, 158, 159, 160, 161, 162, 162, 167, 170, 171, 172, 172, 172, 172, 172, 172, 173, 174, 175, 176, 177, 180, 180, 181, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 53, 54, 55, 56, 57, 57, 57, 57, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 70, 74, 77, 78, 93, 93, 136, 137, 149, 150, 150, 151, 152, 153, 154, 154, 159, 162, 163, 164, 164, 164, 164, 164, 164, 165, 166, 167, 168, 169, 172, 172, 173, 174, 175, 176, 177, 177, 179, 180, 181, 182, 183, 184, 185, 185, 185, 186, 187, 189, 190, 191, 192, 193, 194, 194, 195, 196, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 22, 29, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 42, 43, 47, 51, 54, 55, 70, 70, 113, 114, 126, 127, 127, 128, 129, 130, 131, 131, 136, 139, 139, 140, 140, 140, 140, 140, 140, 141, 142, 143, 144, 145, 148, 148, 149, 150, 151, 152, 153, 153, 155, 156, 157, 158, 159, 160, 161, 161, 161, 162, 163, 165, 166, 167, 168, 169, 170, 170, 171, 172, 173, 173, 173, 173, 174, 175, 176, 177, 178, 178, 178, 178, 178, 178, 178, 178, 178, 179, 180, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 146, 149, 149, 150, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 158, 158, 159, 160, 161, 162, 163, 163, 165, 166, 167, 168, 169, 170, 171, 171, 171, 172, 173, 175, 176, 177, 178, 179, 180, 180, 181, 182, 183, 183, 183, 183, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 57, 58, 58, 58, 58, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 75, 78, 79, 94, 94, 137, 138, 150, 151, 151, 152, 153, 154, 155, 155, 160, 163, 164, 165, 165, 165, 165, 165, 165, 166, 167, 168, 169, 170, 173, 173, 174, 175, 176, 177, 178, 178, 180, 181, 182, 183, 184, 185, 186, 186, 186, 187, 188, 190, 191, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 5, 6, 7, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 27, 34, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 50, 54, 57, 58, 73, 73, 116, 117, 129, 130, 130, 131, 132, 133, 134, 134, 139, 142, 142, 143, 143, 143, 143, 143, 143, 144, 145, 146, 147, 148, 151, 151, 152, 153, 154, 155, 156, 156, 158, 159, 160, 161, 162, 163, 164, 164, 164, 165, 166, 168, 169, 170, 171, 172, 173, 173, 174, 175, 176, 176, 176, 176, 177, 178, 179, 180, 181, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187],
[0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 13, 13, 14, 15, 16, 17, 18, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 38, 45, 55, 56, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 60, 61, 62, 63, 64, 68, 72, 75, 76, 91, 91, 134, 135, 147, 148, 148, 149, 150, 151, 152, 152, 157, 160, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 147, 147, 147, 147, 147, 147, 148, 149, 150, 151, 152, 155, 155, 156, 157, 158, 159, 160, 160, 162, 163, 164, 165, 166, 167, 168, 168, 168, 169, 170, 172, 173, 174, 175, 176, 177, 177, 178, 179, 180, 180, 180, 180, 181, 182, 183, 184, 185, 185, 185, 185, 185, 185, 185, 185, 185, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 55, 56, 60, 64, 67, 68, 83, 83, 126, 127, 139, 140, 140, 141, 142, 143, 144, 144, 149, 152, 152, 153, 153, 153, 153, 153, 153, 154, 155, 156, 157, 158, 161, 161, 162, 163, 164, 165, 166, 166, 168, 169, 170, 171, 172, 173, 174, 174, 174, 175, 176, 178, 179, 180, 181, 182, 183, 183, 184, 185, 186, 186, 186, 186, 187, 188, 189, 190, 191, 191, 191, 191, 191, 191, 191, 191, 191, 192, 193, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 217, 218, 219, 220, 222, 226, 227, 229, 229, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 4, 4, 5, 6, 7, 8, 9, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 29, 36, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 49, 50, 54, 58, 61, 62, 77, 77, 120, 121, 133, 134, 134, 135, 136, 137, 138, 138, 143, 146, 146, 147, 147, 147, 147, 147, 147, 148, 149, 150, 151, 152, 155, 155, 156, 157, 158, 159, 160, 160, 162, 163, 164, 165, 166, 167, 168, 168, 168, 169, 170, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 184, 184, 184, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 57, 58, 58, 58, 58, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 75, 78, 79, 94, 94, 137, 138, 150, 151, 151, 152, 153, 154, 155, 155, 160, 163, 164, 165, 165, 165, 165, 165, 165, 166, 167, 168, 169, 170, 173, 173, 174, 175, 176, 177, 178, 178, 180, 181, 182, 183, 184, 185, 186, 186, 186, 187, 188, 190, 191, 192, 193, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 56, 60, 63, 64, 79, 79, 122, 123, 135, 136, 136, 137, 138, 139, 140, 140, 145, 148, 148, 149, 149, 149, 149, 149, 149, 150, 151, 152, 153, 154, 157, 157, 158, 159, 160, 161, 162, 162, 164, 165, 166, 167, 168, 169, 170, 170, 170, 171, 172, 174, 175, 176, 177, 178, 179, 179, 180, 181, 182, 182, 182, 182, 183, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 22, 29, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 42, 43, 47, 51, 54, 55, 70, 70, 113, 114, 126, 127, 127, 128, 129, 130, 131, 131, 136, 139, 139, 140, 140, 140, 140, 140, 140, 141, 142, 143, 144, 145, 148, 148, 149, 150, 151, 152, 153, 153, 155, 156, 157, 158, 159, 160, 161, 161, 161, 162, 163, 165, 166, 167, 168, 169, 170, 170, 171, 172, 173, 173, 173, 173, 174, 175, 176, 177, 178, 178, 178, 178, 178, 178, 178, 178, 178, 179, 180, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 146, 149, 149, 150, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 158, 158, 159, 160, 161, 162, 163, 163, 165, 166, 167, 168, 169, 170, 171, 171, 171, 172, 173, 175, 176, 177, 178, 179, 180, 180, 181, 182, 183, 183, 183, 183, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 20, 21, 25, 29, 32, 33, 48, 48, 91, 92, 104, 105, 105, 106, 107, 108, 109, 109, 114, 117, 117, 118, 118, 118, 118, 118, 118, 119, 120, 121, 122, 123, 126, 126, 127, 128, 129, 130, 131, 131, 133, 134, 135, 136, 137, 138, 139, 139, 139, 140, 141, 143, 144, 145, 146, 147, 148, 148, 149, 150, 151, 151, 151, 151, 152, 153, 154, 155, 156, 156, 156, 156, 156, 156, 156, 156, 156, 157, 158, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 9, 10, 11, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 31, 38, 48, 49, 50, 51, 52, 53, 54, 54, 54, 54, 54, 54, 54, 55, 56, 57, 58, 59, 60, 61, 65, 69, 72, 73, 88, 88, 131, 132, 144, 145, 145, 146, 147, 148, 149, 149, 154, 157, 158, 159, 159, 159, 159, 159, 159, 160, 161, 162, 163, 164, 167, 167, 168, 169, 170, 171, 172, 172, 174, 175, 176, 177, 178, 179, 180, 180, 180, 181, 182, 184, 185, 186, 187, 188, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189],
[0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 14, 14, 15, 16, 17, 18, 19, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 39, 46, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 59, 60, 64, 68, 71, 72, 87, 87, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 4, 4, 5, 6, 7, 8, 9, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 29, 36, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 52, 56, 59, 60, 75, 75, 118, 119, 131, 132, 132, 133, 134, 135, 136, 136, 141, 144, 144, 145, 145, 145, 145, 145, 145, 146, 147, 148, 149, 150, 153, 153, 154, 155, 156, 157, 158, 158, 160, 161, 162, 163, 164, 165, 166, 166, 166, 167, 168, 170, 171, 172, 173, 174, 175, 175, 176, 177, 178, 178, 178, 178, 179, 180, 181, 182, 183, 183, 183, 183, 183, 183, 183, 183, 183, 184, 185, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 10, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 30, 37, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 53, 57, 60, 61, 76, 76, 119, 120, 132, 133, 133, 134, 135, 136, 137, 137, 142, 145, 145, 146, 146, 146, 146, 146, 146, 147, 148, 149, 150, 151, 154, 154, 155, 156, 157, 158, 159, 159, 161, 162, 163, 164, 165, 166, 167, 167, 167, 168, 169, 171, 172, 173, 174, 175, 176, 176, 177, 178, 179, 179, 179, 179, 180, 181, 182, 183, 184, 185, 186, 186, 186, 186, 186, 186, 187, 188, 189, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 23, 26, 27, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 38, 45, 55, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 58, 62, 66, 69, 70, 85, 85, 128, 129, 141, 142, 142, 143, 144, 145, 146, 146, 151, 154, 155, 156, 156, 156, 156, 156, 158, 159, 160, 161, 162, 163, 166, 166, 167, 168, 169, 170, 171, 171, 173, 174, 175, 176, 177, 178, 179, 179, 179, 180, 181, 183, 184, 185, 186, 187, 188, 188, 189, 190, 191, 191, 191, 191, 192, 193, 194, 195, 196, 196, 196, 196, 196, 196, 196, 196, 196, 197, 198, 198, 199, 200, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 202, 203, 205, 206, 207, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 10, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 30, 37, 47, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 51, 52, 56, 60, 63, 64, 79, 79, 122, 123, 135, 136, 136, 137, 138, 139, 140, 140, 145, 148, 148, 149, 149, 149, 149, 149, 149, 150, 151, 152, 153, 154, 157, 157, 158, 159, 160, 161, 162, 162, 164, 165, 166, 167, 168, 169, 170, 170, 170, 171, 172, 174, 175, 176, 177, 178, 179, 179, 180, 181, 182, 182, 182, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 188, 189, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 240, 243, 246, 247, 248, 251, 252, 253, 254, 256, 256, 256, 256, 256, 256, 256, 256, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 56, 60, 63, 64, 79, 79, 122, 123, 135, 136, 136, 137, 138, 139, 140, 140, 145, 148, 148, 149, 149, 149, 149, 149, 149, 150, 151, 152, 153, 154, 157, 157, 158, 159, 160, 161, 162, 162, 164, 165, 166, 167, 168, 169, 170, 170, 170, 171, 172, 174, 175, 176, 177, 178, 179, 179, 180, 181, 182, 182, 182, 182, 183, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 212, 213, 214, 215, 217, 218, 219, 220, 223, 224, 225, 226, 227, 228, 229, 229, 230, 231, 232, 233, 234, 241, 244, 247, 247, 247, 250, 251, 252, 253, 255, 255, 255, 255, 255, 255, 255, 255, 259, 260, 261, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 23, 23, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 59, 60, 61, 62, 63, 67, 71, 74, 75, 90, 90, 133, 134, 146, 147, 147, 148, 149, 150, 151, 151, 156, 159, 160, 161, 161, 161, 161, 161, 161, 162, 163, 164, 165, 166, 169, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 183, 183, 184, 185, 187, 188, 189, 190, 191, 192, 192, 193, 194, 195, 195, 195, 195, 196, 197, 198, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 146, 149, 149, 150, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 158, 158, 159, 160, 161, 162, 163, 163, 165, 166, 167, 168, 169, 170, 171, 171, 171, 172, 173, 175, 176, 177, 178, 179, 180, 180, 181, 182, 183, 183, 183, 183, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188],
[0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 12, 13, 14, 15, 16, 17, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 37, 44, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 57, 58, 62, 66, 69, 70, 85, 85, 128, 129, 141, 142, 142, 143, 144, 145, 146, 146, 151, 154, 154, 155, 155, 155, 155, 155, 155, 156, 157, 158, 159, 160, 163, 163, 164, 165, 166, 167, 168, 168, 170, 171, 172, 173, 174, 175, 176, 176, 176, 177, 178, 180, 181, 182, 183, 184, 185, 185, 186, 187, 188, 188, 188, 188, 189, 190, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 25, 32, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 44, 48, 52, 55, 56, 71, 71, 114, 115, 127, 128, 128, 129, 130, 131, 132, 132, 137, 140, 140, 141, 141, 141, 141, 141, 141, 142, 143, 144, 145, 146, 149, 149, 150, 151, 152, 153, 154, 154, 156, 157, 158, 159, 160, 161, 162, 162, 162, 163, 164, 166, 167, 168, 169, 170, 171, 171, 172, 173, 174, 174, 174, 174, 175, 176, 177, 178, 179, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180],
[0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 11, 12, 13, 14, 15, 16, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 36, 43, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 56, 57, 61, 65, 68, 69, 84, 84, 127, 128, 140, 141, 141, 142, 143, 144, 145, 145, 150, 153, 153, 154, 154, 154, 154, 154, 154, 155, 156, 157, 158, 159, 162, 162, 163, 164, 165, 166, 167, 167, 169, 170, 171, 172, 173, 174, 175, 175, 175, 176, 177, 179, 180, 181, 182, 183, 184, 184, 185, 186, 187, 187, 187, 187, 188, 189, 190, 191, 192, 192, 192, 192, 192, 192, 192, 192, 192, 193, 194, 194, 195, 196, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 55, 56, 60, 64, 67, 68, 83, 83, 126, 127, 139, 140, 140, 141, 142, 143, 144, 144, 149, 152, 152, 153, 153, 153, 153, 153, 153, 154, 155, 156, 157, 158, 161, 161, 162, 163, 164, 165, 166, 166, 168, 169, 170, 171, 172, 173, 174, 174, 174, 175, 176, 178, 179, 180, 181, 182, 183, 183, 184, 185, 186, 186, 186, 186, 187, 188, 189, 190, 191, 191, 191, 191, 191, 191, 191, 191, 191, 192, 193, 193, 194, 195, 196, 197, 199, 200, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 55, 56, 60, 64, 67, 68, 83, 83, 126, 127, 139, 140, 140, 141, 142, 143, 144, 144, 149, 152, 152, 153, 153, 153, 153, 153, 153, 154, 155, 156, 157, 158, 161, 161, 162, 163, 164, 165, 166, 166, 168, 169, 170, 171, 172, 173, 174, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 23, 30, 40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 46, 50, 53, 54, 69, 69, 112, 113, 125, 126, 126, 127, 128, 129, 130, 130, 135, 138, 139, 140, 140, 140, 140, 140, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 154, 156, 157, 158, 159, 160, 161, 162, 162, 162, 163, 164, 166, 167, 168, 169, 170, 171, 171, 172, 173, 174, 174, 174, 174, 175, 176, 177, 178, 179, 180, 181, 184, 184, 184, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 226, 227, 228, 229, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 146, 149, 149, 150, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 158, 158, 159, 160, 161, 162, 163, 163, 165, 166, 167, 168, 169, 170, 171, 171, 171, 172, 173, 175, 176, 177, 178, 179, 180, 180, 181, 182, 183, 183, 183, 183, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 57, 58, 58, 58, 58, 58, 58, 59, 60, 61, 62, 63, 64, 65, 66, 70, 74, 77, 78, 93, 93, 136, 137, 149, 150, 150, 151, 152, 153, 154, 154, 159, 162, 163, 164, 164, 164, 164, 164, 164, 165, 166, 167, 168, 169, 172, 172, 173, 174, 175, 176, 177, 177, 179, 180, 181, 182, 183, 184, 185, 185, 185, 185, 185, 185, 185, 185, 185, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 149, 150, 154, 155, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 171, 173, 174, 175, 176, 177, 178, 179, 179, 179, 180, 181, 183, 184, 185, 186, 187, 188, 188, 189, 190, 191, 191, 191, 191, 192, 193, 194, 195, 196, 196, 196, 196, 196, 196, 196, 196, 196, 197, 198, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 4, 4, 5, 6, 7, 8, 9, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 29, 36, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 49, 50, 54, 58, 61, 62, 77, 77, 120, 121, 133, 134, 134, 135, 136, 137, 138, 138, 143, 146, 146, 147, 147, 147, 147, 147, 147, 148, 149, 150, 151, 152, 155, 155, 156, 157, 158, 159, 160, 160, 162, 163, 164, 165, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 58, 62, 65, 66, 81, 81, 124, 125, 137, 138, 138, 139, 140, 141, 142, 142, 147, 150, 150, 151, 152, 153, 153, 153, 155, 156, 157, 158, 159, 160, 163, 163, 164, 165, 166, 167, 168, 168, 170, 171, 172, 173, 174, 175, 176, 176, 176, 177, 178, 180, 181, 182, 183, 184, 185, 185, 186, 187, 188, 188, 188, 188, 189, 190, 191, 192, 193, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 184, 185, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203],
[0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 49, 56, 66, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 68, 72, 76, 79, 80, 95, 95, 138, 139, 151, 152, 152, 153, 154, 155, 156, 156, 161, 164, 164, 165, 165, 165, 165, 165, 165, 166, 167, 168, 169, 170, 173, 173, 174, 175, 176, 177, 178, 178, 180, 181, 182, 183, 184, 185, 186, 186, 186, 187, 188, 190, 191, 192, 193, 194, 195, 195, 196, 197, 198, 198, 198, 198, 199, 200, 201, 202, 203, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 146, 149, 149, 150, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 158, 158, 159, 160, 161, 162, 163, 163, 165, 166, 167, 168, 169, 170, 171, 171, 171, 172, 173, 175, 176, 177, 178, 179, 180, 180, 181, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 53, 54, 55, 56, 56, 56, 56, 56, 56, 56, 57, 58, 59, 60, 61, 62, 63, 64, 68, 72, 75, 76, 91, 91, 134, 135, 147, 148, 148, 149, 150, 151, 152, 152, 157, 160, 161, 162, 162, 162, 162, 162, 162, 163, 164, 165, 166, 167, 170, 170, 171, 172, 173, 174, 175, 175, 177, 178, 179, 180, 181, 182, 183, 183, 183, 184, 185, 187, 188, 189, 190, 191, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 9, 10, 11, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 31, 38, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 54, 58, 61, 62, 77, 77, 120, 121, 133, 134, 134, 135, 136, 137, 138, 138, 143, 146, 146, 146, 146, 146, 146, 146, 146, 147, 148, 149, 150, 151, 154, 154, 155, 156, 157, 158, 159, 159, 161, 162, 163, 164, 165, 166, 167, 167, 167, 168, 169, 171, 172, 173, 174, 175, 176, 176, 177, 178, 179, 179, 179, 179, 180, 181, 182, 183, 184, 184, 184, 184, 184, 184, 184, 184, 184, 185, 186, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223],
[0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 12, 13, 14, 15, 16, 17, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 35, 42, 52, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 56, 57, 58, 59, 60, 64, 68, 71, 72, 87, 87, 130, 131, 143, 144, 144, 145, 146, 147, 148, 148, 153, 156, 156, 157, 157, 157, 157, 157, 157, 158, 159, 160, 161, 162, 165, 165, 166, 167, 168, 169, 170, 170, 172, 173, 174, 175, 176, 177, 178, 178, 178, 179, 180, 182, 183, 184, 185, 186, 187, 187, 188, 189, 190, 190, 190, 190, 191, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 9, 10, 11, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 31, 38, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 54, 58, 61, 62, 77, 77, 120, 121, 133, 134, 134, 135, 136, 137, 138, 138, 143, 146, 146, 147, 147, 147, 147, 147, 147, 148, 149, 150, 151, 152, 155, 155, 156, 157, 158, 159, 160, 160, 162, 163, 164, 165, 166, 167, 168, 168, 168, 169, 170, 172, 173, 174, 175, 176, 177, 177, 178, 179, 180, 180, 180, 180, 181, 182, 183, 184, 185, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 5, 6, 7, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 27, 34, 44, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 48, 49, 53, 57, 60, 61, 76, 76, 119, 120, 132, 133, 133, 134, 135, 136, 137, 137, 142, 145, 145, 146, 146, 146, 146, 146, 146, 147, 148, 149, 150, 151, 154, 154, 155, 156, 157, 158, 159, 159, 161, 162, 163, 164, 165, 166, 167, 167, 167, 168, 169, 171, 172, 173, 174, 175, 176, 176, 177, 178, 179, 179, 179, 179, 180, 181, 182, 183, 184, 184, 184, 184, 184, 184, 184, 184, 184, 185, 186, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 238, 241, 244, 245, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246],
[0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 12, 13, 14, 15, 16, 17, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 37, 44, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 57, 58, 62, 66, 69, 70, 85, 85, 128, 129, 141, 142, 142, 143, 144, 145, 146, 146, 151, 154, 154, 155, 155, 155, 155, 155, 155, 156, 157, 158, 159, 160, 163, 163, 164, 165, 166, 167, 168, 168, 170, 171, 172, 173, 174, 175, 176, 176, 176, 177, 178, 180, 181, 182, 183, 184, 185, 185, 186, 187, 188, 188, 188, 188, 189, 190, 191, 192, 193, 193, 193, 193, 193, 193, 193, 193, 193, 194, 195, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 57, 57, 57, 57, 57, 57, 57, 58, 59, 60, 61, 62, 63, 64, 65, 69, 73, 76, 77, 92, 92, 135, 136, 148, 149, 149, 150, 151, 152, 153, 153, 158, 161, 162, 163, 163, 163, 163, 163, 163, 164, 165, 166, 167, 168, 171, 171, 172, 173, 174, 175, 176, 176, 178, 179, 180, 181, 182, 183, 184, 184, 184, 185, 186, 188, 189, 190, 191, 192, 193, 193, 194, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 51, 52, 53, 54, 55, 56, 56, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 70, 74, 77, 78, 93, 93, 136, 137, 149, 150, 150, 151, 152, 153, 154, 154, 159, 162, 162, 163, 163, 163, 163, 163, 163, 164, 165, 166, 167, 168, 171, 171, 172, 173, 174, 175, 176, 176, 178, 179, 180, 181, 182, 183, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 10, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 30, 37, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 53, 57, 60, 61, 76, 76, 119, 120, 132, 133, 133, 134, 135, 136, 137, 137, 142, 145, 145, 146, 146, 146, 146, 146, 146, 147, 148, 149, 150, 151, 154, 154, 155, 156, 157, 158, 159, 159, 161, 162, 163, 164, 165, 166, 167, 167, 167, 168, 169, 171, 172, 173, 174, 175, 176, 176, 177, 178, 179, 179, 179, 179, 180, 181, 182, 183, 184, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 10, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 30, 37, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 184, 185, 186, 186, 186, 186, 186, 186, 186, 186, 186, 187, 188, 188, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 58, 59, 60, 61, 65, 69, 72, 73, 88, 88, 131, 132, 144, 145, 145, 146, 147, 148, 149, 149, 154, 157, 158, 159, 159, 159, 159, 159, 159, 160, 161, 162, 163, 164, 167, 167, 168, 169, 170, 171, 172, 172, 174, 175, 176, 177, 178, 179, 180, 180, 180, 181, 182, 184, 185, 186, 187, 188, 189, 189, 190, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 52, 53, 54, 55, 56, 60, 64, 67, 68, 83, 83, 126, 127, 139, 140, 140, 141, 142, 143, 144, 144, 149, 152, 152, 153, 154, 154, 154, 154, 154, 155, 156, 157, 158, 159, 162, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 176, 176, 177, 178, 180, 181, 182, 183, 184, 185, 185, 186, 187, 188, 188, 188, 188, 189, 190, 191, 192, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 55, 56, 60, 64, 67, 68, 83, 83, 126, 127, 139, 140, 140, 141, 142, 143, 144, 144, 149, 152, 152, 153, 153, 153, 153, 153, 153, 154, 155, 156, 157, 158, 161, 161, 162, 163, 164, 165, 166, 166, 168, 169, 170, 171, 172, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 146, 149, 149, 150, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 158, 158, 159, 160, 161, 162, 163, 163, 165, 166, 167, 168, 169, 170, 171, 171, 171, 172, 173, 175, 176, 177, 178, 179, 180, 180, 181, 182, 183, 183, 183, 183, 184, 185, 186, 187, 188, 189, 189, 189, 189, 189, 189, 189, 189, 190, 191, 192, 193, 194, 195, 196, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 53, 54, 58, 62, 65, 66, 81, 81, 124, 125, 137, 138, 138, 139, 140, 141, 142, 142, 147, 150, 150, 151, 151, 151, 151, 151, 151, 152, 153, 154, 155, 156, 159, 159, 160, 161, 162, 163, 164, 164, 166, 167, 168, 169, 170, 171, 172, 172, 172, 173, 174, 176, 177, 178, 179, 180, 181, 181, 182, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183],
[0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 13, 13, 14, 15, 16, 17, 18, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 38, 45, 55, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 59, 60, 61, 62, 63, 67, 71, 74, 75, 90, 90, 133, 134, 146, 147, 147, 148, 149, 150, 151, 151, 156, 159, 159, 160, 160, 160, 160, 160, 160, 161, 162, 163, 164, 165, 168, 168, 169, 170, 171, 172, 173, 173, 175, 176, 177, 178, 179, 180, 181, 181, 181, 182, 183, 185, 186, 187, 188, 189, 190, 190, 191, 192, 193, 193, 193, 193, 194, 195, 196, 197, 198, 198, 198, 198, 198, 198, 198, 198, 198, 199, 200, 200, 201, 202, 203, 204, 206, 207, 208, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 56, 60, 63, 64, 79, 79, 122, 123, 135, 136, 136, 137, 138, 139, 140, 140, 145, 148, 148, 149, 149, 149, 149, 149, 149, 150, 151, 152, 153, 154, 157, 157, 158, 159, 160, 161, 162, 162, 164, 165, 166, 167, 168, 169, 170, 170, 170, 171, 172, 174, 175, 176, 177, 178, 179, 179, 180, 181, 182, 182, 182, 182, 183, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 30, 37, 47, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 51, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 51, 52, 53, 54, 54, 54, 54, 54, 54, 54, 54, 55, 56, 57, 58, 59, 60, 61, 65, 69, 72, 73, 88, 88, 131, 132, 144, 145, 145, 146, 147, 148, 149, 149, 154, 157, 158, 159, 159, 159, 159, 159, 159, 160, 161, 162, 163, 164, 167, 167, 168, 169, 170, 171, 172, 172, 174, 175, 176, 177, 178, 179, 180, 180, 180, 181, 182, 184, 185, 186, 187, 188, 189, 189, 190, 191, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 55, 56, 57, 58, 59, 63, 67, 70, 71, 86, 86, 129, 130, 142, 143, 143, 144, 145, 146, 147, 147, 152, 155, 156, 157, 157, 157, 157, 157, 157, 158, 159, 160, 161, 162, 165, 165, 166, 167, 168, 169, 170, 170, 172, 173, 174, 175, 176, 177, 178, 178, 178, 179, 180, 182, 183, 184, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 146, 149, 149, 150, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 158, 158, 159, 160, 161, 162, 163, 163, 165, 166, 167, 168, 169, 170, 171, 171, 171, 172, 173, 175, 176, 177, 178, 179, 180, 180, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 53, 54, 58, 62, 65, 66, 81, 81, 124, 125, 137, 138, 138, 139, 140, 141, 142, 142, 147, 150, 150, 151, 151, 151, 151, 151, 151, 152, 153, 154, 155, 156, 159, 159, 160, 161, 162, 163, 164, 164, 166, 167, 168, 169, 170, 171, 172, 172, 172, 173, 174, 176, 177, 178, 179, 180, 181, 181, 182, 183, 184, 184, 184, 184, 185, 186, 187, 188, 189, 189, 189, 189, 189, 189, 189, 189, 189, 190, 191, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 10, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 30, 37, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 53, 57, 60, 61, 76, 76, 119, 120, 132, 133, 133, 134, 135, 136, 137, 137, 142, 145, 145, 146, 146, 146, 146, 146, 146, 147, 148, 149, 150, 151, 154, 154, 155, 156, 157, 158, 159, 159, 161, 162, 163, 164, 165, 166, 167, 167, 167, 168, 169, 171, 172, 173, 174, 175, 176, 176, 177, 178, 179, 179, 179, 179, 180, 181, 182, 183, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 146, 149, 149, 150, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 158, 158, 159, 160, 161, 162, 163, 163, 165, 166, 167, 168, 169, 170, 171, 171, 171, 172, 173, 175, 176, 177, 178, 179, 180, 180, 181, 182, 183, 183, 183, 183, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 189, 190, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 10, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 30, 37, 47, 48, 49, 50, 51, 52, 53, 53, 53, 53, 53, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 69, 72, 73, 88, 88, 131, 132, 144, 145, 145, 146, 147, 148, 149, 149, 154, 157, 158, 159, 159, 159, 159, 159, 159, 160, 161, 162, 163, 164, 167, 167, 168, 169, 170, 171, 172, 172, 174, 175, 176, 177, 178, 179, 180, 180, 180, 181, 182, 184, 185, 186, 187, 188, 189, 189, 190, 191, 192, 192, 192, 192, 193, 194, 195, 196, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 59, 60, 61, 62, 66, 70, 73, 74, 89, 89, 132, 133, 145, 146, 146, 147, 148, 149, 150, 150, 155, 158, 159, 160, 160, 160, 160, 160, 160, 161, 162, 163, 164, 165, 168, 168, 169, 170, 171, 172, 173, 173, 175, 176, 177, 178, 179, 180, 181, 181, 181, 182, 183, 185, 186, 187, 188, 189, 190, 190, 191, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 55, 56, 60, 64, 67, 68, 83, 83, 126, 127, 139, 140, 140, 141, 142, 143, 144, 144, 149, 152, 152, 153, 153, 153, 153, 153, 153, 154, 155, 156, 157, 158, 161, 161, 162, 163, 164, 165, 166, 166, 168, 169, 170, 171, 172, 173, 174, 174, 174, 175, 176, 178, 179, 180, 181, 182, 183, 183, 184, 185, 186, 186, 186, 186, 187, 188, 189, 190, 191, 191, 191, 191, 191, 191, 191, 191, 191, 192, 193, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205],
[0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 12, 13, 14, 15, 16, 17, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 37, 44, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 57, 58, 62, 66, 69, 70, 85, 85, 128, 129, 141, 142, 142, 143, 144, 145, 146, 146, 151, 154, 154, 155, 155, 155, 155, 155, 155, 156, 157, 158, 159, 160, 163, 163, 164, 165, 166, 167, 168, 168, 170, 171, 172, 173, 174, 175, 176, 176, 176, 177, 178, 180, 181, 182, 183, 184, 185, 185, 186, 187, 188, 188, 188, 188, 189, 190, 191, 192, 193, 194, 194, 194, 194, 194, 194, 194, 194, 195, 196, 196, 197, 198, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 25, 25, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 37, 44, 54, 55, 56, 57, 58, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 60, 61, 62, 63, 67, 71, 74, 75, 90, 90, 133, 134, 146, 147, 147, 148, 149, 150, 151, 151, 156, 159, 160, 161, 161, 161, 161, 161, 161, 162, 163, 164, 165, 166, 169, 169, 170, 171, 172, 173, 174, 174, 176, 177, 178, 179, 180, 181, 182, 182, 182, 183, 184, 186, 187, 188, 189, 190, 191, 191, 192, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193],
[0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 11, 12, 13, 14, 15, 16, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 36, 43, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 56, 57, 61, 65, 68, 69, 84, 84, 127, 128, 140, 141, 141, 142, 143, 144, 145, 145, 150, 153, 153, 154, 154, 154, 154, 154, 154, 155, 156, 157, 158, 159, 162, 162, 163, 164, 165, 166, 167, 167, 169, 170, 171, 172, 173, 174, 175, 175, 175, 176, 177, 179, 180, 181, 182, 183, 184, 184, 185, 186, 187, 187, 187, 187, 188, 189, 190, 191, 192, 192, 192, 192, 192, 192, 192, 192, 192, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 184, 185, 186, 186, 186, 186, 186, 186, 186, 186, 186, 187, 188, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 209, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 58, 62, 65, 66, 81, 81, 124, 125, 137, 138, 138, 139, 140, 141, 142, 142, 147, 150, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180],
[0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 12, 13, 14, 15, 16, 17, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 37, 44, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 57, 58, 62, 66, 69, 70, 85, 85, 128, 129, 141, 142, 142, 143, 144, 145, 146, 146, 151, 154, 154, 155, 155, 155, 155, 155, 155, 156, 157, 158, 159, 160, 163, 163, 164, 165, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 9, 10, 11, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 31, 38, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 54, 58, 61, 62, 77, 77, 120, 121, 133, 134, 135, 136, 137, 138, 139, 139, 144, 147, 147, 147, 147, 147, 147, 147, 147, 148, 149, 150, 151, 152, 155, 155, 156, 157, 158, 159, 160, 160, 162, 163, 164, 165, 166, 167, 168, 168, 168, 169, 170, 172, 173, 174, 175, 176, 177, 177, 178, 179, 180, 181, 183, 183, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 62, 77, 77, 120, 121, 133, 134, 134, 135, 136, 137, 138, 138, 143, 146, 146, 147, 147, 147, 147, 147, 147, 148, 149, 150, 151, 152, 155, 155, 156, 157, 158, 159, 160, 160, 162, 163, 164, 165, 166, 167, 168, 168, 168, 169, 170, 172, 173, 174, 175, 176, 177, 177, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 51, 52, 53, 54, 54, 54, 54, 54, 54, 54, 55, 56, 57, 58, 59, 60, 61, 62, 66, 70, 73, 74, 89, 89, 132, 133, 145, 146, 146, 147, 148, 149, 150, 150, 155, 158, 159, 160, 160, 160, 160, 160, 160, 161, 162, 163, 164, 165, 168, 168, 169, 170, 171, 172, 173, 173, 175, 176, 177, 178, 179, 180, 181, 181, 181, 182, 183, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 55, 56, 60, 64, 67, 68, 83, 83, 126, 127, 139, 140, 140, 141, 142, 143, 144, 144, 149, 152, 152, 153, 153, 153, 153, 153, 153, 154, 155, 156, 157, 158, 161, 161, 162, 163, 164, 165, 166, 166, 168, 169, 170, 171, 172, 173, 174, 174, 174, 175, 176, 178, 179, 180, 181, 182, 183, 183, 184, 185, 186, 186, 186, 186, 187, 188, 189, 190, 191, 191, 191, 191, 191, 191, 191, 191, 191, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 55, 56, 60, 64, 67, 68, 83, 83, 126, 127, 139, 140, 140, 141, 142, 143, 144, 144, 149, 152, 152, 153, 153, 153, 153, 153, 153, 154, 155, 156, 157, 158, 161, 161, 162, 163, 164, 165, 166, 166, 168, 169, 170, 171, 172, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 55, 56, 60, 64, 67, 68, 83, 83, 126, 127, 139, 140, 140, 141, 142, 143, 144, 144, 149, 152, 152, 153, 153, 153, 153, 153, 153, 154, 155, 156, 157, 158, 161, 161, 162, 163, 164, 165, 166, 166, 168, 169, 170, 171, 172, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 4, 4, 5, 6, 7, 8, 9, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 29, 36, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 52, 56, 59, 60, 75, 75, 118, 119, 131, 132, 132, 133, 134, 135, 136, 136, 141, 144, 144, 144, 144, 144, 144, 144, 144, 145, 146, 147, 148, 149, 152, 152, 153, 154, 155, 156, 157, 157, 159, 160, 161, 162, 163, 164, 165, 165, 165, 166, 167, 169, 170, 171, 172, 173, 174, 174, 175, 176, 177, 177, 177, 177, 178, 179, 180, 181, 182, 182, 182, 182, 182, 182, 182, 182, 182, 183, 184, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 221, 222, 223, 224, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 58, 62, 65, 66, 81, 81, 124, 125, 137, 138, 138, 139, 140, 141, 142, 142, 147, 150, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 191, 192, 192, 192, 192, 192, 192, 192, 193, 194, 194, 195, 196, 197, 198, 200, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 55, 56, 60, 64, 67, 68, 83, 83, 126, 127, 139, 140, 140, 141, 142, 143, 144, 144, 149, 152, 152, 153, 153, 153, 153, 153, 153, 154, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 52, 53, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 57, 58, 59, 60, 64, 68, 71, 72, 87, 87, 130, 131, 143, 144, 144, 145, 146, 147, 148, 148, 153, 156, 157, 158, 158, 158, 158, 158, 158, 159, 160, 161, 162, 163, 166, 166, 167, 168, 169, 170, 171, 171, 173, 174, 175, 176, 177, 178, 179, 179, 179, 180, 181, 183, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 51, 52, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 56, 57, 58, 59, 60, 64, 68, 71, 72, 87, 87, 130, 131, 143, 144, 144, 145, 146, 147, 148, 148, 153, 156, 157, 158, 158, 158, 158, 158, 158, 159, 160, 161, 162, 163, 166, 166, 167, 168, 169, 170, 171, 171, 173, 174, 175, 176, 177, 178, 179, 179, 179, 180, 181, 183, 184, 185, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 59, 60, 61, 65, 69, 72, 73, 88, 88, 131, 132, 144, 145, 145, 146, 147, 148, 149, 149, 154, 157, 158, 159, 159, 159, 159, 159, 159, 160, 161, 162, 163, 164, 167, 167, 168, 169, 170, 171, 172, 172, 174, 175, 176, 177, 178, 179, 180, 180, 180, 181, 182, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 56, 60, 63, 64, 79, 79, 122, 123, 135, 136, 136, 137, 138, 139, 140, 140, 145, 148, 148, 149, 149, 149, 149, 149, 149, 150, 151, 152, 153, 154, 157, 157, 158, 159, 160, 161, 162, 162, 164, 165, 166, 167, 168, 169, 170, 170, 170, 171, 172, 174, 175, 176, 177, 178, 179, 179, 180, 181, 182, 182, 182, 182, 183, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 10, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 30, 37, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 184, 185, 186, 186, 186, 186, 186, 186, 186, 186, 186, 187, 188, 188, 189, 190, 191, 192, 194, 195, 196, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 59, 60, 61, 62, 66, 70, 73, 74, 89, 89, 132, 133, 145, 146, 146, 147, 148, 149, 150, 150, 155, 158, 159, 160, 160, 160, 160, 160, 160, 161, 162, 163, 164, 165, 168, 168, 169, 170, 171, 172, 173, 173, 175, 176, 177, 178, 179, 180, 181, 181, 181, 182, 183, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187],
[0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 13, 14, 15, 16, 17, 18, 27, 27, 27, 27, 28, 30, 30, 30, 30, 31, 35, 36, 36, 36, 36, 45, 52, 62, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 64, 65, 66, 67, 68, 69, 73, 77, 80, 81, 96, 96, 139, 140, 152, 153, 153, 154, 155, 156, 157, 157, 162, 165, 166, 167, 167, 167, 167, 167, 167, 168, 169, 170, 171, 172, 175, 175, 176, 177, 178, 179, 180, 180, 182, 183, 184, 185, 186, 187, 188, 188, 188, 189, 190, 192, 193, 194, 195, 196, 197, 197, 198, 199, 200, 200, 200, 200, 201, 202, 203, 204, 205, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 235, 236, 237, 238, 239, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 58, 62, 65, 66, 81, 81, 124, 125, 137, 138, 138, 139, 140, 141, 142, 142, 147, 150, 150, 151, 151, 151, 151, 151, 151, 152, 153, 154, 155, 156, 159, 159, 160, 161, 162, 163, 164, 164, 166, 167, 168, 169, 170, 171, 172, 172, 172, 173, 174, 176, 177, 178, 179, 180, 181, 181, 182, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 3, 4, 5, 6, 7, 8, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 28, 35, 45, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 49, 50, 54, 58, 61, 62, 77, 77, 120, 121, 133, 134, 134, 135, 136, 137, 138, 138, 143, 146, 146, 147, 147, 147, 147, 147, 147, 148, 149, 150, 151, 152, 155, 155, 156, 157, 158, 159, 160, 160, 162, 163, 164, 165, 166, 167, 168, 168, 168, 169, 170, 172, 173, 174, 175, 176, 177, 177, 178, 179, 180, 180, 180, 180, 181, 182, 183, 184, 185, 185, 185, 185, 185, 185, 185, 185, 185, 186, 187, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 221, 222, 223, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 209, 210, 211, 212, 213, 214, 215, 215, 216, 217, 218, 220, 224, 224, 224, 224, 224, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 209, 210, 211, 212, 213, 214, 215, 215, 216, 217, 218, 220, 224, 224, 224, 224, 224, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 209, 210, 211, 212, 213, 214, 215, 215, 216, 217, 218, 220, 224, 224, 224, 224, 224, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 56, 60, 63, 64, 79, 79, 122, 123, 135, 136, 136, 137, 138, 139, 140, 140, 145, 148, 148, 149, 149, 149, 149, 149, 149, 150, 151, 152, 153, 154, 157, 157, 158, 159, 160, 161, 162, 162, 164, 165, 166, 167, 168, 169, 170, 170, 170, 171, 172, 174, 175, 176, 177, 178, 179, 179, 180, 181, 182, 182, 182, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 3, 4, 5, 6, 7, 8, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 28, 35, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 48, 49, 53, 57, 60, 61, 76, 76, 119, 120, 132, 133, 133, 134, 135, 136, 137, 137, 142, 145, 145, 146, 146, 146, 146, 146, 146, 147, 148, 149, 150, 151, 154, 154, 155, 156, 157, 158, 159, 159, 161, 162, 163, 164, 165, 166, 167, 167, 167, 168, 169, 171, 172, 173, 174, 175, 176, 176, 177, 178, 179, 179, 179, 179, 180, 181, 182, 183, 184, 184, 184, 184, 184, 184, 184, 184, 184, 185, 186, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 203, 204, 206, 207, 208, 209, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 231, 234, 237, 238, 239, 242, 243, 244, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 55, 56, 57, 61, 65, 68, 69, 84, 84, 127, 128, 140, 141, 141, 142, 143, 144, 145, 145, 150, 153, 153, 154, 154, 154, 154, 154, 154, 155, 156, 157, 158, 159, 162, 162, 163, 164, 165, 166, 167, 167, 169, 170, 171, 172, 173, 174, 175, 175, 175, 176, 177, 179, 180, 181, 182, 183, 184, 184, 185, 186, 187, 187, 187, 187, 188, 189, 190, 191, 192, 192, 192, 192, 192, 192, 192, 192, 192, 193, 194, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213],
[0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 11, 12, 13, 14, 15, 16, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 36, 43, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 5, 6, 7, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 27, 34, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 47, 48, 52, 56, 59, 60, 75, 75, 118, 119, 131, 132, 132, 133, 134, 135, 136, 136, 141, 144, 144, 145, 145, 145, 145, 145, 145, 146, 147, 148, 149, 150, 153, 153, 154, 155, 156, 157, 158, 158, 160, 161, 162, 163, 164, 165, 166, 166, 166, 167, 168, 170, 171, 172, 173, 174, 175, 175, 176, 177, 178, 178, 178, 178, 179, 180, 181, 182, 183, 183, 183, 183, 183, 183, 183, 183, 183, 184, 185, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 10, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 30, 37, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 53, 57, 60, 61, 76, 76, 119, 120, 132, 133, 133, 134, 135, 136, 137, 137, 142, 145, 145, 146, 146, 146, 146, 146, 146, 147, 148, 149, 150, 151, 154, 154, 155, 156, 157, 158, 159, 159, 161, 162, 163, 164, 165, 166, 167, 167, 167, 168, 169, 171, 172, 173, 174, 175, 176, 176, 177, 178, 179, 179, 179, 179, 180, 181, 182, 183, 184, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 60, 61, 65, 69, 72, 73, 88, 88, 131, 132, 144, 145, 145, 146, 147, 148, 149, 149, 154, 157, 158, 159, 159, 159, 159, 159, 159, 160, 161, 162, 163, 164, 167, 167, 168, 169, 170, 171, 172, 172, 174, 175, 176, 177, 178, 179, 180, 180, 180, 181, 182, 184, 185, 186, 187, 188, 189, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 59, 60, 61, 62, 66, 70, 73, 74, 89, 95, 138, 139, 151, 152, 152, 153, 154, 155, 156, 156, 161, 164, 165, 166, 166, 166, 166, 166, 166, 167, 168, 169, 170, 171, 174, 174, 175, 176, 177, 178, 179, 179, 181, 182, 183, 184, 185, 186, 187, 187, 187, 188, 189, 191, 192, 193, 194, 195, 196, 196, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 153, 154, 155, 156, 159, 159, 160, 161, 162, 163, 164, 164, 166, 167, 168, 169, 170, 171, 172, 172, 172, 173, 174, 176, 177, 178, 179, 180, 181, 181, 182, 183, 184, 184, 184, 184, 185, 186, 187, 188, 189, 189, 189, 189, 189, 189, 189, 189, 189, 190, 191, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 55, 56, 60, 64, 67, 68, 83, 83, 126, 127, 139, 140, 140, 141, 142, 143, 144, 144, 149, 152, 152, 153, 153, 153, 153, 153, 153, 154, 155, 156, 157, 158, 161, 161, 162, 163, 164, 165, 166, 166, 168, 169, 170, 171, 172, 173, 174, 174, 174, 175, 176, 178, 179, 180, 181, 182, 183, 183, 184, 185, 186, 186, 186, 186, 187, 188, 189, 190, 191, 191, 191, 191, 191, 191, 191, 191, 191, 192, 193, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 53, 54, 55, 56, 57, 57, 57, 57, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 70, 74, 77, 78, 93, 93, 136, 137, 149, 150, 150, 151, 152, 153, 154, 154, 159, 162, 163, 164, 164, 164, 164, 164, 164, 165, 166, 167, 168, 169, 172, 172, 173, 174, 175, 176, 177, 177, 179, 180, 181, 182, 183, 184, 185, 185, 185, 186, 187, 189, 190, 191, 192, 193, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 57, 58, 58, 58, 58, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 75, 78, 79, 94, 94, 137, 138, 150, 151, 151, 152, 153, 154, 155, 155, 160, 163, 164, 165, 165, 165, 165, 165, 165, 166, 167, 168, 169, 170, 173, 173, 174, 175, 176, 177, 178, 178, 180, 181, 182, 183, 184, 185, 186, 186, 186, 187, 188, 190, 191, 192, 193, 194, 195, 195, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 56, 57, 58, 62, 66, 69, 70, 85, 85, 128, 129, 141, 142, 142, 143, 144, 145, 146, 146, 151, 154, 154, 154, 154, 154, 154, 154, 154, 155, 156, 157, 158, 159, 162, 162, 163, 164, 165, 166, 167, 167, 169, 170, 171, 172, 173, 174, 175, 175, 175, 176, 177, 179, 180, 181, 182, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 56, 60, 63, 64, 79, 79, 122, 123, 135, 136, 136, 137, 138, 139, 140, 140, 145, 148, 148, 149, 149, 149, 149, 149, 149, 150, 151, 152, 153, 154, 157, 157, 158, 159, 160, 161, 162, 162, 164, 165, 166, 167, 168, 169, 170, 170, 170, 171, 172, 174, 175, 176, 177, 178, 179, 179, 180, 181, 182, 182, 182, 182, 183, 184, 185, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 55, 56, 60, 64, 67, 68, 83, 83, 126, 127, 139, 140, 140, 141, 142, 143, 144, 144, 149, 152, 152, 153, 154, 155, 155, 156, 158, 159, 160, 161, 162, 163, 166, 166, 167, 168, 169, 170, 171, 171, 173, 174, 175, 176, 177, 178, 179, 179, 179, 180, 181, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 58, 62, 65, 66, 81, 81, 124, 125, 137, 138, 138, 139, 140, 141, 142, 142, 147, 150, 150, 151, 151, 151, 151, 151, 151, 152, 153, 154, 155, 156, 159, 159, 160, 161, 162, 163, 164, 164, 166, 167, 168, 169, 170, 171, 172, 172, 172, 173, 174, 176, 177, 178, 179, 180, 181, 181, 182, 183, 184, 184, 184, 184, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 147, 147, 147, 147, 147, 147, 148, 149, 150, 151, 152, 155, 155, 156, 157, 158, 159, 160, 160, 162, 163, 164, 165, 166, 167, 168, 168, 168, 169, 170, 172, 173, 174, 175, 176, 177, 177, 178, 179, 180, 180, 180, 180, 181, 182, 183, 184, 185, 185, 185, 185, 185, 185, 185, 185, 185, 186, 187, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 4, 4, 5, 6, 7, 8, 9, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 29, 36, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 49, 50, 54, 58, 61, 62, 77, 77, 120, 121, 133, 134, 134, 135, 136, 137, 138, 138, 143, 146, 146, 147, 147, 147, 147, 147, 147, 148, 149, 150, 151, 152, 155, 155, 156, 157, 158, 159, 160, 160, 162, 163, 164, 165, 166, 167, 168, 168, 168, 169, 170, 172, 173, 174, 175, 176, 177, 177, 178, 179, 180, 180, 180, 180, 181, 182, 183, 184, 185, 185, 185, 185, 185, 185, 185, 185, 185, 186, 187, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 199, 200, 202, 203, 204, 205, 208, 209, 210, 211, 212, 212, 212, 212, 212, 213, 214, 215, 216, 223, 226, 229, 230, 231, 234, 235, 236, 237, 239, 242, 242, 242, 242, 242, 242, 244, 248, 249, 250, 251, 252, 256, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 260, 260, 260, 260, 260, 260, 260, 260],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 22, 29, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 42, 43, 47, 51, 54, 55, 70, 70, 113, 114, 126, 127, 127, 128, 129, 130, 131, 131, 136, 139, 139, 140, 140, 140, 140, 140, 140, 141, 142, 143, 144, 145, 148, 148, 149, 150, 151, 152, 153, 153, 155, 156, 157, 158, 159, 160, 161, 161, 161, 162, 163, 165, 166, 167, 168, 169, 170, 170, 171, 172, 173, 173, 173, 173, 174, 175, 176, 177, 178, 178, 178, 178, 178, 178, 178, 178, 178, 179, 180, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 3, 4, 5, 6, 7, 8, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 28, 35, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 48, 49, 53, 57, 60, 61, 76, 76, 119, 120, 132, 133, 133, 134, 135, 136, 137, 137, 142, 145, 145, 146, 146, 146, 146, 146, 146, 147, 148, 149, 150, 151, 154, 154, 155, 156, 157, 158, 159, 159, 161, 162, 163, 164, 165, 166, 167, 167, 167, 168, 169, 171, 172, 173, 174, 175, 176, 176, 177, 178, 179, 179, 179, 179, 180, 181, 182, 183, 184, 184, 184, 184, 184, 184, 184, 184, 184, 185, 186, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 210, 211, 212, 213, 215, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 4, 4, 5, 6, 7, 8, 9, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 29, 36, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 49, 50, 54, 58, 61, 62, 77, 77, 120, 121, 133, 134, 134, 135, 136, 137, 138, 138, 143, 146, 146, 147, 147, 147, 147, 147, 147, 148, 149, 150, 151, 152, 155, 155, 156, 157, 158, 159, 160, 160, 162, 163, 164, 165, 166, 167, 168, 168, 168, 169, 170, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 184, 184, 184, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 55, 56, 60, 64, 67, 68, 83, 83, 126, 127, 139, 140, 140, 141, 142, 143, 144, 144, 149, 152, 152, 153, 153, 153, 153, 153, 153, 154, 155, 156, 157, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 55, 56, 60, 64, 67, 68, 83, 83, 126, 127, 139, 140, 140, 141, 142, 143, 144, 144, 149, 152, 152, 153, 153, 153, 153, 153, 153, 154, 155, 156, 157, 158, 161, 161, 162, 163, 164, 165, 166, 166, 168, 169, 170, 171, 172, 173, 174, 174, 174, 175, 176, 178, 179, 180, 181, 182, 183, 183, 184, 185, 186, 186, 186, 186, 187, 188, 189, 190, 191, 191, 191, 191, 191, 191, 191, 191, 191, 192, 193, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 55, 56, 57, 58, 59, 63, 67, 70, 71, 86, 86, 129, 130, 142, 143, 143, 144, 145, 146, 147, 147, 152, 155, 156, 157, 157, 157, 157, 157, 157, 158, 159, 160, 161, 162, 165, 165, 166, 167, 168, 169, 170, 170, 172, 173, 174, 175, 176, 177, 178, 178, 178, 179, 180, 182, 183, 184, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 10, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 30, 37, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 53, 54, 55, 56, 57, 57, 57, 57, 57, 57, 58, 59, 60, 61, 62, 63, 64, 65, 69, 73, 76, 77, 92, 92, 135, 136, 148, 149, 149, 150, 151, 152, 153, 153, 158, 161, 162, 163, 163, 163, 163, 163, 163, 164, 165, 166, 167, 168, 171, 171, 172, 173, 174, 175, 176, 176, 178, 179, 180, 181, 182, 183, 184, 184, 184, 185, 186, 188, 189, 190, 191, 192, 193, 193, 194, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 146, 149, 149, 150, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 158, 158, 159, 160, 161, 162, 163, 163, 165, 166, 167, 168, 169, 170, 171, 171, 171, 172, 173, 175, 176, 177, 178, 179, 180, 180, 181, 182, 183, 183, 183, 183, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 53, 54, 58, 62, 65, 66, 81, 81, 124, 125, 137, 138, 138, 139, 140, 141, 142, 142, 147, 150, 150, 151, 151, 151, 151, 151, 151, 152, 153, 154, 155, 156, 159, 159, 160, 161, 162, 163, 164, 164, 166, 167, 168, 169, 170, 171, 172, 172, 172, 173, 174, 176, 177, 178, 179, 180, 181, 181, 182, 183, 184, 184, 184, 184, 185, 186, 187, 188, 189, 189, 189, 189, 189, 189, 189, 189, 189, 190, 191, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201],
[0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 11, 12, 13, 14, 15, 16, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 36, 43, 53, 54, 55, 56, 57, 58, 59, 59, 59, 59, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 76, 79, 80, 95, 95, 138, 139, 151, 152, 152, 153, 154, 155, 156, 156, 161, 164, 165, 166, 166, 166, 166, 166, 166, 167, 168, 169, 170, 171, 174, 174, 175, 176, 177, 178, 179, 179, 181, 182, 183, 184, 185, 186, 187, 187, 187, 188, 189, 191, 192, 193, 194, 195, 196, 196, 197, 198, 199, 199, 199, 199, 200, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 184, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 20, 27, 37, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 40, 41, 45, 49, 52, 53, 68, 68, 111, 112, 124, 125, 125, 126, 127, 128, 129, 129, 134, 137, 137, 138, 138, 138, 138, 138, 138, 139, 140, 141, 142, 143, 146, 146, 147, 148, 149, 150, 151, 151, 153, 154, 155, 156, 157, 158, 159, 159, 159, 160, 161, 163, 164, 165, 166, 167, 168, 168, 169, 170, 171, 171, 171, 171, 172, 173, 174, 175, 176, 176, 176, 176, 176, 176, 176, 176, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 20, 27, 37, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 40, 41, 45, 49, 52, 53, 68, 68, 111, 112, 124, 125, 125, 126, 127, 128, 129, 129, 134, 137, 137, 138, 138, 138, 138, 138, 138, 139, 140, 141, 142, 143, 146, 146, 147, 148, 149, 150, 151, 151, 153, 154, 155, 156, 157, 158, 159, 159, 159, 160, 161, 163, 164, 165, 166, 167, 168, 168, 169, 170, 171, 171, 171, 171, 172, 173, 174, 175, 176, 176, 176, 176, 176, 176, 176, 176, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 55, 56, 60, 64, 67, 68, 83, 83, 126, 127, 139, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 141, 141, 142, 143, 143, 143, 143, 143, 143, 144, 145, 145, 147, 148, 149, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 3, 4, 5, 6, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 26, 33, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 45, 49, 53, 56, 57, 72, 72, 115, 116, 128, 129, 129, 130, 131, 132, 133, 133, 138, 141, 141, 142, 142, 142, 142, 142, 142, 143, 144, 145, 146, 147, 150, 150, 151, 152, 153, 154, 155, 155, 157, 158, 159, 160, 161, 162, 163, 163, 163, 164, 165, 167, 168, 169, 170, 171, 172, 172, 173, 174, 175, 175, 175, 175, 176, 177, 178, 179, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 56, 60, 64, 67, 68, 83, 83, 126, 127, 139, 140, 140, 141, 142, 143, 144, 144, 149, 152, 152, 153, 154, 155, 155, 155, 155, 156, 157, 158, 159, 160, 163, 163, 163, 163, 163, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202],
[0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 12, 13, 14, 15, 16, 17, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 37, 44, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 57, 58, 62, 66, 69, 70, 85, 85, 128, 129, 141, 142, 142, 143, 144, 145, 146, 146, 151, 154, 154, 155, 155, 155, 155, 155, 155, 156, 157, 158, 159, 160, 163, 163, 164, 165, 166, 167, 168, 168, 170, 171, 172, 173, 174, 175, 176, 176, 176, 177, 178, 180, 181, 182, 183, 184, 185, 185, 186, 187, 188, 188, 188, 188, 189, 190, 191, 192, 193, 193, 193, 193, 193, 193, 193, 193, 193, 194, 195, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 215, 215, 215, 215, 215, 215, 215, 216, 218, 222, 223, 223, 223, 225, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 53, 54, 55, 56, 57, 61, 65, 68, 69, 84, 84, 127, 128, 140, 141, 141, 142, 143, 144, 145, 145, 150, 153, 154, 155, 155, 155, 155, 155, 155, 156, 157, 158, 159, 160, 163, 163, 164, 165, 166, 167, 168, 168, 170, 171, 172, 173, 174, 175, 176, 176, 176, 177, 178, 180, 181, 182, 183, 183, 183, 183, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 146, 149, 149, 150, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 158, 158, 159, 160, 161, 162, 163, 163, 165, 166, 167, 168, 169, 170, 171, 171, 171, 172, 173, 175, 176, 177, 178, 179, 180, 180, 181, 182, 183, 183, 183, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 56, 60, 63, 64, 79, 79, 122, 123, 135, 136, 136, 137, 138, 139, 140, 140, 145, 148, 148, 149, 149, 149, 149, 149, 149, 150, 151, 152, 153, 154, 157, 157, 158, 159, 160, 161, 162, 162, 164, 165, 166, 167, 168, 169, 170, 170, 170, 171, 172, 174, 175, 176, 177, 178, 179, 179, 180, 181, 182, 182, 182, 182, 183, 184, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185],
[0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 12, 13, 14, 15, 16, 17, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 29, 30, 31, 40, 47, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 63, 67, 70, 71, 86, 86, 129, 130, 142, 143, 143, 144, 145, 146, 147, 147, 152, 155, 155, 156, 156, 156, 156, 156, 158, 159, 160, 161, 162, 163, 166, 166, 167, 168, 169, 170, 171, 171, 173, 174, 175, 176, 177, 178, 179, 179, 179, 180, 181, 183, 184, 185, 186, 187, 188, 188, 189, 190, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 55, 56, 60, 64, 67, 68, 83, 83, 126, 127, 139, 140, 140, 141, 142, 143, 144, 144, 149, 152, 152, 153, 153, 153, 153, 153, 153, 154, 155, 156, 157, 158, 161, 161, 162, 163, 164, 165, 166, 166, 168, 169, 170, 171, 172, 173, 174, 174, 174, 175, 176, 178, 179, 180, 181, 182, 183, 183, 184, 185, 186, 186, 186, 186, 187, 188, 189, 190, 191, 191, 191, 191, 191, 191, 191, 191, 191, 192, 193, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 227, 227, 227, 227, 227, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 243, 244, 245, 246, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 10, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 30, 37, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 53, 57, 60, 61, 76, 76, 119, 120, 132, 133, 133, 134, 135, 136, 137, 137, 142, 145, 145, 146, 146, 146, 146, 146, 146, 147, 148, 149, 150, 151, 154, 154, 155, 156, 157, 158, 159, 159, 161, 162, 163, 164, 165, 166, 167, 167, 167, 168, 169, 171, 172, 173, 174, 175, 176, 176, 177, 178, 179, 179, 179, 179, 180, 181, 182, 183, 184, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 4, 4, 5, 6, 7, 8, 9, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 29, 36, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 49, 50, 54, 58, 61, 62, 77, 77, 120, 121, 133, 134, 134, 135, 136, 137, 138, 138, 143, 146, 146, 147, 147, 147, 147, 147, 147, 148, 149, 150, 151, 152, 155, 155, 156, 157, 158, 159, 160, 160, 162, 163, 164, 165, 166, 167, 168, 168, 168, 169, 170, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 184, 184, 184, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 10, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 30, 37, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 53, 57, 60, 61, 76, 76, 119, 120, 132, 133, 133, 134, 135, 136, 137, 137, 142, 145, 145, 146, 146, 146, 146, 146, 146, 147, 148, 149, 150, 151, 154, 154, 155, 156, 157, 158, 159, 159, 161, 162, 163, 164, 165, 166, 167, 167, 167, 168, 169, 171, 172, 173, 174, 175, 176, 176, 177, 178, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 181, 182, 183, 183, 183, 183, 183],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 20, 27, 37, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 40, 41, 45, 49, 52, 53, 68, 68, 111, 112, 124, 125, 125, 126, 127, 128, 129, 129, 134, 137, 137, 138, 138, 138, 138, 138, 138, 139, 140, 141, 142, 143, 146, 146, 147, 148, 149, 150, 151, 151, 153, 154, 155, 156, 157, 158, 159, 159, 159, 160, 161, 163, 164, 165, 166, 167, 168, 168, 169, 170, 171, 171, 171, 171, 172, 173, 174, 175, 176, 176, 176, 176, 176, 176, 176, 176, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 10, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 30, 37, 47, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 51, 52, 56, 60, 63, 64, 79, 79, 122, 123, 135, 136, 136, 137, 138, 139, 140, 140, 145, 148, 148, 149, 149, 149, 149, 149, 149, 150, 151, 152, 153, 154, 157, 157, 158, 159, 160, 161, 162, 162, 164, 165, 166, 167, 168, 169, 170, 170, 170, 171, 172, 174, 175, 176, 177, 178, 179, 179, 180, 181, 182, 182, 182, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 188, 189, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 222, 223, 224, 225, 226, 226, 226, 226, 226, 226, 227, 228, 229, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 9, 10, 11, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 31, 38, 48, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 146, 149, 149, 150, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 158, 158, 159, 160, 161, 162, 163, 163, 165, 166, 167, 168, 169, 170, 171, 171, 171, 172, 173, 175, 176, 177, 178, 179, 180, 180, 181, 182, 183, 183, 183, 183, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 189, 190, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 208, 209, 211, 212, 213, 214, 217, 218, 219, 220, 221, 221, 221, 221, 221, 221, 222, 223, 224, 231, 234, 237, 238, 239, 242, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 146, 149, 149, 150, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 158, 158, 159, 160, 161, 162, 163, 163, 165, 166, 167, 168, 169, 170, 171, 171, 171, 172, 173, 175, 176, 177, 178, 179, 180, 180, 181, 182, 183, 183, 183, 183, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 4, 4, 5, 6, 7, 8, 9, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 29, 36, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 52, 56, 59, 60, 75, 75, 118, 119, 131, 132, 132, 133, 134, 135, 136, 136, 141, 144, 144, 145, 145, 145, 145, 145, 145, 146, 147, 148, 149, 150, 153, 153, 154, 155, 156, 157, 158, 158, 160, 161, 162, 163, 164, 165, 166, 166, 166, 167, 168, 170, 171, 172, 173, 174, 175, 175, 176, 177, 178, 178, 178, 178, 179, 180, 181, 182, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 56, 60, 63, 64, 79, 79, 122, 123, 135, 136, 136, 137, 138, 139, 140, 140, 145, 148, 148, 149, 149, 149, 149, 149, 149, 150, 151, 152, 153, 154, 157, 157, 158, 159, 160, 161, 162, 162, 164, 165, 166, 167, 168, 169, 170, 170, 170, 171, 172, 174, 175, 176, 177, 178, 179, 179, 180, 181, 182, 183, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 20, 21, 25, 29, 32, 33, 48, 48, 91, 92, 104, 105, 105, 106, 107, 108, 109, 109, 114, 117, 117, 118, 118, 118, 118, 118, 118, 119, 120, 121, 122, 123, 126, 126, 127, 128, 129, 130, 131, 131, 133, 134, 135, 136, 137, 138, 139, 139, 139, 140, 141, 143, 144, 145, 146, 147, 148, 148, 149, 150, 151, 151, 151, 151, 152, 153, 154, 155, 156, 156, 156, 156, 156, 156, 156, 156, 156, 157, 158, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 55, 56, 57, 61, 65, 68, 69, 84, 84, 127, 128, 140, 141, 141, 142, 143, 144, 145, 145, 150, 153, 153, 154, 154, 154, 154, 154, 154, 155, 156, 157, 158, 159, 162, 162, 163, 164, 165, 166, 167, 167, 169, 170, 171, 172, 173, 174, 175, 175, 175, 176, 177, 179, 180, 181, 182, 183, 184, 184, 185, 186, 187, 187, 187, 187, 188, 189, 190, 191, 192, 192, 192, 192, 192, 192, 192, 192, 192, 193, 194, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 146, 149, 149, 150, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 158, 158, 159, 160, 161, 162, 163, 163, 165, 166, 167, 168, 169, 170, 171, 171, 171, 172, 173, 175, 176, 177, 178, 179, 180, 180, 181, 182, 183, 183, 183, 183, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 3, 4, 5, 6, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 26, 33, 43, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 47, 48, 52, 56, 59, 60, 75, 75, 118, 119, 131, 132, 132, 133, 134, 135, 136, 136, 141, 144, 144, 145, 145, 145, 145, 145, 145, 146, 147, 148, 149, 150, 153, 153, 154, 155, 156, 157, 158, 158, 160, 161, 162, 163, 164, 165, 166, 166, 166, 167, 168, 170, 171, 172, 173, 174, 175, 175, 176, 177, 178, 178, 178, 178, 179, 180, 181, 182, 183, 183, 183, 183, 183, 183, 183, 183, 183, 184, 185, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 205, 206, 207, 209, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 221, 221, 222, 223, 224, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 58, 62, 65, 66, 81, 81, 124, 125, 137, 138, 138, 139, 140, 141, 142, 142, 147, 150, 150, 151, 151, 151, 151, 151, 151, 152, 153, 154, 155, 156, 159, 159, 160, 161, 162, 163, 164, 164, 166, 167, 168, 169, 170, 171, 172, 172, 172, 173, 174, 176, 177, 178, 179, 180, 181, 181, 182, 183, 184, 184, 184, 184, 185, 186, 187, 188, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 23, 30, 40, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 44, 45, 49, 53, 56, 57, 72, 72, 115, 116, 128, 129, 129, 130, 131, 132, 133, 133, 138, 141, 141, 142, 142, 142, 142, 142, 142, 143, 144, 145, 146, 147, 150, 150, 151, 152, 153, 154, 155, 155, 157, 158, 159, 160, 161, 162, 163, 163, 163, 164, 165, 167, 168, 169, 170, 171, 172, 172, 173, 174, 175, 175, 175, 175, 176, 177, 178, 179, 180, 180, 180, 180, 180, 180, 180, 180, 180, 181, 182, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 199, 200, 201, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 215, 215, 216, 217, 218, 219, 226, 229, 232, 233, 234, 237, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 146, 149, 149, 150, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 158, 158, 159, 160, 161, 162, 163, 163, 165, 166, 167, 168, 169, 170, 171, 171, 171, 172, 173, 175, 176, 177, 178, 179, 180, 180, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 57, 58, 58, 58, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 76, 79, 80, 95, 95, 138, 139, 151, 152, 152, 153, 154, 155, 156, 156, 161, 164, 165, 166, 166, 166, 166, 166, 166, 167, 168, 169, 170, 171, 174, 174, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 55, 56, 60, 64, 67, 68, 83, 83, 126, 127, 139, 140, 140, 141, 142, 143, 144, 144, 149, 152, 152, 153, 153, 153, 153, 153, 153, 154, 155, 156, 157, 158, 161, 161, 162, 163, 164, 165, 166, 166, 168, 169, 170, 171, 172, 173, 174, 174, 174, 175, 176, 178, 179, 180, 181, 182, 183, 183, 184, 185, 186, 186, 186, 186, 187, 188, 189, 190, 191, 191, 191, 191, 191, 191, 191, 191, 191, 192, 193, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 146, 149, 149, 150, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 158, 158, 159, 160, 161, 162, 163, 163, 165, 166, 167, 168, 169, 170, 171, 171, 171, 172, 173, 175, 176, 177, 178, 179, 180, 180, 181, 182, 183, 183, 183, 183, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188],
[0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 14, 14, 15, 16, 17, 18, 19, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 39, 46, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 59, 60, 64, 68, 71, 72, 87, 87, 130, 131, 143, 143, 143, 143, 144, 145, 145, 145, 145, 145, 145, 146, 146, 146, 146, 146, 146, 147, 148, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 150, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 4, 4, 5, 6, 7, 8, 9, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 29, 36, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 49, 50, 54, 58, 61, 62, 77, 77, 120, 121, 133, 134, 134, 135, 136, 137, 138, 138, 143, 146, 146, 147, 147, 147, 147, 147, 147, 148, 149, 150, 151, 152, 155, 155, 156, 157, 158, 159, 160, 160, 162, 163, 164, 165, 166, 167, 168, 168, 168, 169, 170, 172, 173, 174, 175, 176, 177, 177, 178, 179, 180, 180, 180, 180, 181, 182, 183, 184, 185, 185, 185, 185, 185, 185, 185, 185, 185, 186, 187, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 199, 200, 202, 203, 204, 205, 208, 209, 210, 211, 212, 212, 212, 212, 212, 212, 213, 214, 215, 222, 225, 228, 229, 230, 233, 234, 235, 236, 238, 241, 241, 241, 241, 241, 241, 243, 247, 248, 249, 250, 251, 255, 257, 259, 263, 264, 266, 266, 266, 266, 266, 267, 269, 271, 271, 271, 271, 271, 271, 271],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 57, 57, 57, 57, 57, 57, 57, 58, 59, 60, 61, 62, 63, 64, 65, 69, 73, 76, 77, 92, 92, 135, 136, 148, 149, 149, 150, 151, 152, 153, 153, 158, 161, 162, 163, 163, 163, 163, 163, 163, 164, 165, 166, 167, 168, 171, 171, 172, 173, 174, 175, 176, 176, 178, 179, 180, 181, 182, 183, 184, 184, 184, 185, 186, 188, 189, 190, 191, 192, 193, 193, 194, 195, 196, 196, 196, 196, 197, 198, 199, 200, 201, 202, 202, 202, 202, 202, 202, 202, 202, 203, 204, 205, 206, 207, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 53, 54, 58, 62, 65, 66, 81, 81, 124, 125, 137, 138, 138, 139, 140, 141, 142, 142, 147, 150, 150, 151, 151, 151, 151, 151, 151, 152, 153, 154, 155, 156, 159, 159, 160, 161, 162, 163, 164, 164, 166, 167, 168, 169, 170, 171, 172, 172, 172, 173, 174, 176, 177, 178, 179, 180, 181, 181, 182, 183, 184, 184, 184, 184, 185, 186, 187, 188, 189, 189, 189, 189, 189, 189, 189, 189, 189, 190, 191, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 203, 204, 206, 207, 208, 209, 212, 213, 214, 215, 216, 216, 216, 216, 216, 216, 216, 216, 217, 224, 227, 230, 231, 232, 235, 236, 237, 238, 240, 243, 243, 243, 243, 243, 243, 245, 249, 250, 251, 252, 253, 257, 259, 261, 265, 266, 268, 270, 272, 275, 276, 277, 279, 281, 281, 281, 281, 288, 288, 288],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 16, 20, 23, 24, 39, 39, 82, 83, 95, 96, 96, 97, 98, 99, 100, 100, 105, 108, 108, 109, 109, 109, 109, 109, 109, 110, 111, 112, 113, 114, 117, 117, 118, 119, 120, 121, 122, 122, 124, 125, 126, 127, 128, 129, 130, 130, 130, 131, 132, 134, 135, 136, 137, 138, 139, 139, 140, 141, 142, 142, 142, 142, 143, 144, 145, 146, 147, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 186, 187, 188, 189, 189, 189, 189, 190, 191, 192, 193, 194, 195, 195, 195, 195, 195, 195, 195, 195, 196, 197, 197, 198, 199, 200, 201, 203, 204, 205, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 23, 30, 40, 41, 42, 43, 44, 45, 46, 46, 46, 46, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 152, 153, 153, 153, 153, 153, 153, 154, 155, 156, 157, 158, 161, 161, 162, 163, 164, 165, 166, 166, 168, 169, 170, 171, 172, 173, 174, 174, 174, 175, 176, 178, 179, 180, 181, 182, 183, 183, 184, 185, 186, 186, 186, 186, 187, 188, 189, 190, 191, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 23, 30, 40, 41, 42, 43, 44, 45, 46, 46, 46, 46, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 152, 153, 153, 153, 153, 153, 153, 154, 155, 156, 157, 158, 161, 161, 162, 163, 164, 165, 166, 166, 168, 169, 170, 171, 172, 173, 174, 174, 174, 175, 176, 178, 179, 180, 181, 182, 183, 183, 184, 185, 186, 186, 186, 186, 187, 188, 189, 190, 191, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 10, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 30, 37, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 53, 57, 60, 61, 76, 76, 119, 120, 132, 133, 133, 134, 135, 136, 137, 137, 142, 145, 145, 146, 146, 146, 146, 146, 146, 147, 148, 149, 150, 151, 154, 154, 155, 156, 157, 158, 159, 159, 161, 162, 163, 164, 165, 166, 167, 167, 167, 168, 169, 171, 172, 173, 174, 175, 176, 176, 177, 178, 179, 179, 179, 179, 180, 181, 182, 183, 184, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 56, 60, 63, 64, 79, 79, 122, 123, 135, 136, 136, 137, 138, 139, 140, 140, 145, 148, 148, 149, 149, 149, 149, 149, 149, 150, 151, 152, 153, 154, 157, 157, 158, 159, 160, 161, 162, 162, 164, 165, 166, 167, 168, 169, 170, 170, 170, 171, 172, 174, 175, 176, 177, 178, 179, 179, 180, 181, 182, 182, 182, 182, 183, 184, 185, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 137, 138, 139, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 9, 10, 11, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 31, 38, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 51, 52, 56, 60, 63, 64, 79, 79, 122, 123, 135, 136, 136, 137, 138, 139, 140, 140, 145, 148, 148, 149, 149, 149, 149, 149, 149, 150, 151, 152, 153, 154, 157, 157, 158, 159, 160, 161, 162, 162, 164, 165, 166, 167, 168, 169, 170, 170, 170, 171, 172, 174, 175, 176, 177, 178, 179, 179, 180, 181, 182, 182, 182, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 188, 189, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 207, 208, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 235, 238, 241, 242, 243, 246, 247, 248, 249, 251, 251, 251, 251, 251, 251, 251, 251, 255, 256, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 56, 60, 63, 64, 79, 79, 122, 123, 135, 136, 136, 137, 138, 139, 140, 140, 145, 148, 148, 149, 149, 149, 149, 149, 149, 150, 151, 152, 153, 154, 157, 157, 158, 159, 160, 161, 162, 162, 164, 165, 166, 167, 168, 169, 170, 170, 170, 171, 172, 174, 175, 176, 177, 178, 179, 179, 180, 181, 182, 182, 182, 182, 183, 184, 185, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 24, 31, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 44, 45, 46, 47, 51, 55, 58, 59, 74, 74, 117, 118, 130, 131, 131, 132, 133, 134, 135, 135, 140, 143, 143, 144, 144, 144, 144, 144, 144, 145, 146, 147, 148, 149, 152, 152, 153, 154, 155, 156, 157, 157, 159, 160, 161, 162, 163, 164, 165, 165, 165, 166, 167, 169, 170, 171, 172, 173, 174, 174, 175, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 184, 185, 186, 186, 186, 186, 186, 186, 186, 186, 186, 187, 188, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 209, 210, 211, 212, 215, 216, 217, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218],
[0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 12, 13, 14, 15, 16, 17, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 37, 44, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 60, 64, 67, 68, 83, 83, 126, 127, 139, 140, 140, 141, 142, 143, 144, 144, 149, 152, 152, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 52, 53, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 57, 58, 59, 60, 64, 68, 71, 72, 87, 87, 130, 131, 143, 144, 144, 145, 146, 147, 148, 148, 153, 156, 157, 158, 158, 158, 158, 158, 158, 159, 160, 161, 162, 163, 166, 166, 167, 168, 169, 170, 171, 171, 173, 174, 175, 176, 177, 178, 179, 179, 179, 180, 181, 183, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 53, 54, 58, 62, 65, 66, 81, 81, 124, 125, 137, 138, 138, 139, 140, 141, 142, 142, 147, 150, 150, 151, 151, 151, 151, 151, 151, 152, 153, 154, 155, 156, 159, 159, 160, 161, 162, 163, 164, 164, 166, 167, 168, 169, 170, 171, 172, 172, 172, 173, 174, 176, 177, 178, 179, 180, 181, 181, 182, 183, 184, 184, 184, 184, 185, 186, 187, 188, 189, 189, 189, 189, 189, 189, 189, 189, 189, 190, 191, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 203, 204, 206, 207, 208, 209, 212, 213, 214, 215, 216, 216, 216, 216, 216, 216, 216, 216, 217, 224, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 57, 57, 57, 57, 57, 57, 57, 57, 58, 59, 60, 61, 62, 63, 64, 68, 72, 75, 76, 91, 91, 134, 135, 147, 148, 148, 149, 150, 151, 152, 152, 157, 160, 161, 162, 162, 162, 162, 162, 162, 163, 164, 165, 166, 167, 170, 170, 171, 172, 173, 174, 175, 175, 177, 178, 179, 180, 181, 182, 183, 183, 183, 184, 185, 187, 188, 189, 190, 191, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 146, 149, 149, 150, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 158, 158, 159, 160, 161, 162, 163, 163, 165, 166, 167, 168, 169, 170, 171, 171, 171, 172, 173, 175, 176, 177, 178, 179, 180, 180, 181, 182, 183, 183, 183, 183, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 189, 190, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 202, 203, 205, 206, 207, 208, 211, 212, 213, 214, 215, 215, 215, 215, 215, 215, 215, 215, 216, 223, 226, 229, 230, 231, 234, 235, 236, 237, 239, 242, 242, 242, 242, 242, 242, 244, 248, 249, 250, 251, 252, 256, 256, 256, 260, 261, 263, 265, 267, 270, 271, 272, 274, 276, 277, 278, 279, 286, 288, 289],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 9, 10, 11, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 31, 38, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 51, 52, 56, 60, 63, 64, 79, 79, 122, 123, 135, 136, 136, 137, 138, 139, 140, 140, 145, 148, 148, 149, 149, 149, 149, 149, 149, 150, 151, 152, 153, 154, 157, 157, 158, 159, 160, 161, 162, 162, 164, 165, 166, 167, 168, 169, 170, 170, 170, 171, 172, 174, 175, 176, 177, 178, 179, 179, 180, 181, 182, 182, 182, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 188, 189, 189, 190, 191, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 4, 4, 5, 6, 7, 8, 9, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 29, 36, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 52, 56, 59, 60, 75, 75, 118, 119, 131, 132, 132, 133, 134, 135, 136, 136, 141, 144, 144, 145, 145, 145, 145, 145, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 159, 161, 162, 163, 164, 165, 166, 167, 167, 167, 168, 169, 171, 172, 173, 174, 175, 176, 176, 177, 178, 179, 179, 179, 179, 180, 181, 182, 183, 184, 185, 186, 186, 186, 186, 186, 186, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 9, 10, 11, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 31, 38, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 51, 52, 56, 60, 63, 64, 79, 79, 122, 123, 135, 136, 136, 137, 138, 139, 140, 140, 145, 148, 148, 149, 149, 149, 149, 149, 149, 150, 151, 152, 153, 154, 157, 157, 158, 159, 160, 161, 162, 162, 164, 165, 166, 167, 168, 169, 170, 170, 170, 171, 172, 174, 175, 176, 177, 178, 179, 179, 180, 181, 182, 182, 182, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 188, 189, 189, 190, 191, 192, 193, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 196, 197, 199, 200, 201, 202, 205, 206, 207, 208, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 210, 210, 212, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 214, 214, 214, 214, 214],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 9, 10, 11, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 31, 38, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 51, 52, 56, 60, 63, 64, 79, 79, 122, 123, 135, 136, 136, 137, 138, 139, 140, 140, 145, 148, 148, 149, 149, 149, 149, 149, 149, 150, 151, 152, 153, 154, 157, 157, 158, 159, 160, 161, 162, 162, 164, 165, 166, 167, 168, 169, 170, 170, 170, 171, 172, 174, 175, 176, 177, 178, 179, 179, 180, 181, 182, 182, 182, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 188, 189, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 201, 202, 204, 205, 206, 207, 210, 211, 212, 213, 214, 214, 214, 214, 214, 214, 215, 216, 217, 224, 227, 230, 231, 232, 235, 236, 237, 238, 240, 243, 243, 243, 243, 243, 243, 245, 249, 250, 251, 252, 252, 256, 258, 260, 264, 264, 264, 264, 264, 264, 264, 264, 266, 268, 268, 268, 268, 275, 277, 277],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 209, 210, 211, 212, 213, 214, 215, 215, 216, 217, 218, 220, 224, 224, 224, 224, 224, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 146, 149, 149, 150, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 158, 158, 159, 160, 161, 162, 163, 163, 165, 166, 167, 168, 169, 170, 171, 171, 171, 172, 173, 175, 176, 177, 178, 179, 180, 180, 181, 182, 183, 183, 183, 183, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 189, 190, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 202, 203, 205, 206, 207, 208, 211, 212, 213, 214, 215, 215, 215, 215, 215, 215, 215, 215, 216, 223, 226, 229, 230, 231, 234, 235, 236, 237, 239, 242, 242, 242, 242, 242, 242, 244, 248, 249, 250, 251, 251, 255, 255, 255, 259, 260, 262, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 4, 4, 5, 6, 7, 8, 9, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 29, 36, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 52, 56, 59, 60, 75, 75, 118, 119, 131, 132, 132, 133, 134, 135, 136, 136, 141, 144, 144, 144, 144, 144, 144, 144, 144, 145, 146, 147, 148, 149, 152, 152, 153, 154, 155, 156, 157, 157, 159, 160, 161, 162, 163, 164, 165, 165, 165, 166, 167, 169, 170, 171, 172, 173, 174, 174, 175, 176, 177, 177, 177, 177, 178, 179, 180, 181, 182, 182, 182, 182, 182, 182, 182, 182, 182, 183, 184, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 4, 4, 5, 6, 7, 8, 9, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 29, 36, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 49, 50, 54, 58, 61, 62, 77, 77, 120, 121, 133, 134, 134, 135, 136, 137, 138, 138, 143, 146, 146, 147, 147, 147, 147, 147, 147, 148, 149, 150, 151, 152, 155, 155, 156, 157, 158, 159, 160, 160, 162, 163, 164, 165, 166, 167, 168, 168, 168, 169, 170, 172, 173, 174, 175, 176, 177, 177, 178, 179, 180, 180, 180, 180, 181, 182, 183, 184, 185, 185, 185, 185, 185, 185, 185, 185, 185, 186, 187, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 10, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 30, 37, 47, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 51, 52, 53, 54, 58, 62, 65, 66, 81, 81, 124, 125, 137, 138, 138, 139, 140, 141, 142, 142, 147, 150, 150, 151, 151, 151, 151, 151, 151, 152, 153, 154, 155, 156, 159, 159, 160, 161, 162, 163, 164, 164, 166, 167, 168, 169, 170, 171, 172, 172, 172, 173, 174, 176, 177, 178, 179, 180, 181, 181, 182, 183, 184, 184, 184, 184, 185, 186, 187, 188, 189, 189, 189, 189, 189, 189, 189, 189, 189, 190, 191, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 209, 210, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 237, 240, 243, 244, 245, 248, 249, 250, 251, 253, 256, 257, 258, 260, 262, 263, 265, 269, 270, 271, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 274, 276, 277, 278, 278, 278, 278, 278],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 57, 58, 58, 58, 58, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 75, 78, 79, 94, 94, 137, 138, 150, 151, 151, 152, 153, 154, 155, 155, 160, 163, 164, 165, 165, 165, 165, 165, 165, 166, 167, 168, 169, 170, 173, 173, 174, 175, 176, 177, 178, 178, 180, 181, 182, 183, 184, 185, 186, 186, 186, 187, 188, 190, 191, 192, 193, 194, 195, 195, 196, 197, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 57, 57, 57, 57, 57, 57, 57, 57, 58, 59, 60, 61, 62, 63, 64, 68, 72, 75, 76, 91, 91, 134, 135, 147, 148, 148, 149, 150, 151, 152, 152, 157, 160, 161, 162, 162, 162, 162, 162, 162, 163, 164, 165, 166, 167, 170, 170, 171, 172, 173, 174, 175, 175, 177, 178, 179, 180, 181, 182, 183, 183, 183, 184, 185, 187, 188, 189, 190, 191, 192, 192, 193, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 52, 53, 54, 55, 56, 60, 64, 67, 68, 83, 83, 126, 127, 139, 140, 140, 141, 142, 143, 144, 144, 149, 152, 152, 153, 154, 154, 154, 154, 154, 155, 156, 157, 158, 159, 162, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 176, 176, 177, 178, 180, 181, 182, 183, 184, 185, 185, 186, 187, 188, 188, 188, 188, 189, 190, 191, 192, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 56, 57, 58, 62, 66, 69, 70, 85, 85, 128, 129, 141, 142, 142, 143, 144, 145, 146, 146, 151, 154, 155, 156, 156, 156, 156, 156, 156, 157, 158, 159, 160, 161, 164, 164, 165, 166, 167, 168, 169, 169, 171, 172, 173, 174, 175, 176, 177, 177, 177, 178, 179, 181, 182, 183, 184, 185, 186, 186, 187, 188, 189, 189, 189, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 57, 58, 58, 58, 58, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 75, 78, 79, 94, 94, 137, 138, 150, 151, 151, 152, 153, 154, 155, 155, 160, 163, 164, 165, 165, 165, 165, 165, 165, 166, 167, 168, 169, 170, 173, 173, 174, 175, 176, 177, 178, 178, 180, 181, 182, 183, 184, 185, 186, 186, 186, 187, 188, 190, 191, 192, 193, 194, 195, 195, 196, 197, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 53, 54, 58, 62, 65, 66, 81, 81, 124, 125, 137, 138, 138, 139, 140, 141, 142, 142, 147, 150, 150, 151, 151, 151, 151, 151, 151, 152, 153, 154, 155, 156, 159, 159, 160, 161, 162, 163, 164, 164, 166, 167, 168, 169, 170, 171, 172, 172, 172, 173, 174, 176, 177, 178, 179, 180, 181, 181, 182, 183, 184, 184, 184, 184, 185, 186, 187, 188, 189, 189, 189, 189, 189, 189, 189, 189, 189, 190, 191, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 203, 204, 206, 207, 208, 209, 212, 213, 214, 215, 216, 216, 216, 216, 216, 216, 216, 216, 217, 224, 227, 230, 231, 232, 235, 236, 237, 238, 240, 243, 243, 243, 243, 243, 243, 245, 249, 250, 251, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 59, 60, 61, 62, 66, 70, 73, 74, 89, 89, 132, 133, 145, 146, 146, 147, 148, 149, 150, 150, 155, 158, 159, 160, 160, 160, 160, 160, 160, 161, 162, 163, 164, 165, 168, 168, 169, 170, 171, 172, 173, 173, 175, 176, 177, 178, 179, 180, 181, 181, 181, 182, 183, 185, 186, 187, 188, 189, 190, 190, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 146, 149, 149, 150, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 158, 158, 159, 160, 161, 162, 163, 163, 165, 166, 167, 168, 169, 170, 171, 171, 171, 172, 173, 175, 176, 177, 178, 179, 180, 180, 181, 182, 183, 183, 183, 183, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 189, 190, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 53, 54, 58, 62, 65, 66, 81, 81, 124, 125, 137, 138, 138, 139, 140, 141, 142, 142, 147, 150, 150, 151, 151, 151, 151, 151, 151, 152, 153, 154, 155, 156, 159, 159, 160, 161, 162, 163, 164, 164, 166, 167, 168, 169, 170, 171, 172, 172, 172, 173, 174, 176, 177, 178, 179, 180, 181, 181, 182, 183, 184, 184, 184, 184, 185, 186, 187, 188, 189, 189, 189, 189, 189, 189, 189, 189, 189, 190, 191, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 209, 210, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 237, 240, 243, 244, 245, 248, 249, 250, 251, 253, 253, 253, 253, 253, 253, 253, 253, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 9, 10, 11, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 31, 38, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 51, 52, 56, 60, 63, 64, 79, 79, 122, 123, 135, 136, 136, 137, 138, 139, 140, 140, 145, 148, 148, 149, 149, 149, 149, 149, 149, 150, 151, 152, 153, 154, 157, 157, 158, 159, 160, 161, 162, 162, 164, 165, 166, 167, 168, 169, 170, 170, 170, 171, 172, 174, 175, 176, 177, 178, 179, 179, 180, 181, 182, 182, 182, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 188, 189, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 207, 208, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 235, 238, 241, 242, 243, 246, 247, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 57, 58, 58, 58, 58, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 75, 78, 79, 94, 94, 137, 138, 150, 151, 151, 152, 153, 154, 155, 155, 160, 163, 164, 165, 165, 165, 165, 165, 165, 166, 167, 168, 169, 170, 173, 173, 174, 175, 176, 177, 178, 178, 180, 181, 182, 183, 184, 185, 186, 186, 186, 187, 188, 190, 191, 192, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 55, 56, 57, 58, 59, 63, 67, 70, 71, 86, 86, 129, 130, 142, 143, 143, 144, 145, 146, 147, 147, 152, 155, 156, 157, 157, 157, 157, 157, 157, 158, 159, 160, 161, 162, 165, 165, 166, 167, 168, 169, 170, 170, 172, 173, 174, 175, 176, 177, 178, 178, 178, 179, 180, 182, 183, 184, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185],
[0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 11, 12, 13, 14, 15, 16, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 36, 43, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 56, 57, 61, 65, 68, 69, 84, 84, 127, 128, 140, 141, 141, 142, 143, 144, 145, 145, 150, 153, 153, 154, 154, 154, 154, 154, 154, 155, 156, 157, 158, 159, 162, 162, 163, 164, 165, 166, 167, 167, 169, 170, 171, 172, 173, 174, 175, 175, 175, 176, 177, 179, 180, 181, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 209, 210, 211, 212, 213, 214, 215, 215, 216, 217, 218, 220, 224, 224, 224, 224, 224, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240],
[0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 11, 12, 13, 14, 15, 16, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 36, 43, 53, 54, 55, 56, 57, 58, 58, 58, 58, 58, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 75, 78, 79, 94, 94, 137, 138, 150, 151, 151, 152, 153, 154, 155, 155, 160, 163, 164, 165, 165, 165, 165, 165, 165, 166, 167, 168, 169, 170, 173, 173, 174, 175, 176, 177, 178, 178, 180, 181, 182, 183, 184, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 53, 54, 55, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 58, 59, 60, 61, 65, 69, 72, 73, 88, 88, 131, 132, 144, 145, 145, 146, 147, 148, 149, 149, 154, 157, 158, 159, 159, 159, 159, 159, 159, 160, 161, 162, 163, 164, 167, 167, 168, 169, 170, 171, 172, 172, 174, 175, 176, 177, 178, 179, 180, 180, 180, 181, 182, 184, 185, 186, 187, 188, 189, 189, 190, 191, 192, 192, 192, 192, 193, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 57, 57, 57, 57, 57, 57, 57, 58, 59, 60, 61, 62, 63, 64, 65, 69, 73, 76, 77, 92, 92, 135, 136, 148, 149, 149, 150, 151, 152, 153, 153, 158, 161, 162, 163, 163, 163, 163, 163, 163, 164, 165, 166, 167, 168, 171, 171, 172, 173, 174, 175, 176, 176, 178, 179, 180, 181, 182, 183, 184, 184, 184, 185, 186, 188, 189, 190, 191, 192, 193, 193, 194, 195, 196, 196, 196, 196, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 25, 32, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 44, 45, 46, 50, 54, 57, 58, 73, 73, 116, 117, 129, 130, 130, 131, 132, 133, 134, 134, 139, 142, 142, 143, 143, 143, 143, 143, 143, 144, 145, 146, 147, 148, 151, 151, 152, 153, 154, 155, 156, 156, 158, 159, 160, 161, 162, 163, 164, 164, 164, 165, 166, 168, 169, 170, 171, 172, 173, 173, 174, 175, 176, 176, 176, 176, 177, 178, 179, 180, 181, 181, 181, 181, 181, 181, 181, 181, 181, 182, 183, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 24, 31, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 44, 45, 49, 53, 56, 57, 72, 72, 115, 116, 128, 129, 129, 130, 131, 132, 133, 133, 138, 141, 141, 142, 142, 142, 142, 142, 142, 143, 144, 145, 146, 147, 150, 150, 151, 152, 153, 154, 155, 155, 157, 158, 159, 160, 161, 162, 163, 163, 163, 164, 165, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 56, 60, 63, 64, 79, 79, 122, 123, 135, 136, 136, 137, 138, 139, 140, 140, 145, 148, 148, 149, 149, 149, 149, 149, 149, 150, 151, 152, 153, 154, 157, 157, 158, 159, 160, 161, 162, 162, 164, 165, 166, 167, 168, 169, 170, 170, 170, 171, 172, 174, 175, 176, 177, 178, 179, 179, 180, 181, 182, 182, 182, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 20, 27, 37, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 40, 41, 45, 49, 52, 53, 68, 68, 111, 112, 124, 125, 125, 126, 127, 128, 129, 129, 134, 137, 137, 138, 138, 138, 138, 138, 138, 139, 140, 141, 142, 143, 146, 146, 147, 148, 149, 150, 151, 151, 153, 154, 155, 156, 157, 158, 159, 159, 159, 160, 161, 163, 164, 165, 166, 167, 168, 168, 169, 170, 171, 171, 171, 171, 172, 173, 174, 175, 176, 176, 176, 176, 176, 176, 176, 176, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 190, 191, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 56, 60, 63, 64, 79, 79, 122, 123, 135, 136, 136, 137, 138, 139, 140, 140, 145, 148, 148, 149, 149, 149, 149, 149, 149, 150, 151, 152, 153, 154, 157, 157, 158, 159, 160, 161, 162, 162, 164, 165, 166, 167, 168, 169, 170, 170, 170, 171, 172, 174, 175, 176, 177, 178, 179, 179, 180, 181, 182, 182, 182, 182, 183, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 209, 210, 211, 212, 213, 214, 215, 215, 216, 217, 218, 220, 224, 224, 224, 224, 224, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 240, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 58, 59, 60, 61, 65, 69, 72, 73, 88, 88, 131, 132, 144, 145, 145, 146, 147, 148, 149, 149, 154, 157, 158, 159, 159, 159, 159, 159, 159, 160, 161, 162, 163, 164, 167, 167, 168, 169, 170, 171, 172, 172, 174, 175, 176, 177, 178, 179, 180, 180, 180, 181, 182, 184, 185, 186, 187, 188, 189, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 55, 56, 60, 64, 67, 68, 83, 83, 126, 127, 139, 140, 140, 141, 142, 143, 144, 144, 149, 152, 152, 153, 153, 153, 153, 153, 153, 154, 155, 156, 157, 158, 161, 161, 162, 163, 164, 165, 166, 166, 168, 169, 170, 171, 172, 173, 174, 174, 174, 175, 176, 178, 179, 180, 181, 182, 183, 183, 184, 185, 186, 186, 186, 186, 187, 188, 189, 190, 191, 191, 191, 191, 191, 191, 191, 191, 191, 192, 193, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 211, 212, 214, 215, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 9, 10, 11, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 31, 38, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 54, 58, 61, 62, 77, 77, 120, 121, 133, 134, 134, 135, 136, 137, 138, 138, 143, 146, 146, 147, 147, 147, 147, 147, 147, 148, 149, 150, 151, 152, 155, 155, 156, 157, 158, 159, 160, 160, 162, 163, 164, 165, 166, 167, 168, 168, 168, 169, 170, 172, 173, 174, 175, 176, 177, 177, 178, 179, 180, 180, 180, 180, 181, 182, 183, 184, 185, 185, 185, 185, 185, 185, 185, 185, 185, 186, 187, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 208, 209, 210, 211, 214, 215, 216, 217, 218, 219, 220, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 55, 56, 57, 58, 59, 63, 67, 70, 71, 86, 86, 129, 130, 142, 143, 143, 144, 145, 146, 147, 147, 152, 155, 156, 157, 157, 157, 157, 157, 157, 158, 159, 160, 161, 162, 165, 165, 166, 167, 168, 169, 170, 170, 172, 173, 174, 175, 176, 177, 178, 178, 178, 179, 180, 182, 183, 184, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 10, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 30, 37, 47, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 51, 52, 56, 60, 63, 64, 79, 79, 122, 123, 135, 136, 136, 137, 138, 139, 140, 140, 145, 148, 148, 149, 149, 149, 149, 149, 149, 150, 151, 152, 153, 154, 157, 157, 158, 159, 160, 161, 162, 162, 164, 165, 166, 167, 168, 169, 170, 170, 170, 171, 172, 174, 175, 176, 177, 178, 179, 179, 180, 181, 182, 182, 182, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 188, 189, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 240, 243, 246, 247, 248, 251, 252, 253, 254, 256, 256, 256, 256, 256, 256, 256, 256, 260, 261, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 57, 58, 58, 58, 58, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 75, 78, 79, 94, 94, 137, 138, 150, 151, 151, 152, 153, 154, 155, 155, 160, 163, 164, 165, 165, 165, 165, 165, 165, 166, 167, 168, 169, 170, 173, 173, 174, 175, 176, 177, 178, 178, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 55, 56, 60, 64, 67, 68, 83, 83, 126, 127, 139, 140, 140, 141, 142, 143, 144, 144, 149, 152, 152, 153, 153, 153, 153, 153, 153, 154, 155, 156, 157, 158, 161, 161, 162, 163, 164, 165, 166, 166, 168, 169, 170, 171, 172, 173, 174, 174, 174, 175, 176, 178, 179, 180, 181, 182, 183, 183, 184, 185, 186, 186, 186, 186, 187, 188, 189, 190, 191, 191, 191, 191, 191, 191, 191, 191, 191, 192, 193, 193, 194, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195],
[0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 12, 13, 14, 15, 16, 17, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 37, 44, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 57, 58, 62, 66, 69, 70, 85, 85, 128, 129, 141, 142, 142, 143, 144, 145, 146, 146, 151, 154, 154, 155, 155, 155, 155, 155, 155, 156, 157, 158, 159, 160, 163, 163, 164, 165, 166, 167, 168, 168, 170, 171, 172, 173, 174, 175, 176, 176, 176, 177, 178, 180, 181, 182, 183, 184, 185, 185, 186, 187, 188, 188, 188, 188, 189, 190, 191, 192, 193, 193, 193, 193, 193, 193, 193, 193, 193, 194, 195, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 216, 217, 218, 221, 222, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 184, 185, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 146, 149, 149, 150, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 158, 158, 159, 160, 161, 162, 163, 163, 165, 166, 167, 168, 169, 170, 171, 171, 171, 172, 173, 175, 176, 177, 178, 179, 180, 180, 181, 182, 183, 183, 183, 183, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 209, 210, 211, 212, 213, 214, 215, 215, 216, 217, 218, 220, 224, 224, 224, 224, 224, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 240, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 53, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 57, 58, 59, 60, 64, 68, 71, 72, 87, 87, 130, 131, 143, 144, 144, 145, 146, 147, 148, 148, 153, 156, 157, 158, 158, 158, 158, 158, 158, 159, 160, 161, 162, 163, 166, 166, 167, 168, 169, 170, 171, 171, 173, 174, 175, 176, 177, 178, 179, 179, 179, 180, 181, 183, 184, 185, 186, 187, 188, 188, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 9, 10, 11, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 31, 38, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 54, 58, 61, 62, 77, 77, 120, 121, 133, 134, 134, 135, 136, 137, 138, 138, 143, 146, 146, 147, 147, 147, 147, 147, 147, 148, 149, 150, 151, 152, 155, 155, 156, 157, 158, 159, 160, 160, 162, 163, 164, 165, 166, 167, 168, 168, 168, 169, 170, 172, 173, 174, 175, 176, 177, 177, 178, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179],
[0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 11, 12, 13, 14, 15, 16, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 36, 43, 53, 54, 55, 56, 57, 58, 58, 58, 58, 58, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 75, 78, 79, 94, 94, 137, 138, 150, 151, 151, 152, 153, 154, 155, 155, 160, 163, 164, 165, 165, 165, 165, 165, 165, 166, 167, 168, 169, 170, 173, 173, 174, 175, 176, 177, 178, 178, 180, 181, 182, 183, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 56, 60, 63, 64, 79, 79, 122, 123, 135, 136, 136, 137, 138, 139, 140, 140, 145, 148, 148, 149, 149, 149, 149, 149, 149, 150, 151, 152, 153, 154, 157, 157, 158, 159, 160, 161, 162, 162, 164, 165, 166, 167, 168, 169, 170, 170, 170, 171, 172, 174, 175, 176, 177, 178, 179, 179, 180, 181, 182, 182, 182, 182, 183, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 58, 62, 65, 66, 81, 81, 124, 125, 137, 138, 138, 139, 140, 141, 142, 142, 147, 150, 150, 151, 151, 151, 151, 151, 151, 152, 153, 154, 155, 156, 159, 159, 160, 161, 162, 163, 164, 164, 166, 167, 168, 169, 170, 171, 172, 172, 172, 173, 174, 176, 177, 178, 179, 180, 181, 181, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 10, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 30, 37, 47, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 51, 52, 56, 60, 63, 64, 79, 79, 122, 123, 135, 136, 136, 137, 138, 139, 140, 140, 145, 148, 148, 149, 149, 149, 149, 149, 149, 150, 151, 152, 153, 154, 157, 157, 158, 159, 160, 161, 162, 162, 164, 165, 166, 167, 168, 169, 170, 170, 170, 171, 172, 174, 175, 176, 177, 178, 179, 179, 180, 181, 182, 182, 182, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 188, 189, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 240, 243, 246, 247, 248, 251, 252, 253, 254, 256, 256, 256, 256, 256, 256, 256, 256, 260, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 56, 60, 63, 64, 79, 79, 122, 123, 135, 136, 136, 137, 138, 139, 140, 140, 145, 148, 148, 149, 149, 149, 149, 149, 149, 150, 151, 152, 153, 154, 157, 157, 158, 159, 160, 161, 162, 162, 164, 165, 166, 167, 168, 169, 170, 170, 170, 171, 172, 174, 175, 176, 177, 178, 179, 179, 180, 181, 182, 182, 182, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 53, 54, 58, 62, 65, 66, 81, 81, 124, 125, 137, 138, 138, 139, 140, 141, 142, 142, 147, 150, 150, 151, 151, 151, 151, 151, 151, 152, 153, 154, 155, 156, 159, 159, 160, 161, 162, 163, 164, 164, 166, 167, 168, 169, 170, 171, 172, 172, 172, 173, 174, 176, 177, 178, 179, 180, 181, 181, 182, 183, 184, 184, 184, 184, 185, 186, 187, 188, 189, 189, 189, 189, 189, 189, 189, 189, 189, 190, 191, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 203, 204, 206, 207, 208, 209, 212, 213, 214, 215, 216, 216, 216, 216, 216, 216, 216, 216, 217, 224, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 21, 28, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 44, 48, 51, 52, 67, 67, 110, 111, 123, 124, 124, 125, 126, 127, 128, 128, 133, 136, 136, 137, 137, 137, 137, 137, 137, 138, 139, 140, 141, 142, 145, 145, 146, 147, 148, 149, 150, 150, 152, 153, 154, 155, 156, 157, 158, 158, 158, 159, 160, 162, 163, 164, 165, 166, 167, 167, 168, 169, 170, 170, 170, 170, 171, 172, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 24, 31, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 47, 51, 54, 55, 70, 70, 113, 114, 126, 127, 127, 128, 129, 130, 131, 131, 136, 139, 139, 140, 140, 140, 140, 140, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 154, 156, 157, 158, 159, 160, 161, 162, 162, 162, 163, 164, 166, 167, 168, 169, 170, 171, 171, 172, 173, 174, 174, 174, 174, 175, 176, 177, 178, 179, 180, 181, 181, 181, 181, 181, 181, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 58, 62, 65, 66, 81, 81, 124, 125, 137, 138, 138, 139, 140, 141, 142, 142, 147, 150, 150, 151, 151, 151, 151, 151, 151, 152, 153, 154, 155, 156, 159, 159, 160, 161, 162, 163, 164, 164, 166, 167, 168, 169, 170, 171, 172, 172, 172, 173, 174, 176, 177, 178, 179, 180, 181, 181, 182, 183, 184, 184, 184, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 4, 4, 5, 6, 7, 8, 9, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 29, 36, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 52, 56, 59, 60, 75, 75, 118, 119, 131, 132, 132, 133, 134, 135, 136, 136, 141, 144, 144, 144, 144, 144, 144, 144, 144, 145, 146, 147, 148, 149, 152, 152, 153, 154, 155, 156, 157, 157, 159, 160, 161, 162, 163, 164, 165, 165, 165, 166, 167, 169, 170, 171, 172, 173, 174, 174, 175, 176, 177, 177, 177, 177, 178, 179, 180, 181, 182, 182, 182, 182, 182, 182, 182, 182, 182, 183, 184, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 227, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 10, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 30, 37, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 184, 185, 186, 186, 186, 186, 186, 186, 186, 186, 187, 188, 189, 189, 190, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 58, 62, 65, 66, 81, 81, 124, 125, 137, 138, 138, 139, 140, 141, 142, 142, 147, 150, 150, 151, 151, 151, 151, 151, 151, 152, 153, 154, 155, 156, 159, 159, 160, 161, 162, 163, 164, 164, 166, 167, 168, 169, 170, 171, 172, 172, 172, 173, 174, 176, 177, 178, 179, 180, 181, 181, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 3, 4, 5, 6, 7, 8, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 28, 35, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 51, 55, 58, 59, 74, 74, 117, 118, 130, 131, 131, 132, 133, 134, 135, 135, 140, 143, 143, 144, 144, 144, 144, 144, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 158, 160, 161, 162, 163, 164, 165, 166, 166, 166, 167, 168, 170, 171, 172, 173, 174, 175, 175, 176, 177, 178, 178, 178, 178, 179, 180, 181, 182, 183, 184, 185, 185, 185, 185, 185, 185, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 55, 56, 57, 61, 65, 68, 69, 84, 84, 127, 128, 140, 141, 141, 142, 143, 144, 145, 145, 150, 153, 153, 154, 154, 154, 154, 154, 154, 155, 156, 157, 158, 159, 162, 162, 163, 164, 165, 166, 167, 167, 169, 170, 171, 172, 173, 174, 175, 175, 175, 176, 177, 179, 180, 181, 182, 183, 184, 184, 185, 186, 187, 187, 187, 187, 188, 189, 190, 191, 192, 192, 192, 192, 192, 192, 192, 192, 192, 193, 194, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213],
[0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 13, 13, 14, 15, 16, 17, 18, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 38, 45, 55, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 59, 60, 61, 62, 63, 67, 71, 74, 75, 90, 90, 133, 134, 146, 147, 147, 148, 149, 150, 151, 151, 156, 159, 159, 160, 160, 160, 160, 160, 160, 161, 162, 163, 164, 165, 168, 168, 169, 170, 171, 172, 173, 173, 175, 176, 177, 178, 179, 180, 181, 181, 181, 182, 183, 185, 186, 187, 188, 189, 190, 190, 191, 192, 193, 193, 193, 193, 194, 195, 196, 197, 198, 198, 198, 198, 198, 198, 198, 198, 198, 199, 200, 200, 201, 202, 203, 204, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 59, 60, 61, 62, 63, 67, 71, 74, 75, 90, 90, 133, 134, 146, 147, 147, 148, 149, 150, 151, 151, 156, 159, 160, 161, 161, 161, 161, 161, 161, 162, 163, 164, 165, 166, 169, 169, 170, 171, 172, 173, 174, 174, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 55, 56, 60, 64, 67, 68, 83, 83, 126, 127, 139, 140, 140, 141, 142, 143, 144, 144, 149, 152, 152, 153, 153, 153, 153, 153, 153, 154, 155, 156, 157, 158, 161, 161, 162, 163, 164, 165, 166, 166, 168, 169, 170, 171, 172, 173, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 146, 149, 149, 150, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 158, 158, 159, 160, 161, 162, 163, 163, 165, 166, 167, 168, 169, 170, 171, 171, 171, 172, 173, 175, 176, 177, 178, 179, 180, 180, 181, 182, 183, 183, 183, 183, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 189, 190, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 202, 203, 205, 206, 207, 208, 211, 212, 213, 214, 215, 215, 215, 215, 215, 215, 215, 215, 216, 223, 226, 229, 230, 231, 234, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 53, 54, 58, 62, 65, 66, 81, 81, 124, 125, 137, 138, 138, 139, 140, 141, 142, 142, 147, 150, 150, 151, 151, 151, 151, 151, 151, 152, 153, 154, 155, 156, 159, 159, 160, 161, 162, 163, 164, 164, 166, 167, 168, 169, 170, 171, 172, 172, 172, 173, 174, 176, 177, 178, 179, 180, 181, 181, 182, 183, 184, 184, 184, 184, 185, 186, 187, 188, 189, 189, 189, 189, 189, 189, 189, 189, 189, 190, 191, 191, 192, 193, 194, 195, 197, 198, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 5, 6, 7, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 27, 34, 44, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 48, 52, 56, 59, 60, 75, 75, 118, 119, 131, 132, 132, 133, 134, 135, 136, 136, 141, 144, 144, 145, 145, 145, 145, 145, 145, 146, 147, 148, 149, 150, 153, 153, 154, 155, 156, 157, 158, 158, 160, 161, 162, 163, 164, 165, 166, 166, 166, 167, 168, 170, 171, 172, 173, 174, 175, 175, 176, 177, 178, 178, 178, 178, 179, 180, 181, 182, 183, 183, 183, 183, 183, 183, 183, 183, 183, 184, 185, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 222, 222, 222, 222, 222, 223, 224, 231, 234, 237, 238, 239, 242, 243, 244, 245, 247, 247, 247, 247, 247, 247, 247, 247, 251, 252, 253, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 255, 256, 256, 256, 256, 256],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 146, 149, 149, 150, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 158, 158, 159, 160, 161, 162, 163, 163, 165, 166, 167, 168, 169, 170, 171, 171, 171, 172, 173, 175, 176, 177, 178, 179, 180, 180, 181, 182, 183, 183, 183, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206],
[0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 12, 13, 14, 15, 16, 17, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 35, 42, 52, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 56, 57, 58, 59, 60, 64, 68, 71, 72, 87, 87, 130, 131, 143, 144, 144, 145, 146, 147, 148, 148, 153, 156, 156, 157, 157, 157, 157, 157, 157, 158, 159, 160, 161, 162, 165, 165, 166, 167, 168, 169, 170, 170, 172, 173, 174, 175, 176, 177, 178, 178, 178, 179, 180, 182, 183, 184, 185, 186, 187, 187, 188, 189, 190, 190, 190, 190, 191, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 184, 185, 186, 186, 186, 186, 186, 186, 186, 186, 186, 187, 188, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 209, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 146, 149, 149, 150, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 158, 158, 159, 160, 161, 162, 163, 163, 165, 166, 167, 168, 169, 170, 171, 171, 171, 172, 173, 175, 176, 177, 178, 179, 180, 180, 181, 182, 183, 183, 183, 183, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 146, 149, 149, 150, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 158, 158, 159, 160, 161, 162, 163, 163, 165, 166, 167, 168, 169, 170, 171, 171, 171, 172, 173, 175, 176, 177, 178, 179, 180, 180, 181, 182, 183, 183, 183, 183, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 58, 62, 65, 66, 81, 81, 124, 125, 137, 138, 138, 139, 140, 141, 142, 142, 147, 150, 150, 151, 151, 151, 151, 151, 151, 152, 153, 154, 155, 156, 159, 159, 160, 161, 162, 163, 164, 164, 166, 167, 168, 169, 170, 171, 172, 172, 172, 173, 174, 176, 177, 178, 179, 180, 181, 181, 182, 183, 184, 184, 184, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 146, 149, 149, 150, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 158, 158, 159, 160, 161, 162, 163, 163, 165, 166, 167, 168, 169, 170, 171, 171, 171, 172, 173, 175, 176, 177, 178, 179, 180, 180, 181, 182, 183, 183, 183, 183, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 189, 190, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 202, 203, 205, 206, 207, 208, 211, 212, 213, 214, 215, 215, 215, 215, 215, 215, 216, 217, 218, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225],
[0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 12, 13, 14, 15, 16, 17, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 37, 44, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 57, 58, 62, 66, 69, 70, 85, 85, 128, 129, 141, 142, 142, 143, 144, 145, 146, 146, 151, 154, 154, 155, 155, 155, 155, 155, 155, 156, 157, 158, 159, 160, 163, 163, 164, 165, 166, 167, 168, 168, 170, 171, 172, 173, 174, 175, 176, 176, 176, 177, 178, 180, 181, 182, 183, 184, 185, 185, 186, 187, 188, 188, 188, 188, 189, 190, 191, 192, 193, 193, 193, 193, 193, 193, 193, 193, 193, 194, 195, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 216, 217, 218, 221, 222, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 146, 149, 149, 150, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 158, 158, 159, 160, 161, 162, 163, 163, 165, 166, 167, 168, 169, 170, 171, 171, 171, 172, 173, 175, 176, 177, 178, 179, 180, 180, 181, 182, 183, 183, 183, 183, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 10, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 30, 37, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 53, 57, 60, 61, 76, 76, 119, 120, 132, 133, 133, 134, 135, 136, 137, 137, 142, 145, 145, 146, 146, 146, 146, 146, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 160, 162, 163, 164, 165, 166, 167, 168, 168, 168, 169, 170, 172, 173, 174, 175, 176, 177, 177, 178, 179, 180, 180, 180, 180, 181, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 59, 60, 61, 62, 63, 67, 71, 74, 75, 90, 90, 133, 134, 146, 147, 147, 148, 149, 150, 151, 151, 156, 159, 160, 161, 161, 161, 161, 161, 161, 162, 163, 164, 165, 166, 169, 169, 170, 171, 172, 173, 174, 174, 176, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177],
[0, 2, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 21, 21, 22, 23, 24, 25, 26, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 46, 53, 63, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 65, 66, 67, 71, 75, 78, 79, 94, 94, 137, 138, 150, 151, 151, 152, 153, 154, 155, 155, 160, 163, 163, 163, 163, 163, 163, 163, 163, 164, 165, 166, 167, 168, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171],
[0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 11, 12, 13, 14, 15, 16, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 36, 43, 53, 54, 55, 56, 57, 58, 58, 58, 58, 58, 58, 58, 59, 60, 61, 62, 63, 64, 65, 66, 70, 74, 77, 78, 93, 93, 136, 137, 149, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 151, 152, 152, 152, 153, 154, 154, 154, 154, 154, 154, 155, 155, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156],
[0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 11, 12, 13, 14, 15, 16, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 36, 43, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 56, 57, 61, 65, 68, 69, 84, 84, 127, 128, 140, 141, 141, 142, 143, 144, 145, 145, 150, 153, 153, 154, 154, 154, 154, 154, 154, 155, 156, 157, 158, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159],
[0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 12, 13, 14, 15, 16, 17, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 37, 44, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 57, 58, 62, 66, 69, 70, 85, 85, 128, 129, 141, 142, 142, 143, 144, 145, 146, 146, 151, 154, 154, 155, 155, 155, 155, 155, 155, 156, 157, 158, 159, 160, 163, 163, 164, 165, 166, 167, 168, 168, 170, 171, 172, 173, 174, 175, 176, 176, 176, 177, 178, 180, 181, 182, 183, 184, 185, 185, 186, 187, 188, 188, 188, 188, 189, 190, 191, 192, 193, 193, 193, 193, 193, 193, 193, 193, 193, 194, 195, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 56, 57, 58, 62, 66, 69, 70, 85, 85, 128, 129, 141, 142, 142, 143, 144, 145, 146, 146, 151, 154, 155, 156, 156, 156, 156, 156, 156, 157, 158, 159, 160, 161, 164, 164, 165, 166, 167, 168, 169, 169, 171, 172, 173, 174, 175, 176, 177, 177, 177, 178, 179, 181, 182, 183, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 22, 29, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 42, 43, 47, 51, 54, 55, 70, 70, 113, 114, 126, 127, 127, 128, 129, 130, 131, 131, 136, 139, 139, 140, 140, 140, 140, 140, 140, 141, 142, 143, 144, 145, 148, 148, 149, 150, 151, 152, 153, 153, 155, 156, 157, 158, 159, 160, 161, 161, 161, 162, 163, 165, 166, 167, 168, 169, 170, 170, 171, 172, 173, 173, 173, 173, 174, 175, 176, 177, 178, 178, 178, 178, 178, 178, 178, 178, 178, 179, 180, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203],
[0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 14, 14, 15, 16, 17, 18, 19, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 39, 46, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 59, 60, 64, 68, 71, 72, 87, 87, 130, 131, 143, 144, 144, 145, 146, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 52, 53, 54, 55, 56, 56, 56, 56, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 69, 73, 76, 77, 92, 92, 135, 136, 148, 149, 149, 150, 151, 152, 153, 153, 158, 161, 162, 163, 163, 163, 163, 163, 163, 164, 165, 166, 167, 168, 171, 171, 172, 173, 174, 175, 176, 176, 178, 179, 180, 181, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 146, 149, 150, 151, 151, 151, 151, 151, 151, 152, 153, 154, 155, 156, 159, 159, 160, 161, 162, 163, 164, 164, 166, 167, 168, 169, 170, 171, 172, 172, 172, 173, 174, 176, 177, 178, 179, 180, 181, 181, 182, 183, 184, 184, 184, 184, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 56, 57, 58, 62, 66, 69, 70, 85, 85, 128, 129, 141, 142, 142, 143, 144, 145, 146, 146, 151, 154, 155, 156, 156, 156, 156, 156, 156, 157, 158, 159, 160, 161, 164, 164, 165, 166, 167, 168, 169, 169, 171, 172, 173, 174, 175, 176, 177, 177, 177, 178, 179, 181, 182, 183, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 9, 10, 11, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 31, 38, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 51, 52, 56, 60, 63, 64, 79, 79, 122, 123, 135, 136, 136, 137, 138, 139, 140, 140, 145, 148, 148, 149, 149, 149, 149, 149, 149, 150, 151, 152, 153, 154, 157, 157, 158, 159, 160, 161, 162, 162, 164, 165, 166, 167, 168, 169, 170, 170, 170, 171, 172, 174, 175, 176, 177, 178, 179, 179, 180, 181, 182, 182, 182, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 188, 189, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 207, 208, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 235, 238, 241, 242, 243, 246, 247, 248, 249, 251, 251, 251, 251, 251, 251, 251, 251, 255, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 184, 185, 186, 186, 186, 186, 186, 186, 186, 186, 186, 187, 188, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 209, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 9, 10, 11, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 31, 38, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 54, 58, 61, 62, 77, 77, 120, 121, 133, 134, 134, 135, 136, 137, 138, 138, 143, 146, 146, 146, 146, 146, 146, 146, 146, 147, 148, 149, 150, 151, 154, 154, 155, 156, 157, 158, 159, 159, 161, 162, 163, 164, 165, 166, 167, 167, 167, 168, 169, 171, 172, 173, 174, 175, 176, 176, 177, 178, 179, 179, 179, 179, 180, 181, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 4, 4, 5, 6, 7, 8, 9, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 29, 36, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 49, 50, 54, 58, 61, 62, 77, 77, 120, 121, 133, 134, 134, 135, 136, 137, 138, 138, 143, 146, 146, 147, 147, 147, 147, 147, 147, 148, 149, 150, 151, 152, 155, 155, 156, 157, 158, 159, 160, 160, 162, 163, 164, 165, 166, 167, 168, 168, 168, 169, 170, 172, 173, 174, 175, 176, 177, 177, 178, 179, 180, 180, 180, 180, 181, 182, 183, 184, 185, 185, 185, 185, 185, 185, 185, 185, 185, 186, 187, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 199, 200, 202, 203, 204, 205, 208, 209, 210, 211, 212, 212, 212, 212, 212, 213, 214, 215, 216, 223, 226, 229, 230, 231, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 57, 61, 64, 65, 80, 80, 123, 124, 136, 137, 137, 138, 139, 140, 141, 141, 146, 149, 149, 150, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 158, 158, 159, 160, 161, 162, 163, 163, 165, 166, 167, 168, 169, 170, 171, 171, 171, 172, 173, 175, 176, 177, 178, 179, 180, 180, 181, 182, 183, 183, 183, 183, 184, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 189, 190, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 210, 211, 212, 214, 215, 216, 217, 220, 221, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 52, 53, 54, 55, 56, 56, 56, 56, 56, 56, 57, 58, 59, 60, 61, 62, 63, 64, 68, 72, 75, 76, 91, 91, 134, 135, 147, 148, 148, 149, 150, 151, 152, 152, 157, 160, 161, 162, 162, 162, 162, 162, 162, 163, 164, 165, 166, 167, 170, 170, 171, 172, 173, 174, 175, 175, 177, 178, 179, 180, 181, 182, 183, 183, 183, 184, 185, 187, 188, 189, 190, 191, 192, 192, 193, 194, 195, 195, 195, 195, 196, 197, 198, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 32, 39, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 52, 53, 54, 55, 55, 55, 55, 55, 55, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 71, 74, 75, 90, 90, 133, 134, 146, 147, 147, 148, 149, 150, 151, 151, 156, 159, 160, 161, 161, 161, 161, 161, 161, 162, 163, 164, 165, 166, 169, 169, 170, 171, 172, 173, 174, 174, 176, 177, 178, 179, 180, 181, 182, 182, 182, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 58, 62, 65, 66, 81, 81, 124, 125, 137, 138, 138, 139, 140, 141, 142, 142, 147, 150, 150, 151, 151, 151, 151, 151, 151, 152, 153, 154, 155, 156, 159, 159, 160, 161, 162, 163, 164, 164, 166, 167, 168, 169, 170, 171, 172, 172, 172, 173, 174, 176, 177, 178, 179, 180, 181, 181, 182, 183, 184, 184, 184, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 53, 54, 58, 62, 65, 66, 81, 81, 124, 125, 137, 138, 138, 139, 140, 141, 142, 142, 147, 150, 150, 151, 151, 151, 151, 151, 151, 152, 153, 154, 155, 156, 159, 159, 160, 161, 162, 163, 164, 164, 166, 167, 168, 169, 170, 171, 172, 172, 172, 173, 174, 176, 177, 178, 179, 180, 181, 181, 182, 183, 184, 184, 184, 184, 185, 186, 187, 188, 189, 189, 189, 189, 189, 189, 189, 189, 189, 190, 191, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 203, 204, 206, 207, 208, 209, 212, 213, 214, 215, 216, 216, 216, 216, 216, 216, 216, 216, 217, 224, 227, 230, 231, 232, 235, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 52, 53, 54, 55, 55, 55, 55, 55, 55, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 71, 74, 75, 90, 90, 133, 134, 146, 147, 147, 148, 149, 150, 151, 151, 156, 159, 160, 161, 161, 161, 161, 161, 161, 162, 163, 164, 165, 166, 169, 169, 170, 171, 172, 173, 174, 174, 176, 177, 178, 179, 180, 181, 182, 182, 182, 183, 184, 186, 187, 188, 189, 190, 191, 191, 192, 193, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 57, 58, 58, 58, 58, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 75, 78, 79, 94, 94, 137, 138, 150, 151, 151, 152, 153, 154, 155, 155, 160, 163, 164, 165, 165, 165, 165, 165, 165, 166, 167, 168, 169, 170, 173, 173, 174, 175, 176, 177, 178, 178, 180, 181, 182, 183, 184, 185, 186, 186, 186, 187, 188, 190, 191, 192, 193, 194, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 52, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 56, 57, 61, 65, 68, 69, 84, 84, 127, 128, 140, 141, 141, 142, 143, 144, 145, 145, 150, 153, 154, 155, 155, 155, 155, 155, 155, 156, 157, 158, 159, 160, 163, 163, 164, 165, 166, 167, 168, 168, 170, 171, 172, 173, 174, 175, 176, 176, 176, 177, 178, 180, 181, 182, 183, 184, 185, 185, 186, 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 58, 62, 65, 66, 81, 81, 124, 125, 137, 138, 138, 139, 140, 141, 142, 142, 147, 150, 150, 151, 151, 151, 151, 151, 151, 152, 153, 154, 155, 156, 159, 159, 160, 161, 162, 163, 164, 164, 166, 167, 168, 169, 170, 171, 172, 172, 172, 173, 174, 176, 177, 178, 179, 180, 181, 181, 182, 183, 184, 184, 184, 184, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 59, 60, 61, 62, 66, 70, 73, 74, 89, 89, 132, 133, 145, 146, 146, 147, 148, 149, 150, 150, 155, 158, 159, 160, 160, 160, 160, 160, 160, 161, 162, 163, 164, 165, 168, 168, 169, 170, 171, 172, 173, 173, 175, 176, 177, 178, 179, 180, 181, 181, 181, 182, 183, 185, 186, 187, 188, 189, 190, 190, 191, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192],
[0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 11, 12, 13, 14, 15, 16, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 36, 43, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 57, 58, 58, 58, 58, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 75, 78, 79, 94, 94, 137, 138, 150, 151, 151, 152, 153, 154, 155, 155, 160, 163, 164, 165, 165, 165, 165, 165, 165, 166, 167, 168, 169, 170, 173, 173, 174, 175, 176, 177, 178, 178, 180, 181, 182, 183, 184, 185, 186, 186, 186, 187, 188, 190, 191, 192, 193, 194, 195, 195, 196, 197, 198, 198, 198, 198, 199, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 57, 57, 57, 57, 57, 57, 57, 58, 59, 60, 61, 62, 63, 64, 65, 69, 73, 76, 77, 92, 92, 135, 136, 148, 149, 149, 150, 151, 152, 153, 153, 158, 161, 162, 163, 163, 163, 163, 163, 163, 164, 165, 166, 167, 168, 171, 171, 172, 173, 174, 175, 176, 176, 178, 179, 180, 181, 182, 183, 184, 184, 184, 185, 186, 188, 189, 190, 191, 192, 193, 193, 194, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 10, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 30, 37, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 178, 182, 183, 184, 186, 187, 188, 189, 190, 191, 191, 192, 193, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 57, 58, 58, 58, 58, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 75, 78, 79, 94, 94, 137, 138, 150, 151, 151, 152, 153, 154, 155, 155, 160, 163, 164, 165, 165, 165, 165, 165, 165, 166, 167, 168, 169, 170, 173, 173, 174, 175, 176, 177, 178, 178, 180, 181, 182, 183, 184, 185, 186, 186, 186, 187, 188, 190, 191, 192, 193, 194, 195, 195, 196, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 26, 26, 26, 27, 28, 28, 29, 29, 29, 29, 38, 45, 55, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 58, 59, 60, 61, 62, 66, 70, 73, 74, 89, 89, 132, 133, 145, 146, 146, 147, 148, 149, 150, 150, 155, 158, 159, 160, 160, 160, 160, 160, 160, 161, 162, 163, 164, 165, 168, 168, 169, 170, 171, 172, 173, 173, 175, 176, 177, 178, 179, 180, 181, 181, 181, 182, 183, 185, 186, 187, 188, 189, 190, 190, 191, 192, 193, 193, 193, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 244, 245, 247, 255, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 4, 4, 5, 6, 7, 8, 9, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 29, 36, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 49, 50, 54, 58, 61, 62, 77, 77, 120, 121, 133, 134, 134, 135, 136, 137, 138, 138, 143, 146, 146, 147, 147, 147, 147, 147, 147, 148, 149, 150, 151, 152, 155, 155, 156, 157, 158, 159, 160, 160, 162, 163, 164, 165, 166, 167, 168, 168, 168, 169, 170, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 184, 184, 184, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 3, 4, 5, 6, 7, 8, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 28, 35, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 48, 49, 50, 54, 58, 61, 62, 77, 77, 120, 121, 133, 134, 134, 135, 136, 137, 138, 138, 143, 146, 146, 147, 148, 149, 149, 149, 149, 150, 151, 152, 153, 154, 157, 157, 157, 157, 157, 158, 159, 159, 161, 162, 163, 164, 165, 166, 167, 167, 167, 168, 169, 171, 172, 173, 174, 175, 176, 176, 177, 178, 179, 179, 179, 179, 180, 181, 182, 183, 184, 184, 184, 184, 184, 184, 184, 184, 184, 185, 186, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 27, 31, 32, 33, 34, 38, 39, 39, 39, 39, 48, 55, 65, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 67, 68, 69, 70, 71, 72, 76, 80, 83, 84, 99, 99, 142, 143, 155, 156, 156, 157, 158, 159, 160, 160, 165, 168, 169, 170, 170, 170, 170, 170, 170, 171, 172, 173, 174, 175, 178, 178, 179, 180, 181, 182, 183, 183, 185, 186, 187, 188, 189, 190, 191, 191, 191, 192, 193, 195, 196, 197, 198, 199, 200, 200, 201, 202, 203, 203, 203, 203, 204, 205, 206, 207, 208, 209, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 232, 233, 234, 236, 237, 238, 239, 242, 243, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 14, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 34, 41, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 54, 55, 59, 63, 66, 67, 82, 82, 125, 126, 138, 139, 139, 140, 141, 142, 143, 143, 148, 151, 151, 152, 152, 152, 152, 152, 152, 153, 154, 155, 156, 157, 160, 160, 161, 162, 163, 164, 165, 165, 167, 168, 169, 170, 171, 172, 173, 173, 173, 174, 175, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 185, 185, 186, 187, 188, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 10, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 30, 37, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 50, 51, 55, 59, 62, 63, 78, 78, 121, 122, 134, 135, 135, 136, 137, 138, 139, 139, 144, 147, 147, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 156, 156, 157, 158, 159, 160, 161, 161, 163, 164, 165, 166, 167, 168, 169, 169, 169, 170, 171, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 181, 181, 182, 183, 184, 185, 186, 186, 186, 186, 186, 186, 186, 186, 186, 187, 188, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 212, 213, 214, 215, 215, 215, 215, 215, 215, 217, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 233, 234, 235, 236, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 55, 56, 60, 64, 67, 68, 83, 83, 126, 127, 139, 140, 140, 141, 142, 143, 144, 144, 149, 152, 152, 153, 153, 153, 153, 153, 153, 154, 155, 156, 157, 158, 161, 161, 162, 163, 164, 165, 166, 166, 168, 169, 170, 171, 172, 173, 174, 174, 174, 175, 176, 178, 179, 180, 181, 182, 183, 183, 184, 185, 186, 186, 186, 186, 187, 188, 189, 190, 191, 191, 191, 191, 191, 191, 191, 191, 191, 192, 193, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 3, 4, 5, 6, 7, 8, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 28, 35, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 48, 49, 53, 57, 60, 61, 76, 76, 119, 120, 132, 133, 133, 134, 135, 136, 137, 137, 142, 145, 145, 146, 146, 146, 146, 146, 146, 147, 148, 149, 150, 151, 154, 154, 155, 156, 157, 158, 159, 159, 161, 162, 163, 164, 165, 166, 167, 167, 167, 168, 169, 171, 172, 173, 174, 175, 176, 176, 177, 178, 179, 179, 179, 179, 180, 181, 182, 183, 184, 184, 184, 184, 184, 184, 184, 184, 184, 185, 186, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 54, 55, 56, 57, 58, 59, 79, 79, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 96, 99, 100, 115, 115, 158, 159, 171, 172, 172, 173, 174, 175, 176, 176, 181, 184, 184, 185, 186, 187, 187, 188, 190, 191, 192, 193, 194, 195, 198, 198, 199, 200, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10, 11, 12, 13, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 33, 40, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 56, 60, 63, 64, 79, 79, 122, 123, 135, 136, 136, 137, 138, 139, 140, 140, 145, 148, 148, 149, 149, 149, 149, 149, 149, 150, 151, 152, 153, 154, 157, 157, 158, 159, 160, 161, 162, 162, 164, 165, 166, 167, 168, 169, 170, 170, 170, 171, 172, 174, 175, 176, 177, 178, 179, 179, 180, 181, 182, 182, 182, 182, 183, 184, 185, 186, 187, 187, 187, 187, 187, 187, 187, 187, 187, 188, 189, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 209, 210, 213, 214, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 13, 14, 15, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 35, 42, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 55, 56, 60, 64, 67, 68, 83, 83, 126, 127, 139, 140, 140, 141, 142, 143, 144, 144, 149, 152, 152, 153, 153, 153, 153, 153, 153, 154, 155, 156, 157, 158, 161, 161, 162, 163, 164, 165, 166, 166, 168, 169, 170, 171, 172, 173, 174, 174, 174, 175, 176, 178, 179, 180, 181, 182, 183, 183, 184, 185, 186, 186, 186, 186, 187, 188, 189, 190, 191, 191, 191, 191, 191, 191, 191, 191, 191, 192, 193, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 204, 206, 210, 210, 210, 210, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 226, 227, 228, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229],
]
            )
        )
        )

if __name__ == "__main__":
    runner = unittest.TextTestRunner(verbosity=2)
    unittest.main(testRunner=runner)
