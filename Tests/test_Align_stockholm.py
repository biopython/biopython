# Copyright 2008 by Peter Cock.  All rights reserved.
# This code is part of the Biopython distribution and governed by its
# license.  Please see the LICENSE file that should have been included
# as part of this package.
"""Tests for Align.stockholm module."""
import unittest

from Bio.Align import stockholm


try:
    import numpy
except ImportError:
    from Bio import MissingPythonDependencyError

    raise MissingPythonDependencyError(
        "Install numpy if you want to use Bio.Align.stockholm."
    ) from None


class TestAlignIO_reading(unittest.TestCase):

    def test_reading_alignments_globins45(self):
        """Test parsing hmmalign output."""
        # File generated by running
        # hmmalign -o globins45.ali globins4.hmm globins45.fa
        # in the HMMER 3.3.2 tutorial
        path = "Stockholm/globins45.ali"
        with open(path) as stream:
            alignments = stockholm.AlignmentIterator(path)
            alignment = next(alignments)
            self.assertRaises(StopIteration, next, alignments)
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates,
                numpy.array(
[[0, 0, 0, 1, 5, 17, 19, 46, 47, 50, 51, 55, 78, 78, 79, 80, 146, 147, 148, 153],
 [0, 1, 1, 1, 5, 17, 19, 46, 47, 50, 51, 55, 78, 78, 79, 80, 146, 147, 148, 153],
 [0, 1, 1, 1, 5, 17, 19, 46, 47, 50, 51, 55, 78, 78, 79, 80, 146, 147, 148, 153],
 [0, 1, 1, 1, 5, 17, 19, 46, 47, 50, 51, 55, 78, 78, 79, 80, 146, 147, 148, 153],
 [0, 1, 1, 1, 5, 17, 19, 46, 47, 50, 51, 55, 78, 78, 79, 80, 146, 147, 148, 153],
 [0, 1, 1, 1, 5, 17, 19, 46, 47, 50, 51, 55, 78, 78, 79, 80, 146, 147, 148, 153],
 [0, 1, 1, 1, 1, 13, 15, 42, 43, 46, 46, 50, 73, 73, 74, 75, 141, 142, 143, 148],
 [0, 0, 0, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 0, 0, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 0, 0, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 0, 0, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 0, 0, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 0, 0, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 0, 0, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 0, 0, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 0, 0, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 0, 0, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 0, 0, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 0, 0, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 0, 0, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 0, 0, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 0, 0, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 1, 1, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 1, 1, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 1, 1, 1, 5, 17, 19, 46, 46, 49, 49, 49, 72, 73, 74, 74, 140, 141, 141, 141],
 [0, 1, 1, 1, 5, 17, 19, 46, 47, 50, 50, 50, 73, 74, 75, 75, 141, 142, 142, 142],
 [0, 0, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 0, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 0, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 0, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 0, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 1, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 0, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 0, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 0, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 0, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 0, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 0, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 0, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 1, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 1, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 1, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 1, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 145, 146, 146],
 [0, 1, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 146, 146, 146],
 [0, 0, 1, 2, 6, 18, 18, 45, 46, 49, 50, 54, 77, 78, 79, 79, 145, 145, 145, 145],
]
                ),
            )
        )
        self.assertEqual(alignment.sequences[0].id, "MYG_ESCGI")
        self.assertEqual(alignment.sequences[0].seq, "VLSDAEWQLVLNIWAKVEADVAGHGQDILIRLFKGHPETLEKFDKFKHLKTEAEMKASEDLKKHGNTVLTALGGILKKKGHHEAELKPLAQSHATKHKIPIKYLEFISDAIIHVLHSRHPGDFGADAQAAMNKALELFRKDIAAKYKelgfqg")
        self.assertEqual(alignment.sequences[0].letter_annotations['posterior_probability'], "69****************************************************************************99******************************************************************7******")
        self.assertEqual(alignment.sequences[1].id, "MYG_HORSE")
        self.assertEqual(alignment.sequences[1].seq, "gLSDGEWQQVLNVWGKVEADIAGHGQEVLIRLFTGHPETLEKFDKFKHLKTEAEMKASEDLKKHGTVVLTALGGILKKKGHHEAELKPLAQSHATKHKIPIKYLEFISDAIIHVLHSKHPGNFGADAQGAMTKALELFRNDIAAKYKelgfqg")
        self.assertEqual(alignment.sequences[1].letter_annotations['posterior_probability'], "889***************************************************************************99******************************************************************7******")
        self.assertEqual(alignment.sequences[2].id, "MYG_PROGU")
        self.assertEqual(alignment.sequences[2].seq, "gLSDGEWQLVLNVWGKVEGDLSGHGQEVLIRLFKGHPETLEKFDKFKHLKAEDEMRASEELKKHGTTVLTALGGILKKKGQHAAELAPLAQSHATKHKIPVKYLEFISEAIIQVLQSKHPGDFGADAQGAMSKALELFRNDIAAKYKelgfqg")
        self.assertEqual(alignment.sequences[2].letter_annotations['posterior_probability'], "889***************************************************************************99******************************************************************7******")
        self.assertEqual(alignment.sequences[3].id, "MYG_SAISC")
        self.assertEqual(alignment.sequences[3].seq, "gLSDGEWQLVLNIWGKVEADIPSHGQEVLISLFKGHPETLEKFDKFKHLKSEDEMKASEELKKHGTTVLTALGGILKKKGQHEAELKPLAQSHATKHKIPVKYLELISDAIVHVLQKKHPGDFGADAQGAMKKALELFRNDMAAKYKelgfqg")
        self.assertEqual(alignment.sequences[3].letter_annotations['posterior_probability'], "889***************************************************************************99******************************************************************7******")
        self.assertEqual(alignment.sequences[4].id, "MYG_LYCPI")
        self.assertEqual(alignment.sequences[4].seq, "gLSDGEWQIVLNIWGKVETDLAGHGQEVLIRLFKNHPETLDKFDKFKHLKTEDEMKGSEDLKKHGNTVLTALGGILKKKGHHEAELKPLAQSHATKHKIPVKYLEFISDAIIQVLQNKHSGDFHADTEAAMKKALELFRNDIAAKYKelgfqg")
        self.assertEqual(alignment.sequences[4].letter_annotations['posterior_probability'], "889***************************************************************************99******************************************************************7******")
        self.assertEqual(alignment.sequences[5].id, "MYG_MOUSE")
        self.assertEqual(alignment.sequences[5].seq, "gLSDGEWQLVLNVWGKVEADLAGHGQEVLIGLFKTHPETLDKFDKFKNLKSEEDMKGSEDLKKHGCTVLTALGTILKKKGQHAAEIQPLAQSHATKHKIPVKYLEFISEIIIEVLKKRHSGDFGADAQGAMSKALELFRNDIAAKYKelgfqg")
        self.assertEqual(alignment.sequences[5].letter_annotations['posterior_probability'], "889***************************************************************************99******************************************************************7******")
        self.assertEqual(alignment.sequences[6].id, "MYG_MUSAN")
        self.assertEqual(alignment.sequences[6].seq, "vDWEKVNSVWSAVESDLTAIGQNILLRLFEQYPESQNHFPKFKNKSLGELKDTADIKAQADTVLSALGNIVKKKGSHSQPVKALAATHITTHKIPPHYFTKITTIAVDVLSEMYPSEMNAQVQAAFSGAFKIICSDIEKEYKaanfqg")
        self.assertEqual(alignment.sequences[6].letter_annotations['posterior_probability'], "789***************************************987789*************************99****************************************************************997******")
        self.assertEqual(alignment.sequences[7].id, "HBA_AILME")
        self.assertEqual(alignment.sequences[7].seq, "VLSPADKTNVKATWDKIGGHAGEYGGEALERTFASFPTTKTYFPHFDLSPGSAQVKAHGKKVADALTTAVGHLDDLPGALSALSDLHAHKLRVDPVNFKLLSHCLLVTLASHHPAEFTPAVHASLDKFFSAVSTVLTSKYR")
        self.assertEqual(alignment.sequences[7].letter_annotations['posterior_probability'], "69********************************************9**9***********************9******************************************************************7")
        self.assertEqual(alignment.sequences[8].id, "HBA_PROLO")
        self.assertEqual(alignment.sequences[8].seq, "VLSPADKANIKATWDKIGGHAGEYGGEALERTFASFPTTKTYFPHFDLSPGSAQVKAHGKKVADALTLAVGHLDDLPGALSALSDLHAYKLRVDPVNFKLLSHCLLVTLACHHPAEFTPAVHASLDKFFTSVSTVLTSKYR")
        self.assertEqual(alignment.sequences[8].letter_annotations['posterior_probability'], "69********************************************9**9***********************9******************************************************************7")
        self.assertEqual(alignment.sequences[9].id, "HBA_PAGLA")
        self.assertEqual(alignment.sequences[9].seq, "VLSSADKNNIKATWDKIGSHAGEYGAEALERTFISFPTTKTYFPHFDLSHGSAQVKAHGKKVADALTLAVGHLEDLPNALSALSDLHAYKLRVDPVNFKLLSHCLLVTLACHHPAEFTPAVHSALDKFFSAVSTVLTSKYR")
        self.assertEqual(alignment.sequences[9].letter_annotations['posterior_probability'], "69**********************************************************************989*****************************************************************7")
        self.assertEqual(alignment.sequences[10].id, "HBA_MACFA")
        self.assertEqual(alignment.sequences[10].seq, "VLSPADKTNVKAAWGKVGGHAGEYGAEALERMFLSFPTTKTYFPHFDLSHGSAQVKGHGKKVADALTLAVGHVDDMPQALSALSDLHAHKLRVDPVNFKLLSHCLLVTLAAHLPAEFTPAVHASLDKFLASVSTVLTSKYR")
        self.assertEqual(alignment.sequences[10].letter_annotations['posterior_probability'], "69***********************************************************************9******************************************************************7")
        self.assertEqual(alignment.sequences[11].id, "HBA_MACSI")
        self.assertEqual(alignment.sequences[11].seq, "VLSPADKTNVKDAWGKVGGHAGEYGAEALERMFLSFPTTKTYFPHFDLSHGSAQVKGHGKKVADALTLAVGHVDDMPQALSALSDLHAHKLRVDPVNFKLLSHCLLVTLAAHLPAEFTPAVHASLDKFLASVSTVLTSKYR")
        self.assertEqual(alignment.sequences[11].letter_annotations['posterior_probability'], "69***********************************************************************9******************************************************************7")
        self.assertEqual(alignment.sequences[12].id, "HBA_PONPY")
        self.assertEqual(alignment.sequences[12].seq, "VLSPADKTNVKTAWGKVGAHAGDYGAEALERMFLSFPTTKTYFPHFDLSHGSAQVKDHGKKVADALTNAVAHVDDMPNALSALSDLHAHKLRVDPVNFKLLSHCLLVTLAAHLPAEFTPAVHASLDKFLASVSTVLTSKYR")
        self.assertEqual(alignment.sequences[12].letter_annotations['posterior_probability'], "69***********************************************************************9******************************************************************7")
        self.assertEqual(alignment.sequences[13].id, "HBA2_GALCR")
        self.assertEqual(alignment.sequences[13].seq, "VLSPTDKSNVKAAWEKVGAHAGDYGAEALERMFLSFPTTKTYFPHFDLSHGSTQVKGHGKKVADALTNAVLHVDDMPSALSALSDLHAHKLRVDPVNFKLLRHCLLVTLACHHPAEFTPAVHASLDKFMASVSTVLTSKYR")
        self.assertEqual(alignment.sequences[13].letter_annotations['posterior_probability'], "69***********************************************************************9******************************************************************7")
        self.assertEqual(alignment.sequences[14].id, "HBA_MESAU")
        self.assertEqual(alignment.sequences[14].seq, "VLSAKDKTNISEAWGKIGGHAGEYGAEALERMFFVYPTTKTYFPHFDVSHGSAQVKGHGKKVADALTNAVGHLDDLPGALSALSDLHAHKLRVDPVNFKLLSHCLLVTLANHHPADFTPAVHASLDKFFASVSTVLTSKYR")
        self.assertEqual(alignment.sequences[14].letter_annotations['posterior_probability'], "69********************************************888************************9******************************************************************7")
        self.assertEqual(alignment.sequences[15].id, "HBA2_BOSMU")
        self.assertEqual(alignment.sequences[15].seq, "VLSAADKGNVKAAWGKVGGHAAEYGAEALERMFLSFPTTKTYFPHFDLSHGSAQVKGHGAKVAAALTKAVGHLDDLPGALSELSDLHAHKLRVDPVNFKLLSHSLLVTLASHLPSDFTPAVHASLDKFLANVSTVLTSKYR")
        self.assertEqual(alignment.sequences[15].letter_annotations['posterior_probability'], "69***********************************************************************9******************************************************************7")
        self.assertEqual(alignment.sequences[16].id, "HBA_ERIEU")
        self.assertEqual(alignment.sequences[16].seq, "VLSATDKANVKTFWGKLGGHGGEYGGEALDRMFQAHPTTKTYFPHFDLNPGSAQVKGHGKKVADALTTAVNNLDDVPGALSALSDLHAHKLRVDPVNFKLLSHCLLVTLALHHPADFTPAVHASLDKFLATVATVLTSKYR")
        self.assertEqual(alignment.sequences[16].letter_annotations['posterior_probability'], "69********************************************9999***********************99*****************************************************************7")
        self.assertEqual(alignment.sequences[17].id, "HBA_FRAPO")
        self.assertEqual(alignment.sequences[17].seq, "VLSAADKNNVKGIFGKISSHAEDYGAEALERMFITYPSTKTYFPHFDLSHGSAQVKGHGKKVVAALIEAANHIDDIAGTLSKLSDLHAHKLRVDPVNFKLLGQCFLVVVAIHHPSALTPEVHASLDKFLCAVGNVLTAKYR")
        self.assertEqual(alignment.sequences[17].letter_annotations['posterior_probability'], "69***********************************************************************99*****************************************************************7")
        self.assertEqual(alignment.sequences[18].id, "HBA_PHACO")
        self.assertEqual(alignment.sequences[18].seq, "VLSAADKNNVKGIFTKIAGHAEEYGAEALERMFITYPSTKTYFPHFDLSHGSAQIKGHGKKVVAALIEAVNHIDDITGTLSKLSDLHAHKLRVDPVNFKLLGQCFLVVVAIHHPSALTPEVHASLDKFLCAVGTVLTAKYR")
        self.assertEqual(alignment.sequences[18].letter_annotations['posterior_probability'], "69***********************************************************************99*****************************************************************7")
        self.assertEqual(alignment.sequences[19].id, "HBA_TRIOC")
        self.assertEqual(alignment.sequences[19].seq, "VLSANDKTNVKTVFTKITGHAEDYGAETLERMFITYPPTKTYFPHFDLHHGSAQIKAHGKKVVGALIEAVNHIDDIAGALSKLSDLHAQKLRVDPVNFKLLGQCFLVVVAIHHPSVLTPEVHASLDKFLCAVGNVLSAKYR")
        self.assertEqual(alignment.sequences[19].letter_annotations['posterior_probability'], "69********************************************999************************99*****************************************************************7")
        self.assertEqual(alignment.sequences[20].id, "HBA_ANSSE")
        self.assertEqual(alignment.sequences[20].seq, "VLSAADKGNVKTVFGKIGGHAEEYGAETLQRMFQTFPQTKTYFPHFDLQPGSAQIKAHGKKVAAALVEAANHIDDIAGALSKLSDLHAQKLRVDPVNFKFLGHCFLVVLAIHHPSLLTPEVHASMDKFLCAVATVLTAKYR")
        self.assertEqual(alignment.sequences[20].letter_annotations['posterior_probability'], "69********************************************9999***********************99*****************************************************************7")
        self.assertEqual(alignment.sequences[21].id, "HBA_COLLI")
        self.assertEqual(alignment.sequences[21].seq, "VLSANDKSNVKAVFAKIGGQAGDLGGEALERLFITYPQTKTYFPHFDLSHGSAQIKGHGKKVAEALVEAANHIDDIAGALSKLSDLHAQKLRVDPVNFKLLGHCFLVVVAVHFPSLLTPEVHASLDKFVLAVGTVLTAKYR")
        self.assertEqual(alignment.sequences[21].letter_annotations['posterior_probability'], "69***********************************************************************99*****************************************************************7")
        self.assertEqual(alignment.sequences[22].id, "HBAD_CHLME")
        self.assertEqual(alignment.sequences[22].seq, "mLTADDKKLLTQLWEKVAGHQEEFGSEALQRMFLTYPQTKTYFPHFDLHPGSEQVRGHGKKVAAALGNAVKSLDNLSQALSELSNLHAYNLRVDPANFKLLAQCFQVVLATHLGKDYSPEMHAAFDKFLSAVAAVLAEKYR")
        self.assertEqual(alignment.sequences[22].letter_annotations['posterior_probability'], "689*******************************************9999******************************************************************************************7")
        self.assertEqual(alignment.sequences[23].id, "HBAD_PASMO")
        self.assertEqual(alignment.sequences[23].seq, "mLTAEDKKLIQQIWGKLGGAEEEIGADALWRMFHSYPSTKTYFPHFDLSQGSDQIRGHGKKVVAALSNAIKNLDNLSQALSELSNLHAYNLRVDPVNFKFLSQCLQVSLATRLGKEYSPEVHSAVDKFMSAVASVLAEKYR")
        self.assertEqual(alignment.sequences[23].letter_annotations['posterior_probability'], "699*******************************************9**9******************************************************************************************7")
        self.assertEqual(alignment.sequences[24].id, "HBAZ_HORSE")
        self.assertEqual(alignment.sequences[24].seq, "sLTKAERTMVVSIWGKISMQADAVGTEALQRLFSSYPQTKTYFPHFDLHEGSPQLRAHGSKVAAAVGDAVKSIDNVAGALAKLSELHAYILRVDPVNFKFLSHCLLVTLASRLPADFTADAHAAWDKFLSIVSSVLTEKYR")
        self.assertEqual(alignment.sequences[24].letter_annotations['posterior_probability'], "689*******************************************9999******************************************************************************************7")
        self.assertEqual(alignment.sequences[25].id, "HBA4_SALIR")
        self.assertEqual(alignment.sequences[25].seq, "sLSAKDKANVKAIWGKILPKSDEIGEQALSRMLVVYPQTKAYFSHWASVAPGSAPVKKHGITIMNQIDDCVGHMDDLFGFLTKLSELHATKLRVDPTNFKILAHNLIVVIAAYFPAEFTPEIHLSVDKFLQQLALALAEKYR")
        self.assertEqual(alignment.sequences[25].letter_annotations['posterior_probability'], "69********************************************77769************************9*****************************************************************7")
        self.assertEqual(alignment.sequences[26].id, "HBB_ORNAN")
        self.assertEqual(alignment.sequences[26].seq, "VHLSGGEKSAVTNLWGKVNINELGGEALGRLLVVYPWTQRFFEAFGDLSSAGAVMGNPKVKAHGAKVLTSFGDALKNLDDLKGTFAKLSELHCDKLHVDPENFNRLGNVLIVVLARHFSKDFSPEVQAAWQKLVSGVAHALGHKYH")
        self.assertEqual(alignment.sequences[26].letter_annotations['posterior_probability'], "69****************************************************************************9******************************************************************7")
        self.assertEqual(alignment.sequences[27].id, "HBB_TACAC")
        self.assertEqual(alignment.sequences[27].seq, "VHLSGSEKTAVTNLWGHVNVNELGGEALGRLLVVYPWTQRFFESFGDLSSADAVMGNAKVKAHGAKVLTSFGDALKNLDNLKGTFAKLSELHCDKLHVDPENFNRLGNVLVVVLARHFSKEFTPEAQAAWQKLVSGVSHALAHKYH")
        self.assertEqual(alignment.sequences[27].letter_annotations['posterior_probability'], "69***********************************************************************************************************************************************7")
        self.assertEqual(alignment.sequences[28].id, "HBE_PONPY")
        self.assertEqual(alignment.sequences[28].seq, "VHFTAEEKAAVTSLWSKMNVEEAGGEALGRLLVVYPWTQRFFDSFGNLSSPSAILGNPKVKAHGKKVLTSFGDAIKNMDNLKTTFAKLSELHCDKLHVDPENFKLLGNVMVIILATHFGKEFTPEVQAAWQKLVSAVAIALAHKYH")
        self.assertEqual(alignment.sequences[28].letter_annotations['posterior_probability'], "5789*********************************************************************************************************************************************7")
        self.assertEqual(alignment.sequences[29].id, "HBB_SPECI")
        self.assertEqual(alignment.sequences[29].seq, "VHLSDGEKNAISTAWGKVHAAEVGAEALGRLLVVYPWTQRFFDSFGDLSSASAVMGNAKVKAHGKKVIDSFSNGLKHLDNLKGTFASLSELHCDKLHVDPENFKLLGNMIVIVMAHHLGKDFTPEAQAAFQKVVAGVANALAHKYH")
        self.assertEqual(alignment.sequences[29].letter_annotations['posterior_probability'], "69****************99*****************************************************************************************************************************7")
        self.assertEqual(alignment.sequences[30].id, "HBB_SPETO")
        self.assertEqual(alignment.sequences[30].seq, "VHLTDGEKNAISTAWGKVNAAEIGAEALGRLLVVYPWTQRFFDSFGDLSSASAVMGNAKVKAHGKKVIDSFSNGLKHLDNLKGTFASLSELHCDKLHVDPENFKLLGNMIVIVMAHHLGKDFTPEAQAAFQKVVAGVANALSHKYH")
        self.assertEqual(alignment.sequences[30].letter_annotations['posterior_probability'], "69****************99*****************************************************************************************************************************7")
        self.assertEqual(alignment.sequences[31].id, "HBB_EQUHE")
        self.assertEqual(alignment.sequences[31].seq, "vQLSGEEKAAVLALWDKVNEEEVGGEALGRLLVVYPWTQRFFDSFGDLSNPAAVMGNPKVKAHGKKVLHSFGEGVHHLDNLKGTFAQLSELHCDKLHVDPENFRLLGNVLVVVLARHFGKDFTPELQASYQKVVAGVANALAHKYH")
        self.assertEqual(alignment.sequences[31].letter_annotations['posterior_probability'], "579***************99*****************************************************************************************************************************7")
        self.assertEqual(alignment.sequences[32].id, "HBB_SUNMU")
        self.assertEqual(alignment.sequences[32].seq, "VHLSGEEKACVTGLWGKVNEDEVGAEALGRLLVVYPWTQRFFDSFGDLSSASAVMGNPKVKAHGKKVLHSLGEGVANLDNLKGTFAKLSELHCDKLHVDPENFRLLGNVLVVVLASKFGKEFTPPVQAAFQKVVAGVANALAHKYH")
        self.assertEqual(alignment.sequences[32].letter_annotations['posterior_probability'], "69****************99*****************************************************************************************************************************7")
        self.assertEqual(alignment.sequences[33].id, "HBB_CALAR")
        self.assertEqual(alignment.sequences[33].seq, "VHLTGEEKSAVTALWGKVNVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMNNPKVKAHGKKVLGAFSDGLTHLDNLKGTFAHLSELHCDKLHVDPENFRLLGNVLVCVLAHHFGKEFTPVVQAAYQKVVAGVANALAHKYH")
        self.assertEqual(alignment.sequences[33].letter_annotations['posterior_probability'], "689**********************************************************************************************************************************************7")
        self.assertEqual(alignment.sequences[34].id, "HBB_MANSP")
        self.assertEqual(alignment.sequences[34].seq, "VHLTPEEKTAVTTLWGKVNVDEVGGEALGRLLVVYPWTQRFFDSFGDLSSPDAVMGNPKVKAHGKKVLGAFSDGLNHLDNLKGTFAQLSELHCDKLHVDPENFKLLGNVLVCVLAHHFGKEFTPQVQAAYQKVVAGVANALAHKYH")
        self.assertEqual(alignment.sequences[34].letter_annotations['posterior_probability'], "69***********************************************************************************************************************************************7")
        self.assertEqual(alignment.sequences[35].id, "HBB_URSMA")
        self.assertEqual(alignment.sequences[35].seq, "VHLTGEEKSLVTGLWGKVNVDEVGGEALGRLLVVYPWTQRFFDSFGDLSSADAIMNNPKVKAHGKKVLNSFSDGLKNLDNLKGTFAKLSELHCDKLHVDPENFKLLGNVLVCVLAHHFGKEFTPQVQAAYQKVVAGVANALAHKYH")
        self.assertEqual(alignment.sequences[35].letter_annotations['posterior_probability'], "689**********************************************************************************************************************************************7")
        self.assertEqual(alignment.sequences[36].id, "HBB_RABIT")
        self.assertEqual(alignment.sequences[36].seq, "VHLSSEEKSAVTALWGKVNVEEVGGEALGRLLVVYPWTQRFFESFGDLSSANAVMNNPKVKAHGKKVLAAFSEGLSHLDNLKGTFAKLSELHCDKLHVDPENFRLLGNVLVIVLSHHFGKEFTPQVQAAYQKVVAGVANALAHKYH")
        self.assertEqual(alignment.sequences[36].letter_annotations['posterior_probability'], "69***********************************************************************************************************************************************7")
        self.assertEqual(alignment.sequences[37].id, "HBB_TUPGL")
        self.assertEqual(alignment.sequences[37].seq, "VHLSGEEKAAVTGLWGKVDLEKVGGQSLGSLLIVYPWTQRFFDSFGDLSSPSAVMSNPKVKAHGKKVLTSFSDGLNHLDNLKGTFAKLSELHCDKLHVDPENFRLLGNVLVRVLACNFGPEFTPQVQAAFQKVVAGVANALAHKYH")
        self.assertEqual(alignment.sequences[37].letter_annotations['posterior_probability'], "69***********************************************************************************************************************************************7")
        self.assertEqual(alignment.sequences[38].id, "HBB_TRIIN")
        self.assertEqual(alignment.sequences[38].seq, "VHLTPEEKALVIGLWAKVNVKEYGGEALGRLLVVYPWTQRFFEHFGDLSSASAIMNNPKVKAHGEKVFTSFGDGLKHLEDLKGAFAELSELHCDKLHVDPENFRLLGNVLVCVLARHFGKEFSPEAQAAYQKVVAGVANALAHKYH")
        self.assertEqual(alignment.sequences[38].letter_annotations['posterior_probability'], "69***************************************************************************989*****************************************************************7")
        self.assertEqual(alignment.sequences[39].id, "HBB_COLLI")
        self.assertEqual(alignment.sequences[39].seq, "vHWSAEEKQLITSIWGKVNVADCGAEALARLLIVYPWTQRFFSSFGNLSSATAISGNPNVKAHGKKVLTSFGDAVKNLDNIKGTFAQLSELHCDKLHVDPENFRLLGDILVIILAAHFGKDFTPECQAAWQKLVRVVAHALARKYH")
        self.assertEqual(alignment.sequences[39].letter_annotations['posterior_probability'], "5779*********************************************************************************************************************************************7")
        self.assertEqual(alignment.sequences[40].id, "HBB_LARRI")
        self.assertEqual(alignment.sequences[40].seq, "vHWSAEEKQLITGLWGKVNVADCGAEALARLLIVYPWTQRFFASFGNLSSPTAINGNPMVRAHGKKVLTSFGEAVKNLDNIKNTFAQLSELHCDKLHVDPENFRLLGDILIIVLAAHFAKDFTPDSQAAWQKLVRVVAHALARKYH")
        self.assertEqual(alignment.sequences[40].letter_annotations['posterior_probability'], "5779*********************************************************************************************************************************************7")
        self.assertEqual(alignment.sequences[41].id, "HBB1_VAREX")
        self.assertEqual(alignment.sequences[41].seq, "vHWTAEEKQLICSLWGKIDVGLIGGETLAGLLVIYPWTQRQFSHFGNLSSPTAIAGNPRVKAHGKKVLTSFGDAIKNLDNIKDTFAKLSELHCDKLHVDPTNFKLLGNVLVIVLADHHGKEFTPAHHAAYQKLVNVVSHSLARRYH")
        self.assertEqual(alignment.sequences[41].letter_annotations['posterior_probability'], "66799********************************************************************************************************************************************7")
        self.assertEqual(alignment.sequences[42].id, "HBB2_XENTR")
        self.assertEqual(alignment.sequences[42].seq, "vHWTAEEKATIASVWGKVDIEQDGHDALSRLLVVYPWTQRYFSSFGNLSNVSAVSGNVKVKAHGNKVLSAVGSAIQHLDDVKSHLKGLSKSHAEDLHVDPENFKRLADVLVIVLAAKLGSAFTPQVQAVWEKLNATLVAALSHGYf")
        self.assertEqual(alignment.sequences[42].letter_annotations['posterior_probability'], "66799*************************************************************************99*************************************************************99889")
        self.assertEqual(alignment.sequences[43].id, "HBBL_RANCA")
        self.assertEqual(alignment.sequences[43].seq, "vHWTAEEKAVINSVWQKVDVEQDGHEALTRLFIVYPWTQRYFSTFGDLSSPAAIAGNPKVHAHGKKILGAIDNAIHNLDDVKGTLHDLSEEHANELHVDPENFRRLGEVLIVVLGAKLGKAFSPQVQHVWEKFIAVLVDALSHSYH")
        self.assertEqual(alignment.sequences[43].letter_annotations['posterior_probability'], "66799*************************************************************************99*****************************************************************7")
        self.assertEqual(alignment.sequences[44].id, "HBB2_TRICR")
        self.assertEqual(alignment.sequences[44].seq, "VHLTAEDRKEIAAILGKVNVDSLGGQCLARLIVVNPWSRRYFHDFGDLSSCDAICRNPKVLAHGAKVMRSIVEATKHLDNLREYYADLSVTHSLKFYVDPENFKLFSGIVIVCLALTLQTDFSCHKQLAFEKLMKGVSHALGHGY")
        self.assertEqual(alignment.sequences[44].letter_annotations['posterior_probability'], "69*******************************************************************************************************************************************9988")
        self.assertEqual(alignment.column_annotations["reference_coordinate_annotation"], ".xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx......")
        self.assertEqual(alignment.column_annotations["consensus_posterior_probability"], ".679*****************************************************************************99******************************************************************7......")

    def test_reading_alignments_pfam1(self):
        """Test parsing Pfam record 120_Rick_ant."""
        path = "Stockholm/pfam1.seed.txt"
        with open(path) as stream:
            alignments = stockholm.AlignmentIterator(path)
            alignment = next(alignments)
            self.assertRaises(StopIteration, next, alignments)
        self.assertEqual(alignment.annotations["identification"], "120_Rick_ant")
        self.assertEqual(alignment.annotations["accession number"], "PF12574.10")
        self.assertEqual(alignment.annotations["definition"], "120 KDa Rickettsia surface antigen")
        self.assertEqual(alignment.annotations["author"], ["Gavin OL;"])
        self.assertEqual(alignment.annotations["source of seed"], "Prosite")
        self.assertEqual(alignment.annotations["gathering method"], "25.00 25.00;")
        self.assertEqual(alignment.annotations["trusted cutoff"], "42.00 39.60;")
        self.assertEqual(alignment.annotations["noise cutoff"], "23.60 21.20;")
        self.assertEqual(alignment.annotations["build method"], "hmmbuild HMM.ann SEED.ann")
        self.assertEqual(alignment.annotations["search method"], "hmmsearch -Z 57096847 -E 1000 --cpu 4 HMM pfamseq")
        self.assertEqual(alignment.annotations["type"], "Family")
        self.assertEqual(alignment.annotations["references"][0]["number"], 1)
        self.assertEqual(alignment.annotations["references"][0]["medline"], "8112862")
        self.assertEqual(alignment.annotations["references"][0]["title"], "Cloning, sequencing, and expression of the gene coding for an antigenic 120-kilodalton protein of Rickettsia conorii.")
        self.assertEqual(alignment.annotations["references"][0]["author"], "Schuenke KW, Walker DH;")
        self.assertEqual(alignment.annotations["references"][0]["location"], "Infect Immun. 1994;62:904-909.")
        self.assertEqual(len(alignment.annotations["database_references"]), 2)
        self.assertEqual(alignment.annotations["database_references"][0], {'reference': 'INTERPRO; IPR020954;'})
        self.assertEqual(alignment.annotations["database_references"][1], {'reference': 'SO; 0100021; polypeptide_conserved_region;'})
        self.assertEqual(alignment.annotations["comment"], "This domain family is found in bacteria, and is approximately 40 amino acids in length. This family is a Rickettsia surface antigen of 120 KDa which may be used as an antigen for immune response against the bacterial species.")
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates,
                numpy.array(
                    [
                     [102, 110, 110, 331, 333, 337],
                     [112, 120, 125, 346, 346, 350],
                    ]
                ),
            )
        )
        self.assertEqual(alignment.sequences[0].id, "SCA4_RICPR")
        self.assertEqual(alignment.sequences[0].seq[102:337], "LAEQIAKEEDDRKFRAFLSNQDNYALINKAFEDTKTKKNLEKAEIVGYKNVLSTYSVANGYQGGFQPVQWENQVSASDLRSTVVKNDEGEELCTLNETTVKTKDLIVAKQDGTQVQINSYREINFPIKLDKANGSMHLSMVALKADGTKPAKDKAVYFTAHYEEGPNGKPQLKEISSPQPLKFVGTGDDAVAYIEHGGEIYTLAVTRGKYKEMMKEVALNHGQSVALSQTIAEDL")
        self.assertEqual(alignment.sequences[0].annotations['accession'], "Q9ZD49.2")
        self.assertEqual(alignment.sequences[1].id, "H8K5G2_RICAG")
        self.assertEqual(alignment.sequences[1].seq[112:350], "LAEQKRKEIEEEKEKDKTLSTFFGNPANREFIDKALENPELKKKLESIEIAGYKNVHNTFSAASGYPGGFKPVQWENQVSANDLRATVVKNDAGDELCTLNETTVKTKPFTVAKQDGTQVQISSYREIDFPIKLDKADGSMHLSMVALKADGTKPSKDKAVYFTAHYEEGPNGKPQLKEISSPKPLKFAGTGDDAIAYIEHGGEIYTLAVTRGKYKEMMKEVELNQGQSVDLSQAEDI")
        self.assertEqual(alignment.sequences[1].annotations['accession'], "H8K5G2.1")
        self.assertEqual(alignment[0], "LAEQIAKE-----EDDRKFRAFLSNQDNYALINKAFEDTKTKKNLEKAEIVGYKNVLSTYSVANGYQGGFQPVQWENQVSASDLRSTVVKNDEGEELCTLNETTVKTKDLIVAKQDGTQVQINSYREINFPIKLDKANGSMHLSMVALKADGTKPAKDKAVYFTAHYEEGPNGKPQLKEISSPQPLKFVGTGDDAVAYIEHGGEIYTLAVTRGKYKEMMKEVALNHGQSVALSQTIAEDL")
        self.assertEqual(alignment[1], "LAEQKRKEIEEEKEKDKTLSTFFGNPANREFIDKALENPELKKKLESIEIAGYKNVHNTFSAASGYPGGFKPVQWENQVSANDLRATVVKNDAGDELCTLNETTVKTKPFTVAKQDGTQVQISSYREIDFPIKLDKADGSMHLSMVALKADGTKPSKDKAVYFTAHYEEGPNGKPQLKEISSPKPLKFAGTGDDAIAYIEHGGEIYTLAVTRGKYKEMMKEVELNQGQSVDLSQ--AEDI")
        self.assertEqual(alignment.column_annotations['sequence_consensus'], "LAEQhtKE.....EcD+phpsFhuN.sNhthIsKAhEsschKKpLEphEIsGYKNVhsTaSsAsGY.GGFpPVQWENQVSAsDLRuTVVKNDtG-ELCTLNETTVKTKshhVAKQDGTQVQIsSYREIsFPIKLDKAsGSMHLSMVALKADGTKPuKDKAVYFTAHYEEGPNGKPQLKEISSPpPLKFsGTGDDAlAYIEHGGEIYTLAVTRGKYKEMMKEVtLNpGQSVsLSQ..AEDl")


if __name__ == "__main__":
    runner = unittest.TextTestRunner(verbosity=2)
    unittest.main(testRunner=runner)
