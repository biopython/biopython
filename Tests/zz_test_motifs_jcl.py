import os
import unittest
import math

from Bio.Alphabet import generic_dna
from Bio.Alphabet import Gapped
from Bio.Alphabet import IUPAC
from Bio import motifs
from Bio.motifs import meme
from Bio.Seq import Seq

class TestMEME(unittest.TestCase):

	def test_meme_parser_5_0_4(self):
		"""Parse motifs/meme_v_5_0_4.txt file."""
		handle = open("motifs/meme_v_5_0_4.txt")
		record = meme.read(handle)
		self.assertEqual(record.version, '5.0.4')
		self.assertEqual(record.datafile, 'example.fasta')
		self.assertEqual(record.alphabet, IUPAC.unambiguous_dna)
		self.assertEqual(len(record.sequences), 10)
		self.assertEqual(record.sequences[0], 'SEQ1;')
		self.assertEqual(record.sequences[1], 'SEQ2;')
		self.assertEqual(record.sequences[2], 'SEQ3;')
		self.assertEqual(record.sequences[3], 'SEQ4;')
		self.assertEqual(record.sequences[4], 'SEQ5;')
		self.assertEqual(record.sequences[5], 'SEQ6;')
		self.assertEqual(record.sequences[6], 'SEQ7;')
		self.assertEqual(record.sequences[7], 'SEQ8;')
		self.assertEqual(record.sequences[8], 'SEQ9;')
		self.assertEqual(record.sequences[9], 'SEQ10;')
		self.assertEqual(record.command, 'meme -dna example.fasta')
		self.assertEqual(len(record), 1)
		motif = record[0]
		self.assertEqual(motif.name, "Motif CTCAATCGTA")
		self.assertEqual(record["Motif CTCAATCGTA"], motif)
		self.assertEqual(motif.num_occurrences, 10)
		self.assertAlmostEqual(motif.evalue, 1.1e-22)
		self.assertEqual(motif.alphabet, IUPAC.unambiguous_dna)
		self.assertEqual(len(motif.instances), 10)
		self.assertAlmostEqual(motif.instances[0].pvalue, 1.96e-06)
		self.assertAlmostEqual(motif.instances[1].pvalue, 1.96e-06)
		self.assertAlmostEqual(motif.instances[2].pvalue, 1.96e-06)
		self.assertAlmostEqual(motif.instances[3].pvalue, 1.96e-06)
		self.assertAlmostEqual(motif.instances[4].pvalue, 1.96e-06)
		self.assertAlmostEqual(motif.instances[5].pvalue, 1.96e-06)
		self.assertAlmostEqual(motif.instances[6].pvalue, 1.96e-06)
		self.assertAlmostEqual(motif.instances[7].pvalue, 1.96e-06)
		self.assertAlmostEqual(motif.instances[8].pvalue, 1.96e-06)
		self.assertAlmostEqual(motif.instances[9].pvalue, 1.96e-06)
		self.assertEqual(motif.instances[0].sequence_name, 'SEQ10;')
		self.assertEqual(motif.instances[1].sequence_name, 'SEQ9;')
		self.assertEqual(motif.instances[2].sequence_name, 'SEQ8;')
		self.assertEqual(motif.instances[3].sequence_name, 'SEQ7;')
		self.assertEqual(motif.instances[4].sequence_name, 'SEQ6;')
		self.assertEqual(motif.instances[5].sequence_name, 'SEQ5;')
		self.assertEqual(motif.instances[6].sequence_name, 'SEQ4;')
		self.assertEqual(motif.instances[7].sequence_name, 'SEQ3;')
		self.assertEqual(motif.instances[8].sequence_name, 'SEQ2;')
		self.assertEqual(motif.instances[9].sequence_name, 'SEQ1;')
		self.assertEqual(motif.instances[0].start, 1)
		self.assertEqual(motif.instances[1].start, 1)
		self.assertEqual(motif.instances[2].start, 1)
		self.assertEqual(motif.instances[3].start, 1)
		self.assertEqual(motif.instances[4].start, 1)
		self.assertEqual(motif.instances[5].start, 1)
		self.assertEqual(motif.instances[6].start, 1)
		self.assertEqual(motif.instances[7].start, 1)
		self.assertEqual(motif.instances[8].start, 1)
		self.assertEqual(motif.instances[9].start, 1)
		self.assertEqual(motif.instances[0].strand, '+')
		self.assertEqual(motif.instances[1].strand, '+')
		self.assertEqual(motif.instances[2].strand, '+')
		self.assertEqual(motif.instances[3].strand, '+')
		self.assertEqual(motif.instances[4].strand, '+')
		self.assertEqual(motif.instances[5].strand, '+')
		self.assertEqual(motif.instances[6].strand, '+')
		self.assertEqual(motif.instances[7].strand, '+')
		self.assertEqual(motif.instances[8].strand, '+')
		self.assertEqual(motif.instances[9].strand, '+')
		self.assertEqual(motif.instances[0].length, 10)
		self.assertEqual(motif.instances[1].length, 10)
		self.assertEqual(motif.instances[2].length, 10)
		self.assertEqual(motif.instances[3].length, 10)
		self.assertEqual(motif.instances[4].length, 10)
		self.assertEqual(motif.instances[5].length, 10)
		self.assertEqual(motif.instances[6].length, 10)
		self.assertEqual(motif.instances[7].length, 10)
		self.assertEqual(motif.instances[8].length, 10)
		self.assertEqual(motif.instances[9].length, 10)
		self.assertEqual(motif.instances[0].motif_name, 'Motif CTCAATCGTA')
		self.assertEqual(motif.instances[1].motif_name, 'Motif CTCAATCGTA')
		self.assertEqual(motif.instances[2].motif_name, 'Motif CTCAATCGTA')
		self.assertEqual(motif.instances[3].motif_name, 'Motif CTCAATCGTA')
		self.assertEqual(motif.instances[4].motif_name, 'Motif CTCAATCGTA')
		self.assertEqual(motif.instances[5].motif_name, 'Motif CTCAATCGTA')
		self.assertEqual(motif.instances[6].motif_name, 'Motif CTCAATCGTA')
		self.assertEqual(motif.instances[7].motif_name, 'Motif CTCAATCGTA')
		self.assertEqual(motif.instances[8].motif_name, 'Motif CTCAATCGTA')
		self.assertEqual(motif.instances[9].motif_name, 'Motif CTCAATCGTA')
		self.assertEqual(motif.instances[0].alphabet, IUPAC.unambiguous_dna)
		self.assertEqual(motif.instances[1].alphabet, IUPAC.unambiguous_dna)
		self.assertEqual(motif.instances[2].alphabet, IUPAC.unambiguous_dna)
		self.assertEqual(motif.instances[3].alphabet, IUPAC.unambiguous_dna)
		self.assertEqual(motif.instances[4].alphabet, IUPAC.unambiguous_dna)
		self.assertEqual(motif.instances[5].alphabet, IUPAC.unambiguous_dna)
		self.assertEqual(motif.instances[6].alphabet, IUPAC.unambiguous_dna)
		self.assertEqual(motif.instances[7].alphabet, IUPAC.unambiguous_dna)
		self.assertEqual(motif.instances[8].alphabet, IUPAC.unambiguous_dna)
		self.assertEqual(motif.instances[9].alphabet, IUPAC.unambiguous_dna)
		self.assertEqual(str(motif.instances[0]), "CTCAATCGTA")
		self.assertEqual(str(motif.instances[1]), "CTCAATCGTA")
		self.assertEqual(str(motif.instances[2]), "CTCAATCGTA")
		self.assertEqual(str(motif.instances[3]), "CTCAATCGTA")
		self.assertEqual(str(motif.instances[4]), "CTCAATCGTA")
		self.assertEqual(str(motif.instances[5]), "CTCAATCGTA")
		self.assertEqual(str(motif.instances[6]), "CTCAATCGTA")
		self.assertEqual(str(motif.instances[7]), "CTCAATCGTA")
		self.assertEqual(str(motif.instances[8]), "CTCAATCGTA")
		self.assertEqual(str(motif.instances[9]), "CTCAATCGTA")
		handle.close()


if __name__ == "__main__":
    runner = unittest.TextTestRunner(verbosity=2)
    unittest.main(testRunner=runner)
