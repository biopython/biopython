import os
import io
import unittest
import warnings


from Bio import BiopythonExperimentalWarning

with warnings.catch_warnings():
    warnings.simplefilter("ignore", BiopythonExperimentalWarning)
    from Bio.Align import hhr

try:
    import numpy
except ImportError:
    from Bio import MissingPythonDependencyError

    raise MissingPythonDependencyError(
        "Install numpy if you want to use Bio.Align.hhr."
    ) from None


class Align_hhr_2uvo_hhblits(unittest.TestCase):
    def test_reading(self):
        path = os.path.join("HHsuite", "2uvo_hhblits.hhr")
        alignments = hhr.AlignmentIterator(path)
        self.assertEqual(alignments.metadata["No_of_seqs"], (1560, 4005))
        self.assertAlmostEqual(alignments.metadata["Neff"], 8.3)
        self.assertEqual(alignments.metadata["Searched_HMMs"], 34)
        self.assertEqual(alignments.metadata["Date"], "Fri Feb 15 16:34:13 2019")
        self.assertEqual(alignments.commandline, "hhblits -i 2uvoAh.fasta -d /pdb70")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 99.95)
        self.assertAlmostEqual(alignment.annotations["E-value"], 3.7e-34)
        self.assertAlmostEqual(alignment.annotations["Score"], 210.31)
        self.assertAlmostEqual(alignment.annotations["Identities"], 100)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 2.050)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 166.9)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[0:171], "ERCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNGACWTSKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQSGGCDG")
        self.assertEqual(alignment[1], "ERCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNGACWTSKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQSGGCDG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "~~cg~~~~~~~c~~~~CCs~~g~CG~~~~~c~~~c~~~~c~~~~~Cg~~~~~~~c~~~~CCs~~g~CG~~~~~c~~~c~~~~~~~~~~Cg~~~~~~~c~~~~CCS~~G~CG~~~~~C~~~Cq~~~c~~~~~Cg~~~~~~~c~~~~CCS~~G~CG~~~~~C~~gCq~~~c~~")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "~~cg~~~~~~~c~~~~CCS~~g~Cg~~~~~Cg~gC~~~~c~~~~~cg~~~~~~~c~~~~CCs~~g~Cg~~~~~c~~~c~~~~~~~~~~cg~~~~~~~c~~~~CCs~~g~CG~~~~~C~~gCq~~~c~~~~~cg~~~~~~~c~~~~ccs~~g~Cg~~~~~C~~~cq~~~~~~")
        self.assertEqual(alignment.target.id, "2uvo_A")
        self.assertEqual(alignment.target.seq[0:171], "ERCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNGACWTSKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQSGGCDG")
        self.assertEqual(alignment.target.annotations["hmm_name"], "2uvo_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "Agglutinin isolectin 1; carbohydrate-binding protein, hevein domain, chitin-binding, GERM agglutinin, chitin-binding protein; HET: NDG NAG GOL; 1.40A {Triticum aestivum} PDB: 1wgc_A* 2cwg_A* 2x3t_A* 4aml_A* 7wga_A 9wga_A 2wgc_A 1wgt_A 1k7t_A* 1k7v_A* 1k7u_A 2x52_A* 1t0w_A*")
        self.assertEqual(alignment[0], "ERCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNGACWTSKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQSGGCDG")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "CBCBGGGTTBBCGGGCEECTTSBEEBSHHHHSTTCCBSSCSSCCBCBGGGTTBCCSTTCEECTTSBEEBSHHHHSTTCCBSSCSSCCBCBGGGTTBCCGGGCEECTTSBEEBSHHHHSTTCCBSSCSSCCCCBTTTTTBCCSTTCEECTTSCEEBSHHHHSTTCCBSSCC ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "CCCCCCCCCcCCCCCCeeCCCCeECCCcccccCCccccccccccccCcccCCcccCCccccCCCceeCCCccccCCCcccccccccccccccccCCCCCCCcccCCCCccCCCcccccCCCcCCccccccccccccccccCCCCCCcCCCCEecCchhhcccccccCCCCC")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "799999999999999999999999999999999999999999999999999999999999999999999999999999999999999999998899999999999999999999999999999999999999999999999999999999999999999999999999986")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 99.92)
        self.assertAlmostEqual(alignment.annotations["E-value"], 1.1e-30)
        self.assertAlmostEqual(alignment.annotations["Score"], 190.44)
        self.assertAlmostEqual(alignment.annotations["Identities"], 49)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.254)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 148.8)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[1:169], "RCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNGACWTSKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQSGGC")
        self.assertEqual(alignment[1], "RCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNGACWTSKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQSGGC")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], " ~cg~~~~~~~c~~~~CCs~~g~CG~~~~~c~~~c~~~~c~~~~~Cg~~~~~~~c~~~~CCs~~g~CG~~~~~c~~~c~~~~~~~~~~Cg~~~~~~~c~~~~CCS~~G~CG~~~~~C~~~Cq~~~c~~~~~Cg~~~~~~~c~~~~CCS~~G~CG~~~~~C~~gCq~~~c  ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], " ~~g~~~~~~~c~~~~CCs~~g~Cg~~~~~c~~~C~~~~c~~~~~cg~~~~~c~~~~CCs~~G~CG~~~~~C~~~C~~~~~~~~~~Cg~~~~~c~~~~Ccs~~G~CGt~~~~C~~~cq~~~c~~~~~cg~~~~~c~~~~Ccs~~g~Cg~~~~~C~~~cq~~~~ ")
        self.assertEqual(alignment.target.id, "2wga")
        self.assertEqual(alignment.target.seq[1:163], "GXGCXGXXMYCSTNNCCXXWESCGSGGYXCGEGCNLGACQXGXPCXXPGSVCTNLHCCARGGHCGMGSGYCGXGCXGGACXADIXCGXGXXXCPTDSCCGGWGXCGNGXEFCGXGCXVGGCAAXSPCGXPGSXCTLDKCCSGXGACXSGSGGCGXGCXAGGC")
        self.assertEqual(alignment.target.annotations["hmm_name"], "2wga")
        self.assertEqual(alignment.target.annotations["hmm_description"], "; lectin (agglutinin); NMR {}")
        self.assertEqual(alignment[0], "GXGCXGXXMYCSTNNCCXXWESCGSGGYXCGEGCNLGACQXGXPCXX--PGSVCTNLHCCARGGHCGMGSGYCGXGCXGGACXADIXCGXG--XXXCPTDSCCGGWGXCGNGXEFCGXGCXVGGCAAXSPCGXP--GSXCTLDKCCSGXGACXSGSGGCGXGCXAGGC")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], " CSGGGSSCCCCSTTCEECTTSCEECSTTTTSTTCCSSSCSSCCCSSSSSCCCSTTCEECTTSCEESSHHHHSSCCSSSSCSSCCCCTTSSSCCSTTCBCCSSSCCBCSHHHHSTTCCSSSCSSCCCCSSSCCCCSTTCEECSSSSEECSTTTTSSCCSSSSC ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], " ccCCCcccccCCCCceECCcceECCCCccccCccccCcccccceeccCCCcCCCCcccCCCceeCCCCcccCCCccccccccccccCcccccCCCCCccCCCCCccCccccccCCccccccccccccCCCcccCCcccccCCCCceeCCccccCCCCcCCCC ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], " 699999999999999999999999999999999999888888899873567889999999999999999999999988888888999744568899999999999999999999999999998899987356788999999999999999999999999876 ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 99.77)
        self.assertAlmostEqual(alignment.annotations["E-value"], 5.2e-24)
        self.assertAlmostEqual(alignment.annotations["Score"], 148.19)
        self.assertAlmostEqual(alignment.annotations["Identities"], 50)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.303)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 103.7)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[0:124], "ERCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNGACWTSKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSG")
        self.assertEqual(alignment[1], "ERCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNGACWTSKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "~~cg~~~~~~~c~~~~CCs~~g~CG~~~~~c~~~c~~~~c~~~~~Cg~~~~~~~c~~~~CCs~~g~CG~~~~~c~~~c~~~~~~~~~~Cg~~~~~~~c~~~~CCS~~G~CG~~~~~C~~~Cq~~                                               ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], " ~~cg~~~~~~~c~~g~CCs~~g~CG~~~~~Cg~gCq~~c~~~~Cg~~~~~~~c~~~~CCs~~G~CG~~~~~C~~~Cq~~c~~~~cg~~~~~~~c~~~~CCs~~g~CG~~~~~C~~gCq~~     ")
        self.assertEqual(alignment.target.id, "1ulk_A")
        self.assertEqual(alignment.target.seq[1:121], "PVCGVRASGRVCPDGYCCSQWGYCGTTEEYCGKGCQSQCDYNRCGKEFGGKECHDELCCSQYGWCGNSDGHCGEGCQSQCSYWRCGKDFGGRLCTEDMCCSQYGWCGLTDDHCEDGCQSQ")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1ulk_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "Lectin-C; chitin-binding protein, hevein domain, PL-C, sugar binding protein; 1.80A {Phytolacca americana} SCOP: g.3.1.1 g.3.1.1 g.3.1.1")
        self.assertEqual(alignment[0], "PVCGVRASGRVCPDGYCCSQWGYCGTTEEYCGKGCQSQ-C-DYNRCGKEFGGKECHDELCCSQYGWCGNSDGHCGEGCQSQ-C-SYWRCGKDFGGRLCTEDMCCSQYGWCGLTDDHCEDGCQSQ")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], " CCSBGGGTTBCCGGGCEECTTSCEESSHHHHSTTCCBCTTTTBCBGGGTTBCCGGGCEECTTSBEECSHHHHSTTCCBCTTTTBCBGGGTTBCCSTTCEECTTSBEECSHHHHSTTCCBC     ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], " CcCcCCCCCCCCCCCCeECCCCeeCCCccccCCCccccceeeeccccccCCCCCCccccCCCcccccCcccccCCcccccCcccccccCCCccCCCCcccccCceecCcccccCcccccc     ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], " 389999999999999999999999999999999999752346788765567888999999999999999999999986422467877554567899999999999999999999999973     ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 99.77)
        self.assertAlmostEqual(alignment.annotations["E-value"], 6.8e-24)
        self.assertAlmostEqual(alignment.annotations["Score"], 147.59)
        self.assertAlmostEqual(alignment.annotations["Identities"], 52)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.251)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 102.2)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[43:167], "KRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQSG")
        self.assertEqual(alignment[1], "KRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQSG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                           ~~Cg~~~~~~~c~~~~CCs~~g~CG~~~~~c~~~c~~~~~~~~~~Cg~~~~~~~c~~~~CCS~~G~CG~~~~~C~~~Cq~~~c~~~~~Cg~~~~~~~c~~~~CCS~~G~CG~~~~~C~~gCq~~    ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], " ~~cg~~~~~~~c~~g~CCs~~g~CG~~~~~Cg~gCq~~c~~~~Cg~~~~~~~c~~~~CCs~~G~CG~~~~~C~~~Cq~~c~~~~cg~~~~~~~c~~~~CCs~~g~CG~~~~~C~~gCq~~     ")
        self.assertEqual(alignment.target.id, "1ulk_A")
        self.assertEqual(alignment.target.seq[1:121], "PVCGVRASGRVCPDGYCCSQWGYCGTTEEYCGKGCQSQCDYNRCGKEFGGKECHDELCCSQYGWCGNSDGHCGEGCQSQCSYWRCGKDFGGRLCTEDMCCSQYGWCGLTDDHCEDGCQSQ")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1ulk_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "Lectin-C; chitin-binding protein, hevein domain, PL-C, sugar binding protein; 1.80A {Phytolacca americana} SCOP: g.3.1.1 g.3.1.1 g.3.1.1")
        self.assertEqual(alignment[0], "PVCGVRASGRVCPDGYCCSQWGYCGTTEEYCGKGCQSQ-C-DYNRCGKEFGGKECHDELCCSQYGWCGNSDGHCGEGCQSQ-C-SYWRCGKDFGGRLCTEDMCCSQYGWCGLTDDHCEDGCQSQ")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], " CCSBGGGTTBCCGGGCEECTTSCEESSHHHHSTTCCBCTTTTBCBGGGTTBCCGGGCEECTTSBEECSHHHHSTTCCBCTTTTBCBGGGTTBCCSTTCEECTTSBEECSHHHHSTTCCBC     ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], " CcCcCCCCCCCCCCCCeECCCCeeCCCccccCCCccccceeeeccccccCCCCCCccccCCCcccccCcccccCCcccccCcccccccCCCccCCCCcccccCceecCcccccCcccccc     ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], " 468888778999999999999999999999999998642345777654456788899999999999999999999997422467787555668999999999999999999999999984     ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 99.72)
        self.assertAlmostEqual(alignment.annotations["E-value"], 9.7e-23)
        self.assertAlmostEqual(alignment.annotations["Score"], 148.46)
        self.assertAlmostEqual(alignment.annotations["Identities"], 61)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.542)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 111.6)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[44:169], "RCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQSGGC")
        self.assertEqual(alignment[1], "RCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQSGGC")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                            ~Cg~~~~~~~c~~~~CCs~~g~CG~~~~~c~~~c~~~~~~~~~~Cg~~~~~~~c~~~~CCS~~G~CG~~~~~C~~~Cq~~~c~~~~~Cg~~~~~~~c~~~~CCS~~G~CG~~~~~C~~gCq~~~c  ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], " ~cg~~~~~~~c~~~~CCS~~g~Cg~~~~~Cg~gC~~~~c~~~~~cg~~~~~~~c~~~~CCs~~g~Cg~~~~~c~~~c~~~~~~~~~~cg~~~~~~~c~~~~CCs~~g~CG~~~~~C~~gCq~~~c                                             ")
        self.assertEqual(alignment.target.id, "2uvo_A")
        self.assertEqual(alignment.target.seq[1:126], "RCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNGACWTSKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGAC")
        self.assertEqual(alignment.target.annotations["hmm_name"], "2uvo_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "Agglutinin isolectin 1; carbohydrate-binding protein, hevein domain, chitin-binding, GERM agglutinin, chitin-binding protein; HET: NDG NAG GOL; 1.40A {Triticum aestivum} PDB: 1wgc_A* 2cwg_A* 2x3t_A* 4aml_A* 7wga_A 9wga_A 2wgc_A 1wgt_A 1k7t_A* 1k7v_A* 1k7u_A 2x52_A* 1t0w_A*")
        self.assertEqual(alignment[0], "RCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNGACWTSKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGAC")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], " BCBGGGTTBBCGGGCEECTTSBEEBSHHHHSTTCCBSSCSSCCBCBGGGTTBCCSTTCEECTTSBEEBSHHHHSTTCCBSSCSSCCBCBGGGTTBCCGGGCEECTTSBEEBSHHHHSTTCCBSSC                                             ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], " CCCCCCCCcCCCCCCeeCCCCeECCCcccccCCccccccccccccCcccCCcccCCccccCCCceeCCCccccCCCcccccccccccccccccCCCCCCCcccCCCCccCCCcccccCCCcCCcc                                             ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], " 57776556789999999999999999999999999888888899998654567889999999999999999999999988888889999754456789999999999999999999999998755                                             ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 99.66)
        self.assertAlmostEqual(alignment.annotations["E-value"], 2.4e-21)
        self.assertAlmostEqual(alignment.annotations["Score"], 140.12)
        self.assertAlmostEqual(alignment.annotations["Identities"], 41)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.182)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 0.0)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[45:170], "CGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQSGGCD")
        self.assertEqual(alignment[1], "CGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQSGGCD")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                             Cg~~~~~~~c~~~~CCs~~g~CG~~~~~c~~~c~~~~~~~~~~Cg~~~~~~~c~~~~CCS~~G~CG~~~~~C~~~Cq~~~c~~~~~Cg~~~~~~~c~~~~CCS~~G~CG~~~~~C~~gCq~~~c~ ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "  ~g~~~~~~~c~~~~CCs~~g~Cg~~~~~c~~~C~~~~c~~~~~cg~~~~~c~~~~CCs~~G~CG~~~~~C~~~C~~~~~~~~~~Cg~~~~~c~~~~Ccs~~G~CGt~~~~C~~~cq~~~c~                                         ")
        self.assertEqual(alignment.target.id, "2wga")
        self.assertEqual(alignment.target.seq[2:123], "XGCXGXXMYCSTNNCCXXWESCGSGGYXCGEGCNLGACQXGXPCXXPGSVCTNLHCCARGGHCGMGSGYCGXGCXGGACXADIXCGXGXXXCPTDSCCGGWGXCGNGXEFCGXGCXVGGCA")
        self.assertEqual(alignment.target.annotations["hmm_name"], "2wga")
        self.assertEqual(alignment.target.annotations["hmm_description"], "; lectin (agglutinin); NMR {}")
        self.assertEqual(alignment[0], "XGCXGXXMYCSTNNCCXXWESCGSGGYXCGEGCNLGACQXGXPCXX--PGSVCTNLHCCARGGHCGMGSGYCGXGCXGGACXADIXCGXG--XXXCPTDSCCGGWGXCGNGXEFCGXGCXVGGCA")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "  SGGGSSCCCCSTTCEECTTSCEECSTTTTSTTCCSSSCSSCCCSSSSSCCCSTTCEECTTSCEESSHHHHSSCCSSSSCSSCCCCTTSSSCCSTTCBCCSSSCCBCSHHHHSTTCCSSSCS                                         ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "  cCCCcccccCCCCceECCcceECCCCccccCccccCcccccceeccCCCcCCCCcccCCCceeCCCCcccCCCccccccccccccCcccccCCCCCccCCCCCccCccccccCCccccccc                                         ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 99.31)
        self.assertAlmostEqual(alignment.annotations["E-value"], 1.2e-16)
        self.assertAlmostEqual(alignment.annotations["Score"], 102.02)
        self.assertAlmostEqual(alignment.annotations["Identities"], 47)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.275)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 66.8)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[43:123], "KRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQS")
        self.assertEqual(alignment[1], "KRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQS")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                           ~~Cg~~~~~~~c~~~~CCs~~g~CG~~~~~c~~~c~~~~~~~~~~Cg~~~~~~~c~~~~CCS~~G~CG~~~~~C~~~Cq~                                                ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], " ~~cg~~~~~~~C~~g~CCs~~G~Cg~~~~~c~~~c~~~~~~g~Cg~~~~~~~c~~~~CCs~~g~CG~~~~~C~~~Cqs   ")
        self.assertEqual(alignment.target.id, "1uha_A")
        self.assertEqual(alignment.target.seq[1:79], "PECGERASGKRCPNGKCCSQWGYCGTTDNYCGQGCQSQCDYWRCGRDFGGRLCEEDMCCSKYGWCGYSDDHCEDGCQS")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1uha_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "Lectin-D2; chitin-binding domain, sugar binding protein; 1.50A {Phytolacca americana} SCOP: g.3.1.1 g.3.1.1 PDB: 1ulm_A* 1uln_A")
        self.assertEqual(alignment[0], "PECGERASGKRCPNGKCCSQWGYCGTTDNYCGQGCQSQ--CDYWRCGRDFGGRLCEEDMCCSKYGWCGYSDDHCEDGCQS")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], " CCSBGGGTTBCCGGGCEECTTSCEESSHHHHSTTCCBCTTTTBCBGGGTTBCCSTTCEECTTSBEECSHHHHSTTCCB   ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], " CCCCCCCCCCcCCCCCccCCCccccCccccccCCccccccccccccccceecCCCCCccCCCccccCCcccccccccc   ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], " 467776667789999999999999999999999998642356788765567788999999999999999999999986   ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 99.26)
        self.assertAlmostEqual(alignment.annotations["E-value"], 3.7e-16)
        self.assertAlmostEqual(alignment.annotations["Score"], 101.24)
        self.assertAlmostEqual(alignment.annotations["Identities"], 47)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.259)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 71.9)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[0:82], "ERCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNGACWTSKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGP")
        self.assertEqual(alignment[1], "ERCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNGACW----TSKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAG-CQGGP")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "~~cg~~~~~~~c~~~~CCs~~g~CG~~~~~c~~~c~~~~c~~~~~Cg~~~~~~~c~~~~CCs~~g~CG~~~~~c~~~c~~~~                                                                                         ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "~~cg~~~~~~~C~~~~CCS~~G~CG~~~~~C~~~Cq~~c~~~~~~~~~Cg~~~~~~~c~~~~CCS~~G~CG~~~~~C~~~~Cq~~~   ")
        self.assertEqual(alignment.target.id, "1en2_A")
        self.assertEqual(alignment.target.seq[0:86], "ERCGSQGGGSTCPGLRCCSIWGWCGDSEPYCGRTCENKCWSGERSDHRCGAAVGNPPCGQDRCCSVHGWCGGGNDYCSGGNCQYRC")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1en2_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "UDA, agglutinin isolectin I/agglutinin isolectin V/ AG isolectin VI; hevein domain, superantigen, saccharide binding binding protein; HET: NAG; 1.40A {Urtica dioica} SCOP: g.3.1.1 g.3.1.1 PDB: 1eis_A* 1enm_A* 1ehd_A 1ehh_A* 1iqb_A")
        self.assertEqual(alignment[0], "ERCGSQGGGSTCPGLRCCSIWGWCGDSEPYCGRTCENK-CWSGERSDHRCGAAVGNPPCGQDRCCSVHGWCGGGNDYCSGGNCQYRC")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "CBCTTTTTSCCCGGGCEEETTSBEESSHHHHSTTEEESCGGGCCTTCBCSGGGTCCCCCTTCEEETTSBEESSHHHHSGGGEEECC   ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "CCCCCCCCCccCCCCcccCCCceecccccccCCCCcCCCcccccCCcccCCcccccccCCCCeECCCceECCCccccCCCCcccCC   ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "689999988999999999999999999999999999764347889986556788999999999999999999998698753        ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 99.22)
        self.assertAlmostEqual(alignment.annotations["E-value"], 7.4e-16)
        self.assertAlmostEqual(alignment.annotations["Score"], 99.76)
        self.assertAlmostEqual(alignment.annotations["Identities"], 47)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.232)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 67.7)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[44:124], "RCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSG")
        self.assertEqual(alignment[1], "RCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCR----ADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGG-CQSG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                            ~Cg~~~~~~~c~~~~CCs~~g~CG~~~~~c~~~c~~~~~~~~~~Cg~~~~~~~c~~~~CCS~~G~CG~~~~~C~~~Cq~~                                               ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], " ~cg~~~~~~~C~~~~CCS~~G~CG~~~~~C~~~Cq~~c~~~~~~~~~Cg~~~~~~~c~~~~CCS~~G~CG~~~~~C~~~~Cq~~    ")
        self.assertEqual(alignment.target.id, "1en2_A")
        self.assertEqual(alignment.target.seq[1:85], "RCGSQGGGSTCPGLRCCSIWGWCGDSEPYCGRTCENKCWSGERSDHRCGAAVGNPPCGQDRCCSVHGWCGGGNDYCSGGNCQYR")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1en2_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "UDA, agglutinin isolectin I/agglutinin isolectin V/ AG isolectin VI; hevein domain, superantigen, saccharide binding binding protein; HET: NAG; 1.40A {Urtica dioica} SCOP: g.3.1.1 g.3.1.1 PDB: 1eis_A* 1enm_A* 1ehd_A 1ehh_A* 1iqb_A")
        self.assertEqual(alignment[0], "RCGSQGGGSTCPGLRCCSIWGWCGDSEPYCGRTCENK-CWSGERSDHRCGAAVGNPPCGQDRCCSVHGWCGGGNDYCSGGNCQYR")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], " BCTTTTTSCCCGGGCEEETTSBEESSHHHHSTTEEESCGGGCCTTCBCSGGGTCCCCCTTCEEETTSBEESSHHHHSGGGEEEC    ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], " CCCCCCCCccCCCCcccCCCceecccccccCCCCcCCCcccccCCcccCCcccccccCCCCeECCCceECCCccccCCCCcccC    ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], " 5777666678999999999999999999999999875434788887654567889999999999999999999979974         ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 99.21)
        self.assertAlmostEqual(alignment.annotations["E-value"], 9.6e-16)
        self.assertAlmostEqual(alignment.annotations["Score"], 97.65)
        self.assertAlmostEqual(alignment.annotations["Identities"], 54)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.333)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 65.9)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[87:167], "KCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQSG")
        self.assertEqual(alignment[1], "KCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQSG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                                                                       ~Cg~~~~~~~c~~~~CCS~~G~CG~~~~~C~~~Cq~~~c~~~~~Cg~~~~~~~c~~~~CCS~~G~CG~~~~~C~~gCq~~    ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "  ~cg~~~~~~~C~~g~CCs~~G~Cg~~~~~c~~~c~~~~~~g~Cg~~~~~~~c~~~~CCs~~g~CG~~~~~C~~~Cqs~  ")
        self.assertEqual(alignment.target.id, "1uha_A")
        self.assertEqual(alignment.target.seq[2:80], "ECGERASGKRCPNGKCCSQWGYCGTTDNYCGQGCQSQCDYWRCGRDFGGRLCEEDMCCSKYGWCGYSDDHCEDGCQSQ")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1uha_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "Lectin-D2; chitin-binding domain, sugar binding protein; 1.50A {Phytolacca americana} SCOP: g.3.1.1 g.3.1.1 PDB: 1ulm_A* 1uln_A")
        self.assertEqual(alignment[0], "ECGERASGKRCPNGKCCSQWGYCGTTDNYCGQGCQSQ-C-DYWRCGRDFGGRLCEEDMCCSKYGWCGYSDDHCEDGCQSQ")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "  CSBGGGTTBCCGGGCEECTTSCEESSHHHHSTTCCBCTTTTBCBGGGTTBCCSTTCEECTTSBEECSHHHHSTTCCBC  ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "  CCCCCCCCCcCCCCCccCCCccccCccccccCCccccccccccccccceecCCCCCccCCCccccCCccccccccccc  ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "  466654457789999999999999999999999997423467887655678899999999999999999999999974  ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 97.79)
        self.assertAlmostEqual(alignment.annotations["E-value"], 7.7e-09)
        self.assertAlmostEqual(alignment.annotations["Score"], 56.76)
        self.assertAlmostEqual(alignment.annotations["Identities"], 68)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.600)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 30.2)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[87:124], "KCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSG")
        self.assertEqual(alignment[1], "KCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGG--GCQSG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                                                                       ~Cg~~~~~~~c~~~~CCS~~G~CG~~~~~C~~~Cq~~                                               ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], " ~CG~~~~~~~C~~~~CCS~~G~CG~t~~~C~~~~~Cq~~   ")
        self.assertEqual(alignment.target.id, "1wkx_A")
        self.assertEqual(alignment.target.seq[1:40], "QCGRQAGGKLCPDNLCCSQWGWCGSTDEYCSPDHNCQSN")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1wkx_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "Hevein isoform 2; allergen, lectin, agglutinin-toxin motif; 1.70A {Hevea brasiliensis} PDB: 1hev_A 1q9b_A* 4wp4_A")
        self.assertEqual(alignment[0], "QCGRQAGGKLCPDNLCCSQWGWCGSTDEYCSPDHNCQSN")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], " CSBGGGTTBCCSTTCEECTTSCEESSHHHHCGGGTCCBS   ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], " CCCCcCCCcccCCCCeEeecCcccCCcccccCCCCccCC   ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], " 3555444567889999999999999999998679874     ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 97.67)
        self.assertAlmostEqual(alignment.annotations["E-value"], 1.9e-08)
        self.assertAlmostEqual(alignment.annotations["Score"], 54.61)
        self.assertAlmostEqual(alignment.annotations["Identities"], 46)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.182)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 32.7)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[0:38], "ERCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNG")
        self.assertEqual(alignment[1], "ERCGEQGSNMECPNNLCCSQYGYCGMGGDYCGK-GCQNG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "~~cg~~~~~~~c~~~~CCs~~g~CG~~~~~c~~~c~~~                                                                                                                                     ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "~~CG~~~~~~C~~~~CCS~~G~CG~t~~~C~~~~Cq~~   ")
        self.assertEqual(alignment.target.id, "1p9g_A")
        self.assertEqual(alignment.target.seq[0:38], "ETCASRCPRPCNAGLCCSIYGYCGSGAAYCGAGNCRCQ")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1p9g_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "EAFP 2; antifungal peptide, atomic resolution, antifungal protein; HET: PCA; 0.84A {Eucommia ulmoides} SCOP: g.3.1.1 PDB: 1p9z_A*")
        self.assertEqual(alignment[0], "ETCAS-RCPRPCNAGLCCSIYGYCGSGAAYCGAGNCRCQ")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "CCGGGGTTCCSCTTCEEETTSCEECSHHHHSTTTEEEC   ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "CCcCCcCCcccCCCCeECccceeCCCccccCCCccccC   ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "6899567789999999999999999999999849864    ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 97.66)
        self.assertAlmostEqual(alignment.annotations["E-value"], 1.9e-08)
        self.assertAlmostEqual(alignment.annotations["Score"], 54.54)
        self.assertAlmostEqual(alignment.annotations["Identities"], 42)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.206)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 29.2)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[87:124], "KCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSG")
        self.assertEqual(alignment[1], "KCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGG-CQSG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                                                                       ~Cg~~~~~~~c~~~~CCS~~G~CG~~~~~C~~~Cq~~                                               ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], " ~CG~~~~~~C~~~~CCS~~G~CG~t~~~C~~~~Cq~~   ")
        self.assertEqual(alignment.target.id, "1p9g_A")
        self.assertEqual(alignment.target.seq[1:38], "TCASRCPRPCNAGLCCSIYGYCGSGAAYCGAGNCRCQ")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1p9g_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "EAFP 2; antifungal peptide, atomic resolution, antifungal protein; HET: PCA; 0.84A {Eucommia ulmoides} SCOP: g.3.1.1 PDB: 1p9z_A*")
        self.assertEqual(alignment[0], "TCAS-RCPRPCNAGLCCSIYGYCGSGAAYCGAGNCRCQ")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], " CGGGGTTCCSCTTCEEETTSCEECSHHHHSTTTEEEC   ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], " CcCCcCCcccCCCCeECccceeCCCccccCCCccccC   ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], " 355333567889999999999999999999849874    ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 97.65)
        self.assertAlmostEqual(alignment.annotations["E-value"], 2e-08)
        self.assertAlmostEqual(alignment.annotations["Score"], 54.99)
        self.assertAlmostEqual(alignment.annotations["Identities"], 50)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.302)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 34.5)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[0:38], "ERCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNG")
        self.assertEqual(alignment[1], "ERCGEQGSNMECPNNLCCSQYGYCGMGGDYCGK--GCQNG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "~~cg~~~~~~~c~~~~CCs~~g~CG~~~~~c~~~c~~~                                                                                                                                     ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "~~CG~~~~~~~C~~~~CCS~~G~CG~t~~~C~~~~~Cq~~   ")
        self.assertEqual(alignment.target.id, "1wkx_A")
        self.assertEqual(alignment.target.seq[0:40], "EQCGRQAGGKLCPDNLCCSQWGWCGSTDEYCSPDHNCQSN")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1wkx_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "Hevein isoform 2; allergen, lectin, agglutinin-toxin motif; 1.70A {Hevea brasiliensis} PDB: 1hev_A 1q9b_A* 4wp4_A")
        self.assertEqual(alignment[0], "EQCGRQAGGKLCPDNLCCSQWGWCGSTDEYCSPDHNCQSN")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "CCSBGGGTTBCCSTTCEECTTSCEESSHHHHCGGGTCCBS   ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "CCCCCcCCCcccCCCCeEeecCcccCCcccccCCCCccCC   ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "57999988889999999999999999999999679864     ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 97.62)
        self.assertAlmostEqual(alignment.annotations["E-value"], 2.4e-08)
        self.assertAlmostEqual(alignment.annotations["Score"], 55.16)
        self.assertAlmostEqual(alignment.annotations["Identities"], 51)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.325)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 33.8)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[1:38], "RCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNG")
        self.assertEqual(alignment[1], "RCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], " ~cg~~~~~~~c~~~~CCs~~g~CG~~~~~c~~~c~~~                                                                                                                                     ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "   ~CG~~~~~~~C~~~~CCs~~G~CG~t~~~C~~gCq~~     ")
        self.assertEqual(alignment.target.id, "4mpi_A")
        self.assertEqual(alignment.target.seq[3:40], "QCGRQAGGALCPGGLCCSQYGWCANTPEYCGSGCQSQ")
        self.assertEqual(alignment.target.annotations["hmm_name"], "4mpi_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "Class I chitinase; hevein-like domain, chitin oligomers, sugar binding protein; HET: MES; 1.60A {Hevea brasiliensis subsp}")
        self.assertEqual(alignment[0], "QCGRQAGGALCPGGLCCSQYGWCANTPEYCGSGCQSQ")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "   BCBGGGTTBCCGGGCEECTTSBEECSHHHHSTTCCBC     ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "   ccCCcCCCcccCCCCcCcccceecCCccccccccccc     ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "   6888887789999999999999999999999999864     ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 97.59)
        self.assertAlmostEqual(alignment.annotations["E-value"], 3e-08)
        self.assertAlmostEqual(alignment.annotations["Score"], 54.44)
        self.assertAlmostEqual(alignment.annotations["Identities"], 59)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.493)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 30.2)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[87:124], "KCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSG")
        self.assertEqual(alignment[1], "KCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGG-CQSG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                                                                       ~Cg~~~~~~~c~~~~CCS~~G~CG~~~~~C~~~Cq~~                                               ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "  ~CG~~~~~~~C~~~~CCS~~G~CG~t~~~C~~~~Cq~~    ")
        self.assertEqual(alignment.target.id, "2lb7_A")
        self.assertEqual(alignment.target.seq[2:40], "RCGDQARGAKCPNCLCCGKYGFCGSGDAYCGAGSCQSQ")
        self.assertEqual(alignment.target.annotations["hmm_name"], "2lb7_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "WAMP-1A, antimicrobial peptide 1A; antimicrobial protein; NMR {Triticum kiharae}")
        self.assertEqual(alignment[0], "RCGDQARGAKCPNCLCCGKYGFCGSGDAYCGAGSCQSQ")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "  ECBGGGTTBCCCTTCEEETTTEEECSHHHHSTTSEEEC    ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "  CCcCCCCCcccCCCCcCCcceeecCCccccCCCCccCC    ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "  4555444567889999999999999999999868864     ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 97.57)
        self.assertAlmostEqual(alignment.annotations["E-value"], 3.3e-08)
        self.assertAlmostEqual(alignment.annotations["Score"], 54.59)
        self.assertAlmostEqual(alignment.annotations["Identities"], 61)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.420)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 31.3)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[86:124], "IKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSG")
        self.assertEqual(alignment[1], "IKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                                                                      ~~Cg~~~~~~~c~~~~CCS~~G~CG~~~~~C~~~Cq~~                                               ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "  ~~CG~~~~~~~C~~~~CCs~~G~CG~t~~~C~~gCq~~     ")
        self.assertEqual(alignment.target.id, "4mpi_A")
        self.assertEqual(alignment.target.seq[2:40], "EQCGRQAGGALCPGGLCCSQYGWCANTPEYCGSGCQSQ")
        self.assertEqual(alignment.target.annotations["hmm_name"], "4mpi_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "Class I chitinase; hevein-like domain, chitin oligomers, sugar binding protein; HET: MES; 1.60A {Hevea brasiliensis subsp}")
        self.assertEqual(alignment[0], "EQCGRQAGGALCPGGLCCSQYGWCANTPEYCGSGCQSQ")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "  CBCBGGGTTBCCGGGCEECTTSBEECSHHHHSTTCCBC     ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "  cccCCcCCCcccCCCCcCcccceecCCccccccccccc     ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "  45665544567889999999999999999999999873     ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 97.46)
        self.assertAlmostEqual(alignment.annotations["E-value"], 6.6e-08)
        self.assertAlmostEqual(alignment.annotations["Score"], 52.98)
        self.assertAlmostEqual(alignment.annotations["Identities"], 55)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.488)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 34.0)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[0:38], "ERCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNG")
        self.assertEqual(alignment[1], "ERCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKG-CQNG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "~~cg~~~~~~~c~~~~CCs~~g~CG~~~~~c~~~c~~~                                                                                                                                     ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], " ~~CG~~~~~~~C~~~~CCS~~G~CG~t~~~C~~~~Cq~~    ")
        self.assertEqual(alignment.target.id, "2lb7_A")
        self.assertEqual(alignment.target.seq[1:40], "QRCGDQARGAKCPNCLCCGKYGFCGSGDAYCGAGSCQSQ")
        self.assertEqual(alignment.target.annotations["hmm_name"], "2lb7_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "WAMP-1A, antimicrobial peptide 1A; antimicrobial protein; NMR {Triticum kiharae}")
        self.assertEqual(alignment[0], "QRCGDQARGAKCPNCLCCGKYGFCGSGDAYCGAGSCQSQ")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], " EECBGGGTTBCCCTTCEEETTTEEECSHHHHSTTSEEEC    ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], " CCCcCCCCCcccCCCCcCCcceeecCCccccCCCCccCC    ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], " 47899987789999999999999999999999868864     ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 97.25)
        self.assertAlmostEqual(alignment.annotations["E-value"], 2.2e-07)
        self.assertAlmostEqual(alignment.annotations["Score"], 48.31)
        self.assertAlmostEqual(alignment.annotations["Identities"], 50)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.296)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 27.1)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[41:75], "TSKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCG")
        self.assertEqual(alignment[1], "TSKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                         ~~~~Cg~~~~~~~c~~~~CCs~~g~CG~~~~~c~                                                                                                ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "  ~~~~CG~~~g~C~~g~CCS~~G~CG~~~~~C~ ")
        self.assertEqual(alignment.target.id, "2kus_A")
        self.assertEqual(alignment.target.seq[2:34], "PNGQCGPGWGGCRGGLCCSQYGYCGSGPKYCA")
        self.assertEqual(alignment.target.annotations["hmm_name"], "2kus_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "SM-AMP-1.1A; plant antimicrobial peptide, chitin-binding peptide, antimic protein; NMR {Stellaria media}")
        self.assertEqual(alignment[0], "PNGQCGPGWG--GCRGGLCCSQYGYCGSGPKYCA")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "  TTCBCBTTTBCCCTTCEECTTSBEECSHHHHC ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "  CCcccCCCCCcCCCCcEECCCceecCChhhhC ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "  45678875436899999999999999999986 ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 97.13)
        self.assertAlmostEqual(alignment.annotations["E-value"], 4.2e-07)
        self.assertAlmostEqual(alignment.annotations["Score"], 47.19)
        self.assertAlmostEqual(alignment.annotations["Identities"], 44)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.207)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 26.5)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[84:118], "ADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCG")
        self.assertEqual(alignment[1], "ADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                                                                    ~~~~Cg~~~~~~~c~~~~CCS~~G~CG~~~~~C~                                                     ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "  ~~~~CG~~~g~C~~g~CCS~~G~CG~~~~~C~ ")
        self.assertEqual(alignment.target.id, "2kus_A")
        self.assertEqual(alignment.target.seq[2:34], "PNGQCGPGWGGCRGGLCCSQYGYCGSGPKYCA")
        self.assertEqual(alignment.target.annotations["hmm_name"], "2kus_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "SM-AMP-1.1A; plant antimicrobial peptide, chitin-binding peptide, antimic protein; NMR {Stellaria media}")
        self.assertEqual(alignment[0], "PNGQCGPGWG--GCRGGLCCSQYGYCGSGPKYCA")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "  TTCBCBTTTBCCCTTCEECTTSBEECSHHHHC ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "  CCcccCCCCCcCCCCcEECCCceecCChhhhC ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "  45677775436889999999999999999986 ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 97.04)
        self.assertAlmostEqual(alignment.annotations["E-value"], 6.8e-07)
        self.assertAlmostEqual(alignment.annotations["Score"], 44.77)
        self.assertAlmostEqual(alignment.annotations["Identities"], 48)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.444)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 22.0)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[94:119], "GKLCPNNLCCSQWGFCGLGSEFCGG")
        self.assertEqual(alignment[1], "GKLCPNNLCCSQWGFCGLGSEFCGG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                                                                              ~~~c~~~~CCS~~G~CG~~~~~C~~                                                    ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "     ~~~C~~~~CCS~~G~CG~t~~~C~~")
        self.assertEqual(alignment.target.id, "1mmc_A")
        self.assertEqual(alignment.target.seq[5:30], "RGRCPSGMCCSQFGYCGKGPKYCGR")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1mmc_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "AC-AMP2, antimicrobial peptide 2; antifungal antimicrobial, chitin-binding; NMR {Amaranthus caudatus} SCOP: g.3.1.2 PDB: 1zuv_A 1zwu_A* 1znt_A*")
        self.assertEqual(alignment[0], "RGRCPSGMCCSQFGYCGKGPKYCGR")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "     SSCCSTTCEECTTSCEESSHHHHCC")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "     cCCCCCCCcccccceeCCchHhhCc")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "     3468899999999999999999963")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 96.99)
        self.assertAlmostEqual(alignment.annotations["E-value"], 8.4e-07)
        self.assertAlmostEqual(alignment.annotations["Score"], 44.41)
        self.assertAlmostEqual(alignment.annotations["Identities"], 52)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.425)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 23.6)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[6:33], "GSNMECPNNLCCSQYGYCGMGGDYCGK")
        self.assertEqual(alignment[1], "GSNMECPNNLCCSQYGYCGMGGDYCGK")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "      ~~~~~c~~~~CCs~~g~CG~~~~~c~~                                                                                                                                          ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "   ~~~~~C~~~~CCS~~G~CG~t~~~C~~")
        self.assertEqual(alignment.target.id, "1mmc_A")
        self.assertEqual(alignment.target.seq[3:30], "CVRGRCPSGMCCSQFGYCGKGPKYCGR")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1mmc_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "AC-AMP2, antimicrobial peptide 2; antifungal antimicrobial, chitin-binding; NMR {Amaranthus caudatus} SCOP: g.3.1.2 PDB: 1zuv_A 1zwu_A* 1znt_A*")
        self.assertEqual(alignment[0], "CVRGRCPSGMCCSQFGYCGKGPKYCGR")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "   CSSSCCSTTCEECTTSCEESSHHHHCC")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "   CccCCCCCCCcccccceeCCchHhhCc")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "   345689999999999999999999973")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 96.90)
        self.assertAlmostEqual(alignment.annotations["E-value"], 1.3e-06)
        self.assertAlmostEqual(alignment.annotations["Score"], 43.64)
        self.assertAlmostEqual(alignment.annotations["Identities"], 48)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.477)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 20.7)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[95:118], "KLCPNNLCCSQWGFCGLGSEFCG")
        self.assertEqual(alignment[1], "KLCPNNLCCSQWGFCGLGSEFCG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                                                                               ~~c~~~~CCS~~G~CG~~~~~C~                                                     ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "       ~~C~~~~CCs~~G~CGtt~~~C~")
        self.assertEqual(alignment.target.id, "2n1s_A")
        self.assertEqual(alignment.target.seq[7:30], "GRCSGGLCCSKYGYCGSGPAYCG")
        self.assertEqual(alignment.target.annotations["hmm_name"], "2n1s_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "AMP-2; antimicrobial peptide, ICK, cystine knot inhibitor, cystine antimicrobial protein; NMR {Stellaria media}")
        self.assertEqual(alignment[0], "GRCSGGLCCSKYGYCGSGPAYCG")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "       TBCSTTCEECTTSBEECSHHHHC")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "       CCCCCCCccccccccCcchhhcC")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "       36888999999999999999985")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 96.77)
        self.assertAlmostEqual(alignment.annotations["E-value"], 2.3e-06)
        self.assertAlmostEqual(alignment.annotations["Score"], 42.68)
        self.assertAlmostEqual(alignment.annotations["Identities"], 56)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.468)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 23.6)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[1:32], "RCGEQGSNMECPNNLCCSQYGYCGMGGDYCG")
        self.assertEqual(alignment[1], "RCGEQGSNMECPNNLCCSQYGYCGMGGDYCG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], " ~cg~~~~~~~c~~~~CCs~~g~CG~~~~~c~                                                                                                                                           ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "   ~cg~~~C~~~~CCs~~G~CGtt~~~C~")
        self.assertEqual(alignment.target.id, "2n1s_A")
        self.assertEqual(alignment.target.seq[3:30], "QCYRGRCSGGLCCSKYGYCGSGPAYCG")
        self.assertEqual(alignment.target.annotations["hmm_name"], "2n1s_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "AMP-2; antimicrobial peptide, ICK, cystine knot inhibitor, cystine antimicrobial protein; NMR {Stellaria media}")
        self.assertEqual(alignment[0], "QCY----RGRCSGGLCCSKYGYCGSGPAYCG")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "   BCBTTBCSTTCEECTTSBEECSHHHHC")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "   hcCCCCCCCCCccccccccCcchhhcC")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "   566258999999999999999999985")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 96.11)
        self.assertAlmostEqual(alignment.annotations["E-value"], 2.5e-05)
        self.assertAlmostEqual(alignment.annotations["Score"], 59.25)
        self.assertAlmostEqual(alignment.annotations["Identities"], 66)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.556)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 32.2)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[86:124], "IKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSG")
        self.assertEqual(alignment[1], "IKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                                                                      ~~Cg~~~~~~~c~~~~CCS~~G~CG~~~~~C~~~Cq~~                                               ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], " ~~cG~~~~~~~c~~~~ccs~~g~cg~~~~~C~~~cq~~                                                                                                                                                                                                                                                                              ")
        self.assertEqual(alignment.target.id, "2dkv_A")
        self.assertEqual(alignment.target.seq[1:39], "EQCGAQAGGARCPNCLCCSRWGWCGTTSDFCGDGCQSQ")
        self.assertEqual(alignment.target.annotations["hmm_name"], "2dkv_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "Chitinase; whole structure, oryza sativa L. japonica, hydrolase; HET: MES; 2.00A {Oryza sativa japonica group} PDB: 3iwr_A*")
        self.assertEqual(alignment[0], "EQCGAQAGGARCPNCLCCSRWGWCGTTSDFCGDGCQSQ")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], " CBCSTTTTTCCCGGGCEECTTSBEESSHHHHSTTCCBC                                                                                                                                                                                                                                                                              ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], " CCCCCCCCCCcCCCCCeeCcCCcccCCccccCccccCC                                                                                                                                                                                                                                                                              ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], " 35666555578999999999999999999999999975                                                                                                                                                                                                                                                                              ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 95.96)
        self.assertAlmostEqual(alignment.annotations["E-value"], 3.8e-05)
        self.assertAlmostEqual(alignment.annotations["Score"], 58.17)
        self.assertAlmostEqual(alignment.annotations["Identities"], 53)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.380)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 33.1)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[43:81], "KRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGG")
        self.assertEqual(alignment[1], "KRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                           ~~Cg~~~~~~~c~~~~CCs~~g~CG~~~~~c~~~c~~~                                                                                          ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], " ~~cG~~~~~~~c~~~~ccs~~g~cg~~~~~C~~~cq~~                                                                                                                                                                                                                                                                              ")
        self.assertEqual(alignment.target.id, "2dkv_A")
        self.assertEqual(alignment.target.seq[1:39], "EQCGAQAGGARCPNCLCCSRWGWCGTTSDFCGDGCQSQ")
        self.assertEqual(alignment.target.annotations["hmm_name"], "2dkv_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "Chitinase; whole structure, oryza sativa L. japonica, hydrolase; HET: MES; 2.00A {Oryza sativa japonica group} PDB: 3iwr_A*")
        self.assertEqual(alignment[0], "EQCGAQAGGARCPNCLCCSRWGWCGTTSDFCGDGCQSQ")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], " CBCSTTTTTCCCGGGCEECTTSBEESSHHHHSTTCCBC                                                                                                                                                                                                                                                                              ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], " CCCCCCCCCCcCCCCCeeCcCCcccCCccccCccccCC                                                                                                                                                                                                                                                                              ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], " 46777666678999999999999999999999999865                                                                                                                                                                                                                                                                              ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 85.64)
        self.assertAlmostEqual(alignment.annotations["E-value"], 0.043)
        self.assertAlmostEqual(alignment.annotations["Score"], 38.99)
        self.assertAlmostEqual(alignment.annotations["Identities"], 41)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.195)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 0.0)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[143:165], "NYCCSKWGSCGIGPGYCGAGCQ")
        self.assertEqual(alignment[1], "NYCCSKWGSCGIGPGYCG-AGCQ")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                                                                                                                               ~~CCS~~G~CG~~~~~C~~gCq      ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "                                               ~~CCs~~~~Cg~~~~~C~~~~c~                                                                                                                                                                                          ")
        self.assertEqual(alignment.target.id, "4zxm_A")
        self.assertEqual(alignment.target.seq[47:70], "DHCCSEWGWCGRETSHCTCSSCV")
        self.assertEqual(alignment.target.annotations["hmm_name"], "4zxm_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "PGRP domain of peptidoglycan recognition protein; amidase, hydrolase; 2.80A {Branchiostoma belcheri tsingtauense}")
        self.assertEqual(alignment[0], "DHCCSEWGWCGRETSHCTCSSCV")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "                                                                                                                                                                                                                                                                ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "                                               CCCCCCCCeEeCCCCCcCCcccc                                                                                                                                                                                          ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "                                               6899999999999999973565                                                                                                                                                                                           ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 80.97)
        self.assertAlmostEqual(alignment.annotations["E-value"], 0.11)
        self.assertAlmostEqual(alignment.annotations["Score"], 32.66)
        self.assertAlmostEqual(alignment.annotations["Identities"], 20)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 0.658)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 91.1)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[10:166], "ECPNNLCCSQYGYCGMGGDYCGKGCQNGACWTSKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQS")
        self.assertEqual(alignment[1], "ECPNNLCCSQYGYCGMGGDYCGKGCQNGACWTSKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQS")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "          ~c~~~~CCs~~g~CG~~~~~c~~~c~~~~c~~~~~Cg~~~~~~~c~~~~CCs~~g~CG~~~~~c~~~c~~~~~~~~~~Cg~~~~~~~c~~~~CCS~~G~CG~~~~~C~~~Cq~~~c~~~~~Cg~~~~~~~c~~~~CCS~~G~CG~~~~~C~~gCq~     ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "          ~c~~~~cc~~~~~c~~~~~~c~~~c~~~~c~~~~~c~~~~~~c~~~~cc~~~~~c~~~~~~c~~~c~~~~c~~~~~c~~~~~~c~~~~cc~~~~~c~~~~~~c~~~c~~~~c~~~~~c~~~~~~c~~~~cc~~~~~c~~~~~~c~~~c~~    ")
        self.assertEqual(alignment.target.id, "1wga")
        self.assertEqual(alignment.target.seq[10:160], "XCXXXXCCXXXXXCXXXXXXCXXXCXXXXCXXXXXCXXXXXXCXXXXCCXXXXXCXXXXXXCXXXCXXXXCXXXXXCXXXXXXCXXXXCCXXXXXCXXXXXXCXXXCXXXXCXXXXXCXXXXXXCXXXXCCXXXXXCXXXXXXCXXXCXX")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1wga")
        self.assertEqual(alignment.target.annotations["hmm_description"], "; lectin (agglutinin); NMR {}")
        self.assertEqual(alignment[0], "XCXXXXCCXXXXXCXXXXXXCXXXCXXXXCXXXXXCXXX--XXXCXXXXCCXXXXXCXXXXXXCXXXCXXXXCXXXXXCXXX--XXXCXXXXCCXXXXXCXXXXXXCXXXCXXXXCXXXXXCXXX--XXXCXXXXCCXXXXXCXXXXXXCXXXCXX")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "          cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc    ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "          456667777777777777777665554434333344332235666778877777777777776665544333333343323456667788888888777777776665544433334443234566677888777787777777665543    ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 80.29)
        self.assertAlmostEqual(alignment.annotations["E-value"], 0.11)
        self.assertAlmostEqual(alignment.annotations["Score"], 36.76)
        self.assertAlmostEqual(alignment.annotations["Identities"], 37)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 0.967)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 0.0)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[1:36], "RCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQ")
        self.assertEqual(alignment[1], "RCGEQG-----SNMECPN---NLCCSQYGYCGMGGDYCGK-GCQ")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], " ~cg~~~~~~~c~~~~CCs~~g~CG~~~~~c~~~c~                                                                                                                                       ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "                          ~Cg~~~~~~~~~~~~C~~~~~~~CCs~~~~Cg~~~~~C~~~~c~                                                                                                                                                                                          ")
        self.assertEqual(alignment.target.id, "4zxm_A")
        self.assertEqual(alignment.target.seq[26:70], "RCGPNYPAPDANPGECNPHAVDHCCSEWGWCGRETSHCTCSSCV")
        self.assertEqual(alignment.target.annotations["hmm_name"], "4zxm_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "PGRP domain of peptidoglycan recognition protein; amidase, hydrolase; 2.80A {Branchiostoma belcheri tsingtauense}")
        self.assertEqual(alignment[0], "RCGPNYPAPDANPGECNPHAVDHCCSEWGWCGRETSHCTCSSCV")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "                                                                                                                                                                                                                                                                ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "                          CCCCCCCCCCCCCcccCCCCCCCCCCCCCeEeCCCCCcCCcccc                                                                                                                                                                                          ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "                          57765423467657899999999999999974576                                                                                                                                                                                                   ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 80.27)
        self.assertAlmostEqual(alignment.annotations["E-value"], 0.11)
        self.assertAlmostEqual(alignment.annotations["Score"], 36.29)
        self.assertAlmostEqual(alignment.annotations["Identities"], 38)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.185)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 19.7)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[99:123], "NNLCCSQWGFCGLGSEFCGGGCQS")
        self.assertEqual(alignment[1], "NNLCCSQWGFCGLGSEFCGG-GCQS")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                                                                                   ~~~CCS~~G~CG~~~~~C~~~Cq~                                                ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "                             ~~~CCs~~~~cg~~~~~c~~~~c~d                                                                                                                                                                                      ")
        self.assertEqual(alignment.target.id, "4z8i_A")
        self.assertEqual(alignment.target.seq[29:54], "VDHCCSEWGWCGRETSHCTCSSCVD")
        self.assertEqual(alignment.target.annotations["hmm_name"], "4z8i_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "BBTPGRP3, peptidoglycan recognition protein 3; chitin-binding domain, AM hydrolase; 2.70A {Branchiostoma belcheri tsingtauense}")
        self.assertEqual(alignment[0], "VDHCCSEWGWCGRETSHCTCSSCVD")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "                             SCCEECTTSBEECSHHHHHSTTCEE                                                                                                                                                                                      ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "                             CCCCCCCCCEEeCCcccccCCcccc                                                                                                                                                                                      ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "                             368999999999999999835553                                                                                                                                                                                       ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 79.58)
        self.assertAlmostEqual(alignment.annotations["E-value"], 0.12)
        self.assertAlmostEqual(alignment.annotations["Score"], 36.06)
        self.assertAlmostEqual(alignment.annotations["Identities"], 35)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 0.927)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 27.4)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[0:37], "ERCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQN")
        self.assertEqual(alignment[1], "ERCGEQG-----SNMECPN---NLCCSQYGYCGMGGDYCGK-GCQN")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "~~cg~~~~~~~c~~~~CCs~~g~CG~~~~~c~~~c~~                                                                                                                                      ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "        ~rCg~~~~~~~~~~~~C~~~~~~~CCs~~~~cg~~~~~c~~~~c~d                                                                                                                                                                                      ")
        self.assertEqual(alignment.target.id, "4z8i_A")
        self.assertEqual(alignment.target.seq[8:54], "GRCGPNYPAPDANPGECNPHAVDHCCSEWGWCGRETSHCTCSSCVD")
        self.assertEqual(alignment.target.annotations["hmm_name"], "4z8i_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "BBTPGRP3, peptidoglycan recognition protein 3; chitin-binding domain, AM hydrolase; 2.70A {Branchiostoma belcheri tsingtauense}")
        self.assertEqual(alignment[0], "GRCGPNYPAPDANPGECNPHAVDHCCSEWGWCGRETSHCTCSSCVD")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "        SBCBSSSCBTTBSSBBCCTTSSCCEECTTSBEECSHHHHHSTTCEE                                                                                                                                                                                      ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "        CCCCCCCCCCCCCCcccCCCCCCCCCCCCCEEeCCcccccCCcccc                                                                                                                                                                                      ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "        3677664334565378999999999999999845654                                                                                                                                                                                               ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 40.43)
        self.assertAlmostEqual(alignment.annotations["E-value"], 2.6)
        self.assertAlmostEqual(alignment.annotations["Score"], 25.90)
        self.assertAlmostEqual(alignment.annotations["Identities"], 20)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 0.652)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 54.7)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[53:163], "TCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAG")
        self.assertEqual(alignment[1], "TCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                                     ~c~~~~CCs~~g~CG~~~~~c~~~c~~~~~~~~~~Cg~~~~~~~c~~~~CCS~~G~CG~~~~~C~~~Cq~~~c~~~~~Cg~~~~~~~c~~~~CCS~~G~CG~~~~~C~~g        ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "          ~c~~~~cc~~~~~c~~~~~~c~~~c~~~~c~~~~~c~~~~~~c~~~~cc~~~~~c~~~~~~c~~~c~~~~c~~~~~c~~~~~~c~~~~cc~~~~~c~~~~~~c~~~                                                ")
        self.assertEqual(alignment.target.id, "1wga")
        self.assertEqual(alignment.target.seq[10:116], "XCXXXXCCXXXXXCXXXXXXCXXXCXXXXCXXXXXCXXXXXXCXXXXCCXXXXXCXXXXXXCXXXCXXXXCXXXXXCXXXXXXCXXXXCCXXXXXCXXXXXXCXXX")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1wga")
        self.assertEqual(alignment.target.annotations["hmm_description"], "; lectin (agglutinin); NMR {}")
        self.assertEqual(alignment[0], "XCXXXXCCXXXXXCXXXXXXCXXXCXXXXCXXXXXCXXX--XXXCXXXXCCXXXXXCXXXXXXCXXXCXXXXCXXXXXCXXX--XXXCXXXXCCXXXXXCXXXXXXCXXX")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "          cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc                                                ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "          3445566666666666665665555433332233333212346666777777777777666666555443322233332223344455555555555555544433                                                ")
        with self.assertRaises(StopIteration):
            next(alignments)


class Align_hhr_2uvo_hhsearch(unittest.TestCase):
    def test_reading(self):
        path = os.path.join("HHsuite", "2uvo_hhsearch.hhr")
        alignments = hhr.AlignmentIterator(path)
        self.assertEqual(alignments.metadata["No_of_seqs"], (1, 4))
        self.assertAlmostEqual(alignments.metadata["Neff"], 1.0)
        self.assertEqual(alignments.metadata["Searched_HMMs"], 38388)
        self.assertEqual(alignments.metadata["Date"], "Fri Feb  1 13:49:32 2019")
        self.assertEqual(alignments.commandline, "hhsearch -i 2uvo.fasta -d /pdb70_hhm_db")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 100.00)
        self.assertAlmostEqual(alignment.annotations["E-value"], 4.6e-42)
        self.assertAlmostEqual(alignment.annotations["Score"], 249.39)
        self.assertAlmostEqual(alignment.annotations["Identities"], 100)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 2.050)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 166.9)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[0:171], "ERCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNGACWTSKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQSGGCDG")
        self.assertEqual(alignment[1], "ERCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNGACWTSKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQSGGCDG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "ercgeqgsnmecpnnlccsqygycgmggdycgkgcqngacwtskrcgsqaggatctnnqccsqygycgfgaeycgagcqggpcradikcgsqaggklcpnnlccsqwgfcglgsefcgggcqsgacstdkpcgkdaggrvctnnyccskwgscgigpgycgagcqsggcdg")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "~~cg~~~~~~~c~~~~CCS~~g~Cg~~~~~Cg~gC~~~~c~~~~~cg~~~~~~~c~~~~CCs~~g~Cg~~~~~c~~~c~~~~~~~~~~cg~~~~~~~c~~~~CCs~~g~CG~~~~~C~~gCq~~~c~~~~~cg~~~~~~~c~~~~ccs~~g~Cg~~~~~C~~~cq~~~~~~")
        self.assertEqual(alignment.target.id, "2uvo_A")
        self.assertEqual(alignment.target.seq[0:171], "ERCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNGACWTSKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQSGGCDG")
        self.assertEqual(alignment.target.annotations["hmm_name"], "2uvo_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "Agglutinin isolectin 1; carbohydrate-binding protein, hevein domain, chitin-binding, GERM agglutinin, chitin-binding protein; HET: NDG NAG GOL; 1.40A {Triticum aestivum} PDB: 1wgc_A* 2cwg_A* 2x3t_A* 4aml_A* 7wga_A 9wga_A 2wgc_A 1wgt_A 1k7t_A* 1k7v_A* 1k7u_A 2x52_A* 1t0w_A*")
        self.assertEqual(alignment[0], "ERCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNGACWTSKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQSGGCDG")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "CBCBGGGTTBBCGGGCEECTTSBEEBSHHHHSTTCCBSSCSSCCBCBGGGTTBCCSTTCEECTTSBEEBSHHHHSTTCCBSSCSSCCBCBGGGTTBCCGGGCEECTTSBEEBSHHHHSTTCCBSSCSSCCCCBTTTTTBCCSTTCEECTTSCEEBSHHHHSTTCCBSSCC ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "CCCCCCCCCcCCCCCCeeCCCCeECCCcccccCCccccccccccccCcccCCcccCCccccCCCceeCCCccccCCCcccccccccccccccccCCCCCCCcccCCCCccCCCcccccCCCcCCccccccccccccccccCCCCCCcCCCCEecCchhhcccccccCCCCC")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "799999999999999999999999999999999999999999999999999999999999999999999999999999999999999999998899999999999999999999999999999999999999999999999999999999999999999999999999986")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 99.95)
        self.assertAlmostEqual(alignment.annotations["E-value"], 2.8e-33)
        self.assertAlmostEqual(alignment.annotations["Score"], 204.56)
        self.assertAlmostEqual(alignment.annotations["Identities"], 49)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.252)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 153.2)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[1:169], "RCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNGACWTSKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQSGGC")
        self.assertEqual(alignment[1], "RCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNGACWTSKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQSGGC")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], " rcgeqgsnmecpnnlccsqygycgmggdycgkgcqngacwtskrcgsqaggatctnnqccsqygycgfgaeycgagcqggpcradikcgsqaggklcpnnlccsqwgfcglgsefcgggcqsgacstdkpcgkdaggrvctnnyccskwgscgigpgycgagcqsggc  ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], " ~~g~~~~~~~c~~~~CCs~~g~Cg~~~~~c~~~C~~~~c~~~~~cg~~~~~c~~~~CCs~~G~CG~~~~~C~~~C~~~~~~~~~~Cg~~~~~c~~~~Ccs~~G~CGt~~~~C~~~cq~~~c~~~~~cg~~~~~c~~~~Ccs~~g~Cg~~~~~C~~~cq~~~~ ")
        self.assertEqual(alignment.target.id, "2wga")
        self.assertEqual(alignment.target.seq[1:163], "GXGCXGXXMYCSTNNCCXXWESCGSGGYXCGEGCNLGACQXGXPCXXPGSVCTNLHCCARGGHCGMGSGYCGXGCXGGACXADIXCGXGXXXCPTDSCCGGWGXCGNGXEFCGXGCXVGGCAAXSPCGXPGSXCTLDKCCSGXGACXSGSGGCGXGCXAGGC")
        self.assertEqual(alignment.target.annotations["hmm_name"], "2wga")
        self.assertEqual(alignment.target.annotations["hmm_description"], "; lectin (agglutinin); NMR {}")
        self.assertEqual(alignment[0], "GXGCXGXXMYCSTNNCCXXWESCGSGGYXCGEGCNLGACQXGXPCXX--PGSVCTNLHCCARGGHCGMGSGYCGXGCXGGACXADIXCGXG--XXXCPTDSCCGGWGXCGNGXEFCGXGCXVGGCAAXSPCGX--PGSXCTLDKCCSGXGACXSGSGGCGXGCXAGGC")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], " CSGGGSSCCCCSTTCEECTTSCEECSTTTTSTTCCSSSCSSCCCSSSSSCCCSTTCEECTTSCEESSHHHHSSCCSSSSCSSCCCCTTSSSCCSTTCBCCSSSCCBCSHHHHSTTCCSSSCSSCCCCSSSCCCCSTTCEECSSSSEECSTTTTSSCCSSSSC ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], " ccCCCcccccCCCCceECCcceECCCCccccCccccCcccccceeccCCCcCCCCcccCCCceeCCCCcccCCCccccccccccccCcccccCCCCCccCCCCCccCccccccCCccccccccccccCCCcccCCcccccCCCCceeCCccccCCCCcCCCC ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], " 588899999999999999999999999999999999999999999985789999999999999999999999999999999999999855679999999999999999999999999999999999988367899999999999999999999999999876 ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 99.84)
        self.assertAlmostEqual(alignment.annotations["E-value"], 1.1e-25)
        self.assertAlmostEqual(alignment.annotations["Score"], 163.39)
        self.assertAlmostEqual(alignment.annotations["Identities"], 60)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.533)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 121.1)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[43:169], "KRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQSGGC")
        self.assertEqual(alignment[1], "KRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQSGGC")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                           krcgsqaggatctnnqccsqygycgfgaeycgagcqggpcradikcgsqaggklcpnnlccsqwgfcglgsefcgggcqsgacstdkpcgkdaggrvctnnyccskwgscgigpgycgagcqsggc  ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "~~cg~~~~~~~c~~~~CCS~~g~Cg~~~~~Cg~gC~~~~c~~~~~cg~~~~~~~c~~~~CCs~~g~Cg~~~~~c~~~c~~~~~~~~~~cg~~~~~~~c~~~~CCs~~g~CG~~~~~C~~gCq~~~c                                             ")
        self.assertEqual(alignment.target.id, "2uvo_A")
        self.assertEqual(alignment.target.seq[0:126], "ERCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNGACWTSKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGAC")
        self.assertEqual(alignment.target.annotations["hmm_name"], "2uvo_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "Agglutinin isolectin 1; carbohydrate-binding protein, hevein domain, chitin-binding, GERM agglutinin, chitin-binding protein; HET: NDG NAG GOL; 1.40A {Triticum aestivum} PDB: 1wgc_A* 2cwg_A* 2x3t_A* 4aml_A* 7wga_A 9wga_A 2wgc_A 1wgt_A 1k7t_A* 1k7v_A* 1k7u_A 2x52_A* 1t0w_A*")
        self.assertEqual(alignment[0], "ERCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNGACWTSKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGAC")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "CBCBGGGTTBBCGGGCEECTTSBEEBSHHHHSTTCCBSSCSSCCBCBGGGTTBCCSTTCEECTTSBEEBSHHHHSTTCCBSSCSSCCBCBGGGTTBCCGGGCEECTTSBEEBSHHHHSTTCCBSSC                                             ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "CCCCCCCCCcCCCCCCeeCCCCeECCCcccccCCccccccccccccCcccCCcccCCccccCCCceeCCCccccCCCcccccccccccccccccCCCCCCCcccCCCCccCCCcccccCCCcCCcc                                             ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "489999999999999999999999999999999999999999999999998899999999999999999999999999999999999999988889999999999999999999999999998644                                             ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 99.84)
        self.assertAlmostEqual(alignment.annotations["E-value"], 1.5e-25)
        self.assertAlmostEqual(alignment.annotations["Score"], 157.96)
        self.assertAlmostEqual(alignment.annotations["Identities"], 52)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.251)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 110.7)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[43:167], "KRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQSG")
        self.assertEqual(alignment[1], "KRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQSG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                           krcgsqaggatctnnqccsqygycgfgaeycgagcqggpcradikcgsqaggklcpnnlccsqwgfcglgsefcgggcqsgacstdkpcgkdaggrvctnnyccskwgscgigpgycgagcqsg    ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], " ~~cg~~~~~~~c~~g~CCs~~g~CG~~~~~Cg~gCq~~c~~~~Cg~~~~~~~c~~~~CCs~~G~CG~~~~~C~~~Cq~~c~~~~cg~~~~~~~c~~~~CCs~~g~CG~~~~~C~~gCq~~     ")
        self.assertEqual(alignment.target.id, "1ulk_A")
        self.assertEqual(alignment.target.seq[1:121], "PVCGVRASGRVCPDGYCCSQWGYCGTTEEYCGKGCQSQCDYNRCGKEFGGKECHDELCCSQYGWCGNSDGHCGEGCQSQCSYWRCGKDFGGRLCTEDMCCSQYGWCGLTDDHCEDGCQSQ")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1ulk_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "Lectin-C; chitin-binding protein, hevein domain, PL-C, sugar binding protein; 1.80A {Phytolacca americana} SCOP: g.3.1.1 g.3.1.1 g.3.1.1")
        self.assertEqual(alignment[0], "PVCGVRASGRVCPDGYCCSQWGYCGTTEEYCGKGCQSQ-CD-YNRCGKEFGGKECHDELCCSQYGWCGNSDGHCGEGCQSQ-C-SYWRCGKDFGGRLCTEDMCCSQYGWCGLTDDHCEDGCQSQ")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], " CCSBGGGTTBCCGGGCEECTTSCEESSHHHHSTTCCBCTTTTBCBGGGTTBCCGGGCEECTTSBEECSHHHHSTTCCBCTTTTBCBGGGTTBCCSTTCEECTTSBEECSHHHHSTTCCBC     ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], " CcCcCCCCCCCCCCCCeECCCCeeCCCccccCCCccccceeeeccccccCCCCCCccccCCCcccccCcccccCCcccccCcccccccCCCccCCCCcccccCceecCcccccCcccccc     ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], " 699999999999999999999999999999999999764355788888889999999999999999999999999998633578999888999999999999999999999999999984     ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 99.82)
        self.assertAlmostEqual(alignment.annotations["E-value"], 6.5e-25)
        self.assertAlmostEqual(alignment.annotations["Score"], 154.69)
        self.assertAlmostEqual(alignment.annotations["Identities"], 50)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.299)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 109.2)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[0:123], "ERCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNGACWTSKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQS")
        self.assertEqual(alignment[1], "ERCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNGACWTSKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQS")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "ercgeqgsnmecpnnlccsqygycgmggdycgkgcqngacwtskrcgsqaggatctnnqccsqygycgfgaeycgagcqggpcradikcgsqaggklcpnnlccsqwgfcglgsefcgggcqs                                                ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], " ~~cg~~~~~~~c~~g~CCs~~g~CG~~~~~Cg~gCq~~c~~~~Cg~~~~~~~c~~~~CCs~~G~CG~~~~~C~~~Cq~~c~~~~cg~~~~~~~c~~~~CCs~~g~CG~~~~~C~~gCq~      ")
        self.assertEqual(alignment.target.id, "1ulk_A")
        self.assertEqual(alignment.target.seq[1:120], "PVCGVRASGRVCPDGYCCSQWGYCGTTEEYCGKGCQSQCDYNRCGKEFGGKECHDELCCSQYGWCGNSDGHCGEGCQSQCSYWRCGKDFGGRLCTEDMCCSQYGWCGLTDDHCEDGCQS")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1ulk_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "Lectin-C; chitin-binding protein, hevein domain, PL-C, sugar binding protein; 1.80A {Phytolacca americana} SCOP: g.3.1.1 g.3.1.1 g.3.1.1")
        self.assertEqual(alignment[0], "PVCGVRASGRVCPDGYCCSQWGYCGTTEEYCGKGCQSQ-CD-YNRCGKEFGGKECHDELCCSQYGWCGNSDGHCGEGCQSQ-CS-YWRCGKDFGGRLCTEDMCCSQYGWCGLTDDHCEDGCQS")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], " CCSBGGGTTBCCGGGCEECTTSCEESSHHHHSTTCCBCTTTTBCBGGGTTBCCGGGCEECTTSBEECSHHHHSTTCCBCTTTTBCBGGGTTBCCSTTCEECTTSBEECSHHHHSTTCCB      ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], " CcCcCCCCCCCCCCCCeECCCCeeCCCccccCCCccccceeeeccccccCCCCCCccccCCCcccccCcccccCCcccccCcccccccCCCccCCCCcccccCceecCcccccCccccc      ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], " 48999999999999999999999999999999999976444589988889999999999999999999999999999753356888888888999999999999999999999999997      ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 99.78)
        self.assertAlmostEqual(alignment.annotations["E-value"], 1.7e-23)
        self.assertAlmostEqual(alignment.annotations["Score"], 152.97)
        self.assertAlmostEqual(alignment.annotations["Identities"], 41)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.180)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 114.3)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[44:169], "RCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQSGGC")
        self.assertEqual(alignment[1], "RCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQSGGC")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                            rcgsqaggatctnnqccsqygycgfgaeycgagcqggpcradikcgsqaggklcpnnlccsqwgfcglgsefcgggcqsgacstdkpcgkdaggrvctnnyccskwgscgigpgycgagcqsggc  ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], " ~~g~~~~~~~c~~~~CCs~~g~Cg~~~~~c~~~C~~~~c~~~~~cg~~~~~c~~~~CCs~~G~CG~~~~~C~~~C~~~~~~~~~~Cg~~~~~c~~~~Ccs~~G~CGt~~~~C~~~cq~~~c                                          ")
        self.assertEqual(alignment.target.id, "2wga")
        self.assertEqual(alignment.target.seq[1:122], "GXGCXGXXMYCSTNNCCXXWESCGSGGYXCGEGCNLGACQXGXPCXXPGSVCTNLHCCARGGHCGMGSGYCGXGCXGGACXADIXCGXGXXXCPTDSCCGGWGXCGNGXEFCGXGCXVGGC")
        self.assertEqual(alignment.target.annotations["hmm_name"], "2wga")
        self.assertEqual(alignment.target.annotations["hmm_description"], "; lectin (agglutinin); NMR {}")
        self.assertEqual(alignment[0], "GXGCXGXXMYCSTNNCCXXWESCGSGGYXCGEGCNLGACQXGXPCXX--PGSVCTNLHCCARGGHCGMGSGYCGXGCXGGACXADIXCGXG--XXXCPTDSCCGGWGXCGNGXEFCGXGCXVGGC")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], " CSGGGSSCCCCSTTCEECTTSCEECSTTTTSTTCCSSSCSSCCCSSSSSCCCSTTCEECTTSCEESSHHHHSSCCSSSSCSSCCCCTTSSSCCSTTCBCCSSSCCBCSHHHHSTTCCSSSC                                          ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], " ccCCCcccccCCCCceECCcceECCCCccccCccccCcccccceeccCCCcCCCCcccCCCceeCCCCcccCCCccccccccccccCcccccCCCCCccCCCCCccCccccccCCcccccc                                          ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], " 4889999999999999999999999999999999999999999999857889999999999999999999999999999999999998667899999999999999999999999998654                                          ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 99.54)
        self.assertAlmostEqual(alignment.annotations["E-value"], 1.1e-18)
        self.assertAlmostEqual(alignment.annotations["Score"], 113.58)
        self.assertAlmostEqual(alignment.annotations["Identities"], 48)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.312)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 73.1)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[43:124], "KRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSG")
        self.assertEqual(alignment[1], "KRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                           krcgsqaggatctnnqccsqygycgfgaeycgagcqggpcradikcgsqaggklcpnnlccsqwgfcglgsefcgggcqsg                                               ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], " ~~cg~~~~~~~C~~g~CCs~~G~Cg~~~~~c~~~c~~~~~~g~Cg~~~~~~~c~~~~CCs~~g~CG~~~~~C~~~Cqs~  ")
        self.assertEqual(alignment.target.id, "1uha_A")
        self.assertEqual(alignment.target.seq[1:80], "PECGERASGKRCPNGKCCSQWGYCGTTDNYCGQGCQSQCDYWRCGRDFGGRLCEEDMCCSKYGWCGYSDDHCEDGCQSQ")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1uha_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "Lectin-D2; chitin-binding domain, sugar binding protein; 1.50A {Phytolacca americana} SCOP: g.3.1.1 g.3.1.1 PDB: 1ulm_A* 1uln_A")
        self.assertEqual(alignment[0], "PECGERASGKRCPNGKCCSQWGYCGTTDNYCGQGCQSQ-C-DYWRCGRDFGGRLCEEDMCCSKYGWCGYSDDHCEDGCQSQ")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], " CCSBGGGTTBCCGGGCEECTTSCEESSHHHHSTTCCBCTTTTBCBGGGTTBCCSTTCEECTTSBEECSHHHHSTTCCBC  ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], " CCCCCCCCCCcCCCCCccCCCccccCccccccCCccccccccccccccceecCCCCCccCCCccccCCccccccccccc  ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], " 5899999999999999999999999999999999996534678998888999999999999999999999999999984  ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 99.54)
        self.assertAlmostEqual(alignment.annotations["E-value"], 1.2e-18)
        self.assertAlmostEqual(alignment.annotations["Score"], 115.94)
        self.assertAlmostEqual(alignment.annotations["Identities"], 47)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.232)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 74.1)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[44:124], "RCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSG")
        self.assertEqual(alignment[1], "RCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRA----DIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGG-CQSG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                            rcgsqaggatctnnqccsqygycgfgaeycgagcqggpcradikcgsqaggklcpnnlccsqwgfcglgsefcgggcqsg                                               ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], " ~cg~~~~~~~C~~~~CCS~~G~CG~~~~~C~~~Cq~~c~~~~~~~~~Cg~~~~~~~c~~~~CCS~~G~CG~~~~~C~~~~Cq~~    ")
        self.assertEqual(alignment.target.id, "1en2_A")
        self.assertEqual(alignment.target.seq[1:85], "RCGSQGGGSTCPGLRCCSIWGWCGDSEPYCGRTCENKCWSGERSDHRCGAAVGNPPCGQDRCCSVHGWCGGGNDYCSGGNCQYR")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1en2_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "UDA, agglutinin isolectin I/agglutinin isolectin V/ AG isolectin VI; hevein domain, superantigen, saccharide binding binding protein; HET: NAG; 1.40A {Urtica dioica} SCOP: g.3.1.1 g.3.1.1 PDB: 1eis_A* 1enm_A* 1ehd_A 1ehh_A* 1iqb_A")
        self.assertEqual(alignment[0], "RCGSQGGGSTCPGLRCCSIWGWCGDSEPYCGRTCENK-CWSGERSDHRCGAAVGNPPCGQDRCCSVHGWCGGGNDYCSGGNCQYR")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], " BCTTTTTSCCCGGGCEEETTSBEESSHHHHSTTEEESCGGGCCTTCBCSGGGTCCCCCTTCEEETTSBEESSHHHHSGGGEEEC    ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], " CCCCCCCCccCCCCcccCCCceecccccccCCCCcCCCcccccCCcccCCcccccccCCCCeECCCceECCCccccCCCCcccC    ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], " 7999999999999999999999999999999999976665889999888899999999999999999999999989985         ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 99.41)
        self.assertAlmostEqual(alignment.annotations["E-value"], 5.1e-17)
        self.assertAlmostEqual(alignment.annotations["Score"], 108.07)
        self.assertAlmostEqual(alignment.annotations["Identities"], 48)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.287)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 74.0)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[0:81], "ERCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNGACWTSKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGG")
        self.assertEqual(alignment[1], "ERCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNGACWT----SKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAG-CQGG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "ercgeqgsnmecpnnlccsqygycgmggdycgkgcqngacwtskrcgsqaggatctnnqccsqygycgfgaeycgagcqgg                                                                                          ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "~~cg~~~~~~~C~~~~CCS~~G~CG~~~~~C~~~Cq~~c~~~~~~~~~Cg~~~~~~~c~~~~CCS~~G~CG~~~~~C~~~~Cq~~    ")
        self.assertEqual(alignment.target.id, "1en2_A")
        self.assertEqual(alignment.target.seq[0:85], "ERCGSQGGGSTCPGLRCCSIWGWCGDSEPYCGRTCENKCWSGERSDHRCGAAVGNPPCGQDRCCSVHGWCGGGNDYCSGGNCQYR")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1en2_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "UDA, agglutinin isolectin I/agglutinin isolectin V/ AG isolectin VI; hevein domain, superantigen, saccharide binding binding protein; HET: NAG; 1.40A {Urtica dioica} SCOP: g.3.1.1 g.3.1.1 PDB: 1eis_A* 1enm_A* 1ehd_A 1ehh_A* 1iqb_A")
        self.assertEqual(alignment[0], "ERCGSQGGGSTCPGLRCCSIWGWCGDSEPYCGRTCENK-CWSGERSDHRCGAAVGNPPCGQDRCCSVHGWCGGGNDYCSGGNCQYR")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "CBCTTTTTSCCCGGGCEEETTSBEESSHHHHSTTEEESCGGGCCTTCBCSGGGTCCCCCTTCEEETTSBEESSHHHHSGGGEEEC    ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "CCCCCCCCCccCCCCcccCCCceecccccccCCCCcCCCcccccCCcccCCcccccccCCCCeECCCceECCCccccCCCCcccC    ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "68999999999999999999999999999999999986764678998888889999999999999999999999988863         ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 99.38)
        self.assertAlmostEqual(alignment.annotations["E-value"], 1e-16)
        self.assertAlmostEqual(alignment.annotations["Score"], 104.25)
        self.assertAlmostEqual(alignment.annotations["Identities"], 53)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.284)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 72.3)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[87:167], "KCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQSG")
        self.assertEqual(alignment[1], "KCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQSG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                                                                       kcgsqaggklcpnnlccsqwgfcglgsefcgggcqsgacstdkpcgkdaggrvctnnyccskwgscgigpgycgagcqsg    ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "  ~cg~~~~~~~C~~g~CCs~~G~Cg~~~~~c~~~c~~~~~~g~Cg~~~~~~~c~~~~CCs~~g~CG~~~~~C~~~Cqs~  ")
        self.assertEqual(alignment.target.id, "1uha_A")
        self.assertEqual(alignment.target.seq[2:80], "ECGERASGKRCPNGKCCSQWGYCGTTDNYCGQGCQSQCDYWRCGRDFGGRLCEEDMCCSKYGWCGYSDDHCEDGCQSQ")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1uha_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "Lectin-D2; chitin-binding domain, sugar binding protein; 1.50A {Phytolacca americana} SCOP: g.3.1.1 g.3.1.1 PDB: 1ulm_A* 1uln_A")
        self.assertEqual(alignment[0], "ECGERASGKRCPNGKCCSQWGYCGTTDNYCGQGCQSQ--CDYWRCGRDFGGRLCEEDMCCSKYGWCGYSDDHCEDGCQSQ")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "  CSBGGGTTBCCGGGCEECTTSCEESSHHHHSTTCCBCTTTTBCBGGGTTBCCSTTCEECTTSBEECSHHHHSTTCCBC  ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "  CCCCCCCCCcCCCCCccCCCccccCccccccCCccccccccccccccceecCCCCCccCCCccccCCccccccccccc  ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "  588999999999999999999999999999999998624678999889999999999999999999999999999984  ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 98.20)
        self.assertAlmostEqual(alignment.annotations["E-value"], 1.6e-09)
        self.assertAlmostEqual(alignment.annotations["Score"], 66.41)
        self.assertAlmostEqual(alignment.annotations["Identities"], 59)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.390)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 36.7)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[85:127], "DIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACS")
        self.assertEqual(alignment[1], "DIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACS")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                                                                     dikcgsqaggklcpnnlccsqwgfcglgsefcgggcqsgacs                                            ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], " ~~~CG~~~~~~~C~~~~CCs~~G~CG~t~~~C~~gCq~~c~   ")
        self.assertEqual(alignment.target.id, "4mpi_A")
        self.assertEqual(alignment.target.seq[1:42], "MEQCGRQAGGALCPGGLCCSQYGWCANTPEYCGSGCQSQCD")
        self.assertEqual(alignment.target.annotations["hmm_name"], "4mpi_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "Class I chitinase; hevein-like domain, chitin oligomers, sugar binding protein; HET: MES; 1.60A {Hevea brasiliensis subsp}")
        self.assertEqual(alignment[0], "MEQCGRQAGGALCPGGLCCSQYGWCANTPEYCGSGCQSQ-CD")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], " CCBCBGGGTTBCCGGGCEECTTSBEECSHHHHSTTCCBCTT   ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], " ccccCCcCCCcccCCCCcCcccceecCCcccccccccccCC   ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], " 45688888889999999999999999999999999998554   ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 98.12)
        self.assertAlmostEqual(alignment.annotations["E-value"], 3.1e-09)
        self.assertAlmostEqual(alignment.annotations["Score"], 64.73)
        self.assertAlmostEqual(alignment.annotations["Identities"], 68)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.600)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 34.0)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[87:124], "KCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSG")
        self.assertEqual(alignment[1], "KCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGG--GCQSG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                                                                       kcgsqaggklcpnnlccsqwgfcglgsefcgggcqsg                                               ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], " ~CG~~~~~~~C~~~~CCS~~G~CG~t~~~C~~~~~Cq~~   ")
        self.assertEqual(alignment.target.id, "1wkx_A")
        self.assertEqual(alignment.target.seq[1:40], "QCGRQAGGKLCPDNLCCSQWGWCGSTDEYCSPDHNCQSN")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1wkx_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "Hevein isoform 2; allergen, lectin, agglutinin-toxin motif; 1.70A {Hevea brasiliensis} PDB: 1hev_A 1q9b_A* 4wp4_A")
        self.assertEqual(alignment[0], "QCGRQAGGKLCPDNLCCSQWGWCGSTDEYCSPDHNCQSN")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], " CSBGGGTTBCCSTTCEECTTSCEESSHHHHCGGGTCCBS   ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], " CCCCcCCCcccCCCCeEeecCcccCCcccccCCCCccCC   ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], " 4788888899999999999999999999999689985     ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 98.00)
        self.assertAlmostEqual(alignment.annotations["E-value"], 8e-09)
        self.assertAlmostEqual(alignment.annotations["Score"], 63.24)
        self.assertAlmostEqual(alignment.annotations["Identities"], 49)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.241)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 36.5)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[1:43], "RCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNGACWTS")
        self.assertEqual(alignment[1], "RCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNGACWTS")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], " rcgeqgsnmecpnnlccsqygycgmggdycgkgcqngacwts                                                                                                                                ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "   ~CG~~~~~~~C~~~~CCs~~G~CG~t~~~C~~gCq~~c~~~ ")
        self.assertEqual(alignment.target.id, "4mpi_A")
        self.assertEqual(alignment.target.seq[3:44], "QCGRQAGGALCPGGLCCSQYGWCANTPEYCGSGCQSQCDGG")
        self.assertEqual(alignment.target.annotations["hmm_name"], "4mpi_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "Class I chitinase; hevein-like domain, chitin oligomers, sugar binding protein; HET: MES; 1.60A {Hevea brasiliensis subsp}")
        self.assertEqual(alignment[0], "QCGRQAGGALCPGGLCCSQYGWCANTPEYCGSGCQSQ-CDGG")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "   BCBGGGTTBCCGGGCEECTTSBEECSHHHHSTTCCBCTTCC ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "   ccCCcCCCcccCCCCcCcccceecCCcccccccccccCCCC ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "   68888888999999999999999999999999999756543 ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 97.97)
        self.assertAlmostEqual(alignment.annotations["E-value"], 1e-08)
        self.assertAlmostEqual(alignment.annotations["Score"], 61.74)
        self.assertAlmostEqual(alignment.annotations["Identities"], 59)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.493)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 33.9)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[87:124], "KCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSG")
        self.assertEqual(alignment[1], "KCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGG-CQSG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                                                                       kcgsqaggklcpnnlccsqwgfcglgsefcgggcqsg                                               ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "  ~CG~~~~~~~C~~~~CCS~~G~CG~t~~~C~~~~Cq~~    ")
        self.assertEqual(alignment.target.id, "2lb7_A")
        self.assertEqual(alignment.target.seq[2:40], "RCGDQARGAKCPNCLCCGKYGFCGSGDAYCGAGSCQSQ")
        self.assertEqual(alignment.target.annotations["hmm_name"], "2lb7_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "WAMP-1A, antimicrobial peptide 1A; antimicrobial protein; NMR {Triticum kiharae}")
        self.assertEqual(alignment[0], "RCGDQARGAKCPNCLCCGKYGFCGSGDAYCGAGSCQSQ")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "  ECBGGGTTBCCCTTCEEETTTEEECSHHHHSTTSEEEC    ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "  CCcCCCCCcccCCCCcCCcceeecCCccccCCCCccCC    ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "  5788888899999999999999999999999879976     ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 97.88)
        self.assertAlmostEqual(alignment.annotations["E-value"], 2e-08)
        self.assertAlmostEqual(alignment.annotations["Score"], 62.00)
        self.assertAlmostEqual(alignment.annotations["Identities"], 49)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.238)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 33.7)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[0:38], "ERCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNG")
        self.assertEqual(alignment[1], "ERCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKG-CQNG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "ercgeqgsnmecpnnlccsqygycgmggdycgkgcqng                                                                                                                                     ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "~~CG~~~~~~C~~~~CCS~~G~CG~t~~~C~~~~Cq~~   ")
        self.assertEqual(alignment.target.id, "1p9g_A")
        self.assertEqual(alignment.target.seq[0:38], "ETCASRCPRPCNAGLCCSIYGYCGSGAAYCGAGNCRCQ")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1p9g_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "EAFP 2; antifungal peptide, atomic resolution, antifungal protein; HET: PCA; 0.84A {Eucommia ulmoides} SCOP: g.3.1.1 PDB: 1p9z_A*")
        self.assertEqual(alignment[0], "ETCA-SRCPRPCNAGLCCSIYGYCGSGAAYCGAGNCRCQ")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "CCGGGGTTCCSCTTCEEETTSCEECSHHHHSTTTEEEC   ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "CCcCCcCCcccCCCCeECccceeCCCccccCCCccccC   ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "6899578889999999999999999999999959976    ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 97.83)
        self.assertAlmostEqual(alignment.annotations["E-value"], 2.8e-08)
        self.assertAlmostEqual(alignment.annotations["Score"], 58.62)
        self.assertAlmostEqual(alignment.annotations["Identities"], 44)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.336)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 25.7)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[91:118], "QAGGKLCPNNLCCSQWGFCGLGSEFCG")
        self.assertEqual(alignment[1], "QAGGKLCPNNLCCSQWGFCGLGSEFCG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                                                                           qaggklcpnnlccsqwgfcglgsefcg                                                     ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "  ~~~~~~C~~~~CCS~~G~CG~t~~~C~ ")
        self.assertEqual(alignment.target.id, "1mmc_A")
        self.assertEqual(alignment.target.seq[2:29], "ECVRGRCPSGMCCSQFGYCGKGPKYCG")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1mmc_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "AC-AMP2, antimicrobial peptide 2; antifungal antimicrobial, chitin-binding; NMR {Amaranthus caudatus} SCOP: g.3.1.2 PDB: 1zuv_A 1zwu_A* 1znt_A*")
        self.assertEqual(alignment[0], "ECVRGRCPSGMCCSQFGYCGKGPKYCG")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "  CCSSSCCSTTCEECTTSCEESSHHHHC ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "  cCccCCCCCCCcccccceeCCchHhhC ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "  788889999999999999999999996 ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 97.83)
        self.assertAlmostEqual(alignment.annotations["E-value"], 2.9e-08)
        self.assertAlmostEqual(alignment.annotations["Score"], 61.32)
        self.assertAlmostEqual(alignment.annotations["Identities"], 39)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.187)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 32.1)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[87:124], "KCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSG")
        self.assertEqual(alignment[1], "KCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGG-CQSG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                                                                       kcgsqaggklcpnnlccsqwgfcglgsefcgggcqsg                                               ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], " ~CG~~~~~~C~~~~CCS~~G~CG~t~~~C~~~~Cq~~   ")
        self.assertEqual(alignment.target.id, "1p9g_A")
        self.assertEqual(alignment.target.seq[1:38], "TCASRCPRPCNAGLCCSIYGYCGSGAAYCGAGNCRCQ")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1p9g_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "EAFP 2; antifungal peptide, atomic resolution, antifungal protein; HET: PCA; 0.84A {Eucommia ulmoides} SCOP: g.3.1.1 PDB: 1p9z_A*")
        self.assertEqual(alignment[0], "TCA-SRCPRPCNAGLCCSIYGYCGSGAAYCGAGNCRCQ")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], " CGGGGTTCCSCTTCEEETTSCEECSHHHHSTTTEEEC   ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], " CcCCcCCcccCCCCeECccceeCCCccccCCCccccC   ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], " 477477889999999999999999999999859986    ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 97.76)
        self.assertAlmostEqual(alignment.annotations["E-value"], 4.7e-08)
        self.assertAlmostEqual(alignment.annotations["Score"], 59.52)
        self.assertAlmostEqual(alignment.annotations["Identities"], 50)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.302)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 34.7)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[0:38], "ERCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNG")
        self.assertEqual(alignment[1], "ERCGEQGSNMECPNNLCCSQYGYCGMGGDYCGK--GCQNG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "ercgeqgsnmecpnnlccsqygycgmggdycgkgcqng                                                                                                                                     ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "~~CG~~~~~~~C~~~~CCS~~G~CG~t~~~C~~~~~Cq~~   ")
        self.assertEqual(alignment.target.id, "1wkx_A")
        self.assertEqual(alignment.target.seq[0:40], "EQCGRQAGGKLCPDNLCCSQWGWCGSTDEYCSPDHNCQSN")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1wkx_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "Hevein isoform 2; allergen, lectin, agglutinin-toxin motif; 1.70A {Hevea brasiliensis} PDB: 1hev_A 1q9b_A* 4wp4_A")
        self.assertEqual(alignment[0], "EQCGRQAGGKLCPDNLCCSQWGWCGSTDEYCSPDHNCQSN")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "CCSBGGGTTBCCSTTCEECTTSCEESSHHHHCGGGTCCBS   ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "CCCCCcCCCcccCCCCeEeecCcccCCcccccCCCCccCC   ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "58999988899999999999999999999999778864     ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 97.58)
        self.assertAlmostEqual(alignment.annotations["E-value"], 1.5e-07)
        self.assertAlmostEqual(alignment.annotations["Score"], 56.59)
        self.assertAlmostEqual(alignment.annotations["Identities"], 55)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.488)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 34.3)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[0:38], "ERCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKGCQNG")
        self.assertEqual(alignment[1], "ERCGEQGSNMECPNNLCCSQYGYCGMGGDYCGKG-CQNG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "ercgeqgsnmecpnnlccsqygycgmggdycgkgcqng                                                                                                                                     ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], " ~~CG~~~~~~~C~~~~CCS~~G~CG~t~~~C~~~~Cq~~    ")
        self.assertEqual(alignment.target.id, "2lb7_A")
        self.assertEqual(alignment.target.seq[1:40], "QRCGDQARGAKCPNCLCCGKYGFCGSGDAYCGAGSCQSQ")
        self.assertEqual(alignment.target.annotations["hmm_name"], "2lb7_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "WAMP-1A, antimicrobial peptide 1A; antimicrobial protein; NMR {Triticum kiharae}")
        self.assertEqual(alignment[0], "QRCGDQARGAKCPNCLCCGKYGFCGSGDAYCGAGSCQSQ")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], " EECBGGGTTBCCCTTCEEETTTEEECSHHHHSTTSEEEC    ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], " CCCcCCCCCcccCCCCcCCcceeecCCccccCCCCccCC    ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], " 47888888889999999999999999999999878865     ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 97.58)
        self.assertAlmostEqual(alignment.annotations["E-value"], 1.6e-07)
        self.assertAlmostEqual(alignment.annotations["Score"], 55.11)
        self.assertAlmostEqual(alignment.annotations["Identities"], 42)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.250)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 23.2)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[92:118], "AGGKLCPNNLCCSQWGFCGLGSEFCG")
        self.assertEqual(alignment[1], "AGGKLCPNNLCCSQWGFCGLGSEFCG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                                                                            aggklcpnnlccsqwgfcglgsefcg                                                     ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "    cg~~~C~~~~CCs~~G~CGtt~~~C~")
        self.assertEqual(alignment.target.id, "2n1s_A")
        self.assertEqual(alignment.target.seq[4:30], "CYRGRCSGGLCCSKYGYCGSGPAYCG")
        self.assertEqual(alignment.target.annotations["hmm_name"], "2n1s_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "AMP-2; antimicrobial peptide, ICK, cystine knot inhibitor, cystine antimicrobial protein; NMR {Stellaria media}")
        self.assertEqual(alignment[0], "CYRGRCSGGLCCSKYGYCGSGPAYCG")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "    CBTTBCSTTCEECTTSBEECSHHHHC")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "    cCCCCCCCCCccccccccCcchhhcC")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "    34568999999999999999999985")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 97.56)
        self.assertAlmostEqual(alignment.annotations["E-value"], 1.7e-07)
        self.assertAlmostEqual(alignment.annotations["Score"], 55.43)
        self.assertAlmostEqual(alignment.annotations["Identities"], 42)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.160)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 29.5)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[83:118], "RADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCG")
        self.assertEqual(alignment[1], "RADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                                                                   radikcgsqaggklcpnnlccsqwgfcglgsefcg                                                     ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], " ~~~~~CG~~~g~C~~g~CCS~~G~CG~~~~~C~ ")
        self.assertEqual(alignment.target.id, "2kus_A")
        self.assertEqual(alignment.target.seq[1:34], "GPNGQCGPGWGGCRGGLCCSQYGYCGSGPKYCA")
        self.assertEqual(alignment.target.annotations["hmm_name"], "2kus_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "SM-AMP-1.1A; plant antimicrobial peptide, chitin-binding peptide, antimic protein; NMR {Stellaria media}")
        self.assertEqual(alignment[0], "GPNGQCGPGWG--GCRGGLCCSQYGYCGSGPKYCA")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], " CTTCBCBTTTBCCCTTCEECTTSBEECSHHHHC ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], " CCCcccCCCCCcCCCCcEECCCceecCChhhhC ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], " 467889988876999999999999999999986 ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 97.24)
        self.assertAlmostEqual(alignment.annotations["E-value"], 1.1e-06)
        self.assertAlmostEqual(alignment.annotations["Score"], 69.81)
        self.assertAlmostEqual(alignment.annotations["Identities"], 68)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.622)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 35.1)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[87:124], "KCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSG")
        self.assertEqual(alignment[1], "KCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                                                                       kcgsqaggklcpnnlccsqwgfcglgsefcgggcqsg                                               ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "  ~cG~~~~~~~c~~~~ccs~~g~cg~~~~~C~~~cq~~                                                                                                                                                                                                                                                                              ")
        self.assertEqual(alignment.target.id, "2dkv_A")
        self.assertEqual(alignment.target.seq[2:39], "QCGAQAGGARCPNCLCCSRWGWCGTTSDFCGDGCQSQ")
        self.assertEqual(alignment.target.annotations["hmm_name"], "2dkv_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "Chitinase; whole structure, oryza sativa L. japonica, hydrolase; HET: MES; 2.00A {Oryza sativa japonica group} PDB: 3iwr_A*")
        self.assertEqual(alignment[0], "QCGAQAGGARCPNCLCCSRWGWCGTTSDFCGDGCQSQ")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "  BCSTTTTTCCCGGGCEECTTSBEESSHHHHSTTCCBC                                                                                                                                                                                                                                                                              ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "  CCCCCCCCCcCCCCCeeCcCCcccCCccccCccccCC                                                                                                                                                                                                                                                                              ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "  4888889999999999999999999999999999987                                                                                                                                                                                                                                                                              ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 97.14)
        self.assertAlmostEqual(alignment.annotations["E-value"], 1.9e-06)
        self.assertAlmostEqual(alignment.annotations["Score"], 50.76)
        self.assertAlmostEqual(alignment.annotations["Identities"], 50)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.394)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 24.5)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[5:33], "QGSNMECPNNLCCSQYGYCGMGGDYCGK")
        self.assertEqual(alignment[1], "QGSNMECPNNLCCSQYGYCGMGGDYCGK")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "     qgsnmecpnnlccsqygycgmggdycgk                                                                                                                                          ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "  ~~~~~~C~~~~CCS~~G~CG~t~~~C~~")
        self.assertEqual(alignment.target.id, "1mmc_A")
        self.assertEqual(alignment.target.seq[2:30], "ECVRGRCPSGMCCSQFGYCGKGPKYCGR")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1mmc_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "AC-AMP2, antimicrobial peptide 2; antifungal antimicrobial, chitin-binding; NMR {Amaranthus caudatus} SCOP: g.3.1.2 PDB: 1zuv_A 1zwu_A* 1znt_A*")
        self.assertEqual(alignment[0], "ECVRGRCPSGMCCSQFGYCGKGPKYCGR")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "  CCSSSCCSTTCEECTTSCEESSHHHHCC")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "  cCccCCCCCCCcccccceeCCchHhhCc")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "  4456689999999999999999999974")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 97.02)
        self.assertAlmostEqual(alignment.annotations["E-value"], 3.5e-06)
        self.assertAlmostEqual(alignment.annotations["Score"], 49.35)
        self.assertAlmostEqual(alignment.annotations["Identities"], 56)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.468)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 23.7)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[1:32], "RCGEQGSNMECPNNLCCSQYGYCGMGGDYCG")
        self.assertEqual(alignment[1], "RCGEQGSNMECPNNLCCSQYGYCGMGGDYCG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], " rcgeqgsnmecpnnlccsqygycgmggdycg                                                                                                                                           ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "   ~cg~~~C~~~~CCs~~G~CGtt~~~C~")
        self.assertEqual(alignment.target.id, "2n1s_A")
        self.assertEqual(alignment.target.seq[3:30], "QCYRGRCSGGLCCSKYGYCGSGPAYCG")
        self.assertEqual(alignment.target.annotations["hmm_name"], "2n1s_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "AMP-2; antimicrobial peptide, ICK, cystine knot inhibitor, cystine antimicrobial protein; NMR {Stellaria media}")
        self.assertEqual(alignment[0], "QCY----RGRCSGGLCCSKYGYCGSGPAYCG")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "   BCBTTBCSTTCEECTTSBEECSHHHHC")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "   hcCCCCCCCCCccccccccCcchhhcC")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "   566348999999999999999999985")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 96.79)
        self.assertAlmostEqual(alignment.annotations["E-value"], 9.9e-06)
        self.assertAlmostEqual(alignment.annotations["Score"], 64.37)
        self.assertAlmostEqual(alignment.annotations["Identities"], 53)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.380)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 35.8)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[43:81], "KRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGG")
        self.assertEqual(alignment[1], "KRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                           krcgsqaggatctnnqccsqygycgfgaeycgagcqgg                                                                                          ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], " ~~cG~~~~~~~c~~~~ccs~~g~cg~~~~~C~~~cq~~                                                                                                                                                                                                                                                                              ")
        self.assertEqual(alignment.target.id, "2dkv_A")
        self.assertEqual(alignment.target.seq[1:39], "EQCGAQAGGARCPNCLCCSRWGWCGTTSDFCGDGCQSQ")
        self.assertEqual(alignment.target.annotations["hmm_name"], "2dkv_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "Chitinase; whole structure, oryza sativa L. japonica, hydrolase; HET: MES; 2.00A {Oryza sativa japonica group} PDB: 3iwr_A*")
        self.assertEqual(alignment[0], "EQCGAQAGGARCPNCLCCSRWGWCGTTSDFCGDGCQSQ")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], " CBCSTTTTTCCCGGGCEECTTSBEESSHHHHSTTCCBC                                                                                                                                                                                                                                                                              ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], " CCCCCCCCCCcCCCCCeeCcCCcccCCccccCccccCC                                                                                                                                                                                                                                                                              ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], " 47999999999999999999999999999999999965                                                                                                                                                                                                                                                                              ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 96.68)
        self.assertAlmostEqual(alignment.annotations["E-value"], 1.6e-05)
        self.assertAlmostEqual(alignment.annotations["Score"], 46.90)
        self.assertAlmostEqual(alignment.annotations["Identities"], 50)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.287)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 28.1)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[42:76], "SKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGA")
        self.assertEqual(alignment[1], "SKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGA")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                          skrcgsqaggatctnnqccsqygycgfgaeycga                                                                                               ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "   ~~~CG~~~g~C~~g~CCS~~G~CG~~~~~C~~")
        self.assertEqual(alignment.target.id, "2kus_A")
        self.assertEqual(alignment.target.seq[3:35], "NGQCGPGWGGCRGGLCCSQYGYCGSGPKYCAH")
        self.assertEqual(alignment.target.annotations["hmm_name"], "2kus_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "SM-AMP-1.1A; plant antimicrobial peptide, chitin-binding peptide, antimic protein; NMR {Stellaria media}")
        self.assertEqual(alignment[0], "NGQCGPGWG--GCRGGLCCSQYGYCGSGPKYCAH")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "   TCBCBTTTBCCCTTCEECTTSBEECSHHHHCC")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "   CcccCCCCCcCCCCcEECCCceecCChhhhCc")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "   45788888779999999999999999999963")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 92.12)
        self.assertAlmostEqual(alignment.annotations["E-value"], 0.024)
        self.assertAlmostEqual(alignment.annotations["Score"], 45.43)
        self.assertAlmostEqual(alignment.annotations["Identities"], 20)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 0.652)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 136.2)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[8:169], "NMECPNNLCCSQYGYCGMGGDYCGKGCQNGACWTSKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQSGGC")
        self.assertEqual(alignment[1], "NMECPNNLCCSQYGYCGMGGDYCGKGCQNGACWTSKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGACSTDKPCGKDAGGRVCTNNYCCSKWGSCGIGPGYCGAGCQSGGC")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "        nmecpnnlccsqygycgmggdycgkgcqngacwtskrcgsqaggatctnnqccsqygycgfgaeycgagcqggpcradikcgsqaggklcpnnlccsqwgfcglgsefcgggcqsgacstdkpcgkdaggrvctnnyccskwgscgigpgycgagcqsggc  ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "        ~~~c~~~~cc~~~~~c~~~~~~c~~~c~~~~c~~~~~c~~~~~~c~~~~cc~~~~~c~~~~~~c~~~c~~~~c~~~~~c~~~~~~c~~~~cc~~~~~c~~~~~~c~~~c~~~~c~~~~~c~~~~~~c~~~~cc~~~~~c~~~~~~c~~~c~~~~c ")
        self.assertEqual(alignment.target.id, "1wga")
        self.assertEqual(alignment.target.seq[8:163], "XXXCXXXXCCXXXXXCXXXXXXCXXXCXXXXCXXXXXCXXXXXXCXXXXCCXXXXXCXXXXXXCXXXCXXXXCXXXXXCXXXXXXCXXXXCCXXXXXCXXXXXXCXXXCXXXXCXXXXXCXXXXXXCXXXXCCXXXXXCXXXXXXCXXXCXXXXC")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1wga")
        self.assertEqual(alignment.target.annotations["hmm_description"], "; lectin (agglutinin); NMR {}")
        self.assertEqual(alignment[0], "XXXCXXXXCCXXXXXCXXXXXXCXXXCXXXXCXXXXXCXXX--XXXCXXXXCCXXXXXCXXXXXXCXXXCXXXXCXXXXXCXXX--XXXCXXXXCCXXXXXCXXXXXXCXXXCXXXXCXXXXXCXXX--XXXCXXXXCCXXXXXCXXXXXXCXXXCXXXXC")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "        ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "        45688889999999999999999999999999999988754467999999999999999999999999999999999887544679999999999999999999999999999999998876446799999999999998888888877765444 ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 88.54)
        self.assertAlmostEqual(alignment.annotations["E-value"], 0.1)
        self.assertAlmostEqual(alignment.annotations["Score"], 39.32)
        self.assertAlmostEqual(alignment.annotations["Identities"], 37)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.037)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 27.7)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[83:118], "RADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCG")
        self.assertEqual(alignment[1], "RADIKCGSQA-----GGKLCPN---NLCCSQWGFCGLGSEFCG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                                                                   radikcgsqaggklcpnnlccsqwgfcglgsefcg                                                     ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "     r~d~rCg~~~~~~~~~~~~C~~~~~~~CCs~~~~cg~~~~~c~                                                                                                                                                                                            ")
        self.assertEqual(alignment.target.id, "4z8i_A")
        self.assertEqual(alignment.target.seq[5:48], "RSDGRCGPNYPAPDANPGECNPHAVDHCCSEWGWCGRETSHCT")
        self.assertEqual(alignment.target.annotations["hmm_name"], "4z8i_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "BBTPGRP3, peptidoglycan recognition protein 3; chitin-binding domain, AM hydrolase; 2.70A {Branchiostoma belcheri tsingtauense}")
        self.assertEqual(alignment[0], "RSDGRCGPNYPAPDANPGECNPHAVDHCCSEWGWCGRETSHCT")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "     CSSSBCBSSSCBTTBSSBBCCTTSSCCEECTTSBEECSHHHHH                                                                                                                                                                                            ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "     CCCCCCCCCCCCCCCCCcccCCCCCCCCCCCCCEEeCCccccc                                                                                                                                                                                            ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "     55666776655567775899999999999999886                                                                                                                                                                                                    ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 88.13)
        self.assertAlmostEqual(alignment.annotations["E-value"], 0.12)
        self.assertAlmostEqual(alignment.annotations["Score"], 39.05)
        self.assertAlmostEqual(alignment.annotations["Identities"], 33)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.005)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 26.8)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[42:75], "SKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCG")
        self.assertEqual(alignment[1], "SKRCGSQA-----GGATCTN---NQCCSQYGYCGFGAEYCG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                          skrcgsqaggatctnnqccsqygycgfgaeycg                                                                                                ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "       d~rCg~~~~~~~~~~~~C~~~~~~~CCs~~~~cg~~~~~c~                                                                                                                                                                                            ")
        self.assertEqual(alignment.target.id, "4z8i_A")
        self.assertEqual(alignment.target.seq[7:48], "DGRCGPNYPAPDANPGECNPHAVDHCCSEWGWCGRETSHCT")
        self.assertEqual(alignment.target.annotations["hmm_name"], "4z8i_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "BBTPGRP3, peptidoglycan recognition protein 3; chitin-binding domain, AM hydrolase; 2.70A {Branchiostoma belcheri tsingtauense}")
        self.assertEqual(alignment[0], "DGRCGPNYPAPDANPGECNPHAVDHCCSEWGWCGRETSHCT")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "       SSBCBSSSCBTTBSSBBCCTTSSCCEECTTSBEECSHHHHH                                                                                                                                                                                            ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "       CCCCCCCCCCCCCCCcccCCCCCCCCCCCCCEEeCCccccc                                                                                                                                                                                            ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "       346666656678875899999999999999997                                                                                                                                                                                                    ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 85.66)
        self.assertAlmostEqual(alignment.annotations["E-value"], 0.21)
        self.assertAlmostEqual(alignment.annotations["Score"], 38.06)
        self.assertAlmostEqual(alignment.annotations["Identities"], 37)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.037)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 0.0)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[83:118], "RADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCG")
        self.assertEqual(alignment[1], "RADIKCGSQA-----GGKLCPN---NLCCSQWGFCGLGSEFCG")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                                                                   radikcgsqaggklcpnnlccsqwgfcglgsefcg                                                     ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "                      ~~d~~Cg~~~~~~~~~~~~C~~~~~~~CCs~~~~Cg~~~~~C~                                                                                                                                                                                               ")
        self.assertEqual(alignment.target.id, "4zxm_A")
        self.assertEqual(alignment.target.seq[22:65], "RSDGRCGPNYPAPDANPGECNPHAVDHCCSEWGWCGRETSHCT")
        self.assertEqual(alignment.target.annotations["hmm_name"], "4zxm_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "PGRP domain of peptidoglycan recognition protein; amidase, hydrolase; 2.80A {Branchiostoma belcheri tsingtauense}")
        self.assertEqual(alignment[0], "RSDGRCGPNYPAPDANPGECNPHAVDHCCSEWGWCGRETSHCT")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "                                                                                                                                                                                                                                                                ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "                      CCCCCCCCCCCCCCCCCcccCCCCCCCCCCCCCeEeCCCCCcC                                                                                                                                                                                               ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "                      34555555544457776899999999999999875                                                                                                                                                                                                       ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 85.31)
        self.assertAlmostEqual(alignment.annotations["E-value"], 0.23)
        self.assertAlmostEqual(alignment.annotations["Score"], 37.89)
        self.assertAlmostEqual(alignment.annotations["Identities"], 33)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 1.023)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 0.0)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[43:79], "KRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQ")
        self.assertEqual(alignment[1], "KRCGSQA-----GGATCTN---NQCCSQYGYCGFGAEYCG-AGCQ")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                           krcgsqaggatctnnqccsqygycgfgaeycgagcq                                                                                            ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "                         ~~Cg~~~~~~~~~~~~C~~~~~~~CCs~~~~Cg~~~~~C~~~~c~                                                                                                                                                                                          ")
        self.assertEqual(alignment.target.id, "4zxm_A")
        self.assertEqual(alignment.target.seq[25:70], "GRCGPNYPAPDANPGECNPHAVDHCCSEWGWCGRETSHCTCSSCV")
        self.assertEqual(alignment.target.annotations["hmm_name"], "4zxm_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "PGRP domain of peptidoglycan recognition protein; amidase, hydrolase; 2.80A {Branchiostoma belcheri tsingtauense}")
        self.assertEqual(alignment[0], "GRCGPNYPAPDANPGECNPHAVDHCCSEWGWCGRETSHCTCSSCV")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "                                                                                                                                                                                                                                                                ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "                         CCCCCCCCCCCCCCcccCCCCCCCCCCCCCeEeCCCCCcCCcccc                                                                                                                                                                                          ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "                         456665555788768999999999999999864555                                                                                                                                                                                                   ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 72.00)
        self.assertAlmostEqual(alignment.annotations["E-value"], 1.3)
        self.assertAlmostEqual(alignment.annotations["Score"], 35.47)
        self.assertAlmostEqual(alignment.annotations["Identities"], 20)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 0.657)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 98.0)
        self.assertEqual(alignment.query.id, "2UVO:A|PDBID|CHAIN|SEQUENCE")
        self.assertEqual(alignment.query.seq[8:126], "NMECPNNLCCSQYGYCGMGGDYCGKGCQNGACWTSKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGAC")
        self.assertEqual(alignment[1], "NMECPNNLCCSQYGYCGMGGDYCGKGCQNGACWTSKRCGSQAGGATCTNNQCCSQYGYCGFGAEYCGAGCQGGPCRADIKCGSQAGGKLCPNNLCCSQWGFCGLGSEFCGGGCQSGAC")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "        nmecpnnlccsqygycgmggdycgkgcqngacwtskrcgsqaggatctnnqccsqygycgfgaeycgagcqggpcradikcgsqaggklcpnnlccsqwgfcglgsefcgggcqsgac                                             ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "                                                 ~~~c~~~~cc~~~~~c~~~~~~c~~~c~~~~c~~~~~c~~~~~~c~~~~cc~~~~~c~~~~~~c~~~c~~~~c~~~~~c~~~~~~c~~~~cc~~~~~c~~~~~~c~~~c~~~~c ")
        self.assertEqual(alignment.target.id, "1wga")
        self.assertEqual(alignment.target.seq[49:163], "XXXCXXXXCCXXXXXCXXXXXXCXXXCXXXXCXXXXXCXXXXXXCXXXXCCXXXXXCXXXXXXCXXXCXXXXCXXXXXCXXXXXXCXXXXCCXXXXXCXXXXXXCXXXCXXXXC")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1wga")
        self.assertEqual(alignment.target.annotations["hmm_description"], "; lectin (agglutinin); NMR {}")
        self.assertEqual(alignment[0], "XXXCXXXXCCXXXXXCXXXXXXCXXXCXXXXCXXXXXCXXX--XXXCXXXXCCXXXXXCXXXXXXCXXXCXXXXCXXXXXCXXX--XXXCXXXXCCXXXXXCXXXXXXCXXXCXXXXC")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "                                                 cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc ")
        self.assertEqual(alignment.target.letter_annotations["Confidence"], "                                                 456788899999999999999999999999999998887544679999999999999999999999999999999998875446799999999999998888888776655443 ")
        with self.assertRaises(StopIteration):
            next(alignments)


class Align_hhr_allx(unittest.TestCase):
    def test_reading(self):
        path = os.path.join("HHsuite", "allx.hhr")
        alignments = hhr.AlignmentIterator(path)
        self.assertEqual(alignments.metadata["No_of_seqs"], (1, 1))
        self.assertAlmostEqual(alignments.metadata["Neff"], 1.0)
        self.assertEqual(alignments.metadata["Searched_HMMs"], 38388)
        self.assertEqual(alignments.metadata["Date"], "Fri Feb 15 16:24:19 2019")
        self.assertEqual(alignments.commandline, "hhsearch -i allx.fasta -d /pdb70_hhm_db")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 0.04)
        self.assertAlmostEqual(alignment.annotations["E-value"], 3.4e+04)
        self.assertAlmostEqual(alignment.annotations["Score"], -0.01)
        self.assertAlmostEqual(alignment.annotations["Identities"], 0)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 0.427)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 0.0)
        self.assertEqual(alignment.query.id, "Only X amino acids")
        self.assertEqual(alignment.query.seq[38:39], "X")
        self.assertEqual(alignment[1], "X")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                      ~")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "                       ~      ")
        self.assertEqual(alignment.target.id, "1klr_A")
        self.assertEqual(alignment.target.seq[23:24], "T")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1klr_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "Zinc finger Y-chromosomal protein; transcription; NMR {Synthetic} SCOP: g.37.1.1 PDB: 5znf_A 1kls_A 1xrz_A* 7znf_A")
        self.assertEqual(alignment[0], "T")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "                       H      ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "                       H      ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 0.04)
        self.assertAlmostEqual(alignment.annotations["E-value"], 3.4e+04)
        self.assertAlmostEqual(alignment.annotations["Score"], 0.00)
        self.assertAlmostEqual(alignment.annotations["Identities"], 0)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 0.158)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 0.0)
        self.assertEqual(alignment.query.id, "Only X amino acids")
        self.assertEqual(alignment.query.seq[3:4], "X")
        self.assertEqual(alignment[1], "X")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "   ~                                   ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "         ~                   ")
        self.assertEqual(alignment.target.id, "5ion_A")
        self.assertEqual(alignment.target.seq[9:10], "G")
        self.assertEqual(alignment.target.annotations["hmm_name"], "5ion_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "Zinc finger and BTB domain-containing protein 17; C2H2 zinc finger, MIZ-1, ZBTB17, transcription factor, trans; NMR {Homo sapiens}")
        self.assertEqual(alignment[0], "G")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "         T                   ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "         C                   ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 0.04)
        self.assertAlmostEqual(alignment.annotations["E-value"], 3.4e+04)
        self.assertAlmostEqual(alignment.annotations["Score"], 0.04)
        self.assertAlmostEqual(alignment.annotations["Identities"], 0)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 0.575)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 0.0)
        self.assertEqual(alignment.query.id, "Only X amino acids")
        self.assertEqual(alignment.query.seq[3:4], "X")
        self.assertEqual(alignment[1], "X")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "   ~                                   ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "~                           ")
        self.assertEqual(alignment.target.id, "2jvx_A")
        self.assertEqual(alignment.target.seq[0:1], "S")
        self.assertEqual(alignment.target.annotations["hmm_name"], "2jvx_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "NF-kappa-B essential modulator; CCHC classical zinc finger, NEMO zinc finger, beta-BETA- alpha fold, coiled coil, cytoplasm, disease mutation; NMR {Synthetic} PDB: 2jvy_A")
        self.assertEqual(alignment[0], "S")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "C                           ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "C                           ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 0.04)
        self.assertAlmostEqual(alignment.annotations["E-value"], 3.4e+04)
        self.assertAlmostEqual(alignment.annotations["Score"], 0.03)
        self.assertAlmostEqual(alignment.annotations["Identities"], 0)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 0.158)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 0.0)
        self.assertEqual(alignment.query.id, "Only X amino acids")
        self.assertEqual(alignment.query.seq[3:4], "X")
        self.assertEqual(alignment[1], "X")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "   ~                                   ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "          ~                  ")
        self.assertEqual(alignment.target.id, "2ab3_A")
        self.assertEqual(alignment.target.seq[10:11], "G")
        self.assertEqual(alignment.target.annotations["hmm_name"], "2ab3_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "ZNF29; zinc finger protein, beta BETA alpha, RREIIB-TR, RNA binding protein; NMR {Escherichia coli} SCOP: k.12.1.1 PDB: 2ab7_A")
        self.assertEqual(alignment[0], "G")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "          C                  ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "          C                  ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 0.04)
        self.assertAlmostEqual(alignment.annotations["E-value"], 3.5e+04)
        self.assertAlmostEqual(alignment.annotations["Score"], 0.02)
        self.assertAlmostEqual(alignment.annotations["Identities"], 0)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 0.427)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 0.0)
        self.assertEqual(alignment.query.id, "Only X amino acids")
        self.assertEqual(alignment.query.seq[3:4], "X")
        self.assertEqual(alignment[1], "X")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "   ~                                   ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "     ~                         ")
        self.assertEqual(alignment.target.id, "1sp2_A")
        self.assertEqual(alignment.target.seq[5:6], "T")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1sp2_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "SP1F2; zinc finger, transcription activation; NMR {Homo sapiens} SCOP: g.37.1.1 PDB: 1va2_A")
        self.assertEqual(alignment[0], "T")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "     C                         ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "     C                         ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 0.04)
        self.assertAlmostEqual(alignment.annotations["E-value"], 3.5e+04)
        self.assertAlmostEqual(alignment.annotations["Score"], 0.00)
        self.assertAlmostEqual(alignment.annotations["Identities"], 0)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 0.251)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 0.0)
        self.assertEqual(alignment.query.id, "Only X amino acids")
        self.assertEqual(alignment.query.seq[37:38], "X")
        self.assertEqual(alignment[1], "X")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                     ~ ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "                            ~ ")
        self.assertEqual(alignment.target.id, "2lvr_A")
        self.assertEqual(alignment.target.seq[28:29], "E")
        self.assertEqual(alignment.target.annotations["hmm_name"], "2lvr_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "Zinc finger and BTB domain-containing protein 17; C2H2 zinc finger, classical zinc finger, transcription; NMR {Homo sapiens}")
        self.assertEqual(alignment[0], "E")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "                            C ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "                            C ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 0.04)
        self.assertAlmostEqual(alignment.annotations["E-value"], 3.5e+04)
        self.assertAlmostEqual(alignment.annotations["Score"], 0.02)
        self.assertAlmostEqual(alignment.annotations["Identities"], 0)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 0.155)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 0.0)
        self.assertEqual(alignment.query.id, "Only X amino acids")
        self.assertEqual(alignment.query.seq[1:2], "X")
        self.assertEqual(alignment[1], "X")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], " ~                                     ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "~                           ")
        self.assertEqual(alignment.target.id, "2kvf_A")
        self.assertEqual(alignment.target.seq[0:1], "M")
        self.assertEqual(alignment.target.annotations["hmm_name"], "2kvf_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "Zinc finger and BTB domain-containing protein 32; protein/DNA, metal-binding, transcription; NMR {Mus musculus}")
        self.assertEqual(alignment[0], "M")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "C                           ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "C                           ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 0.03)
        self.assertAlmostEqual(alignment.annotations["E-value"], 3.6e+04)
        self.assertAlmostEqual(alignment.annotations["Score"], 0.02)
        self.assertAlmostEqual(alignment.annotations["Identities"], 0)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 0.170)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 0.0)
        self.assertEqual(alignment.query.id, "Only X amino acids")
        self.assertEqual(alignment.query.seq[35:36], "X")
        self.assertEqual(alignment[1], "X")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                   ~   ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "                ~         ")
        self.assertEqual(alignment.target.id, "1dsq_A")
        self.assertEqual(alignment.target.seq[16:17], "D")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1dsq_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "Nucleic acid binding protein P14; CCHC type zinc finger, virus/viral protein; NMR {Mouse mammary tumor virus} SCOP: g.40.1.1")
        self.assertEqual(alignment[0], "D")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "                T         ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "                h         ")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 0.03)
        self.assertAlmostEqual(alignment.annotations["E-value"], 3.6e+04)
        self.assertAlmostEqual(alignment.annotations["Score"], 0.03)
        self.assertAlmostEqual(alignment.annotations["Identities"], 0)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 0.209)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 0.0)
        self.assertEqual(alignment.query.id, "Only X amino acids")
        self.assertEqual(alignment.query.seq[35:36], "X")
        self.assertEqual(alignment[1], "X")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "                                   ~   ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "                            ~")
        self.assertEqual(alignment.target.id, "5a7u_A")
        self.assertEqual(alignment.target.seq[28:29], "N")
        self.assertEqual(alignment.target.annotations["hmm_name"], "5a7u_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "ADR1, regulatory protein ADR1; protein folding, translation, ribosome, zinc finger, SECM, translational arrest peptide, cryo-EM; 4.80A {Saccharomyces cerevisiae} PDB: 1paa_A")
        self.assertEqual(alignment[0], "N")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "                             ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "                            C")
        alignment = next(alignments)
        self.assertAlmostEqual(alignment.annotations["Probab"], 0.03)
        self.assertAlmostEqual(alignment.annotations["E-value"], 3.6e+04)
        self.assertAlmostEqual(alignment.annotations["Score"], 0.03)
        self.assertAlmostEqual(alignment.annotations["Identities"], 0)
        self.assertAlmostEqual(alignment.annotations["Similarity"], 0.170)
        self.assertAlmostEqual(alignment.annotations["Sum_probs"], 0.0)
        self.assertEqual(alignment.query.id, "Only X amino acids")
        self.assertEqual(alignment.query.seq[3:4], "X")
        self.assertEqual(alignment[1], "X")
        self.assertEqual(alignment.query.letter_annotations["Consensus"], "   ~                                   ")
        self.assertEqual(alignment.target.letter_annotations["Consensus"], "~                               ")
        self.assertEqual(alignment.target.id, "1zfd_A")
        self.assertEqual(alignment.target.seq[0:1], "D")
        self.assertEqual(alignment.target.annotations["hmm_name"], "1zfd_A")
        self.assertEqual(alignment.target.annotations["hmm_description"], "SWI5; DNA binding motif, zinc finger DNA binding domain; NMR {Saccharomyces cerevisiae} SCOP: g.37.1.1")
        self.assertEqual(alignment[0], "D")
        self.assertEqual(alignment.target.letter_annotations["ss_dssp"], "C                               ")
        self.assertEqual(alignment.target.letter_annotations["ss_pred"], "C                               ")
        with self.assertRaises(StopIteration):
            next(alignments)


class Align_hhr_2uvo_hhblits_emptytable(unittest.TestCase):
    def test_reading(self):
        path = os.path.join("HHsuite", "2uvo_hhblits_emptytable.hhr")
        alignments = hhr.AlignmentIterator(path)
        self.assertEqual(alignments.metadata["Match_columns"], 171)
        self.assertEqual(alignments.metadata["No_of_seqs"], (1560, 4005))
        self.assertAlmostEqual(alignments.metadata["Neff"], 8.3)
        self.assertEqual(alignments.metadata["Searched_HMMs"], 34)
        self.assertEqual(alignments.metadata["Date"], 'Fri Feb 15 16:34:13 2019')
        with self.assertRaises(StopIteration):
            next(alignments)


class Align_hhr_2uvo_hhblits_onlyheader(unittest.TestCase):
    def test_reading(self):
        path = os.path.join("HHsuite", "2uvo_hhblits_onlyheader.hhr")
        with self.assertRaises(ValueError) as cm:
            alignments = hhr.AlignmentIterator(path)
        self.assertEqual(str(cm.exception), "Truncated file.")


if __name__ == "__main__":
    runner = unittest.TextTestRunner(verbosity=2)
    unittest.main(testRunner=runner)
