# Copyright 2012 by Wibowo Arindrarto.  All rights reserved.
# This code is part of the Biopython distribution and governed by its
# license.  Please see the LICENSE file that should have been included
# as part of this package.

"""Tests for Bio.Align Exonerate parsers."""

import os
import unittest
import warnings

from Bio import BiopythonExperimentalWarning

with warnings.catch_warnings():
    warnings.simplefilter("ignore", BiopythonExperimentalWarning)
    from Bio.Align import exonerate

try:
    import numpy
except ImportError:
    from Bio import MissingPythonDependencyError

    raise MissingPythonDependencyError(
        "Install numpy if you want to use Bio.Align.exonerate."
    ) from None


class ExonerateSpcCases(unittest.TestCase):

    def check_vulgar_text(self, vulgar, text):
        """Compare coordinate parsing for vulgar and text formats."""
        vfile = os.path.join("Exonerate", vulgar)
        tfile = os.path.join("Exonerate", text)

        valignments = exonerate.AlignmentIterator(vfile, "exonerate-vulgar")
        talignments = exonerate.AlignmentIterator(tfile, "exonerate-text")

        # compare coordinates of vulgar and text formats
        # should be the same since the files are results of the same query
        # vs db search
        for valignment, talignment in zip(valignments, talignments):
            self.assertTrue(
                numpy.array_equal(valignment.coordinates, talignment.coordinates)
        )

    def test_vulgar_text_similar_g2g(self):
        """Compares vulgar-text coordinate parsing for the genome2genome model."""
        self.check_vulgar_text("exn_22_o_vulgar.exn", "exn_22_m_genome2genome.exn")

    def test_vulgar_text_similar_c2c(self):
        """Compares vulgar-text coordinate parsing for the coding2coding model."""
        self.check_vulgar_text(
            "exn_22_o_vulgar_fshifts.exn", "exn_22_m_coding2coding_fshifts.exn"
        )

    def test_vulgar_text_similar_p2d(self):
        """Compares vulgar-text coordinate parsing for the protein2dna model."""
        self.check_vulgar_text(
            "exn_22_o_vulgar_fshifts2.exn", "exn_22_m_protein2dna_fshifts.exn"
        )


class ExonerateTextCases(unittest.TestCase):

    fmt = "exonerate-text"

    def test_exn_22_m_affine_local(self):
        """Test parsing exonerate output (exn_22_m_affine_local.exn)."""
        exn_file = os.path.join("Exonerate", "exn_22_m_affine_local.exn")
        alignments = exonerate.AlignmentIterator(exn_file, self.fmt)
        self.assertEqual(alignments.program, "exonerate")
        self.assertEqual(alignments.commandline, "exonerate -m affine:local ../scer_cad1.fa /media/Waterloo/Downloads/genomes/scer_s288c/scer_s288c.fa --bestn 3 --showcigar no --showvulgar no")
        self.assertEqual(alignments.hostname, "blackbriar")
        alignment = next(alignments)
        self.assertEqual(alignment.query.id, "gi|296143771|ref|NM_001180731.1|")
        self.assertEqual(alignment.query.description, "Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds")
        self.assertEqual(alignment.target.id, "gi|330443520|ref|NC_001136.10|")
        self.assertEqual(alignment.target.description, "Saccharomyces cerevisiae S288c chromosome IV, complete sequence")
        self.assertEqual(alignment.annotations["model"], "affine:local:dna2dna")
        self.assertEqual(alignment.score, 6150)
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates,
                # fmt: off
# flake8: noqa
                numpy.array([[48663767, 48663813, 48665640,
                              48665722, 48669098, 48669174],
                             [       0,       46,       46,
                                   128,      128,      204]])
                # fmt: on
            )
        )
        self.assertEqual(alignment.query.seq, "ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAAAGGATTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGAGATAGGAAAGAAGCCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGAACAGAAAGATGCGCAGAATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAAGTTTACTGTCGGAAATTACAAAATATAGAGCTAAGAATTCTGATGATGAAAGAATATTAGCCTTCCTCGATGATCTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAAGTACAGCAGTTAGCAAGGCTGCAAAGGAATTGCCATCGCCTAATTCAGATGAAAACATGACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAGTTATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACCAATTCGTGGGATTCTCCCCCCGGAAATCGAACAGGTGCCGTTACCATCGGTGACGAAAGTATTAATGGTAGTGAAATGCCAGATTTCAGTCTCGATCTTGTCTCCAATGATAGACAGACTGGTCTAGAAGCTTTAGATTACGACATTCATAACTACTTTCCTCAGCACTCTGAACGCCTGACCGCTGAAAAAATAGATACGTCAGCATGTCAATGTGAAATTGACCAAAAGTATCTTCCATACGAGACAGAAGATGATACTTTATTCCCCAGCGTGCTTCCCCTTGCTGTAGGGAGCCAGTGTAATAATATTTGCAACCGCAAGTGTATCGGGACCAAACCATGTTCAAATAAGGAGATCAAATGCGACTTAATAACAAGCCACCTGTTGAATCAGAAATCTCTAGCTTCGGTGCTTCCGGTGGCTGCTTCTCATACTAAAACAATTCGAACCCAATCTGAAGCAATTGAACACATTAGCAGCGCCATATCGAATGGAAAAGCGTCTTGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGATGACTGCAAAATAGTAGTCAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG")
        self.assertEqual(alignment.target.seq, "CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGCTTTGACTACTATTTTGCAGTCATCTGTACATTTTGCCTTGATTATTAATTCGCTGCATAAATCATCTATGTCCAACGATGAATATTTTGGTAGGGAGGAGATCTCTTCGAGAATGTGGTAGCAAGACGCTTTTCCATTCGATATGGCGCTGCTAATGTGTTCAATTGCTTCAGATTGGGTTCGAATTGTTTTAGTATGAGAAGCAGCCACCGGAAGCACCGAAGCTAGAGATTTCTGATTCAACAGGTGGCTTGTTATTAAGTCGCATTTGATCTCCTTATTTGAACATGGTTTGGTCCCGATACACTTGCGGTTGCAAATATTATTACACTGGCTCCCTACAGCAAGGGGAAGCACGCTGGGGAATAAAGTATCATCTTCTGTCTCGTATGGAAGATACTTTTGGTCAATTTCACATTGACATGCTGACGTATCTATTTTTTCAGCGGTCAGGCGTTCAGAGTGCTGAGGAAAGTAGTTATGAATGTCGTAATCTAAAGCTTCTAGACCAGTCTGTCTATCATTGGAGACAAGATCGAGACTGAAATCTGGCATTTCACTACCATTAATACTTTCGTCACCGATGGTAACGGCACCTGTTCGATTTCCGGGGGGAGAATCCCACGAATTGGTTAAACTGGGAGCGTTCCATGAGCCTATGTTCCACATAACTTTCTCATTCTCTTGAGTGTGCGGCTGTACTTCTATACTTGTGTTCACAGTCATGTTTTCATCTGAATTAGGCGATGGCAATTCCTTTGCAGCCTTGCTAACTGCTGTACTTGTTCCTTTTTCGTTTTCCCTTTTCTGTTGTTCTTGCAGATCATCGAGGAAGGCTAATATTCTTTCATCATCAGAATTCTTAGCTCTATATTTTGTAATTTCCGACAGTAAACTTTTTAAAGAACATAGTAAAAAGTCCGTGGTAGTCTTATTCTGCGCATCTTTCTGTTCTAGTAACTCTACCCTCTCTTGCAAACTCTTCATTTTGGCTTCTTTCCTATCTCGGAACGCTCGTTGAGCTGCCCTATTCTGGGCAGTCCTCCTACTCTTAGCTTCAGAGTCAATCCTTTTTCTGCCTGGTCTGCCCACCTTCCTCTTAGGTGTTCCATCTTTATTTAGCAACATTTGCTTCTTCATGTCACCTGCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCAT")
        self.assertEqual(alignment[0], "ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAAAGGATTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGAGATAGGAAAGAAGCCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGAACAGAAAGATGCGCAGAATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAAGTTTACTGTCGGAAATTACAAAATATAGAGCTAAGAATTCTGATGATGAAAGAATATTAGCCTTCCTCGATGATCTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAAGTACAGCAGTTAGCAAGGCTGCAAAGGAATTGCCATCGCCTAATTCAGATGAAAACATGACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAGTTATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACCAATTCGTGGGATTCTCCCCCCGGAAATCGAACAGGTGCCGTTACCATCGGTGACGAAAGTATTAATGGTAGTGAAATGCCAGATTTCAGTCTCGATCTTGTCTCCAATGATAGACAGACTGGTCTAGAAGCTTTAGATTACGACATTCATAACTACTTTCCTCAGCACTCTGAACGCCTGACCGCTGAAAAAATAGATACGTCAGCATGTCAATGTGAAATTGACCAAAAGTATCTTCCATACGAGACAGAAGATGATACTTTATTCCCCAGCGTGCTTCCCCTTGCTGTAGGGAGCCAGTGTAATAATATTTGCAACCGCAAGTGTATCGGGACCAAACCATGTTCAAATAAGGAGATCAAATGCGACTTAATAACAAGCCACCTGTTGAATCAGAAATCTCTAGCTTCGGTGCTTCCGGTGGCTGCTTCTCATACTAAAACAATTCGAACCCAATCTGAAGCAATTGAACACATTAGCAGCGCCATATCGAATGGAAAAGCGTCTTGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGATGACTGCAAAATAGTAGTCAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG")
        self.assertEqual(alignment[1], "ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAAAGGATTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGAGATAGGAAAGAAGCCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGAACAGAAAGATGCGCAGAATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAAGTTTACTGTCGGAAATTACAAAATATAGAGCTAAGAATTCTGATGATGAAAGAATATTAGCCTTCCTCGATGATCTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAAGTACAGCAGTTAGCAAGGCTGCAAAGGAATTGCCATCGCCTAATTCAGATGAAAACATGACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAGTTATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACCAATTCGTGGGATTCTCCCCCCGGAAATCGAACAGGTGCCGTTACCATCGGTGACGAAAGTATTAATGGTAGTGAAATGCCAGATTTCAGTCTCGATCTTGTCTCCAATGATAGACAGACTGGTCTAGAAGCTTTAGATTACGACATTCATAACTACTTTCCTCAGCACTCTGAACGCCTGACCGCTGAAAAAATAGATACGTCAGCATGTCAATGTGAAATTGACCAAAAGTATCTTCCATACGAGACAGAAGATGATACTTTATTCCCCAGCGTGCTTCCCCTTGCTGTAGGGAGCCAGTGTAATAATATTTGCAACCGCAAGTGTATCGGGACCAAACCATGTTCAAATAAGGAGATCAAATGCGACTTAATAACAAGCCACCTGTTGAATCAGAAATCTCTAGCTTCGGTGCTTCCGGTGGCTGCTTCTCATACTAAAACAATTCGAACCCAATCTGAAGCAATTGAACACATTAGCAGCGCCATATCGAATGGAAAAGCGTCTTGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGATGACTGCAAAATAGTAGTCAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG")
        alignment = next(alignments)
        self.assertEqual(alignment.query.id, "gi|296143771|ref|NM_001180731.1|")
        self.assertEqual(alignment.query.description, "Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds")
        self.assertEqual(alignment.target.id, "gi|330443688|ref|NC_001145.3|")
        self.assertEqual(alignment.target.description, "Saccharomyces cerevisiae S288c chromosome XIII, complete sequence")
        self.assertEqual(alignment.score, 359)
        self.assertEqual(alignment.annotations["model"], "affine:local:dna2dna")
        self.assertEqual(alignment.query.seq, "ACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAAAGGATTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGAGATAGGAAAGAAGCCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGAACAGAAAGATGCGCAGAATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAAGTTTACTGTCGGAAATTACAAAATATAGAGCTAAGAATTCTGATGATGAAAGAATATTAGCCTTCCTCGATGATCTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAAGTACAGCAGTTAGCAAGGCTGCAAAGGAATTGCCATCGCCTAATTCAGATGAAAACATGACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAGTTATGTGGAACATAGGCTCATGGAACGCTCCCAGT")
        self.assertEqual(alignment.target.seq, "ACCGAAGAAGAAGGGTAGCAAAACTAGCAAAAAGCAAGATTTGGATCCTGAAACTAAGCAGAAGAGGACTGCCCAAAATCGGGCCGCTCAAAGAGCTTTTAGGGAACGTAAGGAGAGGAAGATGAAGGAATTGGAGAAGAAGGTACAAAGTTTAGAGAGTATTCAGCAGCAAAATGAAGTGGAAGCTACTTTTTTGAGGGACCAGTTAATCACTCTGGTGAATGAGTTAAAAAAATATAGACCAGAGACAAGAAATGACTCAAAAGTGCTGGAATATTTAGCAAGGCGAGATCCTAATTTGCATTTTTCAAAAAATAACGTTAACCACAGCAATAGCGAGCCAATTGACACACCCAATGATGACATACAAGAAAATGTTAAACAAAAGATGAATTTCACGTTTCAATATCCGCTTGATAACGACAACGACAACGACAACAGTAAAAATGTGGGGAAACAATTACCTTCACCAAATGATCCAAGT")
        self.assertEqual(alignment[0], "ACCGAAGAAGAAGGGTAGCAAAACTAGCAAAAAGCAAGATTTGGATCCTGAAACTAAGCAGAAGAGGACTGCCCAAAATCGGGCCGCTCAAAGAGCTTTTAGGGAACGTAAGGAGAGGAAGATGAAGGAATTGGAGAAGAAGGTACAAAGTT--TAG-AGAGTATTCAGCAGCAAAATGA-AGTGGAAGCTACTTTTTTGAGGGACCAGTTAATCACTCTGGTGAATGAGTTAAAAAAATATAGACCAGAGACAAGAAATGACTCAAAAGTGCTGGAATATTTAGCAAGGCGAGATCCTAATTTGCATTTTTCAAAAAATAACGTTAACCACAGCAATAGCGAGCCAATTGACA-CA---CCCAATGATGACATACAAGAAAATG--TTAAACAAA---AGATGAATTTCACG--TTTCAATATCCGCTTGATAACGACAACGACAACGACAACAG--TAAAAATGT--GGGGAAACAATTACCTTCACCAAATGATCCAAGT")
        self.assertEqual(alignment[1], "ACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAA-AGGATT--GACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGAGATAGGAAAGAAGCCAAAATGAAGAGTTTGCAAGAGAGGGT--AGAGTTACTAGAACAGAAAGATGC-GCAGAATAAGACTACCACGGACTTTTTACTATGTTC-TTTAAAAAGTTTACTGTCGGAAATTACAAAATAT-----AGAGCTAAGAATT--CTGATGA-TGAAAGAATA-TTAGCCTTCCTCGA---TGATCTGCA-AGAACAACAGAAAAGGGAAA--AC-GAAAAAG-GA-ACAAGT-ACAGCAGTTAGCAAGGCTG-CA---AAGGAATTGCCATCGCCTAATTCAGATGAA-AACATGACTGTGAACA-CAAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAGTTATGTGGAACA--TAGGCTCATGGAACGCTCCCAGT")
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates,
                # fmt: off
# flake8: noqa
                numpy.array([[48663767, 48663813, 48665640,
                              48665722, 48669098, 48669174],
                             [       0,       46,       46,
                                   128,      128,      204]])
                # fmt: on
            )
        )
        alignment = next(alignments)
        self.assertEqual(alignment.query.id, "gi|296143771|ref|NM_001180731.1|")
        self.assertEqual(alignment.query.description, "Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds")
        self.assertEqual(alignment.target.id, "gi|330443715|ref|NC_001146.8|")
        self.assertEqual(alignment.target.description, "Saccharomyces cerevisiae S288c chromosome XIV, complete sequence")
        self.assertEqual(alignment.score, 219)
        self.assertEqual(alignment.annotations["model"], "affine:local:dna2dna")
        self.assertEqual(alignment.target.seq, "ATGATGATATATTAGATGGGGATGAAGATGAGCCAGAGGAAGAGGATGAAAATGAAGGCGATGACGAAGAAGATACTTATGACAGCGGTCTTGATGAAACTGACCGTTTAGAAGAAGGTCGGAAATTGATTCAGATAGCCATTACAAAGTTGCTTCAAAGTCGAATAATGGCTTCTTATCATGAGAAACAGGCAGATAATAACAGACTAAAACTTCTACAAGAACTAGAAGAAGAAAAAAGAAAGAAAAGAGAGAAGGAAGAAAAAAAGCAGAAAAAAAGAGAAAAAGAGAAAGAAAAGAAGAGGCTGCAACAGTTAGCTAAAGAGGAAGAAAAACGAAAAAGGGAAGAAGAGAAAGAAAGGCTAAAGAAGGAATTAGAAGAGCGTGAAATGAGAAGACGAGAGGCTCAAAGGAAAAAGGTTGAAGAAGCCAAACGGAAGAAAGACGAGGAGAGAAAG")
        self.assertEqual(alignment.query.seq, "ATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAAAGGATTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGAGATAGGAAAGAAGCCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGAACAGAAAGATGCGCAGAATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAAGTTTACTGTCGGAAATTACAAAATATAGAGCTAAGAATTCTGATGATGAAAGAATATTAGCCTTCCTCGATGATCTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAAGTACAGCAGTTAGCAAGGCTGCAAAGGAATTGCCATCGCCTAATTCAGATGAAAACATGACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAG")
        self.assertEqual(alignment[0], "ATGATGATATATTA-GATGGGG-ATG-AAGATGAGCCAGAGGAAGAGGATGAAAATGAAGGCGATGACGAAGAAGATACT--TATGACAGCGGTCTTGATGAAACTGACCGTTTAGAAGAAGGT-CGGAAATTGATTCAGATAGCCATTACAAAGTTGCTTCAAAGTCGAATAATGGCTTCTTATCATGAGAAACAGGCAGATAATAACAGACTAAAAC-----TTCTACAA-GAACTAGAAGAAGAAAAAAGAAAGAAAAGAGAGAAGGAAGA---AAAAAAGCAGAAAAAAAGAGAAAAAGAGAAAGAAAAGAAGAGGCTGCAACAGTTAGCTAAAGAGGAAGAAAAACGAAAAAGG--GAAGAAGAGAA---AGAAAGGCTAAAGAAGGAATTAGAAGAGCGTGAAATGAGAAGACGAGAGGCTCAAAGGAAAAAGGTTGAAGAAGCCAAACGGAAGAAAGACGAGGA-GAGAAAG")
        self.assertEqual(alignment[1], "ATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTG-GGCAGACCAGGCAGAAAAAGGAT-TGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGA--ATAGGG-CAGCTCA-ACGAGCGTTCCGAGATAGGAA-AGA-AGCCAAAATGAAGA-GTTTGCAAGA-GAGGGTAGAGTTACTAGAAC-AGAAAGATGCGCAGAATAA--GACTACCACGGACTTTTTACTATGTTCTTTAAAAAGTTTACTGTCGGAAATTACAAAATATAGAGCTAAGAATTCTGATGATGAAAGAATATTAGCCTTCCTCGATGAT-CTGCAAGA---A-CAACAGAAAAGGGAAAACGAAAAAGGAACAAGTACAGCAGTTAGCAAGGCTGCA-AAGGAATTGCCATCGCCT-AATTCAGATGAAAACATG-ACTGTGAACACAAG-TATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAG")
        with self.assertRaises(StopIteration):
            next(alignments)

    def test_exn_22_m_cdna2genome(self):
        """Test parsing exonerate output (exn_22_m_cdna2genome.exn)."""
        exn_file = os.path.join("Exonerate", "exn_22_m_cdna2genome.exn")
        alignments = exonerate.AlignmentIterator(exn_file, self.fmt)
        self.assertEqual(alignments.program, "exonerate")
        self.assertEqual(alignments.commandline, "exonerate -m cdna2genome ../scer_cad1.fa /media/Waterloo/Downloads/genomes/scer_s288c/scer_s288c.fa --bestn 3 --showcigar no --showvulgar no")
        self.assertEqual(alignments.hostname, "blackbriar")
        alignment = next(alignments)
        self.assertEqual(alignment.query.id, "gi|296143771|ref|NM_001180731.1|")
        self.assertEqual(alignment.query.description, "Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds")
        self.assertEqual(alignment.target.id, "gi|330443520|ref|NC_001136.10|")
        self.assertEqual(alignment.target.description, "Saccharomyces cerevisiae S288c chromosome IV, complete sequence:[revcomp]")
        self.assertEqual(alignment.annotations["model"], "cdna2genome")
        self.assertEqual(alignment.score, 6146)
        self.assertGreater(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(alignment.query.seq, "ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAAAGGATTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGAGATAGGAAAGAAGCCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGAACAGAAAGATGCGCAGAATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAAGTTTACTGTCGGAAATTACAAAATATAGAGCTAAGAATTCTGATGATGAAAGAATATTAGCCTTCCTCGATGATCTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAAGTACAGCAGTTAGCAAGGCTGCAAAGGAATTGCCATCGCCTAATTCAGATGAAAACATGACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAGTTATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACCAATTCGTGGGATTCTCCCCCCGGAAATCGAACAGGTGCCGTTACCATCGGTGACGAAAGTATTAATGGTAGTGAAATGCCAGATTTCAGTCTCGATCTTGTCTCCAATGATAGACAGACTGGTCTAGAAGCTTTAGATTACGACATTCATAACTACTTTCCTCAGCACTCTGAACGCCTGACCGCTGAAAAAATAGATACGTCAGCATGTCAATGTGAAATTGACCAAAAGTATCTTCCATACGAGACAGAAGATGATACTTTATTCCCCAGCGTGCTTCCCCTTGCTGTAGGGAGCCAGTGTAATAATATTTGCAACCGCAAGTGTATCGGGACCAAACCATGTTCAAATAAGGAGATCAAATGCGACTTAATAACAAGCCACCTGTTGAATCAGAAATCTCTAGCTTCGGTGCTTCCGGTGGCTGCTTCTCATACTAAAACAATTCGAACCCAATCTGAAGCAATTGAACACATTAGCAGCGCCATATCGAATGGAAAAGCGTCTTGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGATGACTGCAAAATAGTAGTCAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG")
        self.assertEqual(repr(alignment.target.seq), "Seq({1318045: 'CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGCTTTGACTACTAT...CAT'}, length=1319275)")
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates, numpy.array([[1319275, 1318045], [0, 1230]])
            )
        )
        self.assertEqual(alignment[0], "ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAAAGGATTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGAGATAGGAAAGAAGCCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGAACAGAAAGATGCGCAGAATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAAGTTTACTGTCGGAAATTACAAAATATAGAGCTAAGAATTCTGATGATGAAAGAATATTAGCCTTCCTCGATGATCTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAAGTACAGCAGTTAGCAAGGCTGCAAAGGAATTGCCATCGCCTAATTCAGATGAAAACATGACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAGTTATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACCAATTCGTGGGATTCTCCCCCCGGAAATCGAACAGGTGCCGTTACCATCGGTGACGAAAGTATTAATGGTAGTGAAATGCCAGATTTCAGTCTCGATCTTGTCTCCAATGATAGACAGACTGGTCTAGAAGCTTTAGATTACGACATTCATAACTACTTTCCTCAGCACTCTGAACGCCTGACCGCTGAAAAAATAGATACGTCAGCATGTCAATGTGAAATTGACCAAAAGTATCTTCCATACGAGACAGAAGATGATACTTTATTCCCCAGCGTGCTTCCCCTTGCTGTAGGGAGCCAGTGTAATAATATTTGCAACCGCAAGTGTATCGGGACCAAACCATGTTCAAATAAGGAGATCAAATGCGACTTAATAACAAGCCACCTGTTGAATCAGAAATCTCTAGCTTCGGTGCTTCCGGTGGCTGCTTCTCATACTAAAACAATTCGAACCCAATCTGAAGCAATTGAACACATTAGCAGCGCCATATCGAATGGAAAAGCGTCTTGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGATGACTGCAAAATAGTAGTCAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG")
        self.assertEqual(alignment[1], "ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAAAGGATTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGAGATAGGAAAGAAGCCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGAACAGAAAGATGCGCAGAATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAAGTTTACTGTCGGAAATTACAAAATATAGAGCTAAGAATTCTGATGATGAAAGAATATTAGCCTTCCTCGATGATCTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAAGTACAGCAGTTAGCAAGGCTGCAAAGGAATTGCCATCGCCTAATTCAGATGAAAACATGACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAGTTATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACCAATTCGTGGGATTCTCCCCCCGGAAATCGAACAGGTGCCGTTACCATCGGTGACGAAAGTATTAATGGTAGTGAAATGCCAGATTTCAGTCTCGATCTTGTCTCCAATGATAGACAGACTGGTCTAGAAGCTTTAGATTACGACATTCATAACTACTTTCCTCAGCACTCTGAACGCCTGACCGCTGAAAAAATAGATACGTCAGCATGTCAATGTGAAATTGACCAAAAGTATCTTCCATACGAGACAGAAGATGATACTTTATTCCCCAGCGTGCTTCCCCTTGCTGTAGGGAGCCAGTGTAATAATATTTGCAACCGCAAGTGTATCGGGACCAAACCATGTTCAAATAAGGAGATCAAATGCGACTTAATAACAAGCCACCTGTTGAATCAGAAATCTCTAGCTTCGGTGCTTCCGGTGGCTGCTTCTCATACTAAAACAATTCGAACCCAATCTGAAGCAATTGAACACATTAGCAGCGCCATATCGAATGGAAAAGCGTCTTGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGATGACTGCAAAATAGTAGTCAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG")
        self.assertEqual(alignment.annotations["cds_start"], None)
        self.assertEqual(alignment.annotations["cds_end"], None)
        alignment = next(alignments)
        self.assertEqual(alignment.query.id, "gi|296143771|ref|NM_001180731.1|")
        self.assertEqual(alignment.query.description, "Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds:[revcomp]")
        self.assertEqual(alignment.target.id, "gi|330443520|ref|NC_001136.10|")
        self.assertEqual(alignment.target.description, "Saccharomyces cerevisiae S288c chromosome IV, complete sequence")
        self.assertEqual(alignment.annotations["model"], "cdna2genome")
        self.assertEqual(alignment.score, 6146)
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(alignment.query.seq, "ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAAAGGATTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGAGATAGGAAAGAAGCCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGAACAGAAAGATGCGCAGAATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAAGTTTACTGTCGGAAATTACAAAATATAGAGCTAAGAATTCTGATGATGAAAGAATATTAGCCTTCCTCGATGATCTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAAGTACAGCAGTTAGCAAGGCTGCAAAGGAATTGCCATCGCCTAATTCAGATGAAAACATGACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAGTTATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACCAATTCGTGGGATTCTCCCCCCGGAAATCGAACAGGTGCCGTTACCATCGGTGACGAAAGTATTAATGGTAGTGAAATGCCAGATTTCAGTCTCGATCTTGTCTCCAATGATAGACAGACTGGTCTAGAAGCTTTAGATTACGACATTCATAACTACTTTCCTCAGCACTCTGAACGCCTGACCGCTGAAAAAATAGATACGTCAGCATGTCAATGTGAAATTGACCAAAAGTATCTTCCATACGAGACAGAAGATGATACTTTATTCCCCAGCGTGCTTCCCCTTGCTGTAGGGAGCCAGTGTAATAATATTTGCAACCGCAAGTGTATCGGGACCAAACCATGTTCAAATAAGGAGATCAAATGCGACTTAATAACAAGCCACCTGTTGAATCAGAAATCTCTAGCTTCGGTGCTTCCGGTGGCTGCTTCTCATACTAAAACAATTCGAACCCAATCTGAAGCAATTGAACACATTAGCAGCGCCATATCGAATGGAAAAGCGTCTTGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGATGACTGCAAAATAGTAGTCAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG")
        self.assertEqual(repr(alignment.target.seq), "Seq({1318045: 'CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGCTTTGACTACTAT...CAT'}, length=1319275)")
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates, numpy.array([[1318045, 1319275], [1230, 0]])
            )
        )
        self.assertEqual(alignment[0], "CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGCTTTGACTACTATTTTGCAGTCATCTGTACATTTTGCCTTGATTATTAATTCGCTGCATAAATCATCTATGTCCAACGATGAATATTTTGGTAGGGAGGAGATCTCTTCGAGAATGTGGTAGCAAGACGCTTTTCCATTCGATATGGCGCTGCTAATGTGTTCAATTGCTTCAGATTGGGTTCGAATTGTTTTAGTATGAGAAGCAGCCACCGGAAGCACCGAAGCTAGAGATTTCTGATTCAACAGGTGGCTTGTTATTAAGTCGCATTTGATCTCCTTATTTGAACATGGTTTGGTCCCGATACACTTGCGGTTGCAAATATTATTACACTGGCTCCCTACAGCAAGGGGAAGCACGCTGGGGAATAAAGTATCATCTTCTGTCTCGTATGGAAGATACTTTTGGTCAATTTCACATTGACATGCTGACGTATCTATTTTTTCAGCGGTCAGGCGTTCAGAGTGCTGAGGAAAGTAGTTATGAATGTCGTAATCTAAAGCTTCTAGACCAGTCTGTCTATCATTGGAGACAAGATCGAGACTGAAATCTGGCATTTCACTACCATTAATACTTTCGTCACCGATGGTAACGGCACCTGTTCGATTTCCGGGGGGAGAATCCCACGAATTGGTTAAACTGGGAGCGTTCCATGAGCCTATGTTCCACATAACTTTCTCATTCTCTTGAGTGTGCGGCTGTACTTCTATACTTGTGTTCACAGTCATGTTTTCATCTGAATTAGGCGATGGCAATTCCTTTGCAGCCTTGCTAACTGCTGTACTTGTTCCTTTTTCGTTTTCCCTTTTCTGTTGTTCTTGCAGATCATCGAGGAAGGCTAATATTCTTTCATCATCAGAATTCTTAGCTCTATATTTTGTAATTTCCGACAGTAAACTTTTTAAAGAACATAGTAAAAAGTCCGTGGTAGTCTTATTCTGCGCATCTTTCTGTTCTAGTAACTCTACCCTCTCTTGCAAACTCTTCATTTTGGCTTCTTTCCTATCTCGGAACGCTCGTTGAGCTGCCCTATTCTGGGCAGTCCTCCTACTCTTAGCTTCAGAGTCAATCCTTTTTCTGCCTGGTCTGCCCACCTTCCTCTTAGGTGTTCCATCTTTATTTAGCAACATTTGCTTCTTCATGTCACCTGCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCAT")
        self.assertEqual(alignment[1], "CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGCTTTGACTACTATTTTGCAGTCATCTGTACATTTTGCCTTGATTATTAATTCGCTGCATAAATCATCTATGTCCAACGATGAATATTTTGGTAGGGAGGAGATCTCTTCGAGAATGTGGTAGCAAGACGCTTTTCCATTCGATATGGCGCTGCTAATGTGTTCAATTGCTTCAGATTGGGTTCGAATTGTTTTAGTATGAGAAGCAGCCACCGGAAGCACCGAAGCTAGAGATTTCTGATTCAACAGGTGGCTTGTTATTAAGTCGCATTTGATCTCCTTATTTGAACATGGTTTGGTCCCGATACACTTGCGGTTGCAAATATTATTACACTGGCTCCCTACAGCAAGGGGAAGCACGCTGGGGAATAAAGTATCATCTTCTGTCTCGTATGGAAGATACTTTTGGTCAATTTCACATTGACATGCTGACGTATCTATTTTTTCAGCGGTCAGGCGTTCAGAGTGCTGAGGAAAGTAGTTATGAATGTCGTAATCTAAAGCTTCTAGACCAGTCTGTCTATCATTGGAGACAAGATCGAGACTGAAATCTGGCATTTCACTACCATTAATACTTTCGTCACCGATGGTAACGGCACCTGTTCGATTTCCGGGGGGAGAATCCCACGAATTGGTTAAACTGGGAGCGTTCCATGAGCCTATGTTCCACATAACTTTCTCATTCTCTTGAGTGTGCGGCTGTACTTCTATACTTGTGTTCACAGTCATGTTTTCATCTGAATTAGGCGATGGCAATTCCTTTGCAGCCTTGCTAACTGCTGTACTTGTTCCTTTTTCGTTTTCCCTTTTCTGTTGTTCTTGCAGATCATCGAGGAAGGCTAATATTCTTTCATCATCAGAATTCTTAGCTCTATATTTTGTAATTTCCGACAGTAAACTTTTTAAAGAACATAGTAAAAAGTCCGTGGTAGTCTTATTCTGCGCATCTTTCTGTTCTAGTAACTCTACCCTCTCTTGCAAACTCTTCATTTTGGCTTCTTTCCTATCTCGGAACGCTCGTTGAGCTGCCCTATTCTGGGCAGTCCTCCTACTCTTAGCTTCAGAGTCAATCCTTTTTCTGCCTGGTCTGCCCACCTTCCTCTTAGGTGTTCCATCTTTATTTAGCAACATTTGCTTCTTCATGTCACCTGCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCAT")
        self.assertEqual(alignment.annotations["cds_start"], None)
        self.assertEqual(alignment.annotations["cds_end"], None)
        alignment = next(alignments)
        self.assertEqual(alignment.query.id, "gi|296143771|ref|NM_001180731.1|")
        self.assertEqual(alignment.query.description, "Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds")
        self.assertEqual(alignment.target.id, "gi|330443688|ref|NC_001145.3|")
        self.assertEqual(alignment.target.description, "Saccharomyces cerevisiae S288c chromosome XIII, complete sequence")
        self.assertEqual(alignment.annotations["model"], "cdna2genome")
        self.assertEqual(alignment.score, 518)
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(alignment.query.seq, "ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAAAGGATTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGAGATAGGAAAGAAGCCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGAACAGAAAGATGCGCAGAATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAAGTTTACTGTCGGAAATTACAAAATATAGAGCTAAGAATTCTGATGATGAAAGAATATTAGCCTTCCTCGATGATCTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAAGTACAGCAGTTAGCAAGGCTGCAAAGGAATTGCCATCGCCTAATTCAGATGAAAACATGACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAA")
        self.assertEqual(repr(alignment.target.seq), "Seq({85010: 'ATGGTGAACCTCTTCAAGACGGTCAGAATAATCAACAGGATGAAGAAGCAAAAGATGT', 253972: 'TGGCGAGGATAGCGAGCAACCGAAGAAGAAGGGTAGCAAAACTAGCAAAAAGCA...ACA', 350957: 'TGGGGTGATTATATCATTTCTGGATGAGGAATACCTGAAGACCACTCTTCATTA...GTT', 473168: 'AGATGGAAGAATTCTGATAATGCTGTAAAAGAAAT', 667038: 'AGTCATAGCGTTACGTTCGATACCTTCACTACGAAGATCCAAACTCTTTTTCTA...AAA'}, length=667216))")
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates,
                # fmt: off
# flake8: noqa
                numpy.array([[ 85010,  85021,  85021,  85036,  85036,  85040,
                               85040,  85041,  85041,  85049,  85049,  85066,
                              253974, 253978, 253979, 253987, 253987, 253990,
                              253990, 254023, 254025, 254032, 254033, 254135,
                              350959, 350973, 350975, 350985, 350985, 350990,
                              350992, 351002, 351002, 351006, 351007, 351027,
                              351027, 351042, 351043, 351048, 351048, 351052,
                              473170, 473190, 473195, 473201, 667040, 667052,
                              667054, 667059, 667059, 667066, 667068, 667069,
                              667070, 667163, 667163, 667167, 667168, 667170,
                              667171, 667174, 667175, 667216],
                             [     0,     11,     12,     27,     29,     33,
                                  34,     35,     36,     44,     48,     65,
                                  65,     69,     69,     77,     79,     82,
                                  83,    116,    116,    123,    123,    225,
                                 225,    239,    239,    249,    251,    256,
                                 256,    266,    268,    272,    272,    292,
                                 293,    308,    308,    313,    316,    320,
                                 320,    340,    340,    346,    346,    358,
                                 358,    363,    364,    371,    371,    372,
                                 372,    465,    466,    470,    470,    472,
                                 472,    475,    475,    516]])
                # fmt: on
            )
        )
        self.assertEqual(alignment.query.annotations["splicesites"], (65, 229, 330, 361))
        self.assertEqual(alignment.annotations["cds_start"], None)
        self.assertEqual(alignment.annotations["cds_end"], None)
        with self.assertRaises(StopIteration):
            next(alignments)

    def test_exn_22_m_coding2coding(self):
        """Test parsing exonerate output (exn_22_m_coding2coding.exn)."""
        exn_file = os.path.join("Exonerate", "exn_22_m_coding2coding.exn")
        alignments = exonerate.AlignmentIterator(exn_file, self.fmt)
        self.assertEqual(alignments.program, "exonerate")
        self.assertEqual(alignments.commandline, "exonerate -m coding2coding ../scer_cad1.fa /media/Waterloo/Downloads/genomes/scer_s288c/scer_s288c.fa --bestn 3 --showcigar no --showvulgar no")
        self.assertEqual(alignments.hostname, "blackbriar")
        alignment = next(alignments)
        self.assertEqual(alignment.query.id, "gi|296143771|ref|NM_001180731.1|")
        self.assertEqual(alignment.query.description, "Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds:[revcomp]")
        self.assertEqual(alignment.target.id, "gi|330443520|ref|NC_001136.10|")
        self.assertEqual(alignment.target.description, "Saccharomyces cerevisiae S288c chromosome IV, complete sequence")
        self.assertEqual(alignment.annotations["model"], "coding2coding")
        self.assertEqual(alignment.score, 2151)
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(repr(alignment.query.seq), "Seq({1: 'TGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAGCAGGTGACATGAAGA...TGT'}, length=1228)")
        self.assertEqual(repr(alignment.target.seq), "Seq({1318047: 'ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGCTTTGACTACTATTT...CCA'}, length=1319274)")
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates, numpy.array([[1318047, 1319274], [1228, 1]])
            )
        )
        self.assertEqual(alignment[0], "ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGCTTTGACTACTATTTTGCAGTCATCTGTACATTTTGCCTTGATTATTAATTCGCTGCATAAATCATCTATGTCCAACGATGAATATTTTGGTAGGGAGGAGATCTCTTCGAGAATGTGGTAGCAAGACGCTTTTCCATTCGATATGGCGCTGCTAATGTGTTCAATTGCTTCAGATTGGGTTCGAATTGTTTTAGTATGAGAAGCAGCCACCGGAAGCACCGAAGCTAGAGATTTCTGATTCAACAGGTGGCTTGTTATTAAGTCGCATTTGATCTCCTTATTTGAACATGGTTTGGTCCCGATACACTTGCGGTTGCAAATATTATTACACTGGCTCCCTACAGCAAGGGGAAGCACGCTGGGGAATAAAGTATCATCTTCTGTCTCGTATGGAAGATACTTTTGGTCAATTTCACATTGACATGCTGACGTATCTATTTTTTCAGCGGTCAGGCGTTCAGAGTGCTGAGGAAAGTAGTTATGAATGTCGTAATCTAAAGCTTCTAGACCAGTCTGTCTATCATTGGAGACAAGATCGAGACTGAAATCTGGCATTTCACTACCATTAATACTTTCGTCACCGATGGTAACGGCACCTGTTCGATTTCCGGGGGGAGAATCCCACGAATTGGTTAAACTGGGAGCGTTCCATGAGCCTATGTTCCACATAACTTTCTCATTCTCTTGAGTGTGCGGCTGTACTTCTATACTTGTGTTCACAGTCATGTTTTCATCTGAATTAGGCGATGGCAATTCCTTTGCAGCCTTGCTAACTGCTGTACTTGTTCCTTTTTCGTTTTCCCTTTTCTGTTGTTCTTGCAGATCATCGAGGAAGGCTAATATTCTTTCATCATCAGAATTCTTAGCTCTATATTTTGTAATTTCCGACAGTAAACTTTTTAAAGAACATAGTAAAAAGTCCGTGGTAGTCTTATTCTGCGCATCTTTCTGTTCTAGTAACTCTACCCTCTCTTGCAAACTCTTCATTTTGGCTTCTTTCCTATCTCGGAACGCTCGTTGAGCTGCCCTATTCTGGGCAGTCCTCCTACTCTTAGCTTCAGAGTCAATCCTTTTTCTGCCTGGTCTGCCCACCTTCCTCTTAGGTGTTCCATCTTTATTTAGCAACATTTGCTTCTTCATGTCACCTGCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA")
        self.assertEqual(alignment[1], "ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGCTTTGACTACTATTTTGCAGTCATCTGTACATTTTGCCTTGATTATTAATTCGCTGCATAAATCATCTATGTCCAACGATGAATATTTTGGTAGGGAGGAGATCTCTTCGAGAATGTGGTAGCAAGACGCTTTTCCATTCGATATGGCGCTGCTAATGTGTTCAATTGCTTCAGATTGGGTTCGAATTGTTTTAGTATGAGAAGCAGCCACCGGAAGCACCGAAGCTAGAGATTTCTGATTCAACAGGTGGCTTGTTATTAAGTCGCATTTGATCTCCTTATTTGAACATGGTTTGGTCCCGATACACTTGCGGTTGCAAATATTATTACACTGGCTCCCTACAGCAAGGGGAAGCACGCTGGGGAATAAAGTATCATCTTCTGTCTCGTATGGAAGATACTTTTGGTCAATTTCACATTGACATGCTGACGTATCTATTTTTTCAGCGGTCAGGCGTTCAGAGTGCTGAGGAAAGTAGTTATGAATGTCGTAATCTAAAGCTTCTAGACCAGTCTGTCTATCATTGGAGACAAGATCGAGACTGAAATCTGGCATTTCACTACCATTAATACTTTCGTCACCGATGGTAACGGCACCTGTTCGATTTCCGGGGGGAGAATCCCACGAATTGGTTAAACTGGGAGCGTTCCATGAGCCTATGTTCCACATAACTTTCTCATTCTCTTGAGTGTGCGGCTGTACTTCTATACTTGTGTTCACAGTCATGTTTTCATCTGAATTAGGCGATGGCAATTCCTTTGCAGCCTTGCTAACTGCTGTACTTGTTCCTTTTTCGTTTTCCCTTTTCTGTTGTTCTTGCAGATCATCGAGGAAGGCTAATATTCTTTCATCATCAGAATTCTTAGCTCTATATTTTGTAATTTCCGACAGTAAACTTTTTAAAGAACATAGTAAAAAGTCCGTGGTAGTCTTATTCTGCGCATCTTTCTGTTCTAGTAACTCTACCCTCTCTTGCAAACTCTTCATTTTGGCTTCTTTCCTATCTCGGAACGCTCGTTGAGCTGCCCTATTCTGGGCAGTCCTCCTACTCTTAGCTTCAGAGTCAATCCTTTTTCTGCCTGGTCTGCCCACCTTCCTCTTAGGTGTTCCATCTTTATTTAGCAACATTTGCTTCTTCATGTCACCTGCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA")
        self.assertEqual(alignment.annotations["cds_start"], None)
        self.assertEqual(alignment.annotations["cds_end"], None)
        alignment = next(alignments)
        self.assertEqual(alignment.query.id, "gi|296143771|ref|NM_001180731.1|")
        self.assertEqual(alignment.query.description, "Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds")
        self.assertEqual(alignment.target.id, "gi|330443520|ref|NC_001136.10|")
        self.assertEqual(alignment.target.description, "Saccharomyces cerevisiae S288c chromosome IV, complete sequence:[revcomp]")
        self.assertEqual(alignment.annotations["model"], "coding2coding")
        self.assertEqual(alignment.score, 2106)
        self.assertGreater(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(alignment.query.seq, "ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAAAGGATTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGAGATAGGAAAGAAGCCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGAACAGAAAGATGCGCAGAATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAAGTTTACTGTCGGAAATTACAAAATATAGAGCTAAGAATTCTGATGATGAAAGAATATTAGCCTTCCTCGATGATCTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAAGTACAGCAGTTAGCAAGGCTGCAAAGGAATTGCCATCGCCTAATTCAGATGAAAACATGACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAGTTATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACCAATTCGTGGGATTCTCCCCCCGGAAATCGAACAGGTGCCGTTACCATCGGTGACGAAAGTATTAATGGTAGTGAAATGCCAGATTTCAGTCTCGATCTTGTCTCCAATGATAGACAGACTGGTCTAGAAGCTTTAGATTACGACATTCATAACTACTTTCCTCAGCACTCTGAACGCCTGACCGCTGAAAAAATAGATACGTCAGCATGTCAATGTGAAATTGACCAAAAGTATCTTCCATACGAGACAGAAGATGATACTTTATTCCCCAGCGTGCTTCCCCTTGCTGTAGGGAGCCAGTGTAATAATATTTGCAACCGCAAGTGTATCGGGACCAAACCATGTTCAAATAAGGAGATCAAATGCGACTTAATAACAAGCCACCTGTTGAATCAGAAATCTCTAGCTTCGGTGCTTCCGGTGGCTGCTTCTCATACTAAAACAATTCGAACCCAATCTGAAGCAATTGAACACATTAGCAGCGCCATATCGAATGGAAAAGCGTCTTGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGATGACTGCAAAATAGTAGTCAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG")
        self.assertEqual(repr(alignment.target.seq), "Seq({1318045: 'CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGCTTTGACTACTAT...CAT'}, length=1319275)")
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates, numpy.array([[1319275, 1318045], [0, 1230]])
            )
        )
        self.assertEqual(alignment[0], "ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAAAGGATTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGAGATAGGAAAGAAGCCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGAACAGAAAGATGCGCAGAATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAAGTTTACTGTCGGAAATTACAAAATATAGAGCTAAGAATTCTGATGATGAAAGAATATTAGCCTTCCTCGATGATCTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAAGTACAGCAGTTAGCAAGGCTGCAAAGGAATTGCCATCGCCTAATTCAGATGAAAACATGACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAGTTATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACCAATTCGTGGGATTCTCCCCCCGGAAATCGAACAGGTGCCGTTACCATCGGTGACGAAAGTATTAATGGTAGTGAAATGCCAGATTTCAGTCTCGATCTTGTCTCCAATGATAGACAGACTGGTCTAGAAGCTTTAGATTACGACATTCATAACTACTTTCCTCAGCACTCTGAACGCCTGACCGCTGAAAAAATAGATACGTCAGCATGTCAATGTGAAATTGACCAAAAGTATCTTCCATACGAGACAGAAGATGATACTTTATTCCCCAGCGTGCTTCCCCTTGCTGTAGGGAGCCAGTGTAATAATATTTGCAACCGCAAGTGTATCGGGACCAAACCATGTTCAAATAAGGAGATCAAATGCGACTTAATAACAAGCCACCTGTTGAATCAGAAATCTCTAGCTTCGGTGCTTCCGGTGGCTGCTTCTCATACTAAAACAATTCGAACCCAATCTGAAGCAATTGAACACATTAGCAGCGCCATATCGAATGGAAAAGCGTCTTGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGATGACTGCAAAATAGTAGTCAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG")
        self.assertEqual(alignment[1], "ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAAAGGATTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGAGATAGGAAAGAAGCCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGAACAGAAAGATGCGCAGAATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAAGTTTACTGTCGGAAATTACAAAATATAGAGCTAAGAATTCTGATGATGAAAGAATATTAGCCTTCCTCGATGATCTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAAGTACAGCAGTTAGCAAGGCTGCAAAGGAATTGCCATCGCCTAATTCAGATGAAAACATGACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAGTTATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACCAATTCGTGGGATTCTCCCCCCGGAAATCGAACAGGTGCCGTTACCATCGGTGACGAAAGTATTAATGGTAGTGAAATGCCAGATTTCAGTCTCGATCTTGTCTCCAATGATAGACAGACTGGTCTAGAAGCTTTAGATTACGACATTCATAACTACTTTCCTCAGCACTCTGAACGCCTGACCGCTGAAAAAATAGATACGTCAGCATGTCAATGTGAAATTGACCAAAAGTATCTTCCATACGAGACAGAAGATGATACTTTATTCCCCAGCGTGCTTCCCCTTGCTGTAGGGAGCCAGTGTAATAATATTTGCAACCGCAAGTGTATCGGGACCAAACCATGTTCAAATAAGGAGATCAAATGCGACTTAATAACAAGCCACCTGTTGAATCAGAAATCTCTAGCTTCGGTGCTTCCGGTGGCTGCTTCTCATACTAAAACAATTCGAACCCAATCTGAAGCAATTGAACACATTAGCAGCGCCATATCGAATGGAAAAGCGTCTTGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGATGACTGCAAAATAGTAGTCAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG")
        self.assertEqual(alignment.annotations["cds_start"], None)
        self.assertEqual(alignment.annotations["cds_end"], None)
        alignment = next(alignments)
        self.assertEqual(alignment.query.id, "gi|296143771|ref|NM_001180731.1|")
        self.assertEqual(alignment.query.description, "Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds")
        self.assertEqual(alignment.target.id, "gi|330443688|ref|NC_001145.3|")
        self.assertEqual(alignment.target.description, "Saccharomyces cerevisiae S288c chromosome XIII, complete sequence")
        self.assertEqual(alignment.annotations["model"], "coding2coding")
        self.assertEqual(alignment.score, 116)
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(repr(alignment.query.seq), "Seq({1065: 'TGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAATATTCATCGTTGGAC...CTC'}, length=1224)")
        self.assertEqual(repr(alignment.target.seq), "Seq({255638: 'TGTTCGGAAATTTGGGATAGAATAACAACACATCCGAAATACTCAGATATTGAT...ATG'}, length=255794)")
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates,
                numpy.array([[255638, 255744, 255744, 255796],
                             [  1065,   1171,   1172,   1224]])
            )
        )
        self.assertEqual(alignment[0], "TGTTCGGAAATTTGGGATAGAATAACAACACATCCGAAATACTCAGATATTGATGTCGATGGTTTATGTTCCGAGCTAATGGCAAAGGCAAAATGTTCAGAAAGAG-GGGTTGTCATCAATGCAGAAGACGTTCAATTAGCTTTGAATAAGCATATG")
        self.assertEqual(alignment[1], "TGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGATGACTGCAAAATAGTAGTCAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTC")
        self.assertEqual(alignment.annotations["cds_start"], None)
        self.assertEqual(alignment.annotations["cds_end"], None)
        with self.assertRaises(StopIteration):
            next(alignments)

    def test_exn_22_m_coding2genome(self):
        """Test parsing exonerate output (exn_22_m_coding2genome.exn)."""
        exn_file = os.path.join("Exonerate", "exn_22_m_coding2genome.exn")
        alignments = exonerate.AlignmentIterator(exn_file)
        self.assertEqual(alignments.program, "exonerate")
        self.assertEqual(alignments.commandline, "exonerate -m coding2genome ../scer_cad1.fa /media/Waterloo/Downloads/genomes/scer_s288c/scer_s288c.fa --bestn 3 --showcigar no --showvulgar no")
        self.assertEqual(alignments.hostname, "blackbriar")
        alignment = next(alignments)
        self.assertEqual(alignment.query.id, "gi|296143771|ref|NM_001180731.1|")
        self.assertEqual(alignment.query.description, "Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds:[revcomp]")
        self.assertEqual(alignment.target.id, "gi|330443520|ref|NC_001136.10|")
        self.assertEqual(alignment.target.description, "Saccharomyces cerevisiae S288c chromosome IV, complete sequence")
        self.assertEqual(alignment.annotations["model"], "coding2genome")
        self.assertEqual(alignment.score, 2151)
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(repr(alignment.query.seq), "Seq({1: 'TGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAGCAGGTGACATGAAGA...TGT'}, length=1228)")
        self.assertEqual(repr(alignment.target.seq), "Seq({1318047: 'ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGCTTTGACTACTATTT...CCA'}, length=1319274)")
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates, numpy.array([[1318047, 1319274], [1228, 1]])
                # fmt: on
            )
        )
        self.assertEqual(alignment[0], "ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGCTTTGACTACTATTTTGCAGTCATCTGTACATTTTGCCTTGATTATTAATTCGCTGCATAAATCATCTATGTCCAACGATGAATATTTTGGTAGGGAGGAGATCTCTTCGAGAATGTGGTAGCAAGACGCTTTTCCATTCGATATGGCGCTGCTAATGTGTTCAATTGCTTCAGATTGGGTTCGAATTGTTTTAGTATGAGAAGCAGCCACCGGAAGCACCGAAGCTAGAGATTTCTGATTCAACAGGTGGCTTGTTATTAAGTCGCATTTGATCTCCTTATTTGAACATGGTTTGGTCCCGATACACTTGCGGTTGCAAATATTATTACACTGGCTCCCTACAGCAAGGGGAAGCACGCTGGGGAATAAAGTATCATCTTCTGTCTCGTATGGAAGATACTTTTGGTCAATTTCACATTGACATGCTGACGTATCTATTTTTTCAGCGGTCAGGCGTTCAGAGTGCTGAGGAAAGTAGTTATGAATGTCGTAATCTAAAGCTTCTAGACCAGTCTGTCTATCATTGGAGACAAGATCGAGACTGAAATCTGGCATTTCACTACCATTAATACTTTCGTCACCGATGGTAACGGCACCTGTTCGATTTCCGGGGGGAGAATCCCACGAATTGGTTAAACTGGGAGCGTTCCATGAGCCTATGTTCCACATAACTTTCTCATTCTCTTGAGTGTGCGGCTGTACTTCTATACTTGTGTTCACAGTCATGTTTTCATCTGAATTAGGCGATGGCAATTCCTTTGCAGCCTTGCTAACTGCTGTACTTGTTCCTTTTTCGTTTTCCCTTTTCTGTTGTTCTTGCAGATCATCGAGGAAGGCTAATATTCTTTCATCATCAGAATTCTTAGCTCTATATTTTGTAATTTCCGACAGTAAACTTTTTAAAGAACATAGTAAAAAGTCCGTGGTAGTCTTATTCTGCGCATCTTTCTGTTCTAGTAACTCTACCCTCTCTTGCAAACTCTTCATTTTGGCTTCTTTCCTATCTCGGAACGCTCGTTGAGCTGCCCTATTCTGGGCAGTCCTCCTACTCTTAGCTTCAGAGTCAATCCTTTTTCTGCCTGGTCTGCCCACCTTCCTCTTAGGTGTTCCATCTTTATTTAGCAACATTTGCTTCTTCATGTCACCTGCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA")
        self.assertEqual(alignment[1], "ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGCTTTGACTACTATTTTGCAGTCATCTGTACATTTTGCCTTGATTATTAATTCGCTGCATAAATCATCTATGTCCAACGATGAATATTTTGGTAGGGAGGAGATCTCTTCGAGAATGTGGTAGCAAGACGCTTTTCCATTCGATATGGCGCTGCTAATGTGTTCAATTGCTTCAGATTGGGTTCGAATTGTTTTAGTATGAGAAGCAGCCACCGGAAGCACCGAAGCTAGAGATTTCTGATTCAACAGGTGGCTTGTTATTAAGTCGCATTTGATCTCCTTATTTGAACATGGTTTGGTCCCGATACACTTGCGGTTGCAAATATTATTACACTGGCTCCCTACAGCAAGGGGAAGCACGCTGGGGAATAAAGTATCATCTTCTGTCTCGTATGGAAGATACTTTTGGTCAATTTCACATTGACATGCTGACGTATCTATTTTTTCAGCGGTCAGGCGTTCAGAGTGCTGAGGAAAGTAGTTATGAATGTCGTAATCTAAAGCTTCTAGACCAGTCTGTCTATCATTGGAGACAAGATCGAGACTGAAATCTGGCATTTCACTACCATTAATACTTTCGTCACCGATGGTAACGGCACCTGTTCGATTTCCGGGGGGAGAATCCCACGAATTGGTTAAACTGGGAGCGTTCCATGAGCCTATGTTCCACATAACTTTCTCATTCTCTTGAGTGTGCGGCTGTACTTCTATACTTGTGTTCACAGTCATGTTTTCATCTGAATTAGGCGATGGCAATTCCTTTGCAGCCTTGCTAACTGCTGTACTTGTTCCTTTTTCGTTTTCCCTTTTCTGTTGTTCTTGCAGATCATCGAGGAAGGCTAATATTCTTTCATCATCAGAATTCTTAGCTCTATATTTTGTAATTTCCGACAGTAAACTTTTTAAAGAACATAGTAAAAAGTCCGTGGTAGTCTTATTCTGCGCATCTTTCTGTTCTAGTAACTCTACCCTCTCTTGCAAACTCTTCATTTTGGCTTCTTTCCTATCTCGGAACGCTCGTTGAGCTGCCCTATTCTGGGCAGTCCTCCTACTCTTAGCTTCAGAGTCAATCCTTTTTCTGCCTGGTCTGCCCACCTTCCTCTTAGGTGTTCCATCTTTATTTAGCAACATTTGCTTCTTCATGTCACCTGCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA")
        self.assertEqual(alignment.annotations["cds_start"], None)
        self.assertEqual(alignment.annotations["cds_end"], None)
        alignment = next(alignments)
        self.assertEqual(alignment.query.id, "gi|296143771|ref|NM_001180731.1|")
        self.assertEqual(alignment.query.description, "Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds")
        self.assertEqual(alignment.target.id, "gi|330443520|ref|NC_001136.10|")
        self.assertEqual(alignment.target.description, "Saccharomyces cerevisiae S288c chromosome IV, complete sequence:[revcomp]")
        self.assertEqual(alignment.annotations["model"], "coding2genome")
        self.assertEqual(alignment.score, 2106)
        self.assertGreater(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(alignment.query.seq, "ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAAAGGATTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGAGATAGGAAAGAAGCCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGAACAGAAAGATGCGCAGAATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAAGTTTACTGTCGGAAATTACAAAATATAGAGCTAAGAATTCTGATGATGAAAGAATATTAGCCTTCCTCGATGATCTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAAGTACAGCAGTTAGCAAGGCTGCAAAGGAATTGCCATCGCCTAATTCAGATGAAAACATGACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAGTTATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACCAATTCGTGGGATTCTCCCCCCGGAAATCGAACAGGTGCCGTTACCATCGGTGACGAAAGTATTAATGGTAGTGAAATGCCAGATTTCAGTCTCGATCTTGTCTCCAATGATAGACAGACTGGTCTAGAAGCTTTAGATTACGACATTCATAACTACTTTCCTCAGCACTCTGAACGCCTGACCGCTGAAAAAATAGATACGTCAGCATGTCAATGTGAAATTGACCAAAAGTATCTTCCATACGAGACAGAAGATGATACTTTATTCCCCAGCGTGCTTCCCCTTGCTGTAGGGAGCCAGTGTAATAATATTTGCAACCGCAAGTGTATCGGGACCAAACCATGTTCAAATAAGGAGATCAAATGCGACTTAATAACAAGCCACCTGTTGAATCAGAAATCTCTAGCTTCGGTGCTTCCGGTGGCTGCTTCTCATACTAAAACAATTCGAACCCAATCTGAAGCAATTGAACACATTAGCAGCGCCATATCGAATGGAAAAGCGTCTTGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGATGACTGCAAAATAGTAGTCAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG")
        self.assertEqual(repr(alignment.target.seq), "Seq({1318045: 'CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGCTTTGACTACTAT...CAT'}, length=1319275)")
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates, numpy.array([[1319275, 1318045], [0, 1230]])
            )
        )
        self.assertEqual(alignment[0], "ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAAAGGATTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGAGATAGGAAAGAAGCCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGAACAGAAAGATGCGCAGAATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAAGTTTACTGTCGGAAATTACAAAATATAGAGCTAAGAATTCTGATGATGAAAGAATATTAGCCTTCCTCGATGATCTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAAGTACAGCAGTTAGCAAGGCTGCAAAGGAATTGCCATCGCCTAATTCAGATGAAAACATGACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAGTTATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACCAATTCGTGGGATTCTCCCCCCGGAAATCGAACAGGTGCCGTTACCATCGGTGACGAAAGTATTAATGGTAGTGAAATGCCAGATTTCAGTCTCGATCTTGTCTCCAATGATAGACAGACTGGTCTAGAAGCTTTAGATTACGACATTCATAACTACTTTCCTCAGCACTCTGAACGCCTGACCGCTGAAAAAATAGATACGTCAGCATGTCAATGTGAAATTGACCAAAAGTATCTTCCATACGAGACAGAAGATGATACTTTATTCCCCAGCGTGCTTCCCCTTGCTGTAGGGAGCCAGTGTAATAATATTTGCAACCGCAAGTGTATCGGGACCAAACCATGTTCAAATAAGGAGATCAAATGCGACTTAATAACAAGCCACCTGTTGAATCAGAAATCTCTAGCTTCGGTGCTTCCGGTGGCTGCTTCTCATACTAAAACAATTCGAACCCAATCTGAAGCAATTGAACACATTAGCAGCGCCATATCGAATGGAAAAGCGTCTTGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGATGACTGCAAAATAGTAGTCAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG")
        self.assertEqual(alignment[1], "ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAAAGGATTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGAGATAGGAAAGAAGCCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGAACAGAAAGATGCGCAGAATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAAGTTTACTGTCGGAAATTACAAAATATAGAGCTAAGAATTCTGATGATGAAAGAATATTAGCCTTCCTCGATGATCTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAAGTACAGCAGTTAGCAAGGCTGCAAAGGAATTGCCATCGCCTAATTCAGATGAAAACATGACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAGTTATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACCAATTCGTGGGATTCTCCCCCCGGAAATCGAACAGGTGCCGTTACCATCGGTGACGAAAGTATTAATGGTAGTGAAATGCCAGATTTCAGTCTCGATCTTGTCTCCAATGATAGACAGACTGGTCTAGAAGCTTTAGATTACGACATTCATAACTACTTTCCTCAGCACTCTGAACGCCTGACCGCTGAAAAAATAGATACGTCAGCATGTCAATGTGAAATTGACCAAAAGTATCTTCCATACGAGACAGAAGATGATACTTTATTCCCCAGCGTGCTTCCCCTTGCTGTAGGGAGCCAGTGTAATAATATTTGCAACCGCAAGTGTATCGGGACCAAACCATGTTCAAATAAGGAGATCAAATGCGACTTAATAACAAGCCACCTGTTGAATCAGAAATCTCTAGCTTCGGTGCTTCCGGTGGCTGCTTCTCATACTAAAACAATTCGAACCCAATCTGAAGCAATTGAACACATTAGCAGCGCCATATCGAATGGAAAAGCGTCTTGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGATGACTGCAAAATAGTAGTCAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG")
        self.assertEqual(alignment.annotations["cds_start"], None)
        self.assertEqual(alignment.annotations["cds_end"], None)
        alignment = next(alignments)
        self.assertEqual(alignment.query.id, "gi|296143771|ref|NM_001180731.1|")
        self.assertEqual(alignment.query.description, "Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds")
        self.assertEqual(alignment.target.id, "gi|330443688|ref|NC_001145.3|")
        self.assertEqual(alignment.target.description, "Saccharomyces cerevisiae S288c chromosome XIII, complete sequence")
        self.assertEqual(alignment.annotations["model"], "coding2genome")
        self.assertEqual(alignment.score, 116)
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(repr(alignment.query.seq), "Seq({1065: 'TGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAATATTCATCGTTGGAC...CTC'}, length=1224)")
        self.assertEqual(repr(alignment.target.seq), "Seq({255638: 'TGTTCGGAAATTTGGGATAGAATAACAACACATCCGAAATACTCAGATATTGAT...ATG'}, length=255794)")
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates,
                numpy.array([[255638, 255744, 255744, 255796],
                             [  1065,   1171,   1172,   1224]])
            )
        )
        self.assertEqual(alignment[0], "TGTTCGGAAATTTGGGATAGAATAACAACACATCCGAAATACTCAGATATTGATGTCGATGGTTTATGTTCCGAGCTAATGGCAAAGGCAAAATGTTCAGAAAGAG-GGGTTGTCATCAATGCAGAAGACGTTCAATTAGCTTTGAATAAGCATATG")
        self.assertEqual(alignment[1], "TGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGATGACTGCAAAATAGTAGTCAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTC")
        self.assertEqual(alignment.annotations["cds_start"], None)
        self.assertEqual(alignment.annotations["cds_end"], None)
        with self.assertRaises(StopIteration):
            next(alignments)

    def test_exn_22_m_dna2protein(self):
        """Test parsing exonerate output (exn_22_m_dna2protein.exn)."""
        exn_file = os.path.join("Exonerate", "exn_22_m_dna2protein.exn")
        alignments = exonerate.AlignmentIterator(exn_file)
        self.assertEqual(alignments.program, "exonerate")
        self.assertEqual(alignments.commandline, "exonerate --showvulgar no --showalignment yes nuc2.fa pro.fa")
        self.assertEqual(alignments.hostname, "blackbriar")
        alignment = next(alignments)
        self.assertEqual(alignment.query.id, "dna")
        self.assertEqual(alignment.target.id, "protein")
        self.assertEqual(alignment.annotations["model"], "ungapped:dna2protein")
        self.assertEqual(alignment.score, 105)
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(alignment.query.seq, "AACAGTCCGTTCCNAAAAGGCCCGCTGGCTTCTGTGCAGAATCCTGTCTATCACAAGCAGCCTCTGAACCCCGCGCCCAATGCAGAGACCCAC")
        self.assertEqual(alignment.target.seq, "NQSVPKRPAGSVQNPVYHNQPLNPAPSRDPH")
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates, numpy.array([[0, 93], [313, 344]])
            )
        )
        self.assertEqual(alignment[0], "AACAGTCCGTTCCNAAAAGGCCCGCTGGCTTCTGTGCAGAATCCTGTCTATCACAAGCAGCCTCTGAACCCCGCGCCCAATGCAGAGACCCAC")
        self.assertEqual(alignment[1], "NQSVPKRPAGSVQNPVYHNQPLNPAPSRDPH")
        self.assertEqual(alignment.annotations["cds_start"], 0)
        self.assertEqual(alignment.annotations["cds_end"], 93)
        with self.assertRaises(StopIteration):
            next(alignments)

    def test_exn_22_m_est2genome(self):
        """Test parsing exonerate output (exn_22_m_est2genome.exn)."""
        exn_file = os.path.join("Exonerate", "exn_22_m_est2genome.exn")
        alignments = exonerate.AlignmentIterator(exn_file)
        self.assertEqual(alignments.program, "exonerate")
        self.assertEqual(alignments.commandline, "exonerate -m est2genome ../scer_cad1.fa /media/Waterloo/Downloads/genomes/scer_s288c/scer_s288c.fa --bestn 3 --showcigar no --showvulgar no")
        self.assertEqual(alignments.hostname, "blackbriar")
        alignment = next(alignments)
        self.assertEqual(alignment.query.id, "gi|296143771|ref|NM_001180731.1|")
        self.assertEqual(alignment.query.description, "Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds")
        self.assertEqual(alignment.target.id, "gi|330443520|ref|NC_001136.10|")
        self.assertEqual(alignment.target.description, "Saccharomyces cerevisiae S288c chromosome IV, complete sequence:[revcomp]")
        self.assertEqual(alignment.annotations["model"], "est2genome")
        self.assertEqual(alignment.score, 6150)
        self.assertGreater(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(alignment.query.seq, "ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAAAGGATTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGAGATAGGAAAGAAGCCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGAACAGAAAGATGCGCAGAATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAAGTTTACTGTCGGAAATTACAAAATATAGAGCTAAGAATTCTGATGATGAAAGAATATTAGCCTTCCTCGATGATCTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAAGTACAGCAGTTAGCAAGGCTGCAAAGGAATTGCCATCGCCTAATTCAGATGAAAACATGACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAGTTATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACCAATTCGTGGGATTCTCCCCCCGGAAATCGAACAGGTGCCGTTACCATCGGTGACGAAAGTATTAATGGTAGTGAAATGCCAGATTTCAGTCTCGATCTTGTCTCCAATGATAGACAGACTGGTCTAGAAGCTTTAGATTACGACATTCATAACTACTTTCCTCAGCACTCTGAACGCCTGACCGCTGAAAAAATAGATACGTCAGCATGTCAATGTGAAATTGACCAAAAGTATCTTCCATACGAGACAGAAGATGATACTTTATTCCCCAGCGTGCTTCCCCTTGCTGTAGGGAGCCAGTGTAATAATATTTGCAACCGCAAGTGTATCGGGACCAAACCATGTTCAAATAAGGAGATCAAATGCGACTTAATAACAAGCCACCTGTTGAATCAGAAATCTCTAGCTTCGGTGCTTCCGGTGGCTGCTTCTCATACTAAAACAATTCGAACCCAATCTGAAGCAATTGAACACATTAGCAGCGCCATATCGAATGGAAAAGCGTCTTGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGATGACTGCAAAATAGTAGTCAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG")
        self.assertEqual(repr(alignment.target.seq), "Seq({1318045: 'CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGCTTTGACTACTAT...CAT'}, length=1319275)")
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates, numpy.array([[1319275, 1318045], [0, 1230]])
            )
        )
        self.assertEqual(alignment[0], "ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAAAGGATTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGAGATAGGAAAGAAGCCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGAACAGAAAGATGCGCAGAATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAAGTTTACTGTCGGAAATTACAAAATATAGAGCTAAGAATTCTGATGATGAAAGAATATTAGCCTTCCTCGATGATCTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAAGTACAGCAGTTAGCAAGGCTGCAAAGGAATTGCCATCGCCTAATTCAGATGAAAACATGACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAGTTATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACCAATTCGTGGGATTCTCCCCCCGGAAATCGAACAGGTGCCGTTACCATCGGTGACGAAAGTATTAATGGTAGTGAAATGCCAGATTTCAGTCTCGATCTTGTCTCCAATGATAGACAGACTGGTCTAGAAGCTTTAGATTACGACATTCATAACTACTTTCCTCAGCACTCTGAACGCCTGACCGCTGAAAAAATAGATACGTCAGCATGTCAATGTGAAATTGACCAAAAGTATCTTCCATACGAGACAGAAGATGATACTTTATTCCCCAGCGTGCTTCCCCTTGCTGTAGGGAGCCAGTGTAATAATATTTGCAACCGCAAGTGTATCGGGACCAAACCATGTTCAAATAAGGAGATCAAATGCGACTTAATAACAAGCCACCTGTTGAATCAGAAATCTCTAGCTTCGGTGCTTCCGGTGGCTGCTTCTCATACTAAAACAATTCGAACCCAATCTGAAGCAATTGAACACATTAGCAGCGCCATATCGAATGGAAAAGCGTCTTGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGATGACTGCAAAATAGTAGTCAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG")
        self.assertEqual(alignment[1], "ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAAAGGATTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGAGATAGGAAAGAAGCCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGAACAGAAAGATGCGCAGAATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAAGTTTACTGTCGGAAATTACAAAATATAGAGCTAAGAATTCTGATGATGAAAGAATATTAGCCTTCCTCGATGATCTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAAGTACAGCAGTTAGCAAGGCTGCAAAGGAATTGCCATCGCCTAATTCAGATGAAAACATGACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAGTTATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACCAATTCGTGGGATTCTCCCCCCGGAAATCGAACAGGTGCCGTTACCATCGGTGACGAAAGTATTAATGGTAGTGAAATGCCAGATTTCAGTCTCGATCTTGTCTCCAATGATAGACAGACTGGTCTAGAAGCTTTAGATTACGACATTCATAACTACTTTCCTCAGCACTCTGAACGCCTGACCGCTGAAAAAATAGATACGTCAGCATGTCAATGTGAAATTGACCAAAAGTATCTTCCATACGAGACAGAAGATGATACTTTATTCCCCAGCGTGCTTCCCCTTGCTGTAGGGAGCCAGTGTAATAATATTTGCAACCGCAAGTGTATCGGGACCAAACCATGTTCAAATAAGGAGATCAAATGCGACTTAATAACAAGCCACCTGTTGAATCAGAAATCTCTAGCTTCGGTGCTTCCGGTGGCTGCTTCTCATACTAAAACAATTCGAACCCAATCTGAAGCAATTGAACACATTAGCAGCGCCATATCGAATGGAAAAGCGTCTTGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGATGACTGCAAAATAGTAGTCAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG")
        alignment = next(alignments)
        self.assertEqual(alignment.query.id, "gi|296143771|ref|NM_001180731.1|")
        self.assertEqual(alignment.query.description, "Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds")
        self.assertEqual(alignment.target.id, "gi|330443688|ref|NC_001145.3|")
        self.assertEqual(alignment.target.description, "Saccharomyces cerevisiae S288c chromosome XIII, complete sequence")
        self.assertEqual(alignment.annotations["model"], "est2genome")
        self.assertEqual(alignment.score, 439)
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(alignment.query.seq, "ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAAAGGATTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGAGATAGGAAAGAAGCCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGAACAGAAAGATGCGCAGAATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAAGTTTACTGTCGGAAATTACAAAATATAGAGCTAAGAATTCTGATGATGAAAGAA")
        self.assertEqual(repr(alignment.target.seq), "Seq({85010: 'ATGGTGAACCTCTTCAAGACGGTCAGAATAATCAACAGGATGAAGAAGCAAAAGATGT', 253972: 'TGGCGAGGATAGCGAGCAACCGAAGAAGAAGGGTAGCAAAACTAGCAAAAAGCA...ACA', 350957: 'TGGGGTGATTATATCATTTCTGGATGAGGAATACCTGAAGACCACTCTTCATTA...GTT', 473168: 'AGATGGAAGAATTCTGATAATGCTGTAAAAGAA'}, length=473201)")
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates,
                # fmt: off
# flake8: noqa
                numpy.array([[ 85010,  85021,  85021,  85036,  85036,  85040,
                               85040,  85041,  85041,  85049,  85049,  85066,
                              253974, 253978, 253979, 253987, 253987, 253990,
                              253990, 254023, 254024, 254031, 254033, 254135,
                              350959, 350973, 350975, 350985, 350985, 350990,
                              350992, 351002, 351002, 351006, 351007, 351027,
                              351027, 351042, 351043, 351048, 351048, 351052,
                              473170, 473190, 473195, 473201],
                             [     0,     11,     12,     27,     29,     33,
                                  34,     35,     36,     44,     48,     65,
                                  65,     69,     69,     77,     78,     81,
                                  83,    116,    116,    123,    123,    225,
                                 225,    239,    239,    249,    251,    256,
                                 256,    266,    268,    272,    272,    292,
                                 293,    308,    308,    313,    316,    320,
                                 320,    340,    340,    346]])
                # fmt: on
            )
        )
        self.assertEqual(alignment.query.annotations["splicesites"], (65, 229, 330))
        alignment = next(alignments)
        self.assertEqual(alignment.query.id, "gi|296143771|ref|NM_001180731.1|")
        self.assertEqual(alignment.query.description, "Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds")
        self.assertEqual(alignment.target.id, "gi|330443688|ref|NC_001145.3|")
        self.assertEqual(alignment.target.description, "Saccharomyces cerevisiae S288c chromosome XIII, complete sequence:[revcomp]")
        self.assertEqual(alignment.annotations["model"], "est2genome")
        self.assertEqual(alignment.score, 263)
        self.assertGreater(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(repr(alignment.query.seq), "Seq({25: 'AGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTTGCTAAATAAAGATG...CAA'}, length=406)")
        self.assertEqual(repr(alignment.target.seq), "Seq({11338: 'TTGTATCTACTTCGTTTTGGCTCTTATAATTTTTTAGTGGCCTAAATTTTCAAA...TGT', 120610: 'TTCTTCTTCTTCTTCTTGTTCTTCTTCTCCATCATTATCTTCTTCATCTTCTTC...CGA', 130036: 'AGTCCGAATCTTTTTGCTTGGCTCCTCTGGGGTCACTTCAACCTTATTAATTTC...GGT'}, length=130198)")
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates,
                # fmt: off
# flake8: noqa
                numpy.array([[130198, 130184, 130183, 130179, 130179, 130154,
                              130153, 130144, 130138, 130096, 130096, 130080,
                              130078, 130071, 130070, 130067, 130067, 130044,
                              130044, 130038, 120681, 120680, 120680, 120669,
                              120668, 120656, 120656, 120647, 120646, 120636,
                              120636, 120618, 120617, 120612,  11487,  11471,
                               11471,  11467,  11467,  11456,  11456,  11448,
                               11448,  11426,  11424,  11420,  11418,  11384,
                               11383,  11380,  11379,  11338],
                             [    25,     39,     39,     43,     45,     70,
                                  70,     79,     79,    121,    123,    139,
                                 139,    146,    146,    149,    151,    174,
                                 177,    183,    183,    184,    185,    196,
                                 196,    208,    209,    218,    218,    228,
                                 229,    247,    247,    252,    252,    268,
                                 272,    276,    277,    288,    293,    301,
                                 302,    324,    324,    328,    328,    362,
                                 362,    365,    365,    406]])
                # fmt: on
            )
        )
        self.assertEqual(alignment.query.annotations["splicesites"], (169, 241))
        with self.assertRaises(StopIteration):
            next(alignments)

    def test_exn_22_m_genome2genome(self):
        """Test parsing exonerate output (exn_22_m_genome2genome.exn)."""
        exn_file = os.path.join("Exonerate", "exn_22_m_genome2genome.exn")
        alignments = exonerate.AlignmentIterator(exn_file)
        self.assertEqual(alignments.program, "exonerate")
        self.assertEqual(alignments.commandline, "exonerate -m genome2genome ../intron.fa /media/Waterloo/Downloads/genomes/scer_s288c/scer_s288c.fa --bestn 3 --showcigar no --showvulgar no")
        self.assertEqual(alignments.hostname, "blackbriar")
        alignment = next(alignments)
        self.assertEqual(alignment.query.id, "sacCer3_dna")
        self.assertEqual(alignment.query.description, "range=chrIV:1319469-1319997 5'pad=0 3'pad=0 strand=+ repeatMasking=none:[revcomp]")
        self.assertEqual(alignment.target.id, "gi|330443520|ref|NC_001136.10|")
        self.assertEqual(alignment.target.description, "Saccharomyces cerevisiae S288c chromosome IV, complete sequence:[revcomp]")
        self.assertEqual(alignment.annotations["model"], "genome2genome")
        self.assertEqual(alignment.score, 2641)
        self.assertGreater(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(alignment.query.seq, "CCAAAGTTCTTTCCGACAATCACATGCCAGGTATTGCCGTATTTGACATCCAATTGCTTCTTTACCGTCCCAGCAATGTCTCTTTCCAACTGGTACTTGTCCAGAGCATCTTTACTGATGGTTAAAATATCCTCTTTCAGCTTGTCGGTCTAAGTTTTCTCCTTGTTAGTAAATATATATATTCAAATGTACACACACAAAACATGTATATCATGGCACAATTACATACTATGTCAGACGCCTTAACAATAGCTGCAATTCATGGAAGAAAACCTCACTCTTCCTCGAGTTAGTAAAGAAAAATTGTATTGAAAGTCACAAAATTGTGACTGAGATTAACTGACATACGCGTACTCTTATTTTCATCGCTCATTTTGGTTTTAATTTGCTCTTCTTTATGTCGTTTCCCAGTTTCACTTTTTACCCTGGCAGTAGTTTTGGAGGCTTTCCTTTTCTGCAGTTTCGCTAGTTTGTAATCTCCATTTAAAGGGAAAAGAGAACCAGGCAACAAGATAAAGAGATAAGGGAT")
        self.assertEqual(repr(alignment.target.seq), "Seq({1319468: 'CCAAAGTTCTTTCCGACAATCACATGCCAGGTATTGCCGTATTTGACATCCAAT...GAT'}, length=1319997)")
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates, numpy.array([[1319997, 1319468], [0, 529]])
            )
        )
        self.assertEqual(alignment[0], "ATCCCTTATCTCTTTATCTTGTTGCCTGGTTCTCTTTTCCCTTTAAATGGAGATTACAAACTAGCGAAACTGCAGAAAAGGAAAGCCTCCAAAACTACTGCCAGGGTAAAAAGTGAAACTGGGAAACGACATAAAGAAGAGCAAATTAAAACCAAAATGAGCGATGAAAATAAGAGTACGCGTATGTCAGTTAATCTCAGTCACAATTTTGTGACTTTCAATACAATTTTTCTTTACTAACTCGAGGAAGAGTGAGGTTTTCTTCCATGAATTGCAGCTATTGTTAAGGCGTCTGACATAGTATGTAATTGTGCCATGATATACATGTTTTGTGTGTGTACATTTGAATATATATATTTACTAACAAGGAGAAAACTTAGACCGACAAGCTGAAAGAGGATATTTTAACCATCAGTAAAGATGCTCTGGACAAGTACCAGTTGGAAAGAGACATTGCTGGGACGGTAAAGAAGCAATTGGATGTCAAATACGGCAATACCTGGCATGTGATTGTCGGAAAGAACTTTGG")
        self.assertEqual(alignment[1], "CCAAAGTTCTTTCCGACAATCACATGCCAGGTATTGCCGTATTTGACATCCAATTGCTTCTTTACCGTCCCAGCAATGTCTCTTTCCAACTGGTACTTGTCCAGAGCATCTTTACTGATGGTTAAAATATCCTCTTTCAGCTTGTCGGTCTAAGTTTTCTCCTTGTTAGTAAATATATATATTCAAATGTACACACACAAAACATGTATATCATGGCACAATTACATACTATGTCAGACGCCTTAACAATAGCTGCAATTCATGGAAGAAAACCTCACTCTTCCTCGAGTTAGTAAAGAAAAATTGTATTGAAAGTCACAAAATTGTGACTGAGATTAACTGACATACGCGTACTCTTATTTTCATCGCTCATTTTGGTTTTAATTTGCTCTTCTTTATGTCGTTTCCCAGTTTCACTTTTTACCCTGGCAGTAGTTTTGGAGGCTTTCCTTTTCTGCAGTTTCGCTAGTTTGTAATCTCCATTTAAAGGGAAAAGAGAACCAGGCAACAAGATAAAGAGATAAGGGAT")
        self.assertEqual(alignment.annotations["cds_start"], None)
        self.assertEqual(alignment.annotations["cds_end"], None)
        alignment = next(alignments)
        self.assertEqual(alignment.query.id, "sacCer3_dna")
        self.assertEqual(alignment.query.description, "range=chrIV:1319469-1319997 5'pad=0 3'pad=0 strand=+ repeatMasking=none")
        self.assertEqual(alignment.target.id, "gi|330443520|ref|NC_001136.10|")
        self.assertEqual(alignment.target.description, "Saccharomyces cerevisiae S288c chromosome IV, complete sequence")
        self.assertEqual(alignment.annotations["model"], "genome2genome")
        self.assertEqual(alignment.score, 2641)
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(alignment.query.seq, "CCAAAGTTCTTTCCGACAATCACATGCCAGGTATTGCCGTATTTGACATCCAATTGCTTCTTTACCGTCCCAGCAATGTCTCTTTCCAACTGGTACTTGTCCAGAGCATCTTTACTGATGGTTAAAATATCCTCTTTCAGCTTGTCGGTCTAAGTTTTCTCCTTGTTAGTAAATATATATATTCAAATGTACACACACAAAACATGTATATCATGGCACAATTACATACTATGTCAGACGCCTTAACAATAGCTGCAATTCATGGAAGAAAACCTCACTCTTCCTCGAGTTAGTAAAGAAAAATTGTATTGAAAGTCACAAAATTGTGACTGAGATTAACTGACATACGCGTACTCTTATTTTCATCGCTCATTTTGGTTTTAATTTGCTCTTCTTTATGTCGTTTCCCAGTTTCACTTTTTACCCTGGCAGTAGTTTTGGAGGCTTTCCTTTTCTGCAGTTTCGCTAGTTTGTAATCTCCATTTAAAGGGAAAAGAGAACCAGGCAACAAGATAAAGAGATAAGGGAT")
        self.assertEqual(repr(alignment.target.seq), "Seq({1319468: 'CCAAAGTTCTTTCCGACAATCACATGCCAGGTATTGCCGTATTTGACATCCAAT...GAT'}, length=1319997)")
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates, numpy.array([[1319468, 1319997], [0, 529]])
            )
        )
        self.assertEqual(alignment[0], "CCAAAGTTCTTTCCGACAATCACATGCCAGGTATTGCCGTATTTGACATCCAATTGCTTCTTTACCGTCCCAGCAATGTCTCTTTCCAACTGGTACTTGTCCAGAGCATCTTTACTGATGGTTAAAATATCCTCTTTCAGCTTGTCGGTCTAAGTTTTCTCCTTGTTAGTAAATATATATATTCAAATGTACACACACAAAACATGTATATCATGGCACAATTACATACTATGTCAGACGCCTTAACAATAGCTGCAATTCATGGAAGAAAACCTCACTCTTCCTCGAGTTAGTAAAGAAAAATTGTATTGAAAGTCACAAAATTGTGACTGAGATTAACTGACATACGCGTACTCTTATTTTCATCGCTCATTTTGGTTTTAATTTGCTCTTCTTTATGTCGTTTCCCAGTTTCACTTTTTACCCTGGCAGTAGTTTTGGAGGCTTTCCTTTTCTGCAGTTTCGCTAGTTTGTAATCTCCATTTAAAGGGAAAAGAGAACCAGGCAACAAGATAAAGAGATAAGGGAT")
        self.assertEqual(alignment[1], "CCAAAGTTCTTTCCGACAATCACATGCCAGGTATTGCCGTATTTGACATCCAATTGCTTCTTTACCGTCCCAGCAATGTCTCTTTCCAACTGGTACTTGTCCAGAGCATCTTTACTGATGGTTAAAATATCCTCTTTCAGCTTGTCGGTCTAAGTTTTCTCCTTGTTAGTAAATATATATATTCAAATGTACACACACAAAACATGTATATCATGGCACAATTACATACTATGTCAGACGCCTTAACAATAGCTGCAATTCATGGAAGAAAACCTCACTCTTCCTCGAGTTAGTAAAGAAAAATTGTATTGAAAGTCACAAAATTGTGACTGAGATTAACTGACATACGCGTACTCTTATTTTCATCGCTCATTTTGGTTTTAATTTGCTCTTCTTTATGTCGTTTCCCAGTTTCACTTTTTACCCTGGCAGTAGTTTTGGAGGCTTTCCTTTTCTGCAGTTTCGCTAGTTTGTAATCTCCATTTAAAGGGAAAAGAGAACCAGGCAACAAGATAAAGAGATAAGGGAT")
        self.assertEqual(alignment.annotations["cds_start"], None)
        self.assertEqual(alignment.annotations["cds_end"], None)
        alignment = next(alignments)
        self.assertEqual(alignment.query.id, "sacCer3_dna")
        self.assertEqual(alignment.query.description, "range=chrIV:1319469-1319997 5'pad=0 3'pad=0 strand=+ repeatMasking=none:[revcomp]")
        self.assertEqual(alignment.target.id, "gi|330443489|ref|NC_001135.5|")
        self.assertEqual(alignment.target.description, "Saccharomyces cerevisiae S288c chromosome III, complete sequence")
        self.assertEqual(alignment.annotations["model"], "genome2genome")
        self.assertEqual(alignment.score, 267)
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(repr(alignment.query.seq), "Seq({162: 'TTGTTAGTAAATATATATATTCAAATGTACACACACAAAACATGTATATCATGG...GGG'}, length=491)")
        self.assertEqual(repr(alignment.target.seq), "Seq({23668: 'CCGCTGAAAGGAAGAGAACAAAGTTACAAGT', 32678: 'AAAACTGCAGAAAAGACTGGTATCTTGAACGACTTGGCGAAGGGTAAGAAAAGAAT', 42285: 'ATAACGGTAATCTCGAACTTCAAAGAAGAGCAAATGAACCGT', 97746: 'AGTGGATTTGAATGATGAAAATAAGAGAAATTTATTAGTCATATTCAGTGATTA...TGG', 115417: 'AGTCTTGAAGACCAGCATGTAGGAAGGTGATGATATGCTCCGTAAATAATTGGA...CAA'}, length=115569)")
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates,
                # fmt: off
# flake8: noqa
                numpy.array([[ 23668,  23697,  32680,  32712,  32714,  32716,
                               32717,  32732,  42287,  42290,  42290,  42295,
                               42297,  42300,  42301,  42305,  42306,  42325,
                               97748,  97775,  97775,  97821, 115419, 115433,
                              115434, 115443, 115443, 115458, 115461, 115478,
                              115481, 115482, 115483, 115496, 115497, 115503,
                              115503, 115515, 115517, 115562, 115563, 115569],
                             [     0,     29,     29,     61,     61,     63,
                                  63,     78,     78,     81,     82,     87,
                                  87,     90,     90,     94,     94,    113,
                                 113,    140,    143,    189,    189,    203,
                                 203,    212,    213,    228,    228,    245,
                                 245,    246,    246,    259,    259,    265,
                                 266,    278,    278,    323,    323,    329]])
                # fmt: on
            )
        )
        self.assertEqual(alignment.query.annotations["splicesites"], (27, 27, 27, 27))
        self.assertEqual(alignment.annotations["cds_start"], None)
        self.assertEqual(alignment.annotations["cds_end"], None)
        alignment = next(alignments)
        self.assertEqual(alignment.query.id, "sacCer3_dna")
        self.assertEqual(alignment.query.description, "range=chrIV:1319469-1319997 5'pad=0 3'pad=0 strand=+ repeatMasking=none:[revcomp]")
        self.assertEqual(alignment.target.id, "gi|330443667|ref|NC_001143.9|")
        self.assertEqual(alignment.target.description, "Saccharomyces cerevisiae S288c chromosome XI, complete sequence:[revcomp]")
        self.assertEqual(alignment.annotations["model"], "genome2genome")
        self.assertEqual(alignment.score, 267)
        self.assertGreater(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(repr(alignment.query.seq), "Seq({78: 'TCTCTTTCCAACTGGTACTTGTCCAGAGCATCTTTACT', 159: 'TCCTTGTTAGTAAATATATATATTCAAATGTACACACACAAAACATGTATATCA...CTC', 317: 'ACAAAATTGTGACTGAGATTAACTGACATACGCGTACTCTTATTTTCATCGCTC...GCT', 447: 'TCCTTTTCTGCAGTTTCGCTAGTTTGTAATCTCCATTTAAAGGGAAAAGAGAAC...GAT'}, length=529)")
        self.assertEqual(repr(alignment.target.seq), "Seq({71875: 'TCTCTTTCCAACTGCAAGTCGTAGAAAATCTTTTCT', 208629: 'TCCTTGTTAGTAAATATATATATTCAAATGTACACACAC', 386110: 'ACATGTGTCCGATTTGTTTGACCAAGTACACACAATTGGAAGCTGTACAATTAT...CCT', 487314: 'ACAAAATTGTGACTGAGATTAACTGACATACGCGTACTCTTATTTTCATCGCTC...GCT', 641678: 'TCCTTTTCTGCAGTTTCGCTAGTTTGTAATCTCCATTTAAAGGGAAAAGAGAAC...GAT'}, length=641760)")
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates,
                # fmt: off
# flake8: noqa
                numpy.array([[641760, 641729, 641729, 641725, 641725, 641706,
                              641703, 641694, 641693, 641687, 641687, 641680,
                              641680, 487385, 487358, 487358, 487354, 487354,
                              487351, 487351, 487347, 487347, 487338, 487337,
                              487321, 487321, 386201, 386176, 386175, 386160,
                              386160, 386151, 386151, 386149, 386149, 386115,
                              208669, 208654, 208653, 208629, 208629,  71907,
                               71893,  71893,  71871],
                             [     0,     31,     34,     38,     40,     59,
                                  59,     68,     68,     74,     75,     82,
                                 143,    143,    170,    175,    179,    180,
                                 183,    186,    190,    191,    200,    200,
                                 216,    251,    251,    276,    276,    291,
                                 292,    301,    302,    304,    305,    339,
                                 339,    354,    354,    378,    425,    425,
                                 439,    441,    463]])
                # fmt: on
            )
        )
        self.assertEqual(alignment.query.annotations["splicesites"], (101, 101, 101, 101))
        self.assertEqual(alignment.annotations["cds_start"], None)
        self.assertEqual(alignment.annotations["cds_end"], None)
        with self.assertRaises(StopIteration):
            next(alignments)

    def test_exn_22_m_ungapped(self):
        """Test parsing exonerate output (exn_22_m_ungapped.exn)."""
        exn_file = os.path.join("Exonerate", "exn_22_m_ungapped.exn")
        alignments = exonerate.AlignmentIterator(exn_file)
        self.assertEqual(alignments.program, "exonerate")
        self.assertEqual(alignments.commandline, "exonerate -m ungapped ../scer_cad1.fa /media/Waterloo/Downloads/genomes/scer_s288c/scer_s288c.fa --bestn 3 --showcigar no --showvulgar no")
        self.assertEqual(alignments.hostname, "blackbriar")
        alignment = next(alignments)
        self.assertEqual(alignment.query.id, "gi|296143771|ref|NM_001180731.1|")
        self.assertEqual(alignment.query.description, "Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds")
        self.assertEqual(alignment.target.id, "gi|330443520|ref|NC_001136.10|")
        self.assertEqual(alignment.target.description, "Saccharomyces cerevisiae S288c chromosome IV, complete sequence:[revcomp]")
        self.assertEqual(alignment.annotations["model"], "ungapped:dna2dna")
        self.assertEqual(alignment.score, 6150)
        self.assertGreater(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(alignment.query.seq, "ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAAAGGATTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGAGATAGGAAAGAAGCCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGAACAGAAAGATGCGCAGAATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAAGTTTACTGTCGGAAATTACAAAATATAGAGCTAAGAATTCTGATGATGAAAGAATATTAGCCTTCCTCGATGATCTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAAGTACAGCAGTTAGCAAGGCTGCAAAGGAATTGCCATCGCCTAATTCAGATGAAAACATGACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAGTTATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACCAATTCGTGGGATTCTCCCCCCGGAAATCGAACAGGTGCCGTTACCATCGGTGACGAAAGTATTAATGGTAGTGAAATGCCAGATTTCAGTCTCGATCTTGTCTCCAATGATAGACAGACTGGTCTAGAAGCTTTAGATTACGACATTCATAACTACTTTCCTCAGCACTCTGAACGCCTGACCGCTGAAAAAATAGATACGTCAGCATGTCAATGTGAAATTGACCAAAAGTATCTTCCATACGAGACAGAAGATGATACTTTATTCCCCAGCGTGCTTCCCCTTGCTGTAGGGAGCCAGTGTAATAATATTTGCAACCGCAAGTGTATCGGGACCAAACCATGTTCAAATAAGGAGATCAAATGCGACTTAATAACAAGCCACCTGTTGAATCAGAAATCTCTAGCTTCGGTGCTTCCGGTGGCTGCTTCTCATACTAAAACAATTCGAACCCAATCTGAAGCAATTGAACACATTAGCAGCGCCATATCGAATGGAAAAGCGTCTTGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGATGACTGCAAAATAGTAGTCAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG")
        self.assertEqual(repr(alignment.target.seq), "Seq({1318045: 'CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGCTTTGACTACTAT...CAT'}, length=1319275)")
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates, numpy.array([[1319275, 1318045], [0, 1230]])
            )
        )
        self.assertEqual(alignment[0], "ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAAAGGATTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGAGATAGGAAAGAAGCCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGAACAGAAAGATGCGCAGAATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAAGTTTACTGTCGGAAATTACAAAATATAGAGCTAAGAATTCTGATGATGAAAGAATATTAGCCTTCCTCGATGATCTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAAGTACAGCAGTTAGCAAGGCTGCAAAGGAATTGCCATCGCCTAATTCAGATGAAAACATGACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAGTTATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACCAATTCGTGGGATTCTCCCCCCGGAAATCGAACAGGTGCCGTTACCATCGGTGACGAAAGTATTAATGGTAGTGAAATGCCAGATTTCAGTCTCGATCTTGTCTCCAATGATAGACAGACTGGTCTAGAAGCTTTAGATTACGACATTCATAACTACTTTCCTCAGCACTCTGAACGCCTGACCGCTGAAAAAATAGATACGTCAGCATGTCAATGTGAAATTGACCAAAAGTATCTTCCATACGAGACAGAAGATGATACTTTATTCCCCAGCGTGCTTCCCCTTGCTGTAGGGAGCCAGTGTAATAATATTTGCAACCGCAAGTGTATCGGGACCAAACCATGTTCAAATAAGGAGATCAAATGCGACTTAATAACAAGCCACCTGTTGAATCAGAAATCTCTAGCTTCGGTGCTTCCGGTGGCTGCTTCTCATACTAAAACAATTCGAACCCAATCTGAAGCAATTGAACACATTAGCAGCGCCATATCGAATGGAAAAGCGTCTTGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGATGACTGCAAAATAGTAGTCAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG")
        self.assertEqual(alignment[1], "ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAAAGGATTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGAGATAGGAAAGAAGCCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGAACAGAAAGATGCGCAGAATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAAGTTTACTGTCGGAAATTACAAAATATAGAGCTAAGAATTCTGATGATGAAAGAATATTAGCCTTCCTCGATGATCTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAAGTACAGCAGTTAGCAAGGCTGCAAAGGAATTGCCATCGCCTAATTCAGATGAAAACATGACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAGTTATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACCAATTCGTGGGATTCTCCCCCCGGAAATCGAACAGGTGCCGTTACCATCGGTGACGAAAGTATTAATGGTAGTGAAATGCCAGATTTCAGTCTCGATCTTGTCTCCAATGATAGACAGACTGGTCTAGAAGCTTTAGATTACGACATTCATAACTACTTTCCTCAGCACTCTGAACGCCTGACCGCTGAAAAAATAGATACGTCAGCATGTCAATGTGAAATTGACCAAAAGTATCTTCCATACGAGACAGAAGATGATACTTTATTCCCCAGCGTGCTTCCCCTTGCTGTAGGGAGCCAGTGTAATAATATTTGCAACCGCAAGTGTATCGGGACCAAACCATGTTCAAATAAGGAGATCAAATGCGACTTAATAACAAGCCACCTGTTGAATCAGAAATCTCTAGCTTCGGTGCTTCCGGTGGCTGCTTCTCATACTAAAACAATTCGAACCCAATCTGAAGCAATTGAACACATTAGCAGCGCCATATCGAATGGAAAAGCGTCTTGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGATGACTGCAAAATAGTAGTCAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG")
        alignment = next(alignments)
        self.assertEqual(alignment.query.id, "gi|296143771|ref|NM_001180731.1|")
        self.assertEqual(alignment.query.description, "Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds")
        self.assertEqual(alignment.target.id, "gi|330443688|ref|NC_001145.3|")
        self.assertEqual(alignment.target.description, "Saccharomyces cerevisiae S288c chromosome XIII, complete sequence")
        self.assertEqual(alignment.annotations["model"], "ungapped:dna2dna")
        self.assertEqual(alignment.score, 233)
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(repr(alignment.query.seq), "Seq({121: 'TTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAGGGCAGCTCAACGAG...AGA'}, length=236)")
        self.assertEqual(repr(alignment.target.seq), "Seq({254031: 'TGGATCCTGAAACTAAGCAGAAGAGGACTGCCCAAAATCGGGCCGCTCAAAGAG...AGA'}, length=254146)")
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates, numpy.array([[254031, 254146], [242, 357]])
            )
        )
        self.assertEqual(alignment[0], "TGGATCCTGAAACTAAGCAGAAGAGGACTGCCCAAAATCGGGCCGCTCAAAGAGCTTTTAGGGAACGTAAGGAGAGGAAGATGAAGGAATTGGAGAAGAAGGTACAAAGTTTAGA")
        self.assertEqual(alignment[1], "TTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGAGATAGGAAAGAAGCCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGA")
        self.assertEqual(alignment.annotations["cds_start"], None)
        self.assertEqual(alignment.annotations["cds_end"], None)
        alignment = next(alignments)
        self.assertEqual(alignment.query.id, "gi|296143771|ref|NM_001180731.1|")
        self.assertEqual(alignment.query.description, "Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds")
        self.assertEqual(alignment.target.id, "gi|330443688|ref|NC_001145.3|")
        self.assertEqual(alignment.target.description, "Saccharomyces cerevisiae S288c chromosome XIII, complete sequence")
        self.assertEqual(alignment.annotations["model"], "ungapped:dna2dna")
        self.assertEqual(alignment.score, 151)
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(repr(alignment.query.seq), "Seq({1098: 'CCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCGAATTAATAATCAAG...AGA'}, length=1166)")
        self.assertEqual(repr(alignment.target.seq), "Seq({255671: 'CCGAAATACTCAGATATTGATGTCGATGGTTTATGTTCCGAGCTAATGGCAAAG...AGA'}, length=255739)")
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates, numpy.array([[255671, 255739], [2196, 2264]])
            )
        )
        self.assertEqual(alignment[0], "CCGAAATACTCAGATATTGATGTCGATGGTTTATGTTCCGAGCTAATGGCAAAGGCAAAATGTTCAGA")
        self.assertEqual(alignment[1], "CCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGA")
        with self.assertRaises(StopIteration):
            next(alignments)

    def test_exn_22_m_ungapped_trans(self):
        """Test parsing exonerate output (exn_22_m_ungapped_trans.exn)."""
        exn_file = os.path.join("Exonerate", "exn_22_m_ungapped_trans.exn")
        alignments = exonerate.AlignmentIterator(exn_file)
        self.assertEqual(alignments.program, "exonerate")
        self.assertEqual(alignments.commandline, "exonerate -m ungapped:trans ../scer_cad1.fa /media/Waterloo/Downloads/genomes/scer_s288c/scer_s288c.fa --bestn 3 --showcigar no --showvulgar no")
        self.assertEqual(alignments.hostname, "blackbriar")
        alignment = next(alignments)
        self.assertEqual(alignment.query.id, "gi|296143771|ref|NM_001180731.1|")
        self.assertEqual(alignment.query.description, "Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds:[revcomp]")
        self.assertEqual(alignment.target.id, "gi|330443520|ref|NC_001136.10|")
        self.assertEqual(alignment.target.description, "Saccharomyces cerevisiae S288c chromosome IV, complete sequence")
        self.assertEqual(alignment.annotations["model"], "ungapped:codon")
        self.assertEqual(alignment.score, 2151)
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(repr(alignment.query.seq), "Seq({1: 'TGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAGCAGGTGACATGAAGA...TGT'}, length=1228)")
        self.assertEqual(repr(alignment.target.seq), "Seq({1318047: 'ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGCTTTGACTACTATTT...CCA'}, length=1319274)")
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates, numpy.array([[1318047, 1319274], [1228, 1]])
            )
        )
        self.assertEqual(alignment[0], "ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGCTTTGACTACTATTTTGCAGTCATCTGTACATTTTGCCTTGATTATTAATTCGCTGCATAAATCATCTATGTCCAACGATGAATATTTTGGTAGGGAGGAGATCTCTTCGAGAATGTGGTAGCAAGACGCTTTTCCATTCGATATGGCGCTGCTAATGTGTTCAATTGCTTCAGATTGGGTTCGAATTGTTTTAGTATGAGAAGCAGCCACCGGAAGCACCGAAGCTAGAGATTTCTGATTCAACAGGTGGCTTGTTATTAAGTCGCATTTGATCTCCTTATTTGAACATGGTTTGGTCCCGATACACTTGCGGTTGCAAATATTATTACACTGGCTCCCTACAGCAAGGGGAAGCACGCTGGGGAATAAAGTATCATCTTCTGTCTCGTATGGAAGATACTTTTGGTCAATTTCACATTGACATGCTGACGTATCTATTTTTTCAGCGGTCAGGCGTTCAGAGTGCTGAGGAAAGTAGTTATGAATGTCGTAATCTAAAGCTTCTAGACCAGTCTGTCTATCATTGGAGACAAGATCGAGACTGAAATCTGGCATTTCACTACCATTAATACTTTCGTCACCGATGGTAACGGCACCTGTTCGATTTCCGGGGGGAGAATCCCACGAATTGGTTAAACTGGGAGCGTTCCATGAGCCTATGTTCCACATAACTTTCTCATTCTCTTGAGTGTGCGGCTGTACTTCTATACTTGTGTTCACAGTCATGTTTTCATCTGAATTAGGCGATGGCAATTCCTTTGCAGCCTTGCTAACTGCTGTACTTGTTCCTTTTTCGTTTTCCCTTTTCTGTTGTTCTTGCAGATCATCGAGGAAGGCTAATATTCTTTCATCATCAGAATTCTTAGCTCTATATTTTGTAATTTCCGACAGTAAACTTTTTAAAGAACATAGTAAAAAGTCCGTGGTAGTCTTATTCTGCGCATCTTTCTGTTCTAGTAACTCTACCCTCTCTTGCAAACTCTTCATTTTGGCTTCTTTCCTATCTCGGAACGCTCGTTGAGCTGCCCTATTCTGGGCAGTCCTCCTACTCTTAGCTTCAGAGTCAATCCTTTTTCTGCCTGGTCTGCCCACCTTCCTCTTAGGTGTTCCATCTTTATTTAGCAACATTTGCTTCTTCATGTCACCTGCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA")
        self.assertEqual(alignment[1], "ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGCTTTGACTACTATTTTGCAGTCATCTGTACATTTTGCCTTGATTATTAATTCGCTGCATAAATCATCTATGTCCAACGATGAATATTTTGGTAGGGAGGAGATCTCTTCGAGAATGTGGTAGCAAGACGCTTTTCCATTCGATATGGCGCTGCTAATGTGTTCAATTGCTTCAGATTGGGTTCGAATTGTTTTAGTATGAGAAGCAGCCACCGGAAGCACCGAAGCTAGAGATTTCTGATTCAACAGGTGGCTTGTTATTAAGTCGCATTTGATCTCCTTATTTGAACATGGTTTGGTCCCGATACACTTGCGGTTGCAAATATTATTACACTGGCTCCCTACAGCAAGGGGAAGCACGCTGGGGAATAAAGTATCATCTTCTGTCTCGTATGGAAGATACTTTTGGTCAATTTCACATTGACATGCTGACGTATCTATTTTTTCAGCGGTCAGGCGTTCAGAGTGCTGAGGAAAGTAGTTATGAATGTCGTAATCTAAAGCTTCTAGACCAGTCTGTCTATCATTGGAGACAAGATCGAGACTGAAATCTGGCATTTCACTACCATTAATACTTTCGTCACCGATGGTAACGGCACCTGTTCGATTTCCGGGGGGAGAATCCCACGAATTGGTTAAACTGGGAGCGTTCCATGAGCCTATGTTCCACATAACTTTCTCATTCTCTTGAGTGTGCGGCTGTACTTCTATACTTGTGTTCACAGTCATGTTTTCATCTGAATTAGGCGATGGCAATTCCTTTGCAGCCTTGCTAACTGCTGTACTTGTTCCTTTTTCGTTTTCCCTTTTCTGTTGTTCTTGCAGATCATCGAGGAAGGCTAATATTCTTTCATCATCAGAATTCTTAGCTCTATATTTTGTAATTTCCGACAGTAAACTTTTTAAAGAACATAGTAAAAAGTCCGTGGTAGTCTTATTCTGCGCATCTTTCTGTTCTAGTAACTCTACCCTCTCTTGCAAACTCTTCATTTTGGCTTCTTTCCTATCTCGGAACGCTCGTTGAGCTGCCCTATTCTGGGCAGTCCTCCTACTCTTAGCTTCAGAGTCAATCCTTTTTCTGCCTGGTCTGCCCACCTTCCTCTTAGGTGTTCCATCTTTATTTAGCAACATTTGCTTCTTCATGTCACCTGCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA")
        self.assertEqual(alignment.annotations["cds_start"], 1227)
        self.assertEqual(alignment.annotations["cds_end"], 0)
        alignment = next(alignments)
        self.assertEqual(alignment.query.id, "gi|296143771|ref|NM_001180731.1|")
        self.assertEqual(alignment.query.description, "Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds")
        self.assertEqual(alignment.target.id, "gi|330443520|ref|NC_001136.10|")
        self.assertEqual(alignment.target.description, "Saccharomyces cerevisiae S288c chromosome IV, complete sequence:[revcomp]")
        self.assertEqual(alignment.annotations["model"], "ungapped:codon")
        self.assertEqual(alignment.score, 2106)
        self.assertGreater(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(alignment.query.seq, "ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAAAGGATTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGAGATAGGAAAGAAGCCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGAACAGAAAGATGCGCAGAATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAAGTTTACTGTCGGAAATTACAAAATATAGAGCTAAGAATTCTGATGATGAAAGAATATTAGCCTTCCTCGATGATCTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAAGTACAGCAGTTAGCAAGGCTGCAAAGGAATTGCCATCGCCTAATTCAGATGAAAACATGACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAGTTATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACCAATTCGTGGGATTCTCCCCCCGGAAATCGAACAGGTGCCGTTACCATCGGTGACGAAAGTATTAATGGTAGTGAAATGCCAGATTTCAGTCTCGATCTTGTCTCCAATGATAGACAGACTGGTCTAGAAGCTTTAGATTACGACATTCATAACTACTTTCCTCAGCACTCTGAACGCCTGACCGCTGAAAAAATAGATACGTCAGCATGTCAATGTGAAATTGACCAAAAGTATCTTCCATACGAGACAGAAGATGATACTTTATTCCCCAGCGTGCTTCCCCTTGCTGTAGGGAGCCAGTGTAATAATATTTGCAACCGCAAGTGTATCGGGACCAAACCATGTTCAAATAAGGAGATCAAATGCGACTTAATAACAAGCCACCTGTTGAATCAGAAATCTCTAGCTTCGGTGCTTCCGGTGGCTGCTTCTCATACTAAAACAATTCGAACCCAATCTGAAGCAATTGAACACATTAGCAGCGCCATATCGAATGGAAAAGCGTCTTGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGATGACTGCAAAATAGTAGTCAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG")
        self.assertEqual(repr(alignment.target.seq), "Seq({1318045: 'CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGCTTTGACTACTAT...CAT'}, length=1319275)")
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates, numpy.array([[1319275, 1318045], [0, 1230]])
            )
        )
        self.assertEqual(alignment[0], "ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAAAGGATTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGAGATAGGAAAGAAGCCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGAACAGAAAGATGCGCAGAATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAAGTTTACTGTCGGAAATTACAAAATATAGAGCTAAGAATTCTGATGATGAAAGAATATTAGCCTTCCTCGATGATCTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAAGTACAGCAGTTAGCAAGGCTGCAAAGGAATTGCCATCGCCTAATTCAGATGAAAACATGACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAGTTATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACCAATTCGTGGGATTCTCCCCCCGGAAATCGAACAGGTGCCGTTACCATCGGTGACGAAAGTATTAATGGTAGTGAAATGCCAGATTTCAGTCTCGATCTTGTCTCCAATGATAGACAGACTGGTCTAGAAGCTTTAGATTACGACATTCATAACTACTTTCCTCAGCACTCTGAACGCCTGACCGCTGAAAAAATAGATACGTCAGCATGTCAATGTGAAATTGACCAAAAGTATCTTCCATACGAGACAGAAGATGATACTTTATTCCCCAGCGTGCTTCCCCTTGCTGTAGGGAGCCAGTGTAATAATATTTGCAACCGCAAGTGTATCGGGACCAAACCATGTTCAAATAAGGAGATCAAATGCGACTTAATAACAAGCCACCTGTTGAATCAGAAATCTCTAGCTTCGGTGCTTCCGGTGGCTGCTTCTCATACTAAAACAATTCGAACCCAATCTGAAGCAATTGAACACATTAGCAGCGCCATATCGAATGGAAAAGCGTCTTGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGATGACTGCAAAATAGTAGTCAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG")
        self.assertEqual(alignment[1], "ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAAAGGATTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGAGATAGGAAAGAAGCCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGAACAGAAAGATGCGCAGAATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAAGTTTACTGTCGGAAATTACAAAATATAGAGCTAAGAATTCTGATGATGAAAGAATATTAGCCTTCCTCGATGATCTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAAGTACAGCAGTTAGCAAGGCTGCAAAGGAATTGCCATCGCCTAATTCAGATGAAAACATGACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAGTTATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACCAATTCGTGGGATTCTCCCCCCGGAAATCGAACAGGTGCCGTTACCATCGGTGACGAAAGTATTAATGGTAGTGAAATGCCAGATTTCAGTCTCGATCTTGTCTCCAATGATAGACAGACTGGTCTAGAAGCTTTAGATTACGACATTCATAACTACTTTCCTCAGCACTCTGAACGCCTGACCGCTGAAAAAATAGATACGTCAGCATGTCAATGTGAAATTGACCAAAAGTATCTTCCATACGAGACAGAAGATGATACTTTATTCCCCAGCGTGCTTCCCCTTGCTGTAGGGAGCCAGTGTAATAATATTTGCAACCGCAAGTGTATCGGGACCAAACCATGTTCAAATAAGGAGATCAAATGCGACTTAATAACAAGCCACCTGTTGAATCAGAAATCTCTAGCTTCGGTGCTTCCGGTGGCTGCTTCTCATACTAAAACAATTCGAACCCAATCTGAAGCAATTGAACACATTAGCAGCGCCATATCGAATGGAAAAGCGTCTTGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGATGACTGCAAAATAGTAGTCAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG")
        self.assertEqual(alignment.annotations["cds_start"], 0)
        self.assertEqual(alignment.annotations["cds_end"], 1230)
        alignment = next(alignments)
        self.assertEqual(alignment.query.id, "gi|296143771|ref|NM_001180731.1|")
        self.assertEqual(alignment.query.description, "Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds:[revcomp]")
        self.assertEqual(alignment.target.id, "gi|330443520|ref|NC_001136.10|")
        self.assertEqual(alignment.target.description, "Saccharomyces cerevisiae S288c chromosome IV, complete sequence")
        self.assertEqual(alignment.annotations["model"], "ungapped:codon")
        self.assertEqual(alignment.score, 2072)
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(alignment.query.seq, "ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAAAGGATTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGAGATAGGAAAGAAGCCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGAACAGAAAGATGCGCAGAATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAAGTTTACTGTCGGAAATTACAAAATATAGAGCTAAGAATTCTGATGATGAAAGAATATTAGCCTTCCTCGATGATCTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAAGTACAGCAGTTAGCAAGGCTGCAAAGGAATTGCCATCGCCTAATTCAGATGAAAACATGACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAGTTATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACCAATTCGTGGGATTCTCCCCCCGGAAATCGAACAGGTGCCGTTACCATCGGTGACGAAAGTATTAATGGTAGTGAAATGCCAGATTTCAGTCTCGATCTTGTCTCCAATGATAGACAGACTGGTCTAGAAGCTTTAGATTACGACATTCATAACTACTTTCCTCAGCACTCTGAACGCCTGACCGCTGAAAAAATAGATACGTCAGCATGTCAATGTGAAATTGACCAAAAGTATCTTCCATACGAGACAGAAGATGATACTTTATTCCCCAGCGTGCTTCCCCTTGCTGTAGGGAGCCAGTGTAATAATATTTGCAACCGCAAGTGTATCGGGACCAAACCATGTTCAAATAAGGAGATCAAATGCGACTTAATAACAAGCCACCTGTTGAATCAGAAATCTCTAGCTTCGGTGCTTCCGGTGGCTGCTTCTCATACTAAAACAATTCGAACCCAATCTGAAGCAATTGAACACATTAGCAGCGCCATATCGAATGGAAAAGCGTCTTGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGATGACTGCAAAATAGTAGTCAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG")
        self.assertEqual(repr(alignment.target.seq), "Seq({1318045: 'CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGCTTTGACTACTAT...CAT'}, length=1319275)")
        self.assertTrue(
            numpy.array_equal(
                alignment.coordinates, numpy.array([[1318045, 1319275], [1230, 0]])
            )
        )
        self.assertEqual(alignment[0], "CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGCTTTGACTACTATTTTGCAGTCATCTGTACATTTTGCCTTGATTATTAATTCGCTGCATAAATCATCTATGTCCAACGATGAATATTTTGGTAGGGAGGAGATCTCTTCGAGAATGTGGTAGCAAGACGCTTTTCCATTCGATATGGCGCTGCTAATGTGTTCAATTGCTTCAGATTGGGTTCGAATTGTTTTAGTATGAGAAGCAGCCACCGGAAGCACCGAAGCTAGAGATTTCTGATTCAACAGGTGGCTTGTTATTAAGTCGCATTTGATCTCCTTATTTGAACATGGTTTGGTCCCGATACACTTGCGGTTGCAAATATTATTACACTGGCTCCCTACAGCAAGGGGAAGCACGCTGGGGAATAAAGTATCATCTTCTGTCTCGTATGGAAGATACTTTTGGTCAATTTCACATTGACATGCTGACGTATCTATTTTTTCAGCGGTCAGGCGTTCAGAGTGCTGAGGAAAGTAGTTATGAATGTCGTAATCTAAAGCTTCTAGACCAGTCTGTCTATCATTGGAGACAAGATCGAGACTGAAATCTGGCATTTCACTACCATTAATACTTTCGTCACCGATGGTAACGGCACCTGTTCGATTTCCGGGGGGAGAATCCCACGAATTGGTTAAACTGGGAGCGTTCCATGAGCCTATGTTCCACATAACTTTCTCATTCTCTTGAGTGTGCGGCTGTACTTCTATACTTGTGTTCACAGTCATGTTTTCATCTGAATTAGGCGATGGCAATTCCTTTGCAGCCTTGCTAACTGCTGTACTTGTTCCTTTTTCGTTTTCCCTTTTCTGTTGTTCTTGCAGATCATCGAGGAAGGCTAATATTCTTTCATCATCAGAATTCTTAGCTCTATATTTTGTAATTTCCGACAGTAAACTTTTTAAAGAACATAGTAAAAAGTCCGTGGTAGTCTTATTCTGCGCATCTTTCTGTTCTAGTAACTCTACCCTCTCTTGCAAACTCTTCATTTTGGCTTCTTTCCTATCTCGGAACGCTCGTTGAGCTGCCCTATTCTGGGCAGTCCTCCTACTCTTAGCTTCAGAGTCAATCCTTTTTCTGCCTGGTCTGCCCACCTTCCTCTTAGGTGTTCCATCTTTATTTAGCAACATTTGCTTCTTCATGTCACCTGCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCAT")
        self.assertEqual(alignment[1], "CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGCTTTGACTACTATTTTGCAGTCATCTGTACATTTTGCCTTGATTATTAATTCGCTGCATAAATCATCTATGTCCAACGATGAATATTTTGGTAGGGAGGAGATCTCTTCGAGAATGTGGTAGCAAGACGCTTTTCCATTCGATATGGCGCTGCTAATGTGTTCAATTGCTTCAGATTGGGTTCGAATTGTTTTAGTATGAGAAGCAGCCACCGGAAGCACCGAAGCTAGAGATTTCTGATTCAACAGGTGGCTTGTTATTAAGTCGCATTTGATCTCCTTATTTGAACATGGTTTGGTCCCGATACACTTGCGGTTGCAAATATTATTACACTGGCTCCCTACAGCAAGGGGAAGCACGCTGGGGAATAAAGTATCATCTTCTGTCTCGTATGGAAGATACTTTTGGTCAATTTCACATTGACATGCTGACGTATCTATTTTTTCAGCGGTCAGGCGTTCAGAGTGCTGAGGAAAGTAGTTATGAATGTCGTAATCTAAAGCTTCTAGACCAGTCTGTCTATCATTGGAGACAAGATCGAGACTGAAATCTGGCATTTCACTACCATTAATACTTTCGTCACCGATGGTAACGGCACCTGTTCGATTTCCGGGGGGAGAATCCCACGAATTGGTTAAACTGGGAGCGTTCCATGAGCCTATGTTCCACATAACTTTCTCATTCTCTTGAGTGTGCGGCTGTACTTCTATACTTGTGTTCACAGTCATGTTTTCATCTGAATTAGGCGATGGCAATTCCTTTGCAGCCTTGCTAACTGCTGTACTTGTTCCTTTTTCGTTTTCCCTTTTCTGTTGTTCTTGCAGATCATCGAGGAAGGCTAATATTCTTTCATCATCAGAATTCTTAGCTCTATATTTTGTAATTTCCGACAGTAAACTTTTTAAAGAACATAGTAAAAAGTCCGTGGTAGTCTTATTCTGCGCATCTTTCTGTTCTAGTAACTCTACCCTCTCTTGCAAACTCTTCATTTTGGCTTCTTTCCTATCTCGGAACGCTCGTTGAGCTGCCCTATTCTGGGCAGTCCTCCTACTCTTAGCTTCAGAGTCAATCCTTTTTCTGCCTGGTCTGCCCACCTTCCTCTTAGGTGTTCCATCTTTATTTAGCAACATTTGCTTCTTCATGTCACCTGCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCAT")
        self.assertEqual(alignment.annotations["cds_start"], 1230)
        self.assertEqual(alignment.annotations["cds_end"], 0)
        with self.assertRaises(StopIteration):
            next(alignments)

    def test_exn_22_m_ner(self):
        """Test parsing exonerate output (exn_22_m_ner.exn)."""
        exn_file = os.path.join("Exonerate", "exn_22_m_ner.exn")
        qresult = exonerate.AlignmentIterator(exn_file, self.fmt)

        # check common attributes
        for hit in qresult:
            self.assertEqual(qresult.id, hit.query_id)
            for hsp in hit:
                self.assertEqual(hit.id, hsp.hit_id)
                self.assertEqual(qresult.id, hsp.query_id)

        self.assertEqual("gi|296143771|ref|NM_001180731.1|", qresult.id)
        self.assertEqual(
            "Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds",
            qresult.description,
        )
        self.assertEqual("exonerate", qresult.program)
        self.assertEqual("NER:affine:local:dna2dna", qresult.model)
        self.assertEqual(2, len(qresult))
        # first hit
        hit = qresult[0]
        self.assertEqual("gi|330443520|ref|NC_001136.10|", hit.id)
        self.assertEqual(
            "Saccharomyces cerevisiae S288c chromosome IV, complete sequence",
            hit.description,
        )
        self.assertEqual(2, len(hit.hsps))
        # first hit, first hsp
        hsp = qresult[0].hsps[0]
        self.assertEqual(6150, hsp.score)
        self.assertEqual(1, hsp[0].query_strand)
        self.assertEqual(-1, hsp[0].hit_strand)
        self.assertEqual(0, hsp.query_start)
        self.assertEqual(1318045, hsp.hit_start)
        self.assertEqual(1230, hsp.query_end)
        self.assertEqual(1319275, hsp.hit_end)
        self.assertEqual([(0, 1230)], hsp.query_range_all[:5])
        self.assertEqual([(1318045, 1319275)], hsp.hit_range_all[:5])
        self.assertEqual([], hsp.query_inter_ranges[:5])
        self.assertEqual([], hsp.hit_inter_ranges[:5])
        self.assertEqual(1, len(hsp.query_all))
        self.assertEqual(1, len(hsp.hit_all))
        self.assertEqual(
            "ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG", hsp.query_all[0].seq[:40]
        )
        self.assertEqual(
            "||||||||||||||||||||||||||||||||||||||||",
            hsp[0].aln_annotation["similarity"][:40],
        )
        self.assertEqual(
            "ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG", hsp.hit_all[0].seq[:40]
        )
        self.assertEqual(
            "TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG", hsp.query_all[0].seq[-40:]
        )
        self.assertEqual(
            "||||||||||||||||||||||||||||||||||||||||",
            hsp[0].aln_annotation["similarity"][-40:],
        )
        self.assertEqual(
            "TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG", hsp.hit_all[0].seq[-40:]
        )

        # first hit, second hsp
        hsp = qresult[0].hsps[1]
        self.assertEqual(440, hsp.score)
        self.assertEqual(1, hsp[0].query_strand)
        self.assertEqual(1, hsp[0].hit_strand)
        self.assertEqual(509, hsp.query_start)
        self.assertEqual(183946, hsp.hit_start)
        self.assertEqual(1192, hsp.query_end)
        self.assertEqual(184603, hsp.hit_end)
        self.assertEqual(
            [(509, 514), (537, 547), (567, 595), (607, 617), (636, 650)],
            hsp.query_range_all[:5],
        )
        self.assertEqual(
            [
                (183946, 183951),
                (183977, 183987),
                (184002, 184030),
                (184044, 184054),
                (184066, 184080),
            ],
            hsp.hit_range_all[:5],
        )
        self.assertEqual(
            [(514, 537), (547, 567), (595, 607), (617, 636), (650, 667)],
            hsp.query_inter_ranges[:5],
        )
        self.assertEqual(
            [
                (183951, 183977),
                (183987, 184002),
                (184030, 184044),
                (184054, 184066),
                (184080, 184092),
            ],
            hsp.hit_inter_ranges[:5],
        )
        self.assertEqual(24, len(hsp.query_all))
        self.assertEqual(24, len(hsp.hit_all))
        # first block
        self.assertEqual("TGAGA", hsp.query_all[0].seq)
        self.assertEqual("|||||", hsp[0].aln_annotation["similarity"])
        self.assertEqual("TGAGA", hsp.hit_all[0].seq)
        # last block
        self.assertEqual("GACTGCAAAATAGTAGTCAAAGCTC", hsp.query_all[-1].seq)
        self.assertEqual(
            "||| | ||||||||||||| | |||", hsp[-1].aln_annotation["similarity"]
        )
        self.assertEqual("GACGGTAAAATAGTAGTCACACCTC", hsp.hit_all[-1].seq)

        # second hit
        hit = qresult[1]
        self.assertEqual("gi|330443681|ref|NC_001144.5|", hit.id)
        self.assertEqual(
            "Saccharomyces cerevisiae S288c chromosome XII, complete sequence",
            hit.description,
        )
        self.assertEqual(1, len(hit.hsps))
        # second hit, first hsp
        hsp = qresult[1].hsps[0]
        self.assertEqual(502, hsp.score)
        self.assertEqual(1, hsp[0].query_strand)
        self.assertEqual(1, hsp[0].hit_strand)
        self.assertEqual(110, hsp.query_start)
        self.assertEqual(297910, hsp.hit_start)
        self.assertEqual(1230, hsp.query_end)
        self.assertEqual(318994, hsp.hit_end)
        self.assertEqual(
            [(110, 117), (148, 159), (169, 182), (184, 197), (227, 244)],
            hsp.query_range_all[:5],
        )
        self.assertEqual(
            [
                (297910, 297917),
                (297946, 297957),
                (297970, 297983),
                (297992, 298004),
                (298019, 298038),
            ],
            hsp.hit_range_all[:5],
        )
        self.assertEqual(
            [(117, 148), (159, 169), (182, 184), (197, 227), (244, 255)],
            hsp.query_inter_ranges[:5],
        )
        self.assertEqual(
            [
                (297917, 297946),
                (297957, 297970),
                (297983, 297992),
                (298004, 298019),
                (298038, 298049),
            ],
            hsp.hit_inter_ranges[:5],
        )
        self.assertEqual(33, len(hsp.query_all))
        self.assertEqual(33, len(hsp.hit_all))
        # first block
        self.assertEqual("CAGAAAA", hsp.query_all[0].seq)
        self.assertEqual("| |||||", hsp[0].aln_annotation["similarity"])
        self.assertEqual("CTGAAAA", hsp.hit_all[0].seq)
        # last block
        self.assertEqual("TGGTTAGACAGCTCCTGTAG", hsp.query_all[-1].seq)
        self.assertEqual("|| |  ||||||||||||||", hsp[-1].aln_annotation["similarity"])
        self.assertEqual("TGATAGGACAGCTCCTGTAG", hsp.hit_all[-1].seq)

    def test_exn_22_q_multiple(self):
        """Test parsing exonerate output (exn_22_q_multiple.exn)."""
        exn_file = os.path.join("Exonerate", "exn_22_q_multiple.exn")
        qresults = list(parse(exn_file, self.fmt))
        self.assertEqual(2, len(qresults))
        # check common attributes
        for qresult in qresults:
            for hit in qresult:
                self.assertEqual(qresult.id, hit.query_id)
                for hsp in hit:
                    self.assertEqual(hit.id, hsp.hit_id)
                    self.assertEqual(qresult.id, hsp.query_id)

        # test first qresult
        qresult = qresults[0]
        self.assertEqual("gi|296142823|ref|NM_001178508.1|", qresult.id)
        self.assertEqual("exonerate", qresult.program)
        self.assertEqual("est2genome", qresult.model)
        self.assertEqual(3, len(qresult))
        # first qresult, first hit
        hit = qresult[0]
        self.assertEqual("gi|330443482|ref|NC_001134.8|", hit.id)
        self.assertEqual(1, len(hit.hsps))
        # first qresult, first hit, first hsp
        # first hit, first hsp
        hsp = qresult[0].hsps[0]
        self.assertEqual(4485, hsp.score)
        self.assertEqual(1, hsp[0].query_strand)
        self.assertEqual(1, hsp[0].hit_strand)
        self.assertEqual(0, hsp.query_start)
        self.assertEqual(560077, hsp.hit_start)
        self.assertEqual(897, hsp.query_end)
        self.assertEqual(560974, hsp.hit_end)
        self.assertEqual([(0, 897)], hsp.query_range_all)
        self.assertEqual([(560077, 560974)], hsp.hit_range_all)
        self.assertEqual([], hsp.query_inter_ranges)
        self.assertEqual([], hsp.hit_inter_ranges)
        self.assertEqual(1, len(hsp.query_all))
        self.assertEqual(1, len(hsp.hit_all))
        self.assertEqual(
            "ATGAGCGGTGAATTAGCAAATTACAAAAGACTTGAGAAAG", hsp.query_all[0].seq[:40]
        )
        self.assertEqual(
            "||||||||||||||||||||||||||||||||||||||||",
            hsp[0].aln_annotation["similarity"][:40],
        )
        self.assertEqual(
            "ATGAGCGGTGAATTAGCAAATTACAAAAGACTTGAGAAAG", hsp.hit_all[0].seq[:40]
        )
        self.assertEqual(
            "CAGAAGAGCAGCCATCCACCCCTACTTCCAAGAATCATAA", hsp.query_all[0].seq[-40:]
        )
        self.assertEqual(
            "||||||||||||||||||||||||||||||||||||||||",
            hsp[0].aln_annotation["similarity"][-40:],
        )
        self.assertEqual(
            "CAGAAGAGCAGCCATCCACCCCTACTTCCAAGAATCATAA", hsp.hit_all[0].seq[-40:]
        )

        # first qresult, second hit
        hit = qresult[1]
        self.assertEqual("gi|330443753|ref|NC_001148.4|", hit.id)
        self.assertEqual(1, len(hit.hsps))
        # first qresult, second hit, first hsp
        # second hit, first hsp
        hsp = qresult[1].hsps[0]
        self.assertEqual(941, hsp.score)
        self.assertEqual(1, hsp[0].query_strand)
        self.assertEqual(-1, hsp[0].hit_strand)
        self.assertEqual(2, hsp.query_start)
        self.assertEqual(492033, hsp.hit_start)
        self.assertEqual(896, hsp.query_end)
        self.assertEqual(492933, hsp.hit_end)
        self.assertEqual([(2, 896)], hsp.query_range_all)
        self.assertEqual([(492033, 492933)], hsp.hit_range_all)
        self.assertEqual([], hsp.query_inter_ranges)
        self.assertEqual([], hsp.hit_inter_ranges)
        self.assertEqual(1, len(hsp.query_all))
        self.assertEqual(1, len(hsp.hit_all))
        self.assertEqual(
            "GAGCGGTGAATTAGCAAATTACAAAAGACTTGAGAAAGTC", hsp.query_all[0].seq[:40]
        )
        self.assertEqual(
            "||||  |  || | || |||  |  ||  | || ||  | ",
            hsp[0].aln_annotation["similarity"][:40],
        )
        self.assertEqual(
            "GAGC--TCTATGAACAGATTTAAGCAG-TTAGAAAAGCTT", hsp.hit_all[0].seq[:40]
        )
        self.assertEqual(
            "C-AGAAGAGCAGCCATCCACCCCTACTTCCAAGAATCATA", hsp.query_all[0].seq[-40:]
        )
        self.assertEqual(
            "| || ||      ||| ||||| |  ||   ||| |  ||",
            hsp[0].aln_annotation["similarity"][-40:],
        )
        self.assertEqual(
            "CAAGCAGGCTCTGCAT-CACCCTTGGTTTGCAGAGTACTA", hsp.hit_all[0].seq[-40:]
        )

        # first qresult, third hit
        hit = qresult[2]
        self.assertEqual("gi|330443520|ref|NC_001136.10|", hit.id)
        self.assertEqual(1, len(hit.hsps))
        # first qresult, third hit, first hsp
        # third hit, first hsp
        hsp = qresult[2].hsps[0]
        self.assertEqual(651, hsp.score)
        self.assertEqual(1, hsp[0].query_strand)
        self.assertEqual(1, hsp[0].hit_strand)
        self.assertEqual(34, hsp.query_start)
        self.assertEqual(267809, hsp.hit_start)
        self.assertEqual(721, hsp.query_end)
        self.assertEqual(300717, hsp.hit_end)
        self.assertEqual([(34, 691), (691, 721)], hsp.query_range_all)
        self.assertEqual([(267809, 268448), (300686, 300717)], hsp.hit_range_all)
        self.assertEqual([(691, 691)], hsp.query_inter_ranges)
        self.assertEqual([(268448, 300686)], hsp.hit_inter_ranges)
        self.assertEqual(2, len(hsp.query_all))
        self.assertEqual(2, len(hsp.hit_all))
        # first block
        self.assertEqual(
            "AGAAAGTCGGTGAAGGTACATACGGTGTTGTTTATAAAGC", hsp.query_all[0].seq[:40]
        )
        self.assertEqual(
            "||||||| ||||| ||||| || |  ||||||||    | ",
            hsp[0].aln_annotation["similarity"][:40],
        )
        self.assertEqual(
            "AGAAAGTTGGTGAGGGTACTTATGCGGTTGTTTA-CTTGG", hsp.hit_all[0].seq[:40]
        )
        self.assertEqual(
            "CGATCAGATTTTCAAG--ATATTCAGAGTATTGGGAACGC", hsp.query_all[0].seq[-40:]
        )
        self.assertEqual(
            "|||||| |  |  |||  |  ||||| |  || || || |",
            hsp[0].aln_annotation["similarity"][-40:],
        )
        self.assertEqual(
            "CGATCAAA--TGGAAGTAACGTTCAGGGCCTTAGGGACAC", hsp.hit_all[0].seq[-40:]
        )
        # last block
        self.assertEqual("CGAATGAAGCTA-TATGGCCAGATATTGTCT", hsp.query_all[-1].seq)
        self.assertEqual(
            "| ||   || ||  ||||||||||||| |||", hsp[-1].aln_annotation["similarity"]
        )
        self.assertEqual("CAAACCGAGATAGAATGGCCAGATATTCTCT", hsp.hit_all[-1].seq)

        # test second qresult
        qresult = qresults[1]
        self.assertEqual("gi|296143771|ref|NM_001180731.1|", qresult.id)
        self.assertEqual("exonerate", qresult.program)
        self.assertEqual("est2genome", qresult.model)
        self.assertEqual(2, len(qresult))
        # second qresult, first hit
        hit = qresult[0]
        self.assertEqual("gi|330443520|ref|NC_001136.10|", hit.id)
        self.assertEqual(1, len(hit.hsps))
        # second qresult, first hit, first hsp
        # first hit, first hsp
        hsp = qresult[0].hsps[0]
        self.assertEqual(6150, hsp.score)
        self.assertEqual(1, hsp[0].query_strand)
        self.assertEqual(-1, hsp[0].hit_strand)
        self.assertEqual(0, hsp.query_start)
        self.assertEqual(1318045, hsp.hit_start)
        self.assertEqual(1230, hsp.query_end)
        self.assertEqual(1319275, hsp.hit_end)
        self.assertEqual([(0, 1230)], hsp.query_range_all)
        self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)
        self.assertEqual([], hsp.query_inter_ranges)
        self.assertEqual([], hsp.hit_inter_ranges)
        self.assertEqual(1, len(hsp.query_all))
        self.assertEqual(1, len(hsp.hit_all))
        self.assertEqual(
            "ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG", hsp.query_all[0].seq[:40]
        )
        self.assertEqual(
            "||||||||||||||||||||||||||||||||||||||||",
            hsp[0].aln_annotation["similarity"][:40],
        )
        self.assertEqual(
            "ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG", hsp.hit_all[0].seq[:40]
        )
        self.assertEqual(
            "TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG", hsp.query_all[0].seq[-40:]
        )
        self.assertEqual(
            "||||||||||||||||||||||||||||||||||||||||",
            hsp[0].aln_annotation["similarity"][-40:],
        )
        self.assertEqual(
            "TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG", hsp.hit_all[0].seq[-40:]
        )

        # second qresult, second hit
        hit = qresult[1]
        self.assertEqual("gi|330443688|ref|NC_001145.3|", hit.id)
        self.assertEqual(2, len(hit.hsps))
        # second qresult, second hit, first hsp
        # second hit, first hsp
        hsp = qresult[1].hsps[0]
        self.assertEqual(439, hsp.score)
        self.assertEqual(1, hsp[0].query_strand)
        self.assertEqual(1, hsp[0].hit_strand)
        self.assertEqual(0, hsp.query_start)
        self.assertEqual(85010, hsp.hit_start)
        self.assertEqual(346, hsp.query_end)
        self.assertEqual(473201, hsp.hit_end)
        self.assertEqual(
            [(0, 65), (65, 225), (225, 320), (320, 346)], hsp.query_range_all
        )
        self.assertEqual(
            [(85010, 85066), (253974, 254135), (350959, 351052), (473170, 473201)],
            hsp.hit_range_all,
        )
        self.assertEqual([(65, 65), (225, 225), (320, 320)], hsp.query_inter_ranges)
        self.assertEqual(
            [(85066, 253974), (254135, 350959), (351052, 473170)], hsp.hit_inter_ranges
        )
        self.assertEqual(4, len(hsp.query_all))
        self.assertEqual(4, len(hsp.hit_all))
        # first block
        self.assertEqual(
            "ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG", hsp.query_all[0].seq[:40]
        )
        self.assertEqual(
            "||||  ||  | ||||   | ||||||  |||| | | | ",
            hsp[0].aln_annotation["similarity"][:40],
        )
        self.assertEqual(
            "ATGGTGAACCT-CTTCAAGACGGTCAG--AATA-A-TCAA", hsp.hit_all[0].seq[:40]
        )
        self.assertEqual(
            "AGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTT", hsp.query_all[0].seq[-40:]
        )
        self.assertEqual(
            "||  |||| | | | ||||    ||||||||||||| | |",
            hsp[0].aln_annotation["similarity"][-40:],
        )
        self.assertEqual(
            "AG--AATA-A-TCAACAGG----ATGAAGAAGCAAAAGAT", hsp.hit_all[0].seq[-40:]
        )
        # last block
        self.assertEqual("AGCTAAGAATTCTGATGATG-----AAAGAA", hsp.query_all[-1].seq)
        self.assertEqual(
            "|   |||||||||||| |||     ||||||", hsp[-1].aln_annotation["similarity"]
        )
        self.assertEqual("ATGGAAGAATTCTGATAATGCTGTAAAAGAA", hsp.hit_all[-1].seq)

        # second qresult, second hit, second hsp
        # second hit, second hsp
        hsp = qresult[1].hsps[1]
        self.assertEqual(263, hsp.score)
        self.assertEqual(1, hsp[0].query_strand)
        self.assertEqual(-1, hsp[0].hit_strand)
        self.assertEqual(25, hsp.query_start)
        self.assertEqual(11338, hsp.hit_start)
        self.assertEqual(406, hsp.query_end)
        self.assertEqual(130198, hsp.hit_end)
        self.assertEqual([(25, 183), (183, 252), (252, 406)], hsp.query_range_all)
        self.assertEqual(
            [(130038, 130198), (120612, 120681), (11338, 11487)], hsp.hit_range_all
        )
        self.assertEqual([(183, 183), (252, 252)], hsp.query_inter_ranges)
        self.assertEqual([(120681, 130038), (11487, 120612)], hsp.hit_inter_ranges)
        self.assertEqual(3, len(hsp.query_all))
        self.assertEqual(3, len(hsp.hit_all))
        # first block
        self.assertEqual(
            "AGCAAATATATTTA-GCAGGTGACATGAAGAAGCAAATGT", hsp.query_all[0].seq[:40]
        )
        self.assertEqual(
            "| |||| |||   | ||||   | | || |||| | |  |",
            hsp[0].aln_annotation["similarity"][:40],
        )
        self.assertEqual(
            "ACCAAAGATAACAAGGCAG--AAAAAGAGGAAGAAGAAAT", hsp.hit_all[0].seq[:40]
        )
        self.assertEqual(
            "AG-GACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGA", hsp.query_all[0].seq[-40:]
        )
        self.assertEqual(
            "|| |||  ||||||  ||   |||  || ||   ||| ||",
            hsp[0].aln_annotation["similarity"][-40:],
        )
        self.assertEqual(
            "AGTGAC--CCCAGAGGAGCCAAGCAAAAAGA---TTCGGA", hsp.hit_all[0].seq[-40:]
        )
        # last block
        self.assertEqual(
            "AATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAA", hsp.query_all[-1].seq[:40]
        )
        self.assertEqual(
            "|||||||  | ||| |    |||| | |  | | ||    ",
            hsp[-1].aln_annotation["similarity"][:40],
        )
        self.assertEqual(
            "AATAAGAGCAACACAG----TTTA-TCTTATATGTA----", hsp.hit_all[-1].seq[:40]
        )
        self.assertEqual(
            "CTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAA", hsp.query_all[-1].seq[-40:]
        )
        self.assertEqual(
            "|  | | || |  | || ||  ||||||||  ||  ||||",
            hsp[-1].aln_annotation["similarity"][-40:],
        )
        self.assertEqual(
            "CCACTAAAAAATTATAAGAGCCAAAACGAAGTAGATACAA", hsp.hit_all[-1].seq[-40:]
        )

    def test_exn_22_m_coding2coding_fshifts(self):
        """Test parsing exonerate output (exn_22_m_coding2coding_fshifts.exn)."""
        exn_file = os.path.join("Exonerate", "exn_22_m_coding2coding_fshifts.exn")
        qresult = exonerate.AlignmentIterator(exn_file, self.fmt)

        # check common attributes
        for hit in qresult:
            self.assertEqual(qresult.id, hit.query_id)
            for hsp in hit:
                self.assertEqual(hit.id, hsp.hit_id)
                self.assertEqual(qresult.id, hsp.query_id)

        self.assertEqual("gi|296143771|ref|NM_001180731.1|", qresult.id)
        self.assertEqual(
            "Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds",
            qresult.description,
        )
        self.assertEqual("exonerate", qresult.program)
        self.assertEqual("coding2coding", qresult.model)
        self.assertEqual(1, len(qresult))
        # first hit
        hit = qresult[0]
        self.assertEqual("gi|296143771|ref|NM_001180731.1|", hit.id)
        self.assertEqual(
            "Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds",
            hit.description,
        )
        self.assertEqual(2, len(hit))
        # first hit, first hsp
        hsp = qresult[0][0]
        self.assertEqual(213, hsp.score)
        self.assertEqual([1, 1, 1, 1], hsp.query_strand_all)
        self.assertEqual([1, 1, 1, 1], hsp.hit_strand_all)
        self.assertEqual(0, hsp.query_start)
        self.assertEqual(465, hsp.hit_start)
        self.assertEqual(160, hsp.query_end)
        self.assertEqual(630, hsp.hit_end)
        self.assertEqual(
            [(0, 93), (94, 127), (127, 139), (139, 160)], hsp.query_range_all
        )
        self.assertEqual(
            [(465, 558), (558, 591), (593, 605), (609, 630)], hsp.hit_range_all
        )
        self.assertEqual([(93, 94), (127, 127), (139, 139)], hsp.query_inter_ranges)
        self.assertEqual([(558, 558), (591, 593), (605, 609)], hsp.hit_inter_ranges)
        self.assertEqual([1, 2, 2, 2], hsp.query_frame_all)
        self.assertEqual([1, 1, 3, 1], hsp.hit_frame_all)
        self.assertEqual(4, len(hsp.query_all))
        self.assertEqual(4, len(hsp.hit_all))
        self.assertEqual(4, len(hsp.aln_annotation_all))
        # first block
        self.assertEqual(
            "ACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAG", hsp[0].query.seq[:40]
        )
        self.assertEqual(
            "||||||||||||||||||||||||||||||||||||||||",
            hsp[0].aln_annotation["similarity"][:40],
        )
        self.assertEqual(
            "ACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAG", hsp[0].hit.seq[:40]
        )
        self.assertEqual(
            "TATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACC", hsp[0].query.seq[-40:]
        )
        self.assertEqual(
            "||||||||||||||||||||||||||||||||||||||||",
            hsp[0].aln_annotation["similarity"][-40:],
        )
        self.assertEqual(
            "TATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACC", hsp[0].hit.seq[-40:]
        )
        # last block
        self.assertEqual("GACGAAAGTATTAATGGTAGT", hsp[-1].query.seq)
        self.assertEqual("|||||||||||||||||||||", hsp[-1].aln_annotation["similarity"])
        self.assertEqual("GACGAAAGTATTAATGGTAGT", hsp[-1].hit.seq)

        # first hit, second hsp
        hsp = qresult[0][1]
        self.assertEqual(201, hsp.score)
        self.assertEqual([-1, -1], hsp.query_strand_all)
        self.assertEqual([-1, -1], hsp.hit_strand_all)
        self.assertEqual(1, hsp.query_start)
        self.assertEqual(466, hsp.hit_start)
        self.assertEqual(158, hsp.query_end)
        self.assertEqual(628, hsp.hit_end)
        self.assertEqual([(95, 158), (1, 94)], hsp.query_range_all)
        self.assertEqual([(559, 628), (466, 559)], hsp.hit_range_all)
        self.assertEqual([(94, 95)], hsp.query_inter_ranges)
        self.assertEqual([(559, 559)], hsp.hit_inter_ranges)
        self.assertEqual([-3, -2], hsp.query_frame_all)
        self.assertEqual([-2, -2], hsp.hit_frame_all)
        self.assertEqual(2, len(hsp.query_all))
        self.assertEqual(2, len(hsp.hit_all))
        self.assertEqual(2, len(hsp.aln_annotation_all))
        # first block
        self.assertEqual(
            "TACCATTAATACTTTCGTCATGGT<-><->AACGGCATGT", hsp[0].query.seq[:40]
        )
        self.assertEqual(
            "||||||||||||||||||||+ !       ...  !:!!|",
            hsp[0].aln_annotation["similarity"][:40],
        )
        self.assertEqual(
            "TACCATTAATACTTTCGTCACCGATGGTAACGGCACCTGT", hsp[0].hit.seq[:40]
        )
        # last block
        self.assertEqual(
            "TGGTTAAACTGGGAGCGTTCCATGAGCCTATGTTCCACAT", hsp[-1].query.seq[:40]
        )
        self.assertEqual(
            "||||||||||||||||||||||||||||||||||||||||",
            hsp[-1].aln_annotation["similarity"][:40],
        )
        self.assertEqual(
            "TGGTTAAACTGGGAGCGTTCCATGAGCCTATGTTCCACAT", hsp[-1].hit.seq[:40]
        )

    def test_exn_22_m_protein2dna_fshifts(self):
        """Test parsing exonerate output (exn_22_m_protein2dna_fshifts.exn)."""
        exn_file = os.path.join("Exonerate", "exn_22_m_protein2dna_fshifts.exn")
        qresult = exonerate.AlignmentIterator(exn_file, self.fmt)

        # check common attributes
        for hit in qresult:
            self.assertEqual(qresult.id, hit.query_id)
            for hsp in hit:
                self.assertEqual(hit.id, hsp.hit_id)
                self.assertEqual(qresult.id, hsp.query_id)

        self.assertEqual("sp|P24813|YAP2_YEAST", qresult.id)
        self.assertEqual(
            "AP-1-like transcription activator YAP2 OS=Saccharomyces cerevisiae (strain"
            " ATCC 204508 / S288c) GN=CAD1 PE=1 SV=2",
            qresult.description,
        )
        self.assertEqual("exonerate", qresult.program)
        self.assertEqual("protein2dna:local", qresult.model)
        self.assertEqual(1, len(qresult))
        # first hit
        hit = qresult[0]
        self.assertEqual("gi|296143771|ref|NM_001180731.1|", hit.id)
        self.assertEqual(
            "Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds",
            hit.description,
        )
        self.assertEqual(2, len(hit))
        # first hit, first hsp
        hsp = qresult[0][0]
        self.assertEqual(367, hsp.score)
        self.assertEqual([0, 0], hsp.query_strand_all)
        self.assertEqual([1, 1], hsp.hit_strand_all)
        self.assertEqual(330, hsp.query_start)
        self.assertEqual(216, hsp.hit_start)
        self.assertEqual(409, hsp.query_end)
        self.assertEqual(455, hsp.hit_end)
        self.assertEqual([(330, 373), (373, 409)], hsp.query_range_all)
        self.assertEqual([(216, 345), (347, 455)], hsp.hit_range_all)
        self.assertEqual([(373, 373)], hsp.query_inter_ranges)
        self.assertEqual([(345, 347)], hsp.hit_inter_ranges)
        self.assertEqual([0, 0], hsp.query_frame_all)
        self.assertEqual([1, 3], hsp.hit_frame_all)
        self.assertEqual(2, len(hsp.query_all))
        self.assertEqual(2, len(hsp.hit_all))
        self.assertEqual(2, len(hsp.aln_annotation_all))
        # first block
        self.assertEqual(
            "HTKTIRTQSEAIEHISSAISNGKASCYHILEEISSLPKYS", hsp[0].query.seq[:40]
        )
        self.assertEqual(
            "HTKTIRTQSEAIEHISSAISNGKASCYHILEEISSLPKYS", hsp[0].hit.seq[:40]
        )
        self.assertEqual(
            "TIRTQSEAIEHISSAISNGKASCYHILEEISSLPKYSSLD", hsp[0].query.seq[-40:]
        )
        self.assertEqual(
            "TIRTQSEAIEHISSAISNGKASCYHILEEISSLPKYSSLD", hsp[0].hit.seq[-40:]
        )
        # last block
        self.assertEqual("IDDLCSELIIKAKCTDDCKIVVKARDLQSALVRQLL", hsp[-1].query.seq)
        self.assertEqual("IDDLCSELIIKAKCTDDCKIVVKARDLQSALVRQLL", hsp[-1].hit.seq)

        # first hit, second hsp
        hsp = qresult[0][1]
        self.assertEqual(322, hsp.score)
        self.assertEqual([0], hsp.query_strand_all)
        self.assertEqual([1], hsp.hit_strand_all)
        self.assertEqual(6, hsp.query_start)
        self.assertEqual(16, hsp.hit_start)
        self.assertEqual(70, hsp.query_end)
        self.assertEqual(208, hsp.hit_end)
        self.assertEqual([(6, 70)], hsp.query_range_all)
        self.assertEqual([(16, 208)], hsp.hit_range_all)
        self.assertEqual([], hsp.query_inter_ranges)
        self.assertEqual([], hsp.hit_inter_ranges)
        self.assertEqual([0], hsp.query_frame_all)
        self.assertEqual([2], hsp.hit_frame_all)
        self.assertEqual(1, len(hsp.query_all))
        self.assertEqual(1, len(hsp.hit_all))
        self.assertEqual(1, len(hsp.aln_annotation_all))
        self.assertEqual(
            "KGQQIYLAGDMKKQMLLNKDGTPKRKVGRPGRKRIDSEAK", hsp[0].query.seq[:40]
        )
        self.assertEqual(
            "KGQQIYLAGDMKKQMLLNKDGTPKRKVGRPGRKRIDSEAK", hsp[0].hit.seq[:40]
        )
        self.assertEqual(
            "RKVGRPGRKRIDSEAKSRRTAQNRAAQRAFRDRKEAKMKS", hsp[0].query.seq[-40:]
        )
        self.assertEqual(
            "RKVGRPGRKRIDSEAKSRRTAQNRAAQRAFRDRKEAKMKS", hsp[0].hit.seq[-40:]
        )

    def test_exn_22_m_protein2genome(self):
        """Test parsing exonerate output (exn_22_m_protein2genome.exn)."""
        exn_file = os.path.join("Exonerate", "exn_22_m_protein2genome.exn")
        qresult = exonerate.AlignmentIterator(exn_file, self.fmt)

        # check common attributes
        for hit in qresult:
            self.assertEqual(qresult.id, hit.query_id)
            for hsp in hit:
                self.assertEqual(hit.id, hsp.hit_id)
                self.assertEqual(qresult.id, hsp.query_id)

        self.assertEqual("sp|P24813|YAP2_YEAST", qresult.id)
        self.assertEqual(
            "AP-1-like transcription activator YAP2 OS=Saccharomyces cerevisiae (strain"
            " ATCC 204508 / S288c) GN=CAD1 PE=1 SV=2",
            qresult.description,
        )
        self.assertEqual("exonerate", qresult.program)
        self.assertEqual("protein2genome:local", qresult.model)
        self.assertEqual(3, len(qresult))
        # first hit
        hit = qresult[0]
        self.assertEqual("gi|330443520|ref|NC_001136.10|", hit.id)
        self.assertEqual(
            "Saccharomyces cerevisiae S288c chromosome IV, complete sequence",
            hit.description,
        )
        self.assertEqual(1, len(hit))
        # first hit, first hsp
        hsp = qresult[0][0]
        self.assertEqual(2105, hsp.score)
        self.assertEqual(0, hsp.query_strand)
        self.assertEqual(-1, hsp.hit_strand)
        self.assertEqual(0, hsp.query_start)
        self.assertEqual(1318048, hsp.hit_start)
        self.assertEqual(409, hsp.query_end)
        self.assertEqual(1319275, hsp.hit_end)
        self.assertEqual(
            "MGNILRKGQQIYLAGDMKKQMLLNKDGTPKRKVGRPGRKR", hsp[0].query.seq[:40]
        )
        self.assertEqual(
            "MGNILRKGQQIYLAGDMKKQMLLNKDGTPKRKVGRPGRKR", hsp[0].hit.seq[:40]
        )
        self.assertEqual(
            "SSLDIDDLCSELIIKAKCTDDCKIVVKARDLQSALVRQLL", hsp[0].query.seq[-40:]
        )
        self.assertEqual(
            "SSLDIDDLCSELIIKAKCTDDCKIVVKARDLQSALVRQLL", hsp[0].hit.seq[-40:]
        )

        # last hit
        hit = qresult[-1]
        self.assertEqual("gi|330443590|ref|NC_001140.6|", hit.id)
        self.assertEqual(
            "Saccharomyces cerevisiae S288c chromosome VIII, complete sequence",
            hit.description,
        )
        self.assertEqual(1, len(hit))
        # last hit, first hsp
        hsp = qresult[-1][0]
        self.assertEqual(122, hsp.score)
        self.assertEqual([0, 0], hsp.query_strand_all)
        self.assertEqual([-1, -1], hsp.hit_strand_all)
        self.assertEqual("RKRIDSEAKSRRTAQNRAAQRAFRDRKEAKMKSLQERX", hsp[0].query.seq)
        self.assertEqual("NENVPDDSKAKKKAQNRAAQKAFRERKEARMKELQDKX", hsp[0].hit.seq)
        self.assertEqual("!.!", hsp.aln_annotation_all[0]["similarity"][0])
        self.assertEqual(":!", hsp.aln_annotation_all[0]["similarity"][-1])
        self.assertEqual("AAT", hsp.aln_annotation_all[0]["hit_annotation"][0])
        self.assertEqual("TT", hsp.aln_annotation_all[0]["hit_annotation"][-1])
        self.assertEqual(
            "XELLEQKDAQNKTTTDFLLCSLKSLLSEITKYRAKNSDDERILAFLDDLQE", hsp[-1].query.seq
        )
        self.assertEqual(
            "XNKILNRDPQFMSNSSFHQCVSLDSINTIEKDEEKNSDDDAGLQAATDARE", hsp[-1].hit.seq
        )
        self.assertEqual("!", hsp.aln_annotation_all[-1]["similarity"][0])
        self.assertEqual("|||", hsp.aln_annotation_all[-1]["similarity"][-1])
        self.assertEqual("A", hsp.aln_annotation_all[-1]["hit_annotation"][0])
        self.assertEqual("GAA", hsp.aln_annotation_all[-1]["hit_annotation"][-1])

        self.assertEqual([(37, 74), (75, 125)], hsp.query_range_all)
        self.assertEqual([(84533, 84646), (68450, 68601)], hsp.hit_range_all)
        self.assertEqual([(74, 75)], hsp.query_inter_ranges)
        self.assertEqual([(68601, 84533)], hsp.hit_inter_ranges)
        self.assertEqual([0, 0], hsp.query_frame_all)
        self.assertEqual([-3, -3], hsp.hit_frame_all)
        self.assertEqual(2, len(hsp.query_all))
        self.assertEqual(2, len(hsp.hit_all))
        self.assertEqual(2, len(hsp.aln_annotation_all))

    def test_exn_24_m_protein2genome_revcomp_fshifts(self):
        """Test parsing exonerate output (exn_24_m_protein2genome_revcomp_fshifts.exn)."""
        exn_file = os.path.join("Exonerate", "exn_24_m_protein2genome_revcomp_fshifts.exn")
        qresult = exonerate.AlignmentIterator(exn_file, self.fmt)

        # check common attributes
        for hit in qresult:
            self.assertEqual(qresult.id, hit.query_id)
            for hsp in hit:
                self.assertEqual(hit.id, hsp.hit_id)
                self.assertEqual(qresult.id, hsp.query_id)

        self.assertEqual("Morus-gene026", qresult.id)
        self.assertEqual("", qresult.description)
        self.assertEqual("exonerate", qresult.program)
        self.assertEqual("protein2genome:local", qresult.model)
        self.assertEqual(1, len(qresult))
        # first (only) hit
        hit = qresult[0]
        self.assertEqual("NODE_2_length_1708_cov_48.590765", hit.id)
        self.assertEqual("SPAdes NODE_2 contig", hit.description)
        self.assertEqual(1, len(hit))
        # first hit, first hsp
        hsp = qresult[0][0]
        self.assertEqual(1308, hsp.score)
        self.assertEqual([0, 0], hsp.query_strand_all)
        self.assertEqual([-1, -1], hsp.hit_strand_all)
        self.assertEqual(69, hsp.query_start)
        self.assertEqual(331, hsp.hit_start)
        self.assertEqual(441, hsp.query_end)
        self.assertEqual(1416, hsp.hit_end)
        self.assertEqual([(69, 402), (402, 441)], hsp.query_range_all)
        self.assertEqual([(450, 1416), (331, 448)], hsp.hit_range_all)
        self.assertEqual([(402, 402)], hsp.query_inter_ranges)
        self.assertEqual([(448, 450)], hsp.hit_inter_ranges)
        self.assertEqual([0, 0], hsp.query_frame_all)
        self.assertEqual([-1, -2], hsp.hit_frame_all)
        self.assertEqual(2, len(hsp.query_all))
        self.assertEqual(2, len(hsp.hit_all))
        self.assertEqual(2, len(hsp.aln_annotation_all))
        # first block
        self.assertEqual(
            "PESPWTCSPLQT--PSPSLLYHCIASLHRHDGTIHSIAVS", hsp[0].query.seq[:40]
        )
        self.assertEqual(
            "PESPWTSSPLQTLSHSPSLLYHCIASLRRHDGTIYSIATS", hsp[0].hit.seq[:40]
        )
        self.assertEqual(
            "VEKMVFSGSEDTTIRIWRREEGSCLHECLAVLDGHRGPVK", hsp[0].query.seq[-40:]
        )
        self.assertEqual(
            "VEKMVFGGSEDTTIRIWRREEGGCFHKCLAVLDGHRXXXX", hsp[0].hit.seq[-40:]
        )
        # last block
        self.assertEqual("CLAACLEVEKVVMMGFLVYSASLDQTFKVWRVKVLPDEE", hsp[-1].query.seq)
        self.assertEqual("CLAAC*QVEKMVMMGFLIYSVSLDQTLKVWRVKILPDQE", hsp[-1].hit.seq)

    def test_exn_24_protein2genome_met_intron(self):
        """Test parsing exonerate output (exn_24_m_protein2genome_met_intron.exn)."""
        exn_file = os.path.join("Exonerate", "exn_24_m_protein2genome_met_intron.exn")
        qresult = exonerate.AlignmentIterator(exn_file, self.fmt)

        # check common attributes
        for hit in qresult:
            self.assertEqual(qresult.id, hit.query_id)
            for hsp in hit:
                self.assertEqual(hit.id, hsp.hit_id)
                self.assertEqual(qresult.id, hsp.query_id)

        self.assertEqual("Morus-gene001", qresult.id)
        self.assertEqual("", qresult.description)
        self.assertEqual("exonerate", qresult.program)
        self.assertEqual("protein2genome:local", qresult.model)
        self.assertEqual(1, len(qresult))
        # first hit
        hit = qresult[0]
        self.assertEqual("NODE_1_length_2817_cov_100.387732", hit.id)
        self.assertEqual("SPAdes contig NODE_1", hit.description)
        self.assertEqual(1, len(hit))
        # first hit, first hsp
        self.assertEqual(1958, hsp.score)
        self.assertEqual([0, 0, 0, 0, 0, 0], hsp.query_strand_all)
        self.assertEqual([-1, -1, -1, -1, -1, -1], hsp.hit_strand_all)
        self.assertEqual(48, hsp.query_start)
        self.assertEqual(388, hsp.hit_start)
        self.assertEqual(482, hsp.query_end)
        self.assertEqual(2392, hsp.hit_end)
        self.assertEqual(
            [(48, 85), (85, 118), (118, 155), (155, 256), (257, 303), (303, 482)],
            hsp.query_range_all,
        )
        self.assertEqual(
            [
                (2281, 2392),
                (2030, 2129),
                (1810, 1921),
                (1420, 1724),
                (1058, 1198),
                (388, 925),
            ],
            hsp.hit_range_all,
        )
        self.assertEqual(
            [(2129, 2281), (1921, 2030), (1724, 1810), (1198, 1420), (925, 1058)],
            hsp.hit_inter_ranges,
        )
        self.assertEqual(
            [(85, 85), (118, 118), (155, 155), (256, 257), (303, 303)],
            hsp.query_inter_ranges,
        )
        self.assertEqual("MVQTPLHVSAGNNRADIVKF", hsp[0].query.seq[:20])
        self.assertEqual("VKFLLEFPGPEKVELEAKNM", hsp[0].query.seq[-20:])
        self.assertEqual("|||", hsp[0].aln_annotation["similarity"][0])
        self.assertEqual("|||", hsp[0].aln_annotation["similarity"][-1])
        self.assertEqual("ATG", hsp[0].aln_annotation["hit_annotation"][0])
        self.assertEqual("ATG", hsp[0].aln_annotation["hit_annotation"][-1])
        self.assertEqual([0, 0, 0, 0, 0, 0], hsp.query_frame_all)
        self.assertEqual([-2, -3, -2, -2, -3, -2], hsp.hit_frame_all)
        self.assertEqual(6, len(hsp.query_all))
        self.assertEqual(6, len(hsp.hit_all))
        self.assertEqual(6, len(hsp.aln_annotation_all))

    def test_exn_22_q_none(self):
        """Test parsing exonerate output (exn_22_q_none.exn)."""
        exn_file = os.path.join("Exonerate", "exn_22_q_none.exn")
        alignments = exonerate.AlignmentIterator(exn_file, self.fmt)
        self.assertEqual(alignments.program, "exonerate")
        self.assertEqual(alignments.commandline, "exonerate -m est2genome none.fa /media/Waterloo/Downloads/genomes/scer_s288c/scer_s288c.fa --bestn 3 --showcigar yes --showvulgar yes")
        self.assertEqual(alignments.hostname, "blackbriar")
        self.assertRaises(StopIteration, next, qresults)


class ExonerateVulgarCases(unittest.TestCase):

    fmt = "exonerate-vulgar"

    def test_exn_22_o_vulgar(self):
        """Test parsing exonerate output (exn_22_o_vulgar.exn)."""
        exn_file = os.path.join("Exonerate", "exn_22_o_vulgar.exn")
        qresult = exonerate.AlignmentIterator(exn_file, self.fmt)

        # check common attributes
        for hit in qresult:
            self.assertEqual(qresult.id, hit.query_id)
            for hsp in hit:
                self.assertEqual(hit.id, hsp.hit_id)
                self.assertEqual(qresult.id, hsp.query_id)

        self.assertEqual("sacCer3_dna", qresult.id)
        self.assertEqual("<unknown description>", qresult.description)
        self.assertEqual("exonerate", qresult.program)
        self.assertEqual(3, len(qresult))
        # first hit
        hit = qresult[0]
        self.assertEqual("gi|330443520|ref|NC_001136.10|", hit.id)
        self.assertEqual("<unknown description>", hit.description)
        self.assertEqual(2, len(hit.hsps))
        # first hit, first hsp
        hsp = qresult[0].hsps[0]
        self.assertEqual(2641, hsp.score)
        self.assertEqual(-1, hsp[0].query_strand)
        self.assertEqual(-1, hsp[0].hit_strand)
        self.assertEqual(0, hsp.query_start)
        self.assertEqual(1319468, hsp.hit_start)
        self.assertEqual(529, hsp.query_end)
        self.assertEqual(1319997, hsp.hit_end)
        self.assertEqual([(0, 529)], hsp.query_range_all[:5])
        self.assertEqual([(1319468, 1319997)], hsp.hit_range_all[:5])
        self.assertEqual([], hsp.query_split_codons)
        self.assertEqual([], hsp.hit_split_codons)
        self.assertEqual(" M 26 26 C 3 3 M 500 500", hsp.vulgar_comp)
        # first hit, second hsp
        hsp = qresult[0].hsps[1]
        self.assertEqual(2641, hsp.score)
        self.assertEqual(1, hsp[0].query_strand)
        self.assertEqual(1, hsp[0].hit_strand)
        self.assertEqual(0, hsp.query_start)
        self.assertEqual(1319468, hsp.hit_start)
        self.assertEqual(529, hsp.query_end)
        self.assertEqual(1319997, hsp.hit_end)
        self.assertEqual([(0, 529)], hsp.query_range_all[:5])
        self.assertEqual([(1319468, 1319997)], hsp.hit_range_all[:5])
        self.assertEqual([], hsp.query_split_codons)
        self.assertEqual([], hsp.hit_split_codons)
        self.assertEqual(" M 90 90 C 3 3 M 436 436", hsp.vulgar_comp)
        # second hit
        hit = qresult[1]
        self.assertEqual("gi|330443489|ref|NC_001135.5|", hit.id)
        self.assertEqual("<unknown description>", hit.description)
        self.assertEqual(1, len(hit.hsps))
        # second hit, first hsp
        hsp = qresult[1].hsps[0]
        self.assertEqual(267, hsp.score)
        self.assertEqual(-1, hsp[0].query_strand)
        self.assertEqual(1, hsp[0].hit_strand)
        self.assertEqual(162, hsp.query_start)
        self.assertEqual(23668, hsp.hit_start)
        self.assertEqual(491, hsp.query_end)
        self.assertEqual(115569, hsp.hit_end)
        self.assertEqual(
            [(462, 491), (413, 462), (378, 413), (302, 378), (162, 302)],
            hsp.query_range_all[:5],
        )
        self.assertEqual(
            [
                (23668, 23697),
                (32680, 32732),
                (42287, 42325),
                (97748, 97821),
                (115419, 115569),
            ],
            hsp.hit_range_all[:5],
        )
        self.assertEqual([(378, 379), (376, 378)], hsp.query_split_codons)
        self.assertEqual([(42324, 42325), (97748, 97750)], hsp.hit_split_codons)
        self.assertEqual(
            " M 29 29 5 0 2 I 0 8979 3 0 2 M 32 32 G 0 2 M 2 2 G 0 1 M 15 15 5 0 2 I 0 "
            "9551 3 0 2 M 3 3 G 1 0 M 5 5 G 0 2 M 3 3 G 0 1 M 4 4 G 0 1 M 18 18 S 1 1 "
            "5 0 2 I 0 55419 3 0 2 S 2 2 C 3 3 M 22 22 G 3 0 M 46 46 5 0 2 I 0 17594 "
            "3 0 2 M 14 14 G 0 1 M 9 9 G 1 0 M 15 15 G 0 3 M 17 17 G 0 3 M 1 1 G 0 1 "
            "M 13 13 G 0 1 M 6 6 G 1 0 M 12 12 G 0 2 M 45 45 G 0 1 M 6 6",
            hsp.vulgar_comp,
        )
        # third hit
        hit = qresult[2]
        self.assertEqual("gi|330443667|ref|NC_001143.9|", hit.id)
        self.assertEqual("<unknown description>", hit.description)
        self.assertEqual(1, len(hit.hsps))
        # third hit, first hsp
        hsp = qresult[2].hsps[0]
        self.assertEqual(267, hsp.score)
        self.assertEqual(-1, hsp[0].query_strand)
        self.assertEqual(-1, hsp[0].hit_strand)
        self.assertEqual(78, hsp.query_start)
        self.assertEqual(71883, hsp.hit_start)
        self.assertEqual(529, hsp.query_end)
        self.assertEqual(641760, hsp.hit_end)
        self.assertEqual(
            [(449, 529), (319, 388), (198, 284), (161, 198), (78, 114)],
            hsp.query_range_all[:5],
        )
        self.assertEqual(
            [
                (641682, 641760),
                (487327, 487387),
                (386123, 386207),
                (208639, 208677),
                (71883, 71917),
            ],
            hsp.hit_range_all[:5],
        )
        self.assertEqual([(198, 200), (197, 198)], hsp.query_split_codons)
        self.assertEqual([(386123, 386125), (208676, 208677)], hsp.hit_split_codons)
        self.assertEqual(
            " M 31 31 G 3 0 M 4 4 G 2 0 M 19 19 G 0 3 M 9 9 G 0 1 M 6 6 G 1 0 M 5 5 5 "
            "2 2 I 0 154244 I 57 0 I 0 47 3 2 2 M 25 25 G 5 0 M 4 4 G 1 0 M 3 3 G 3 0 "
            "M 4 4 G 1 0 M 9 9 G 0 1 M 14 14 5 2 2 I 0 101116 I 31 0 3 2 2 M 23 23 G "
            "0 1 M 15 15 G 1 0 M 9 9 G 1 0 M 2 2 G 1 0 M 14 14 C 18 18 S 2 2 5 0 2 I "
            "0 177442 3 0 2 S 1 1 C 12 12 M 2 2 G 0 1 M 22 22 5 2 2 I 0 136697 I 7 0 "
            "I 0 6 I 1 0 I 0 1 I 1 0 I 0 1 I 1 0 I 0 1 I 1 0 I 0 1 I 2 0 I 0 1 I 1 0 "
            "I 0 1 I 1 0 I 0 1 I 3 0 I 0 1 I 2 0 I 0 1 I 1 0 I 0 1 I 1 0 I 0 1 I 2 0 "
            "I 0 2 I 2 0 I 0 2 I 17 0 3 2 2 M 12 12 G 2 0 M 22 22",
            hsp.vulgar_comp,
        )

    def test_exn_22_o_vulgar_fshifts(self):
        """Test parsing exonerate output (exn_22_o_vulgar_fshifts.exn)."""
        exn_file = os.path.join("Exonerate", "exn_22_o_vulgar_fshifts.exn")
        qresult = exonerate.AlignmentIterator(exn_file, self.fmt)

        # check common attributes
        for hit in qresult:
            self.assertEqual(qresult.id, hit.query_id)
            for hsp in hit:
                self.assertEqual(hit.id, hsp.hit_id)
                self.assertEqual(qresult.id, hsp.query_id)

        self.assertEqual("gi|296143771|ref|NM_001180731.1|", qresult.id)
        self.assertEqual("<unknown description>", qresult.description)
        self.assertEqual("exonerate", qresult.program)
        self.assertEqual(1, len(qresult))
        # first hit
        hit = qresult[0]
        self.assertEqual("gi|296143771|ref|NM_001180731.1|", hit.id)
        self.assertEqual("<unknown description>", hit.description)
        self.assertEqual(2, len(hit))
        # first hit, first hsp
        hsp = qresult[0][0]
        self.assertEqual(213, hsp.score)
        self.assertEqual(1, hsp[0].query_strand)
        self.assertEqual(1, hsp[0].hit_strand)
        self.assertEqual(0, hsp.query_start)
        self.assertEqual(465, hsp.hit_start)
        self.assertEqual(160, hsp.query_end)
        self.assertEqual(630, hsp.hit_end)
        self.assertEqual(
            [(0, 93), (94, 127), (127, 139), (139, 160)], hsp.query_range_all[:5]
        )
        self.assertEqual(
            [(465, 558), (558, 591), (593, 605), (609, 630)], hsp.hit_range_all[:5]
        )
        self.assertEqual([], hsp.query_split_codons)
        self.assertEqual([], hsp.hit_split_codons)
        self.assertEqual(
            " C 93 93 F 1 0 C 33 33 F 0 2 C 12 12 F 0 4 C 21 21", hsp.vulgar_comp
        )
        # first hit, second hsp
        hsp = qresult[0][1]
        self.assertEqual(201, hsp.score)
        self.assertEqual(-1, hsp[0].query_strand)
        self.assertEqual(-1, hsp[0].hit_strand)
        self.assertEqual(1, hsp.query_start)
        self.assertEqual(466, hsp.hit_start)
        self.assertEqual(158, hsp.query_end)
        self.assertEqual(628, hsp.hit_end)
        self.assertEqual([(95, 158), (1, 94)], hsp.query_range_all[:5])
        self.assertEqual([(559, 628), (466, 559)], hsp.hit_range_all[:5])
        self.assertEqual([], hsp.query_split_codons)
        self.assertEqual([], hsp.hit_split_codons)
        self.assertEqual(" C 24 24 G 0 6 C 39 39 F 1 0 C 93 93", hsp.vulgar_comp)


class ExonerateCigarCases(unittest.TestCase):

    fmt = "exonerate-cigar"

    def test_exn_22_o_vulgar_cigar(self):
        """Test parsing exonerate output (exn_22_o_vulgar_cigar.exn)."""
        exn_file = os.path.join("Exonerate", "exn_22_o_vulgar_cigar.exn")
        qresult = exonerate.AlignmentIterator(exn_file, self.fmt)

        # check common attributes
        for hit in qresult:
            self.assertEqual(qresult.id, hit.query_id)
            for hsp in hit:
                self.assertEqual(hit.id, hsp.hit_id)
                self.assertEqual(qresult.id, hsp.query_id)

        self.assertEqual("sacCer3_dna", qresult.id)
        self.assertEqual("<unknown description>", qresult.description)
        self.assertEqual("exonerate", qresult.program)
        self.assertEqual(3, len(qresult))
        # first hit
        hit = qresult[0]
        self.assertEqual("gi|330443520|ref|NC_001136.10|", hit.id)
        self.assertEqual("<unknown description>", hit.description)
        self.assertEqual(2, len(hit.hsps))
        # first hit, first hsp
        hsp = qresult[0].hsps[0]
        self.assertEqual(2641, hsp.score)
        self.assertEqual(-1, hsp[0].query_strand)
        self.assertEqual(-1, hsp[0].hit_strand)
        self.assertEqual(0, hsp.query_start)
        self.assertEqual(1319468, hsp.hit_start)
        self.assertEqual(529, hsp.query_end)
        self.assertEqual(1319997, hsp.hit_end)
        self.assertEqual("  M 26 M 3 M 500", hsp.cigar_comp)
        # first hit, second hsp
        hsp = qresult[0].hsps[1]
        self.assertEqual(2641, hsp.score)
        self.assertEqual(1, hsp[0].query_strand)
        self.assertEqual(1, hsp[0].hit_strand)
        self.assertEqual(0, hsp.query_start)
        self.assertEqual(1319468, hsp.hit_start)
        self.assertEqual(529, hsp.query_end)
        self.assertEqual(1319997, hsp.hit_end)
        self.assertEqual("  M 90 M 3 M 436", hsp.cigar_comp)
        # second hit
        hit = qresult[1]
        self.assertEqual("gi|330443489|ref|NC_001135.5|", hit.id)
        self.assertEqual("<unknown description>", hit.description)
        self.assertEqual(1, len(hit.hsps))
        # second hit, first hsp
        hsp = qresult[1].hsps[0]
        self.assertEqual(267, hsp.score)
        self.assertEqual(-1, hsp[0].query_strand)
        self.assertEqual(1, hsp[0].hit_strand)
        self.assertEqual(162, hsp.query_start)
        self.assertEqual(23668, hsp.hit_start)
        self.assertEqual(491, hsp.query_end)
        self.assertEqual(115569, hsp.hit_end)
        self.assertEqual(
            "  M 29 D 8983 M 32 D 2 M 2 D 1 M 15 D 9555 M 3 I 1 M 5 D 2 M 3 D 1 M 4 D "
            "1 M 18 M 1 D 55423 M 5 M 22 I 3 M 46 D 17598 M 14 D 1 M 9 I 1 M 15 D 3 M "
            "17 D 3 M 1 D 1 M 13 D 1 M 6 I 1 M 12 D 2 M 45 D 1 M 6",
            hsp.cigar_comp,
        )
        # third hit
        hit = qresult[2]
        self.assertEqual("gi|330443667|ref|NC_001143.9|", hit.id)
        self.assertEqual("<unknown description>", hit.description)
        self.assertEqual(1, len(hit.hsps))
        # third hit, first hsp
        hsp = qresult[2].hsps[0]
        self.assertEqual(267, hsp.score)
        self.assertEqual(-1, hsp[0].query_strand)
        self.assertEqual(-1, hsp[0].hit_strand)
        self.assertEqual(78, hsp.query_start)
        self.assertEqual(71883, hsp.hit_start)
        self.assertEqual(529, hsp.query_end)
        self.assertEqual(641760, hsp.hit_end)
        self.assertEqual(
            "  M 31 I 3 M 4 I 2 M 19 D 3 M 9 D 1 M 6 I 1 M 7 D 154244 I 57 D 47 M 27 I "
            "5 M 4 I 1 M 3 I 3 M 4 I 1 M 9 D 1 M 16 D 101116 I 31 M 25 D 1 M 15 I 1 M "
            "9 I 1 M 2 I 1 M 14 M 20 D 177446 M 13 M 2 D 1 M 24 D 136697 I 7 D 6 I 1 D "
            "1 I 1 D 1 I 1 D 1 I 1 D 1 I 2 D 1 I 1 D 1 I 1 D 1 I 3 D 1 I 2 D 1 I 1 D 1 "
            "I 1 D 1 I 2 D 2 I 2 D 2 I 17 M 14 I 2 M 22",
            hsp.cigar_comp,
        )


if __name__ == "__main__":
    runner = unittest.TextTestRunner(verbosity=2)
    unittest.main(testRunner=runner)
